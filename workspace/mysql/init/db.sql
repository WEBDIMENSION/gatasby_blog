-- MySQL dump 10.13  Distrib 5.5.32, for FreeBSD9.1 (amd64)
--
-- Host: mysql625.db.sakura.ne.jp    Database: webdimension_blog
-- ------------------------------------------------------
-- Server version	5.7.36-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `wp_actionscheduler_actions`
--

DROP TABLE IF EXISTS `wp_actionscheduler_actions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_actionscheduler_actions` (
  `action_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `hook` varchar(191) COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `scheduled_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `scheduled_date_local` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `args` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `schedule` longtext COLLATE utf8mb4_unicode_520_ci,
  `group_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `attempts` int(11) NOT NULL DEFAULT '0',
  `last_attempt_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `last_attempt_local` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `claim_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `extended_args` varchar(8000) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  PRIMARY KEY (`action_id`),
  KEY `hook` (`hook`),
  KEY `status` (`status`),
  KEY `scheduled_date_gmt` (`scheduled_date_gmt`),
  KEY `args` (`args`),
  KEY `group_id` (`group_id`),
  KEY `last_attempt_gmt` (`last_attempt_gmt`),
  KEY `claim_id` (`claim_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_actionscheduler_actions`
--

LOCK TABLES `wp_actionscheduler_actions` WRITE;
/*!40000 ALTER TABLE `wp_actionscheduler_actions` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_actionscheduler_actions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_actionscheduler_claims`
--

DROP TABLE IF EXISTS `wp_actionscheduler_claims`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_actionscheduler_claims` (
  `claim_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `date_created_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`claim_id`),
  KEY `date_created_gmt` (`date_created_gmt`)
) ENGINE=InnoDB AUTO_INCREMENT=7530 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_actionscheduler_claims`
--

LOCK TABLES `wp_actionscheduler_claims` WRITE;
/*!40000 ALTER TABLE `wp_actionscheduler_claims` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_actionscheduler_claims` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_actionscheduler_groups`
--

DROP TABLE IF EXISTS `wp_actionscheduler_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_actionscheduler_groups` (
  `group_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `slug` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL,
  PRIMARY KEY (`group_id`),
  KEY `slug` (`slug`(191))
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_actionscheduler_groups`
--

LOCK TABLES `wp_actionscheduler_groups` WRITE;
/*!40000 ALTER TABLE `wp_actionscheduler_groups` DISABLE KEYS */;
INSERT INTO `wp_actionscheduler_groups` VALUES (1,'action-scheduler-migration'),(2,'wp_mail_smtp');
/*!40000 ALTER TABLE `wp_actionscheduler_groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_actionscheduler_logs`
--

DROP TABLE IF EXISTS `wp_actionscheduler_logs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_actionscheduler_logs` (
  `log_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `action_id` bigint(20) unsigned NOT NULL,
  `message` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `log_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `log_date_local` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`log_id`),
  KEY `action_id` (`action_id`),
  KEY `log_date_gmt` (`log_date_gmt`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_actionscheduler_logs`
--

LOCK TABLES `wp_actionscheduler_logs` WRITE;
/*!40000 ALTER TABLE `wp_actionscheduler_logs` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_actionscheduler_logs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_commentmeta`
--

DROP TABLE IF EXISTS `wp_commentmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_commentmeta`
--

LOCK TABLES `wp_commentmeta` WRITE;
/*!40000 ALTER TABLE `wp_commentmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_commentmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_comments`
--

DROP TABLE IF EXISTS `wp_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `comment_author_email` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_type` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'comment',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_comments`
--

LOCK TABLES `wp_comments` WRITE;
/*!40000 ALTER TABLE `wp_comments` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_links`
--

DROP TABLE IF EXISTS `wp_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_name` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_image` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_target` varchar(25) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_description` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_visible` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_notes` mediumtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `link_rss` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_links`
--

LOCK TABLES `wp_links` WRITE;
/*!40000 ALTER TABLE `wp_links` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_options`
--

DROP TABLE IF EXISTS `wp_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(191) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `option_value` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `autoload` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`),
  KEY `autoload` (`autoload`)
) ENGINE=InnoDB AUTO_INCREMENT=162888 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_options`
--

LOCK TABLES `wp_options` WRITE;
/*!40000 ALTER TABLE `wp_options` DISABLE KEYS */;
INSERT INTO `wp_options` VALUES (1,'siteurl','https://blog.webdimension.jp','yes'),(2,'home','https://blog.webdimension.jp','yes'),(3,'blogname','おっさんWEBエンジニアのブログ','yes'),(4,'blogdescription','めんどくさがり屋','yes'),(5,'users_can_register','0','yes'),(6,'admin_email','blog@webdimension.jp','yes'),(7,'start_of_week','1','yes'),(8,'use_balanceTags','0','yes'),(9,'use_smilies','1','yes'),(10,'require_name_email','1','yes'),(11,'comments_notify','1','yes'),(12,'posts_per_rss','12','yes'),(13,'rss_use_excerpt','0','yes'),(14,'mailserver_url','mail.example.com','yes'),(15,'mailserver_login','login@example.com','yes'),(16,'mailserver_pass','password','yes'),(17,'mailserver_port','110','yes'),(18,'default_category','1','yes'),(19,'default_comment_status','closed','yes'),(20,'default_ping_status','open','yes'),(21,'default_pingback_flag','1','yes'),(22,'posts_per_page','12','yes'),(23,'date_format','Y年n月j日','yes'),(24,'time_format','g:i A','yes'),(25,'links_updated_date_format','Y年n月j日 g:i A','yes'),(26,'comment_moderation','','yes'),(27,'moderation_notify','1','yes'),(28,'permalink_structure','/%category%/%postname%/','yes'),(29,'rewrite_rules','a:176:{s:34:\"sitemap(-+([a-zA-Z0-9_-]+))?\\.xml$\";s:40:\"index.php?xml_sitemap=params=$matches[2]\";s:38:\"sitemap(-+([a-zA-Z0-9_-]+))?\\.xml\\.gz$\";s:49:\"index.php?xml_sitemap=params=$matches[2];zip=true\";s:35:\"sitemap(-+([a-zA-Z0-9_-]+))?\\.html$\";s:50:\"index.php?xml_sitemap=params=$matches[2];html=true\";s:38:\"sitemap(-+([a-zA-Z0-9_-]+))?\\.html.gz$\";s:59:\"index.php?xml_sitemap=params=$matches[2];html=true;zip=true\";s:16:\"(.+)/page/(.+)/?\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:11:\"^wp-json/?$\";s:22:\"index.php?rest_route=/\";s:14:\"^wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:21:\"^index.php/wp-json/?$\";s:22:\"index.php?rest_route=/\";s:24:\"^index.php/wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:17:\"^wp-sitemap\\.xml$\";s:23:\"index.php?sitemap=index\";s:17:\"^wp-sitemap\\.xsl$\";s:36:\"index.php?sitemap-stylesheet=sitemap\";s:23:\"^wp-sitemap-index\\.xsl$\";s:34:\"index.php?sitemap-stylesheet=index\";s:48:\"^wp-sitemap-([a-z]+?)-([a-z\\d_-]+?)-(\\d+?)\\.xml$\";s:75:\"index.php?sitemap=$matches[1]&sitemap-subtype=$matches[2]&paged=$matches[3]\";s:34:\"^wp-sitemap-([a-z]+?)-(\\d+?)\\.xml$\";s:47:\"index.php?sitemap=$matches[1]&paged=$matches[2]\";s:14:\"environment/?$\";s:31:\"index.php?post_type=environment\";s:44:\"environment/feed/(feed|rdf|rss|rss2|atom)/?$\";s:48:\"index.php?post_type=environment&feed=$matches[1]\";s:39:\"environment/(feed|rdf|rss|rss2|atom)/?$\";s:48:\"index.php?post_type=environment&feed=$matches[1]\";s:31:\"environment/page/([0-9]{1,})/?$\";s:49:\"index.php?post_type=environment&paged=$matches[1]\";s:81:\"environment/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:102:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]&post_type=environment\";s:76:\"environment/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:102:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]&post_type=environment\";s:69:\"environment/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:103:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]&post_type=environment\";s:51:\"environment/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:85:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&post_type=environment\";s:68:\"environment/([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:86:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]&post_type=environment\";s:63:\"environment/([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:86:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]&post_type=environment\";s:56:\"environment/([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:87:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]&post_type=environment\";s:38:\"environment/([0-9]{4})/([0-9]{1,2})/?$\";s:69:\"index.php?year=$matches[1]&monthnum=$matches[2]&post_type=environment\";s:55:\"environment/([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:65:\"index.php?year=$matches[1]&feed=$matches[2]&post_type=environment\";s:50:\"environment/([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:65:\"index.php?year=$matches[1]&feed=$matches[2]&post_type=environment\";s:43:\"environment/([0-9]{4})/page/?([0-9]{1,})/?$\";s:66:\"index.php?year=$matches[1]&paged=$matches[2]&post_type=environment\";s:25:\"environment/([0-9]{4})/?$\";s:48:\"index.php?year=$matches[1]&post_type=environment\";s:47:\"environment/author/([^/]+)/page/?([0-9]{1,})/?$\";s:73:\"index.php?author_name=$matches[1]&paged=$matches[2]&post_type=environment\";s:29:\"environment/author/([^/]+)/?$\";s:55:\"index.php?author_name=$matches[1]&post_type=environment\";s:41:\"environment//([^/]+)/page/?([0-9]{1,})/?$\";s:75:\"index.php?category_name=$matches[1]&paged=$matches[2]&post_type=environment\";s:23:\"environment//([^/]+)/?$\";s:57:\"index.php?category_name=$matches[1]&post_type=environment\";s:47:\"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:42:\"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:23:\"category/(.+?)/embed/?$\";s:46:\"index.php?category_name=$matches[1]&embed=true\";s:35:\"category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:17:\"category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:44:\"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:39:\"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:20:\"tag/([^/]+)/embed/?$\";s:36:\"index.php?tag=$matches[1]&embed=true\";s:32:\"tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:14:\"tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:45:\"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:40:\"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:21:\"type/([^/]+)/embed/?$\";s:44:\"index.php?post_format=$matches[1]&embed=true\";s:33:\"type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:15:\"type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:41:\"feedzy-import/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:51:\"feedzy-import/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:71:\"feedzy-import/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:66:\"feedzy-import/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:66:\"feedzy-import/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:47:\"feedzy-import/[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:32:\"(feedzy-import)/([^/]+)/embed/?$\";s:89:\"index.php?post_type=feedzy_imports&slug=$matches[1]&feedzy_imports=$matches[2]&embed=true\";s:36:\"(feedzy-import)/([^/]+)/trackback/?$\";s:83:\"index.php?post_type=feedzy_imports&slug=$matches[1]&feedzy_imports=$matches[2]&tb=1\";s:56:\"(feedzy-import)/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:95:\"index.php?post_type=feedzy_imports&slug=$matches[1]&feedzy_imports=$matches[2]&feed=$matches[3]\";s:51:\"(feedzy-import)/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:95:\"index.php?post_type=feedzy_imports&slug=$matches[1]&feedzy_imports=$matches[2]&feed=$matches[3]\";s:44:\"(feedzy-import)/([^/]+)/page/?([0-9]{1,})/?$\";s:96:\"index.php?post_type=feedzy_imports&slug=$matches[1]&feedzy_imports=$matches[2]&paged=$matches[3]\";s:51:\"(feedzy-import)/([^/]+)/comment-page-([0-9]{1,})/?$\";s:96:\"index.php?post_type=feedzy_imports&slug=$matches[1]&feedzy_imports=$matches[2]&cpage=$matches[3]\";s:40:\"(feedzy-import)/([^/]+)(?:/([0-9]+))?/?$\";s:95:\"index.php?post_type=feedzy_imports&slug=$matches[1]&feedzy_imports=$matches[2]&page=$matches[3]\";s:30:\"feedzy-import/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:40:\"feedzy-import/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:60:\"feedzy-import/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:55:\"feedzy-import/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:55:\"feedzy-import/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:36:\"feedzy-import/[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:37:\"environment/.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:47:\"environment/.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:67:\"environment/.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:62:\"environment/.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:62:\"environment/.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:43:\"environment/.+?/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:28:\"(environment)/(.+?)/embed/?$\";s:83:\"index.php?post_type=environment&slug=$matches[1]&environment=$matches[2]&embed=true\";s:32:\"(environment)/(.+?)/trackback/?$\";s:77:\"index.php?post_type=environment&slug=$matches[1]&environment=$matches[2]&tb=1\";s:52:\"(environment)/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:89:\"index.php?post_type=environment&slug=$matches[1]&environment=$matches[2]&feed=$matches[3]\";s:47:\"(environment)/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:89:\"index.php?post_type=environment&slug=$matches[1]&environment=$matches[2]&feed=$matches[3]\";s:40:\"(environment)/(.+?)/page/?([0-9]{1,})/?$\";s:90:\"index.php?post_type=environment&slug=$matches[1]&environment=$matches[2]&paged=$matches[3]\";s:47:\"(environment)/(.+?)/comment-page-([0-9]{1,})/?$\";s:90:\"index.php?post_type=environment&slug=$matches[1]&environment=$matches[2]&cpage=$matches[3]\";s:36:\"(environment)/(.+?)(?:/([0-9]+))?/?$\";s:89:\"index.php?post_type=environment&slug=$matches[1]&environment=$matches[2]&page=$matches[3]\";s:43:\"feedzy-category/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:53:\"feedzy-category/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:73:\"feedzy-category/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:68:\"feedzy-category/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:68:\"feedzy-category/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:49:\"feedzy-category/[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:34:\"(feedzy-category)/([^/]+)/embed/?$\";s:95:\"index.php?post_type=feedzy_categories&slug=$matches[1]&feedzy_categories=$matches[2]&embed=true\";s:38:\"(feedzy-category)/([^/]+)/trackback/?$\";s:89:\"index.php?post_type=feedzy_categories&slug=$matches[1]&feedzy_categories=$matches[2]&tb=1\";s:58:\"(feedzy-category)/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:101:\"index.php?post_type=feedzy_categories&slug=$matches[1]&feedzy_categories=$matches[2]&feed=$matches[3]\";s:53:\"(feedzy-category)/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:101:\"index.php?post_type=feedzy_categories&slug=$matches[1]&feedzy_categories=$matches[2]&feed=$matches[3]\";s:46:\"(feedzy-category)/([^/]+)/page/?([0-9]{1,})/?$\";s:102:\"index.php?post_type=feedzy_categories&slug=$matches[1]&feedzy_categories=$matches[2]&paged=$matches[3]\";s:53:\"(feedzy-category)/([^/]+)/comment-page-([0-9]{1,})/?$\";s:102:\"index.php?post_type=feedzy_categories&slug=$matches[1]&feedzy_categories=$matches[2]&cpage=$matches[3]\";s:42:\"(feedzy-category)/([^/]+)(?:/([0-9]+))?/?$\";s:101:\"index.php?post_type=feedzy_categories&slug=$matches[1]&feedzy_categories=$matches[2]&page=$matches[3]\";s:32:\"feedzy-category/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:42:\"feedzy-category/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:62:\"feedzy-category/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:57:\"feedzy-category/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:57:\"feedzy-category/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:38:\"feedzy-category/[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:12:\"robots\\.txt$\";s:18:\"index.php?robots=1\";s:13:\"favicon\\.ico$\";s:19:\"index.php?favicon=1\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:32:\"feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:27:\"(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:8:\"embed/?$\";s:21:\"index.php?&embed=true\";s:20:\"page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:27:\"comment-page-([0-9]{1,})/?$\";s:39:\"index.php?&page_id=35&cpage=$matches[1]\";s:41:\"comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:36:\"comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:17:\"comments/embed/?$\";s:21:\"index.php?&embed=true\";s:44:\"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:39:\"search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:20:\"search/(.+)/embed/?$\";s:34:\"index.php?s=$matches[1]&embed=true\";s:32:\"search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:14:\"search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:47:\"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:42:\"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:23:\"author/([^/]+)/embed/?$\";s:44:\"index.php?author_name=$matches[1]&embed=true\";s:35:\"author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:17:\"author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:69:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:64:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:45:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/embed/?$\";s:74:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&embed=true\";s:57:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:39:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:56:\"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:51:\"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:32:\"([0-9]{4})/([0-9]{1,2})/embed/?$\";s:58:\"index.php?year=$matches[1]&monthnum=$matches[2]&embed=true\";s:44:\"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:26:\"([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:43:\"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:38:\"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:19:\"([0-9]{4})/embed/?$\";s:37:\"index.php?year=$matches[1]&embed=true\";s:31:\"([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:13:\"([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:27:\".?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\".?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:33:\".?.+?/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:16:\"(.?.+?)/embed/?$\";s:41:\"index.php?pagename=$matches[1]&embed=true\";s:20:\"(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:40:\"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:35:\"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:28:\"(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:35:\"(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:24:\"(.?.+?)(?:/([0-9]+))?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";s:31:\".+?/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:41:\".+?/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:61:\".+?/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:56:\".+?/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:56:\".+?/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:37:\".+?/[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:22:\"(.+?)/([^/]+)/embed/?$\";s:63:\"index.php?category_name=$matches[1]&name=$matches[2]&embed=true\";s:26:\"(.+?)/([^/]+)/trackback/?$\";s:57:\"index.php?category_name=$matches[1]&name=$matches[2]&tb=1\";s:46:\"(.+?)/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:69:\"index.php?category_name=$matches[1]&name=$matches[2]&feed=$matches[3]\";s:41:\"(.+?)/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:69:\"index.php?category_name=$matches[1]&name=$matches[2]&feed=$matches[3]\";s:34:\"(.+?)/([^/]+)/page/?([0-9]{1,})/?$\";s:70:\"index.php?category_name=$matches[1]&name=$matches[2]&paged=$matches[3]\";s:41:\"(.+?)/([^/]+)/comment-page-([0-9]{1,})/?$\";s:70:\"index.php?category_name=$matches[1]&name=$matches[2]&cpage=$matches[3]\";s:30:\"(.+?)/([^/]+)(?:/([0-9]+))?/?$\";s:69:\"index.php?category_name=$matches[1]&name=$matches[2]&page=$matches[3]\";s:20:\".+?/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:30:\".+?/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:50:\".+?/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:45:\".+?/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:45:\".+?/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:26:\".+?/[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:38:\"(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:33:\"(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:14:\"(.+?)/embed/?$\";s:46:\"index.php?category_name=$matches[1]&embed=true\";s:26:\"(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:33:\"(.+?)/comment-page-([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&cpage=$matches[2]\";s:8:\"(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";}','yes'),(30,'hack_file','0','yes'),(31,'blog_charset','UTF-8','yes'),(32,'moderation_keys','','no'),(33,'active_plugins','a:16:{i:0;s:21:\"backwpup/backwpup.php\";i:1;s:37:\"breadcrumb-navxt/breadcrumb-navxt.php\";i:2;s:60:\"category-specific-rss-feed-menu/category-specific-rss-wp.php\";i:3;s:33:\"classic-editor/classic-editor.php\";i:4;s:36:\"contact-form-7/wp-contact-form-7.php\";i:5;s:59:\"custom-post-type-permalinks/custom-post-type-permalinks.php\";i:6;s:43:\"custom-post-type-ui/custom-post-type-ui.php\";i:7;s:53:\"custom-post-type-widgets/custom-post-type-widgets.php\";i:8;s:36:\"feedzy-rss-feeds/feedzy-rss-feed.php\";i:9;s:36:\"google-sitemap-generator/sitemap.php\";i:10;s:59:\"intuitive-custom-post-order/intuitive-custom-post-order.php\";i:11;s:33:\"search-exclude/search-exclude.php\";i:12;s:45:\"taxonomy-terms-order/taxonomy-terms-order.php\";i:13;s:25:\"widget-shortcode/init.php\";i:14;s:30:\"wp-githuber-md/githuber-md.php\";i:15;s:29:\"wp-mail-smtp/wp_mail_smtp.php\";}','yes'),(34,'category_base','','yes'),(35,'ping_sites','http://rpc.pingomatic.com/','yes'),(36,'comment_max_links','2','yes'),(37,'gmt_offset','','yes'),(38,'default_email_category','1','yes'),(39,'recently_edited','','no'),(40,'template','understrap-master','yes'),(41,'stylesheet','understrap-child-master','yes'),(44,'comment_registration','1','yes'),(45,'html_type','text/html','yes'),(46,'use_trackback','0','yes'),(47,'default_role','subscriber','yes'),(48,'db_version','49752','yes'),(49,'uploads_use_yearmonth_folders','1','yes'),(50,'upload_path','','yes'),(51,'blog_public','1','yes'),(52,'default_link_category','2','yes'),(53,'show_on_front','page','yes'),(54,'tag_base','','yes'),(55,'show_avatars','1','yes'),(56,'avatar_rating','G','yes'),(57,'upload_url_path','','yes'),(58,'thumbnail_size_w','150','yes'),(59,'thumbnail_size_h','150','yes'),(60,'thumbnail_crop','1','yes'),(61,'medium_size_w','300','yes'),(62,'medium_size_h','300','yes'),(63,'avatar_default','mystery','yes'),(64,'large_size_w','1024','yes'),(65,'large_size_h','1024','yes'),(66,'image_default_link_type','none','yes'),(67,'image_default_size','','yes'),(68,'image_default_align','','yes'),(69,'close_comments_for_old_posts','1','yes'),(70,'close_comments_days_old','14','yes'),(71,'thread_comments','1','yes'),(72,'thread_comments_depth','5','yes'),(73,'page_comments','','yes'),(74,'comments_per_page','50','yes'),(75,'default_comments_page','newest','yes'),(76,'comment_order','asc','yes'),(77,'sticky_posts','a:0:{}','yes'),(78,'widget_categories','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(79,'widget_text','a:4:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:4:\"text\";s:48:\"[contact-form-7 id=\"105\" title=\"Contact form 1\"]\";s:6:\"filter\";b:1;s:6:\"visual\";b:1;}i:3;a:4:{s:5:\"title\";s:7:\"Contact\";s:4:\"text\";s:417:\"[contact-form-7 id=\"105\" title=\"Contact form 1\"]\r\n<div class=\"brounded bg-bg2 p-2 border shadow\">\r\n\r\nこのサイトはreCAPTCHAとGoogleによって保護されています\r\n\r\n<a href=\"https://policies.google.com/privacy\" target=\"_blank\" rel=\"noopener\">プライバシーポリシー</a>と <a href=\"https://policies.google.com/terms\" target=\"_blank\" rel=\"noopener\">利用規約</a>が適用されます。\r\n\r\n</div>\";s:6:\"filter\";b:1;s:6:\"visual\";b:1;}i:4;a:4:{s:5:\"title\";s:0:\"\";s:4:\"text\";s:104:\"<a href=\"/environment/environment-contents/\">\r\n<img src=\"/wp-content/uploads/2019/09/dev-env.png\">\r\n</a>\";s:6:\"filter\";b:1;s:6:\"visual\";b:1;}s:12:\"_multiwidget\";i:1;}','yes'),(80,'widget_rss','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(81,'uninstall_plugins','a:5:{s:59:\"custom-post-type-permalinks/custom-post-type-permalinks.php\";a:2:{i:0;s:4:\"CPTP\";i:1;s:9:\"uninstall\";}s:53:\"custom-post-type-widgets/custom-post-type-widgets.php\";a:2:{i:0;s:24:\"Custom_Post_Type_Widgets\";i:1;s:9:\"uninstall\";}s:33:\"classic-editor/classic-editor.php\";a:2:{i:0;s:14:\"Classic_Editor\";i:1;s:9:\"uninstall\";}s:59:\"intuitive-custom-post-order/intuitive-custom-post-order.php\";s:15:\"hicpo_uninstall\";s:51:\"wp-recaptcha-integration/inc/class-wp_recaptcha.php\";a:2:{i:0;s:12:\"WP_reCaptcha\";i:1;s:9:\"uninstall\";}}','no'),(82,'timezone_string','Asia/Tokyo','yes'),(83,'page_for_posts','0','yes'),(84,'page_on_front','35','yes'),(85,'default_post_format','0','yes'),(86,'link_manager_enabled','0','yes'),(87,'finished_splitting_shared_terms','1','yes'),(88,'site_icon','0','yes'),(89,'medium_large_size_w','768','yes'),(90,'medium_large_size_h','0','yes'),(91,'wp_page_for_privacy_policy','3','yes'),(92,'show_comments_cookies_opt_in','1','yes'),(93,'initial_db_version','44719','yes'),(94,'wp_user_roles','a:8:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:73:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;s:8:\"backwpup\";b:1;s:13:\"backwpup_jobs\";b:1;s:18:\"backwpup_jobs_edit\";b:1;s:19:\"backwpup_jobs_start\";b:1;s:16:\"backwpup_backups\";b:1;s:25:\"backwpup_backups_download\";b:1;s:23:\"backwpup_backups_delete\";b:1;s:13:\"backwpup_logs\";b:1;s:20:\"backwpup_logs_delete\";b:1;s:17:\"backwpup_settings\";b:1;s:16:\"backwpup_restore\";b:1;s:18:\"bcn_manage_options\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}s:14:\"backwpup_admin\";a:2:{s:4:\"name\";s:14:\"BackWPup Admin\";s:12:\"capabilities\";a:12:{s:4:\"read\";b:1;s:8:\"backwpup\";b:1;s:13:\"backwpup_jobs\";b:1;s:18:\"backwpup_jobs_edit\";b:1;s:19:\"backwpup_jobs_start\";b:1;s:16:\"backwpup_backups\";b:1;s:25:\"backwpup_backups_download\";b:1;s:23:\"backwpup_backups_delete\";b:1;s:13:\"backwpup_logs\";b:1;s:20:\"backwpup_logs_delete\";b:1;s:17:\"backwpup_settings\";b:1;s:16:\"backwpup_restore\";b:1;}}s:14:\"backwpup_check\";a:2:{s:4:\"name\";s:21:\"BackWPup jobs checker\";s:12:\"capabilities\";a:12:{s:4:\"read\";b:1;s:8:\"backwpup\";b:1;s:13:\"backwpup_jobs\";b:1;s:18:\"backwpup_jobs_edit\";b:0;s:19:\"backwpup_jobs_start\";b:0;s:16:\"backwpup_backups\";b:1;s:25:\"backwpup_backups_download\";b:0;s:23:\"backwpup_backups_delete\";b:0;s:13:\"backwpup_logs\";b:1;s:20:\"backwpup_logs_delete\";b:0;s:17:\"backwpup_settings\";b:0;s:16:\"backwpup_restore\";b:0;}}s:15:\"backwpup_helper\";a:2:{s:4:\"name\";s:23:\"BackWPup jobs functions\";s:12:\"capabilities\";a:12:{s:4:\"read\";b:1;s:8:\"backwpup\";b:1;s:13:\"backwpup_jobs\";b:1;s:18:\"backwpup_jobs_edit\";b:0;s:19:\"backwpup_jobs_start\";b:1;s:16:\"backwpup_backups\";b:1;s:25:\"backwpup_backups_download\";b:1;s:23:\"backwpup_backups_delete\";b:1;s:13:\"backwpup_logs\";b:1;s:20:\"backwpup_logs_delete\";b:1;s:17:\"backwpup_settings\";b:0;s:16:\"backwpup_restore\";b:0;}}}','yes'),(95,'fresh_site','0','yes'),(96,'WPLANG','ja','yes'),(97,'widget_search','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(98,'widget_recent-posts','a:2:{i:3;a:3:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;s:9:\"show_date\";b:0;}s:12:\"_multiwidget\";i:1;}','yes'),(99,'widget_recent-comments','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(100,'widget_archives','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(101,'widget_meta','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(102,'sidebars_widgets','a:13:{s:10:\"tag-blocks\";a:1:{i:0;s:11:\"tag_cloud-5\";}s:19:\"wp_inactive_widgets\";a:4:{i:0;s:11:\"tag_cloud-4\";i:1;s:11:\"tag_cloud-2\";i:2;s:6:\"text-2\";i:3;s:20:\"category_rss_widgets\";}s:13:\"right-sidebar\";a:1:{i:0;s:10:\"nav_menu-2\";}s:16:\"environment-menu\";a:1:{i:0;s:10:\"nav_menu-3\";}s:11:\"recent-post\";a:1:{i:0;s:14:\"recent-posts-3\";}s:12:\"banner-block\";a:1:{i:0;s:6:\"text-4\";}s:13:\"profile-block\";a:0:{}s:10:\"link-block\";a:0:{}s:9:\"qiita-rss\";a:1:{i:0;s:18:\"feedzy_wp_widget-2\";}s:13:\"contact-block\";a:1:{i:0;s:6:\"text-3\";}s:10:\"tags-block\";a:1:{i:0;s:11:\"tag_cloud-6\";}s:9:\"arbitrary\";a:1:{i:0;s:10:\"nav_menu-4\";}s:13:\"array_version\";i:3;}','yes'),(103,'cron','a:12:{i:1641964459;a:1:{s:26:\"action_scheduler_run_queue\";a:1:{s:32:\"0d04ed39571b55704c122d726248bbac\";a:3:{s:8:\"schedule\";s:12:\"every_minute\";s:4:\"args\";a:1:{i:0;s:7:\"WP Cron\";}s:8:\"interval\";i:60;}}}i:1641964658;a:1:{s:11:\"feedzy_cron\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"hourly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:3600;}}}i:1641965958;a:1:{s:34:\"wp_privacy_delete_old_export_files\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"hourly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:3600;}}}i:1641976757;a:1:{s:32:\"recovery_mode_clean_expired_keys\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1641976758;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1641976773;a:2:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}s:25:\"delete_expired_transients\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1641976774;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1641983309;a:1:{s:13:\"sm_ping_daily\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1641984239;a:1:{s:26:\"pum_daily_scheduled_events\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1642004699;a:1:{s:22:\"backwpup_check_cleanup\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1642072595;a:1:{s:30:\"wp_site_health_scheduled_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"weekly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:604800;}}}s:7:\"version\";i:2;}','yes'),(104,'widget_pages','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(105,'widget_calendar','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(106,'widget_media_audio','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(107,'widget_media_image','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(108,'widget_media_gallery','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(109,'widget_media_video','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(110,'nonce_key','#36&]=_vy#hv%x1[%GyTNvZkt]6@3i{gq/uy>U<L4+0tOo75]A9kP{xRY(&s}]Wn','no'),(111,'nonce_salt','3`U|KV?si^n[d/R=e~o;8}5F8RB#4?7aD9oNrq|ePd![2M,CcC+6]7M.C1uks oq','no'),(112,'widget_tag_cloud','a:5:{i:2;a:3:{s:5:\"title\";s:4:\"Tags\";s:5:\"count\";i:0;s:8:\"taxonomy\";s:8:\"post_tag\";}i:4;a:3:{s:5:\"title\";s:4:\"Tags\";s:5:\"count\";i:0;s:8:\"taxonomy\";s:8:\"post_tag\";}i:5;a:3:{s:5:\"title\";s:4:\"Tags\";s:5:\"count\";i:0;s:8:\"taxonomy\";s:8:\"post_tag\";}i:6;a:3:{s:5:\"title\";s:4:\"Tags\";s:5:\"count\";i:1;s:8:\"taxonomy\";s:8:\"post_tag\";}s:12:\"_multiwidget\";i:1;}','yes'),(113,'widget_nav_menu','a:4:{i:2;a:2:{s:5:\"title\";s:15:\"カテゴリー\";s:8:\"nav_menu\";i:9;}i:3;a:2:{s:5:\"title\";s:42:\"ゆるスタック開発環境メニュー\";s:8:\"nav_menu\";i:10;}i:4;a:1:{s:8:\"nav_menu\";i:11;}s:12:\"_multiwidget\";i:1;}','yes'),(114,'widget_custom_html','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(116,'recovery_keys','a:0:{}','yes'),(118,'theme_mods_twentynineteen','a:2:{s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1559896848;s:4:\"data\";a:2:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}}}}','yes'),(127,'auth_key','Zp`203gKCLG&.9VR[0#Rcd=%Q~x*mP+`gU6*MNs~!t%ck92uH=rV9C@(%u*MN-,{','no'),(128,'auth_salt','1:LKA_:o.S_NR4oR5B2Ez@IHX27]h9wUwy#M^A]^Fa.}aw=# *?d%}jurnN}^m&1','no'),(129,'logged_in_key','s3WKS.>=yFWV=)UPqD|t $p*Z8}[`.T>L.hX)cZuc{(U)p=cuDV4X-*[goN6JKU=','no'),(130,'logged_in_salt','&9:qIVgHW/-zcF+>YmE|`eJU!2~(1thCEDev~NwozY-sHu0B@s5oen)|6W.XuF$@','no'),(149,'current_theme','UnderStrap Child','yes'),(150,'theme_mods_understrap-child-master','a:6:{i:0;b:0;s:28:\"understrap_posts_index_style\";s:7:\"default\";s:27:\"understrap_sidebar_position\";s:5:\"right\";s:25:\"understrap_container_type\";s:9:\"container\";s:18:\"nav_menu_locations\";a:1:{s:7:\"primary\";i:9;}s:18:\"custom_css_post_id\";i:-1;}','yes'),(151,'theme_switched','','yes'),(155,'recently_activated','a:0:{}','yes'),(156,'widget_bcn_widget','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(157,'rss_category_1_name','All Topics','yes'),(158,'rss_category_1_link','https://blog.webdimension.jp/?feed=rss2','yes'),(159,'rss_widget_title_name','Category Specific RSS','yes'),(160,'cat_rss_all_cat','1','yes'),(161,'cat_rss_all_aut','0','yes'),(162,'cat_rss_show_post_count','1','yes'),(163,'cat_rss_show_image_on_left','1','yes'),(164,'cat_rss_custom','0','yes'),(165,'cptp_version','3.4.3','yes'),(166,'queue_flush_rules','0','yes'),(167,'no_taxonomy_structure','','yes'),(168,'add_post_type_for_tax','1','yes'),(171,'cptui_new_install','false','yes'),(172,'widget_custom-post-type-archives','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(173,'widget_custom-post-type-categories','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(174,'widget_custom-post-type-calendar','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(175,'widget_custom-post-type-tag-cloud','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(176,'feedwordpress_cat_id','2','yes'),(177,'feedwordpress_version','2017.1020','yes'),(178,'feedwordpress_secret_key','0b5ede','yes'),(179,'feedwordpress_diagnostics_log','a:1:{s:8:\"schedule\";a:2:{s:4:\"freq\";i:86400;s:4:\"last\";i:1559897105;}}','yes'),(180,'widget_links','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(181,'githuber_markdown','a:15:{s:30:\"enable_markdown_for_post_types\";a:3:{s:4:\"post\";s:4:\"post\";s:4:\"page\";s:4:\"page\";s:11:\"environment\";s:11:\"environment\";}s:27:\"enable_markdown_for_comment\";s:0:\"\";s:16:\"disable_revision\";s:2:\"no\";s:16:\"disable_autosave\";s:2:\"no\";s:18:\"editor_spell_check\";s:2:\"no\";s:23:\"editor_spell_check_lang\";s:5:\"en_US\";s:24:\"editor_match_highlighter\";s:2:\"no\";s:16:\"html_to_markdown\";s:3:\"yes\";s:24:\"markdown_editor_switcher\";s:3:\"yes\";s:19:\"editor_live_preview\";s:3:\"yes\";s:21:\"editor_sync_scrolling\";s:3:\"yes\";s:18:\"editor_html_decode\";s:3:\"yes\";s:18:\"editor_line_number\";s:3:\"yes\";s:20:\"editor_toolbar_theme\";s:4:\"dark\";s:19:\"editor_editor_theme\";s:4:\"idea\";}','yes'),(182,'githuber_modules','a:23:{s:13:\"support_prism\";s:3:\"yes\";s:11:\"prism_theme\";s:4:\"dark\";s:17:\"prism_line_number\";s:2:\"no\";s:9:\"prism_src\";s:7:\"default\";s:17:\"support_clipboard\";s:2:\"no\";s:13:\"clipboard_src\";s:7:\"default\";s:19:\"support_image_paste\";s:2:\"no\";s:15:\"image_paste_src\";s:7:\"default\";s:15:\"imgur_client_id\";s:0:\"\";s:28:\"is_image_paste_media_library\";s:3:\"yes\";s:11:\"support_toc\";s:2:\"no\";s:13:\"is_toc_widget\";s:3:\"yes\";s:19:\"display_toc_in_post\";s:3:\"yes\";s:14:\"post_toc_float\";s:7:\"default\";s:15:\"post_toc_border\";s:3:\"yes\";s:13:\"support_katex\";s:2:\"no\";s:9:\"katex_src\";s:7:\"default\";s:15:\"support_mermaid\";s:2:\"no\";s:11:\"mermaid_src\";s:7:\"default\";s:17:\"support_flowchart\";s:2:\"no\";s:13:\"flowchart_src\";s:7:\"default\";s:24:\"support_sequence_diagram\";s:2:\"no\";s:20:\"sequence_diagram_src\";s:7:\"default\";}','yes'),(183,'githuber_extensions','a:4:{s:21:\"support_mardown_extra\";s:3:\"yes\";s:17:\"support_task_list\";s:3:\"yes\";s:19:\"support_html_figure\";s:3:\"yes\";s:34:\"support_inline_code_keyboard_style\";s:2:\"no\";}','yes'),(184,'githuber_migration_v162','yes','yes'),(185,'githuber_preferences','','yes'),(186,'githuber_about','','yes'),(188,'feedzy-rss-feeds','a:2:{s:6:\"is_new\";s:3:\"yes\";s:10:\"db_version\";s:5:\"3.3.6\";}','yes'),(189,'widget_feedzy_wp_widget','a:2:{i:2;a:25:{s:5:\"title\";s:0:\"\";s:8:\"textarea\";s:0:\"\";s:5:\"feeds\";s:37:\"https://qiita.com/yurustack/feed.atom\";s:3:\"max\";s:2:\"10\";s:10:\"feed_title\";s:0:\"\";s:7:\"refresh\";s:7:\"1_hours\";s:4:\"sort\";s:9:\"date_desc\";s:11:\"error_empty\";s:0:\"\";s:6:\"target\";s:6:\"_blank\";s:6:\"follow\";s:0:\"\";s:4:\"meta\";s:2:\"no\";s:7:\"summary\";s:3:\"yes\";s:13:\"summarylength\";s:3:\"200\";s:14:\"keywords_title\";s:0:\"\";s:12:\"keywords_ban\";s:0:\"\";s:5:\"thumb\";s:2:\"no\";s:7:\"default\";s:32:\"/wp-content/uploads/qiitapng.png\";s:4:\"size\";s:0:\"\";s:4:\"http\";s:0:\"\";s:5:\"price\";s:0:\"\";s:12:\"referral_url\";s:0:\"\";s:7:\"columns\";s:0:\"\";s:7:\"mapping\";s:0:\"\";s:8:\"template\";s:0:\"\";s:11:\"titlelength\";s:3:\"100\";}s:12:\"_multiwidget\";i:1;}','yes'),(190,'feedzy_rss_feeds_install','1559898288','yes'),(195,'hicpo_ver','3.1.2','yes'),(197,'cptui_post_types','a:1:{s:11:\"environment\";a:29:{s:4:\"name\";s:11:\"environment\";s:5:\"label\";s:34:\"Vagrantで開発開発環境構築\";s:14:\"singular_label\";s:11:\"environment\";s:11:\"description\";s:0:\"\";s:6:\"public\";s:4:\"true\";s:18:\"publicly_queryable\";s:4:\"true\";s:7:\"show_ui\";s:4:\"true\";s:17:\"show_in_nav_menus\";s:4:\"true\";s:12:\"show_in_rest\";s:4:\"true\";s:9:\"rest_base\";s:0:\"\";s:21:\"rest_controller_class\";s:0:\"\";s:11:\"has_archive\";s:4:\"true\";s:18:\"has_archive_string\";s:0:\"\";s:19:\"exclude_from_search\";s:5:\"false\";s:15:\"capability_type\";s:4:\"post\";s:12:\"hierarchical\";s:4:\"true\";s:7:\"rewrite\";s:4:\"true\";s:12:\"rewrite_slug\";s:0:\"\";s:17:\"rewrite_withfront\";s:5:\"false\";s:9:\"query_var\";s:4:\"true\";s:14:\"query_var_slug\";s:0:\"\";s:13:\"menu_position\";s:0:\"\";s:12:\"show_in_menu\";s:4:\"true\";s:19:\"show_in_menu_string\";s:0:\"\";s:9:\"menu_icon\";s:0:\"\";s:8:\"supports\";a:4:{i:0;s:5:\"title\";i:1;s:6:\"editor\";i:2;s:9:\"thumbnail\";i:3;s:7:\"excerpt\";}s:10:\"taxonomies\";a:2:{i:0;s:8:\"category\";i:1;s:8:\"post_tag\";}s:6:\"labels\";a:24:{s:9:\"menu_name\";s:18:\"開発環境構築\";s:9:\"all_items\";s:6:\"一覧\";s:7:\"add_new\";s:12:\"新規追加\";s:12:\"add_new_item\";s:0:\"\";s:9:\"edit_item\";s:0:\"\";s:8:\"new_item\";s:0:\"\";s:9:\"view_item\";s:0:\"\";s:10:\"view_items\";s:0:\"\";s:12:\"search_items\";s:0:\"\";s:9:\"not_found\";s:0:\"\";s:18:\"not_found_in_trash\";s:0:\"\";s:17:\"parent_item_colon\";s:0:\"\";s:14:\"featured_image\";s:0:\"\";s:18:\"set_featured_image\";s:0:\"\";s:21:\"remove_featured_image\";s:0:\"\";s:18:\"use_featured_image\";s:0:\"\";s:8:\"archives\";s:0:\"\";s:16:\"insert_into_item\";s:0:\"\";s:21:\"uploaded_to_this_item\";s:0:\"\";s:17:\"filter_items_list\";s:0:\"\";s:21:\"items_list_navigation\";s:0:\"\";s:10:\"items_list\";s:0:\"\";s:10:\"attributes\";s:0:\"\";s:14:\"name_admin_bar\";s:0:\"\";}s:15:\"custom_supports\";s:0:\"\";}}','yes'),(207,'nav_menu_options','a:2:{i:0;b:0;s:8:\"auto_add\";a:0:{}}','yes'),(225,'environment_structure','/%postname%/','yes'),(226,'feedzy_categories_structure','/%postname%/','yes'),(227,'cptp_permalink_checked','3.3.1','yes'),(241,'bcn_version','6.3.0','no'),(242,'bcn_options_bk','a:64:{s:17:\"bmainsite_display\";b:1;s:18:\"Hmainsite_template\";s:287:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><span><i class=\"fa fa-home\"></i> HOME</span></span></a><meta property=\"position\" content=\"%position%\"></span>\";s:28:\"Hmainsite_template_no_anchor\";s:44:\"<span><i class=\"fa fa-home\"></i> HOME</span>\";s:13:\"bhome_display\";b:1;s:14:\"Hhome_template\";s:287:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><span><i class=\"fa fa-home\"></i> HOME</span></span></a><meta property=\"position\" content=\"%position%\"></span>\";s:24:\"Hhome_template_no_anchor\";s:44:\"<span><i class=\"fa fa-home\"></i> HOME</span>\";s:13:\"bblog_display\";b:1;s:10:\"hseparator\";s:58:\"&nbsp;&nbsp;<i class=\"fa fa-caret-right \"></i>&nbsp;&nbsp;\";s:12:\"blimit_title\";b:0;s:17:\"amax_title_length\";i:20;s:20:\"bcurrent_item_linked\";b:0;s:28:\"bpost_page_hierarchy_display\";b:1;s:33:\"bpost_page_hierarchy_parent_first\";b:1;s:25:\"Spost_page_hierarchy_type\";s:15:\"BCN_POST_PARENT\";s:19:\"Hpost_page_template\";s:280:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><i class=\"fa fa-folder\"></i> %htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:29:\"Hpost_page_template_no_anchor\";s:62:\"<span class=\"%type%\"><i class=\"fa fa-file\"></i> %title%</span>\";s:15:\"apost_page_root\";s:2:\"35\";s:15:\"Hpaged_template\";s:41:\"<span class=\"%type%\">Page %htitle%</span>\";s:14:\"bpaged_display\";b:0;s:19:\"Hpost_post_template\";s:280:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><i class=\"fa fa-folder\"></i> %htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:29:\"Hpost_post_template_no_anchor\";s:62:\"<span class=\"%type%\"><i class=\"fa fa-file\"></i> %title%</span>\";s:15:\"apost_post_root\";s:1:\"0\";s:28:\"bpost_post_hierarchy_display\";b:1;s:33:\"bpost_post_hierarchy_parent_first\";b:0;s:27:\"bpost_post_taxonomy_referer\";b:0;s:25:\"Spost_post_hierarchy_type\";s:8:\"category\";s:34:\"bpost_attachment_hierarchy_display\";b:0;s:39:\"bpost_attachment_hierarchy_parent_first\";b:0;s:31:\"Spost_attachment_hierarchy_type\";s:15:\"BCN_POST_PARENT\";s:21:\"apost_attachment_root\";i:0;s:25:\"Hpost_attachment_template\";s:280:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><i class=\"fa fa-folder\"></i> %htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:35:\"Hpost_attachment_template_no_anchor\";s:36:\"<span class=\"%type%\"> %title%</span>\";s:13:\"H404_template\";s:36:\"<span class=\"%type%\">%htitle%</span>\";s:10:\"S404_title\";s:3:\"404\";s:16:\"Hsearch_template\";s:319:\"<span property=\"itemListElement\" typeof=\"ListItem\"><span property=\"name\">Search results for &#039;<a property=\"item\" typeof=\"WebPage\" title=\"Go to the first page of search results for %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current>%htitle%</a>&#039;</span><meta property=\"position\" content=\"%position%\"></span>\";s:26:\"Hsearch_template_no_anchor\";s:67:\"<span class=\"%type%\">Search results for &#039;%htitle%&#039;</span>\";s:22:\"Htax_post_tag_template\";s:268:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to the %title% tag archives.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\">%htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:32:\"Htax_post_tag_template_no_anchor\";s:36:\"<span class=\"%type%\">%htitle%</span>\";s:25:\"Htax_post_format_template\";s:264:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to the %title% archives.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\">%htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:35:\"Htax_post_format_template_no_anchor\";s:36:\"<span class=\"%type%\">%htitle%</span>\";s:16:\"Hauthor_template\";s:258:\"<span property=\"itemListElement\" typeof=\"ListItem\"><span property=\"name\">Articles by: <a title=\"Go to the first page of posts by %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current>%htitle%</a></span><meta property=\"position\" content=\"%position%\"></span>\";s:26:\"Hauthor_template_no_anchor\";s:49:\"<span class=\"%type%\">Articles by: %htitle%</span>\";s:12:\"Sauthor_name\";s:12:\"display_name\";s:12:\"aauthor_root\";i:0;s:22:\"Htax_category_template\";s:302:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to the %title% category archives.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><i class=\"fa fa-folder\"></i> %htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:32:\"Htax_category_template_no_anchor\";s:65:\"<span class=\"%type%\"><i class=\"fa fa-folder\"></i> %htitle%</span>\";s:14:\"Hdate_template\";s:264:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to the %title% archives.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\">%htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:24:\"Hdate_template_no_anchor\";s:36:\"<span class=\"%type%\">%htitle%</span>\";s:34:\"bpost_environment_taxonomy_referer\";b:0;s:26:\"Hpost_environment_template\";s:280:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><i class=\"fa fa-folder\"></i> %htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:36:\"Hpost_environment_template_no_anchor\";s:62:\"<span class=\"%type%\"><i class=\"fa fa-file\"></i> %title%</span>\";s:22:\"apost_environment_root\";i:35;s:35:\"bpost_environment_hierarchy_display\";b:1;s:33:\"bpost_environment_archive_display\";b:1;s:32:\"Spost_environment_hierarchy_type\";s:10:\"BCN_PARENT\";s:40:\"bpost_environment_hierarchy_parent_first\";b:0;s:40:\"bpost_feedzy_categories_taxonomy_referer\";b:0;s:32:\"Hpost_feedzy_categories_template\";s:275:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><i class=\"fa fa-folder\">%htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:42:\"Hpost_feedzy_categories_template_no_anchor\";s:60:\"<span class=\"%type%\"><i class=\"fa fa-folder\">%htitle%</span>\";s:28:\"apost_feedzy_categories_root\";i:0;s:41:\"bpost_feedzy_categories_hierarchy_display\";b:0;s:39:\"bpost_feedzy_categories_archive_display\";b:1;s:38:\"Spost_feedzy_categories_hierarchy_type\";s:8:\"BCN_DATE\";s:46:\"bpost_feedzy_categories_hierarchy_parent_first\";b:0;}','yes'),(243,'bcn_options','a:64:{s:17:\"bmainsite_display\";b:1;s:18:\"Hmainsite_template\";s:287:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><span><i class=\"fa fa-home\"></i> HOME</span></span></a><meta property=\"position\" content=\"%position%\"></span>\";s:28:\"Hmainsite_template_no_anchor\";s:44:\"<span><i class=\"fa fa-home\"></i> HOME</span>\";s:13:\"bhome_display\";b:1;s:14:\"Hhome_template\";s:287:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><span><i class=\"fa fa-home\"></i> HOME</span></span></a><meta property=\"position\" content=\"%position%\"></span>\";s:24:\"Hhome_template_no_anchor\";s:44:\"<span><i class=\"fa fa-home\"></i> HOME</span>\";s:13:\"bblog_display\";b:1;s:10:\"hseparator\";s:58:\"&nbsp;&nbsp;<i class=\"fa fa-caret-right \"></i>&nbsp;&nbsp;\";s:12:\"blimit_title\";b:0;s:17:\"amax_title_length\";i:20;s:20:\"bcurrent_item_linked\";b:0;s:28:\"bpost_page_hierarchy_display\";b:1;s:33:\"bpost_page_hierarchy_parent_first\";b:1;s:25:\"Spost_page_hierarchy_type\";s:15:\"BCN_POST_PARENT\";s:19:\"Hpost_page_template\";s:280:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><i class=\"fa fa-folder\"></i> %htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:29:\"Hpost_page_template_no_anchor\";s:62:\"<span class=\"%type%\"><i class=\"fa fa-file\"></i> %title%</span>\";s:15:\"apost_page_root\";s:2:\"35\";s:15:\"Hpaged_template\";s:41:\"<span class=\"%type%\">Page %htitle%</span>\";s:14:\"bpaged_display\";b:0;s:19:\"Hpost_post_template\";s:280:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><i class=\"fa fa-folder\"></i> %htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:29:\"Hpost_post_template_no_anchor\";s:62:\"<span class=\"%type%\"><i class=\"fa fa-file\"></i> %title%</span>\";s:15:\"apost_post_root\";s:1:\"0\";s:28:\"bpost_post_hierarchy_display\";b:1;s:33:\"bpost_post_hierarchy_parent_first\";b:0;s:27:\"bpost_post_taxonomy_referer\";b:0;s:25:\"Spost_post_hierarchy_type\";s:8:\"category\";s:34:\"bpost_attachment_hierarchy_display\";b:0;s:39:\"bpost_attachment_hierarchy_parent_first\";b:0;s:31:\"Spost_attachment_hierarchy_type\";s:15:\"BCN_POST_PARENT\";s:21:\"apost_attachment_root\";i:0;s:25:\"Hpost_attachment_template\";s:280:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><i class=\"fa fa-folder\"></i> %htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:35:\"Hpost_attachment_template_no_anchor\";s:36:\"<span class=\"%type%\"> %title%</span>\";s:13:\"H404_template\";s:36:\"<span class=\"%type%\">%htitle%</span>\";s:10:\"S404_title\";s:3:\"404\";s:16:\"Hsearch_template\";s:319:\"<span property=\"itemListElement\" typeof=\"ListItem\"><span property=\"name\">Search results for &#039;<a property=\"item\" typeof=\"WebPage\" title=\"Go to the first page of search results for %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current>%htitle%</a>&#039;</span><meta property=\"position\" content=\"%position%\"></span>\";s:26:\"Hsearch_template_no_anchor\";s:80:\"<span class=\"%type%\"><i class=\"fa fa-folder\"></i> %htitle%の検索結果</span>\";s:22:\"Htax_post_tag_template\";s:268:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to the %title% tag archives.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\">%htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:32:\"Htax_post_tag_template_no_anchor\";s:36:\"<span class=\"%type%\">%htitle%</span>\";s:25:\"Htax_post_format_template\";s:264:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to the %title% archives.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\">%htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:35:\"Htax_post_format_template_no_anchor\";s:36:\"<span class=\"%type%\">%htitle%</span>\";s:16:\"Hauthor_template\";s:258:\"<span property=\"itemListElement\" typeof=\"ListItem\"><span property=\"name\">Articles by: <a title=\"Go to the first page of posts by %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current>%htitle%</a></span><meta property=\"position\" content=\"%position%\"></span>\";s:26:\"Hauthor_template_no_anchor\";s:49:\"<span class=\"%type%\">Articles by: %htitle%</span>\";s:12:\"Sauthor_name\";s:12:\"display_name\";s:12:\"aauthor_root\";i:0;s:22:\"Htax_category_template\";s:302:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to the %title% category archives.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><i class=\"fa fa-folder\"></i> %htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:32:\"Htax_category_template_no_anchor\";s:65:\"<span class=\"%type%\"><i class=\"fa fa-folder\"></i> %htitle%</span>\";s:14:\"Hdate_template\";s:264:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to the %title% archives.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\">%htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:24:\"Hdate_template_no_anchor\";s:36:\"<span class=\"%type%\">%htitle%</span>\";s:34:\"bpost_environment_taxonomy_referer\";b:0;s:26:\"Hpost_environment_template\";s:280:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><i class=\"fa fa-folder\"></i> %htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:36:\"Hpost_environment_template_no_anchor\";s:62:\"<span class=\"%type%\"><i class=\"fa fa-file\"></i> %title%</span>\";s:22:\"apost_environment_root\";i:35;s:35:\"bpost_environment_hierarchy_display\";b:1;s:33:\"bpost_environment_archive_display\";b:1;s:32:\"Spost_environment_hierarchy_type\";s:10:\"BCN_PARENT\";s:40:\"bpost_environment_hierarchy_parent_first\";b:0;s:40:\"bpost_feedzy_categories_taxonomy_referer\";b:0;s:32:\"Hpost_feedzy_categories_template\";s:275:\"<span property=\"itemListElement\" typeof=\"ListItem\"><a property=\"item\" typeof=\"WebPage\" title=\"Go to %title%.\" href=\"%link%\" class=\"%type%\" bcn-aria-current><span property=\"name\"><i class=\"fa fa-folder\">%htitle%</span></a><meta property=\"position\" content=\"%position%\"></span>\";s:42:\"Hpost_feedzy_categories_template_no_anchor\";s:60:\"<span class=\"%type%\"><i class=\"fa fa-folder\">%htitle%</span>\";s:28:\"apost_feedzy_categories_root\";i:0;s:41:\"bpost_feedzy_categories_hierarchy_display\";b:0;s:39:\"bpost_feedzy_categories_archive_display\";b:1;s:38:\"Spost_feedzy_categories_hierarchy_type\";s:8:\"BCN_DATE\";s:46:\"bpost_feedzy_categories_hierarchy_parent_first\";b:0;}','yes'),(320,'editor_basics','a:9:{s:9:\"task_list\";s:2:\"on\";s:10:\"imagepaste\";s:3:\"off\";s:13:\"imagepaste_sm\";s:3:\"off\";s:12:\"live_preview\";s:2:\"on\";s:14:\"sync_scrolling\";s:2:\"on\";s:11:\"html_decode\";s:3:\"off\";s:13:\"support_front\";s:3:\"off\";s:13:\"support_reply\";s:3:\"off\";s:18:\"support_other_text\";s:0:\"\";}','yes'),(321,'editor_style','a:3:{s:11:\"theme_style\";s:7:\"default\";s:10:\"code_style\";s:7:\"default\";s:13:\"editor_addres\";s:50:\"http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3\";}','yes'),(322,'syntax_highlighting','a:9:{s:19:\"highlight_mode_auto\";s:3:\"off\";s:12:\"line_numbers\";s:3:\"off\";s:13:\"show_language\";s:3:\"off\";s:14:\"copy_clipboard\";s:3:\"off\";s:23:\"highlight_library_style\";s:7:\"default\";s:18:\"customize_my_style\";s:7:\"nothing\";s:24:\"highlight_mode_customize\";s:3:\"off\";s:25:\"customize_highlight_style\";s:7:\"nothing\";s:30:\"customize_highlight_javascript\";s:7:\"nothing\";}','yes'),(323,'editor_emoji','a:1:{s:13:\"support_emoji\";s:3:\"off\";}','yes'),(324,'editor_toc','a:1:{s:11:\"support_toc\";s:3:\"off\";}','yes'),(325,'editor_katex','a:1:{s:13:\"support_katex\";s:3:\"off\";}','yes'),(326,'editor_mermaid','a:1:{s:13:\"support_katex\";s:3:\"off\";}','yes'),(327,'editor_mindmap','a:4:{s:11:\"theme_style\";s:7:\"default\";s:10:\"code_style\";s:7:\"default\";s:13:\"editor_addres\";s:50:\"http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3\";s:17:\"customize_mindmap\";s:80:\"http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3/assets/MindMap/mindMap.min.js\";}','yes'),(328,'editor_advanced','a:2:{s:17:\"jquery_compatible\";s:3:\"off\";s:8:\"hide_ads\";s:3:\"off\";}','yes'),(482,'widget_custom-post-type-recent-posts','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(596,'themeisle_sdk_notifications','a:2:{s:17:\"last_notification\";a:2:{s:2:\"id\";s:28:\"feedzy_rss_feeds_review_flag\";s:10:\"display_at\";i:1565058614;}s:24:\"last_notification_active\";i:1565317001;}','yes'),(726,'pum_ver','1.8.6','yes'),(727,'pum_initial_version','1.8.6','yes'),(728,'pum_ver_upgraded_from','0.0.0','yes'),(729,'pum_db_ver','8','yes'),(730,'pum_installed_on','2019-06-12 10:43:03','yes'),(731,'fs_active_plugins','O:8:\"stdClass\":3:{s:7:\"plugins\";a:1:{s:37:\"popup-maker/includes/pum-sdk/freemius\";O:8:\"stdClass\":4:{s:7:\"version\";s:5:\"2.2.4\";s:4:\"type\";s:6:\"plugin\";s:9:\"timestamp\";i:1560303784;s:11:\"plugin_path\";s:27:\"popup-maker/popup-maker.php\";}}s:7:\"abspath\";s:33:\"/home/webdimension/www/blog.webdimension.jp/\";s:6:\"newest\";O:8:\"stdClass\":5:{s:11:\"plugin_path\";s:27:\"popup-maker/popup-maker.php\";s:8:\"sdk_path\";s:37:\"popup-maker/includes/pum-sdk/freemius\";s:7:\"version\";s:5:\"2.2.4\";s:13:\"in_activation\";b:1;s:9:\"timestamp\";i:1560303784;}}','yes'),(732,'fs_debug_mode','','yes'),(733,'fs_accounts','a:5:{s:21:\"id_slug_type_path_map\";a:1:{i:147;a:3:{s:4:\"slug\";s:11:\"popup-maker\";s:4:\"type\";s:6:\"plugin\";s:4:\"path\";s:27:\"popup-maker/popup-maker.php\";}}s:11:\"plugin_data\";a:1:{s:11:\"popup-maker\";a:13:{s:16:\"plugin_main_file\";O:8:\"stdClass\":1:{s:4:\"path\";s:27:\"popup-maker/popup-maker.php\";}s:17:\"install_timestamp\";i:1560303784;s:16:\"sdk_last_version\";N;s:11:\"sdk_version\";s:5:\"2.2.4\";s:16:\"sdk_upgrade_mode\";b:1;s:18:\"sdk_downgrade_mode\";b:0;s:19:\"plugin_last_version\";N;s:14:\"plugin_version\";s:5:\"1.8.6\";s:19:\"plugin_upgrade_mode\";b:1;s:21:\"plugin_downgrade_mode\";b:0;s:21:\"is_plugin_new_install\";b:1;s:17:\"connectivity_test\";a:6:{s:12:\"is_connected\";b:1;s:4:\"host\";s:12:\"blog.webdimension.jp\";s:9:\"server_ip\";s:14:\"116.220.88.114\";s:9:\"is_active\";b:1;s:9:\"timestamp\";i:1560303784;s:7:\"version\";s:5:\"1.8.6\";}s:17:\"was_plugin_loaded\";b:1;}}s:13:\"file_slug_map\";a:1:{s:27:\"popup-maker/popup-maker.php\";s:11:\"popup-maker\";}s:7:\"plugins\";a:1:{s:11:\"popup-maker\";O:9:\"FS_Plugin\":20:{s:16:\"parent_plugin_id\";N;s:5:\"title\";s:11:\"Popup Maker\";s:4:\"slug\";s:11:\"popup-maker\";s:12:\"premium_slug\";s:19:\"popup-maker-premium\";s:4:\"type\";s:6:\"plugin\";s:20:\"affiliate_moderation\";b:0;s:19:\"is_wp_org_compliant\";b:1;s:4:\"file\";s:27:\"popup-maker/popup-maker.php\";s:7:\"version\";s:5:\"1.8.6\";s:11:\"auto_update\";N;s:4:\"info\";N;s:10:\"is_premium\";b:0;s:14:\"premium_suffix\";s:9:\"(Premium)\";s:7:\"is_live\";b:1;s:10:\"public_key\";s:32:\"pk_0a02cbd99443e0ab7211b19222fe3\";s:10:\"secret_key\";N;s:2:\"id\";s:3:\"147\";s:7:\"updated\";N;s:7:\"created\";N;s:22:\"\0FS_Entity\0_is_updated\";b:1;}}s:9:\"unique_id\";s:32:\"9fd860d9f545dd65a7b575ae1db49cdf\";}','yes'),(734,'pum_previously_opted_using_freemius','0','yes'),(735,'fs_api_cache','a:0:{}','yes'),(736,'fs_gdpr','a:1:{s:2:\"u1\";a:1:{s:8:\"required\";b:0;}}','yes'),(739,'popmake_settings','a:2:{s:26:\"disable_popup_category_tag\";i:1;s:16:\"default_theme_id\";i:72;}','yes'),(740,'pum_version','1.8.6','yes'),(743,'_pum_installed_themes','a:5:{i:0;s:8:\"lightbox\";i:1;s:15:\"enterprise-blue\";i:2;s:9:\"hello-box\";i:3;s:12:\"cutting-edge\";i:4;s:13:\"framed-border\";}','yes'),(744,'pum_completed_upgrades','a:1:{i:0;s:16:\"core-v1_8-themes\";}','yes'),(745,'pum_extend_viewed_extensions','a:0:{}','yes'),(746,'pum_reviews_installed_on','2019-06-12 10:43:06','yes'),(747,'_pum_installed','1','yes'),(748,'pum_privacy_cookie_list','a:2:{s:7:\"cookies\";a:0:{}s:9:\"timestamp\";i:1560303786;}','yes'),(749,'pum-has-cached-css','1560303861','yes'),(750,'pum-has-cached-js','1560303861','yes'),(780,'feedzy_rss_feeds_logger_flag','no','yes'),(790,'secure_auth_key','u(z3%]Wvl0o@GX`N%Dc3]9[o])tvDp7h.|LKtzcLo=jAS?UrXxP0^sp.LgNgq&`A','no'),(791,'secure_auth_salt','3eBs#*w;%@=dGwz]|2C{6p7R2Zm9)$%Nx)Uy.rWZ D^(V/dQilZbZTO)7HTAr^?|','no'),(1163,'feedzy_rss_feeds_translate_flag','no','yes'),(1207,'widget_custom-post-type-recent-comments','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(1208,'widget_custom-post-type-search','a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(1275,'wpcf7','a:3:{s:7:\"version\";s:5:\"5.1.7\";s:13:\"bulk_validate\";a:4:{s:9:\"timestamp\";d:1581776071;s:7:\"version\";s:5:\"5.1.6\";s:11:\"count_valid\";i:1;s:13:\"count_invalid\";i:0;}s:9:\"recaptcha\";a:1:{s:40:\"6Le7E6sUAAAAAG_gEr5DgtXaqFe0agjPpgbrOoTR\";s:40:\"6Le7E6sUAAAAAADamaE9gcqYOeNSKYxJ9bNakMeZ\";}}','yes'),(1283,'recaptcha_flavor','grecaptcha','yes'),(1284,'recaptcha_theme','light','yes'),(1285,'recaptcha_disable_submit','0','yes'),(1286,'recaptcha_noscript','0','yes'),(1287,'recaptcha_comment_use_42_filter','0','yes'),(1288,'recaptcha_publickey','6Le7E6sUAAAAAG_gEr5DgtXaqFe0agjPpgbrOoTR','yes'),(1289,'recaptcha_privatekey','6Le7E6sUAAAAAADamaE9gcqYOeNSKYxJ9bNakMeZ','yes'),(1290,'recaptcha_language','','yes'),(1291,'recaptcha_enable_comments','0','yes'),(1292,'recaptcha_enable_signup','0','yes'),(1293,'recaptcha_enable_login','0','yes'),(1294,'recaptcha_enable_lostpw','0','yes'),(1295,'recaptcha_disable_for_known_users','0','yes'),(1296,'recaptcha_lockout','0','yes'),(1315,'wp_mail_smtp_initial_version','1.4.2','no'),(1316,'wp_mail_smtp_version','1.6.2','no'),(1317,'wp_mail_smtp','a:5:{s:4:\"mail\";a:6:{s:10:\"from_email\";s:20:\"blog@webdimension.jp\";s:9:\"from_name\";s:42:\"おっさんWEBエンジニアのブログ\";s:6:\"mailer\";s:4:\"smtp\";s:11:\"return_path\";b:0;s:16:\"from_email_force\";b:0;s:15:\"from_name_force\";b:0;}s:4:\"smtp\";a:7:{s:7:\"autotls\";b:1;s:4:\"host\";s:25:\"webdimension.sakura.ne.jp\";s:10:\"encryption\";s:3:\"tls\";s:4:\"port\";i:587;s:4:\"auth\";b:1;s:4:\"user\";s:30:\"blog@webdimension.sakura.ne.jp\";s:4:\"pass\";s:13:\"9899Nori_7191\";}s:5:\"gmail\";a:2:{s:9:\"client_id\";s:0:\"\";s:13:\"client_secret\";s:0:\"\";}s:7:\"mailgun\";a:3:{s:7:\"api_key\";s:0:\"\";s:6:\"domain\";s:0:\"\";s:6:\"region\";s:2:\"US\";}s:8:\"sendgrid\";a:1:{s:7:\"api_key\";s:0:\"\";}}','no'),(1318,'_amn_smtp_last_checked','1585440000','yes'),(1322,'wp_mail_smtp_debug','a:0:{}','no'),(1954,'feedzy_rss_feeds_review_flag','no','yes'),(2829,'new_admin_email','blog@webdimension.jp','yes'),(2844,'updraftplus_version','1.16.17','yes'),(2845,'updraft_updraftvault','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-464e484039acbc07e01032375c978907\";a:3:{s:5:\"token\";s:0:\"\";s:5:\"email\";s:0:\"\";s:5:\"quota\";i:-1;}}}','yes'),(2846,'updraft_dropbox','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-21507ca1b5856ae8b6eb653cddc24b46\";a:4:{s:6:\"appkey\";s:0:\"\";s:6:\"secret\";s:0:\"\";s:6:\"folder\";s:0:\"\";s:15:\"tk_access_token\";s:0:\"\";}}}','yes'),(2847,'updraft_s3','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-33ef8daa361a99b28786f6cb34b5a95c\";a:5:{s:9:\"accesskey\";s:0:\"\";s:9:\"secretkey\";s:0:\"\";s:4:\"path\";s:0:\"\";s:3:\"rrs\";s:0:\"\";s:22:\"server_side_encryption\";s:0:\"\";}}}','yes'),(2848,'updraft_cloudfiles','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-432690305e8ff5ef3f2ba3b58d597f97\";a:5:{s:4:\"user\";s:0:\"\";s:7:\"authurl\";s:35:\"https://auth.api.rackspacecloud.com\";s:6:\"apikey\";s:0:\"\";s:4:\"path\";s:0:\"\";s:6:\"region\";N;}}}','yes'),(2849,'updraft_googledrive','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-175e3d5a23efd9b3b8e0a2d9efcf111e\";a:3:{s:8:\"clientid\";s:0:\"\";s:6:\"secret\";s:0:\"\";s:5:\"token\";s:0:\"\";}}}','yes'),(2850,'updraft_onedrive','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-94b7caeb75f11ed2ab5cb8901d0a4d55\";a:0:{}}}','yes'),(2851,'updraft_ftp','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-ec24f9ce2592fe529df5fa171a0ad172\";a:5:{s:4:\"host\";s:0:\"\";s:4:\"user\";s:0:\"\";s:4:\"pass\";s:0:\"\";s:4:\"path\";s:0:\"\";s:7:\"passive\";i:1;}}}','yes'),(2852,'updraft_azure','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-425362c395024aeecf12b845b35bfcf7\";a:0:{}}}','yes'),(2853,'updraft_sftp','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-cb7631fb087513641e61820caa8aeee4\";a:0:{}}}','yes'),(2854,'updraft_googlecloud','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-d79465ce61e3a3d84443245f8d1475c6\";a:0:{}}}','yes'),(2855,'updraft_backblaze','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-0a6003067e0a3950964b2f71c0cd2270\";a:0:{}}}','yes'),(2856,'updraft_webdav','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-8fd41a20a9158c39f8f2a8540c5e6bd9\";a:0:{}}}','yes'),(2857,'updraft_s3generic','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-b1d2f422980319f6cd8558c562d48101\";a:4:{s:9:\"accesskey\";s:0:\"\";s:9:\"secretkey\";s:0:\"\";s:4:\"path\";s:0:\"\";s:8:\"endpoint\";s:0:\"\";}}}','yes'),(2858,'updraft_openstack','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-bc5d451a397d4e1ccc25383ebdc3d9b8\";a:6:{s:4:\"user\";s:0:\"\";s:7:\"authurl\";s:0:\"\";s:8:\"password\";s:0:\"\";s:6:\"tenant\";s:0:\"\";s:4:\"path\";s:0:\"\";s:6:\"region\";s:0:\"\";}}}','yes'),(2859,'updraft_dreamobjects','a:2:{s:7:\"version\";i:1;s:8:\"settings\";a:1:{s:34:\"s-8d991b4eb095b59b9bfa7a6516a52336\";a:3:{s:9:\"accesskey\";s:0:\"\";s:9:\"secretkey\";s:0:\"\";s:4:\"path\";s:0:\"\";}}}','yes'),(2860,'updraftplus-addons_siteid','bd9ad72c9acbfcb15d9ac64c928e8af8','no'),(2861,'updraftplus_tour_cancelled_on','vault_selected','yes'),(2864,'backwpup_cfg_hash','1f9c92','no'),(2865,'backwpup_jobs','a:0:{}','no'),(2866,'backwpup_version','3.8.0','no'),(2867,'backwpup_cfg_showadminbar','1','no'),(2868,'backwpup_cfg_showfoldersize','1','no'),(2869,'backwpup_cfg_protectfolders','1','no'),(2870,'backwpup_cfg_jobmaxexecutiontime','30','no'),(2871,'backwpup_cfg_jobstepretry','3','no'),(2872,'backwpup_cfg_jobrunauthkey','f6fb8c4d','no'),(2873,'backwpup_cfg_loglevel','normal_translated','no'),(2874,'backwpup_cfg_jobwaittimems','0','no'),(2875,'backwpup_cfg_jobdooutput','','no'),(2876,'backwpup_cfg_windows','','no'),(2877,'backwpup_cfg_maxlogs','30','no'),(2878,'backwpup_cfg_gzlogs','','no'),(2879,'backwpup_cfg_logfolder','uploads/backwpup-1f9c92-logs/','no'),(2880,'backwpup_cfg_httpauthuser','','no'),(2881,'backwpup_cfg_httpauthpassword','','no'),(2889,'inpsyde-phone-consent-given-BackWPup','a:4:{s:6:\"plugin\";s:8:\"BackWPup\";s:10:\"identifier\";s:32:\"c83745d00d8725766042fbd102591946\";s:11:\"php_version\";s:6:\"5.6.40\";s:10:\"wp_version\";s:5:\"5.2.2\";}','no'),(2903,'backwpup_messages','a:0:{}','no'),(2924,'backwpup_cfg_authentication','a:5:{s:6:\"method\";s:0:\"\";s:10:\"basic_user\";s:42:\"おっさんWEBエンジニアのブログ\";s:14:\"basic_password\";s:0:\"\";s:7:\"user_id\";i:1;s:9:\"query_arg\";s:0:\"\";}','no'),(2925,'backwpup_cfg_easycronapikey','9899Nori_7191','no'),(3028,'dismissed_update_core','a:1:{s:8:\"5.2.3|ja\";b:1;}','no'),(6882,'sep_exclude','a:3:{i:0;i:35;i:1;i:20;i:2;i:475;}','yes'),(7333,'sm_rewrite_done','$Id: sitemap-loader.php 937300 2014-06-23 18:04:11Z arnee $','yes'),(7340,'sm_options','a:52:{s:18:\"sm_b_prio_provider\";s:0:\"\";s:9:\"sm_b_ping\";b:1;s:10:\"sm_b_stats\";b:0;s:12:\"sm_b_pingmsn\";b:1;s:12:\"sm_b_autozip\";b:1;s:11:\"sm_b_memory\";s:0:\"\";s:9:\"sm_b_time\";i:-1;s:18:\"sm_b_style_default\";b:1;s:10:\"sm_b_style\";s:0:\"\";s:12:\"sm_b_baseurl\";s:0:\"\";s:11:\"sm_b_robots\";b:1;s:9:\"sm_b_html\";b:0;s:12:\"sm_b_exclude\";a:0:{}s:17:\"sm_b_exclude_cats\";a:0:{}s:10:\"sm_in_home\";b:1;s:11:\"sm_in_posts\";b:1;s:15:\"sm_in_posts_sub\";b:0;s:11:\"sm_in_pages\";b:1;s:10:\"sm_in_cats\";b:1;s:10:\"sm_in_arch\";b:1;s:10:\"sm_in_auth\";b:0;s:10:\"sm_in_tags\";b:1;s:9:\"sm_in_tax\";a:0:{}s:17:\"sm_in_customtypes\";a:1:{i:0;s:11:\"environment\";}s:13:\"sm_in_lastmod\";b:1;s:10:\"sm_cf_home\";s:5:\"daily\";s:11:\"sm_cf_posts\";s:5:\"daily\";s:11:\"sm_cf_pages\";s:5:\"daily\";s:10:\"sm_cf_cats\";s:5:\"daily\";s:10:\"sm_cf_auth\";s:5:\"daily\";s:15:\"sm_cf_arch_curr\";s:5:\"daily\";s:14:\"sm_cf_arch_old\";s:5:\"daily\";s:10:\"sm_cf_tags\";s:5:\"daily\";s:10:\"sm_pr_home\";d:1;s:11:\"sm_pr_posts\";d:0.6;s:15:\"sm_pr_posts_min\";d:0.2;s:11:\"sm_pr_pages\";d:0.6;s:10:\"sm_pr_cats\";d:0.3;s:10:\"sm_pr_arch\";d:0.3;s:10:\"sm_pr_auth\";d:0.3;s:10:\"sm_pr_tags\";d:0.3;s:12:\"sm_i_donated\";b:0;s:17:\"sm_i_hide_donated\";b:0;s:17:\"sm_i_install_date\";i:1569230952;s:16:\"sm_i_hide_survey\";b:0;s:14:\"sm_i_hide_note\";b:0;s:15:\"sm_i_hide_works\";b:0;s:16:\"sm_i_hide_donors\";b:0;s:9:\"sm_i_hash\";s:20:\"8258aba0b4540970ac54\";s:13:\"sm_i_lastping\";i:1608115310;s:16:\"sm_i_supportfeed\";b:1;s:22:\"sm_i_supportfeed_cache\";i:1641897335;}','yes'),(7514,'sm_status','O:28:\"GoogleSitemapGeneratorStatus\":4:{s:39:\"\0GoogleSitemapGeneratorStatus\0startTime\";d:1608115309.621154;s:37:\"\0GoogleSitemapGeneratorStatus\0endTime\";d:1608115310.56243;s:41:\"\0GoogleSitemapGeneratorStatus\0pingResults\";a:2:{s:6:\"google\";a:5:{s:9:\"startTime\";d:1608115309.622905;s:7:\"endTime\";d:1608115310.342155;s:7:\"success\";b:1;s:3:\"url\";s:103:\"http://www.google.com/webmasters/sitemaps/ping?sitemap=https%3A%2F%2Fblog.webdimension.jp%2Fsitemap.xml\";s:4:\"name\";s:6:\"Google\";}s:4:\"bing\";a:5:{s:9:\"startTime\";d:1608115310.343313;s:7:\"endTime\";d:1608115310.560158;s:7:\"success\";b:1;s:3:\"url\";s:96:\"http://www.bing.com/webmaster/ping.aspx?siteMap=https%3A%2F%2Fblog.webdimension.jp%2Fsitemap.xml\";s:4:\"name\";s:4:\"Bing\";}}s:38:\"\0GoogleSitemapGeneratorStatus\0autoSave\";b:1;}','no'),(22356,'category_children','a:0:{}','yes'),(23005,'backwpup_cfg_phone_home_client','1','no'),(28356,'admin_email_lifespan','1650702590','yes'),(28358,'recovery_mode_email_last_sent','1585495508','yes'),(28396,'db_upgraded','','yes'),(73787,'action_scheduler_hybrid_store_demarkation','588','yes'),(73788,'schema-ActionScheduler_StoreSchema','3.0.1607512459','yes'),(73789,'schema-ActionScheduler_LoggerSchema','2.0.1607512459','yes'),(73796,'action_scheduler_lock_async-request-runner','1641468519','yes'),(73803,'action_scheduler_migration_status','complete','yes'),(73806,'wp_mail_smtp_migration_version','2','yes'),(73807,'wp_mail_smtp_review_notice','a:2:{s:4:\"time\";i:1607512563;s:9:\"dismissed\";b:0;}','yes'),(73809,'wp_mail_smtp_notifications','a:4:{s:6:\"update\";i:1635150781;s:4:\"feed\";a:2:{i:0;a:6:{s:5:\"title\";s:28:\"NEW! Postmark Mailer Is Here\";s:7:\"content\";s:222:\"WP Mail SMTP 3.1 is here, including the brand new Postmark mailer! Get fast, reliable email delivery for your WordPress website when you switch to Postmark today. Postmark is available right now for our Lite and Pro users.\";s:4:\"type\";a:4:{i:0;s:6:\"agency\";i:1;s:9:\"developer\";i:2;s:5:\"elite\";i:3;s:4:\"lite\";}s:2:\"id\";i:15;s:4:\"btns\";a:1:{s:4:\"main\";a:2:{s:3:\"url\";s:161:\"https://wpmailsmtp.com/introducing-wp-mail-smtp-3-1/?utm_source=WordPress&utm_campaign=plugin&utm_medium=Plugin Notification&utm_content=Postmark Lite Learn More\";s:4:\"text\";s:10:\"Learn More\";}}s:5:\"start\";s:19:\"2021-09-30 00:00:00\";}i:1;a:6:{s:5:\"title\";s:28:\"NEW! Postmark Mailer Is Here\";s:7:\"content\";s:222:\"WP Mail SMTP 3.1 is here, including the brand new Postmark mailer! Get fast, reliable email delivery for your WordPress website when you switch to Postmark today. Postmark is available right now for our Lite and Pro users.\";s:4:\"type\";a:1:{i:0;s:4:\"lite\";}s:2:\"id\";i:13;s:4:\"btns\";a:2:{s:4:\"main\";a:2:{s:3:\"url\";s:165:\"https://wpmailsmtp.com/introducing-wp-mail-smtp-3-1/?utm_source=WordPress&utm_campaign=liteplugin&utm_medium=Plugin Notification&utm_content=Postmark Lite Learn More\";s:4:\"text\";s:10:\"Learn More\";}s:3:\"alt\";a:2:{s:3:\"url\";s:170:\"https://wpmailsmtp.com/wpmailsmtp-lite-upgrade/?utm_source=WordPress&utm_campaign=liteplugin&utm_medium=Plugin Notification&utm_content=Postmark Lite Get WP Mail SMTP Pro\";s:4:\"text\";s:20:\"Get WP Mail SMTP Pro\";}}s:5:\"start\";s:19:\"2021-09-30 00:00:00\";}}s:6:\"events\";a:0:{}s:9:\"dismissed\";a:0:{}}','yes'),(73813,'disallowed_keys','','no'),(73814,'comment_previously_approved','1','yes'),(73815,'auto_plugin_theme_update_emails','a:0:{}','no'),(73816,'auto_update_core_dev','enabled','yes'),(73817,'auto_update_core_minor','enabled','yes'),(73818,'auto_update_core_major','unset','yes'),(73819,'finished_updating_comment_type','1','yes'),(73827,'can_compress_scripts','1','no'),(74074,'_transient_health-check-site-status-result','{\"good\":13,\"recommended\":7,\"critical\":0}','yes'),(146941,'_transient_is_multi_author','0','yes'),(146998,'_transient_understrap_categories','2','yes'),(161890,'_transient_timeout_feedzy_rss_feeds_all_languages','1642196848','no'),(161891,'_transient_feedzy_rss_feeds_all_languages','a:1:{s:12:\"translations\";a:3:{i:0;a:7:{s:8:\"language\";s:5:\"en_GB\";s:7:\"version\";s:5:\"3.5.1\";s:7:\"updated\";s:19:\"2019-02-08 18:23:07\";s:12:\"english_name\";s:12:\"English (UK)\";s:11:\"native_name\";s:12:\"English (UK)\";s:7:\"package\";s:83:\"https://downloads.wordpress.org/translation/plugin/feedzy-rss-feeds/3.5.1/en_GB.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}}i:1;a:7:{s:8:\"language\";s:5:\"pt_PT\";s:7:\"version\";s:5:\"3.5.1\";s:7:\"updated\";s:19:\"2020-04-18 19:13:07\";s:12:\"english_name\";s:21:\"Portuguese (Portugal)\";s:11:\"native_name\";s:10:\"Português\";s:7:\"package\";s:83:\"https://downloads.wordpress.org/translation/plugin/feedzy-rss-feeds/3.5.1/pt_PT.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"pt\";}}i:2;a:7:{s:8:\"language\";s:5:\"sv_SE\";s:7:\"version\";s:5:\"3.5.1\";s:7:\"updated\";s:19:\"2020-05-28 09:11:47\";s:12:\"english_name\";s:7:\"Swedish\";s:11:\"native_name\";s:7:\"Svenska\";s:7:\"package\";s:83:\"https://downloads.wordpress.org/translation/plugin/feedzy-rss-feeds/3.5.1/sv_SE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sv\";i:2;s:3:\"swe\";}}}}','no'),(162754,'_transient_timeout_feed_d21d2a68bac70d38fb7f9a7bd3d1725e','1642502135','no'),(162755,'_transient_feed_d21d2a68bac70d38fb7f9a7bd3d1725e','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:5:\"\n\n	\n	\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:370:\"\n\n		\n		\n		\n				\n		\n		\n\n		\n		\n			\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n				\n				\n\n							\n		\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"WordPress.org Forums » [XML Sitemaps] Support\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://wordpress.org/support/plugin/google-sitemap-generator/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:13:\"lastBuildDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 11 Jan 2022 10:22:15 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"https://bbpress.org/?v=2.7.0-alpha-2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:30:{i:0;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:103:\"https://wordpress.org/support/topic/how-to-stop-plugin-from-auto-add-page-product-ids-to-excluded-list/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:78:\"How to stop plugin from auto add page &amp;amp; product ID:s to excluded list?\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:103:\"https://wordpress.org/support/topic/how-to-stop-plugin-from-auto-add-page-product-ids-to-excluded-list/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 11 Jan 2022 09:55:05 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1846:\"\n						\n						<p>Replies: 0</p>\n						<p>Hi.</p>\n<p>I have a strange problem. I have tried different XML Sitemap plugins, but with different issues, so went back to this plugin again, which I used before.<br />\nBut I do have an issue with this plugin too, that is really annoying and would be happy to find a solution.<br />\nI have a WordPress site with WPML active and use the WPML-feature different domain per language. So I have 3 different languages all with separate domain name even though it is the same site.</p>\n<p>So the XML Sitemap plugins works fine for a while, but for some unknown reason, the plugin automatically adds all pages/products for the secondary and third language to the excluded list&#8230; This seems to happen randomly, as I can&#8217;t narrow it down to a specific &#8220;trigger&#8221;. First I thought it happened when rewrite rules are being flushed or when a product changes. But after a lot of testing, it doesn&#8217;t seem connected, at least not 100% of the time.</p>\n<p>So is there some way, by a PHP code snippet or something, that I could block the possibility for the plugin to add ID:s to the excluded list?<br />\nI do have some ID:s of pages I want to be blocked from the sitemap, such as cart, checkout etc and for all three languages, so they are added in that list.<br />\nBut I have to check this setting every 24 hours as suddenly all the pages and products have been added after the ID:s I added myself.</p>\n<p>And as I use Litespeed Cache to cache my site, this renders issues with the crawlers, as they use the sitemap to crawl all pages that uses cache, to trigger the build of the cache. So it is really annoying when the crawler suddenly just finds 400 objects to crawl, when it should be 1400.</p>\n<p>So any idea on how to stop this from happening would be much appreciated.</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Armsportstore.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"https://wordpress.org/support/topic/xml-sitemaps-plugin-supports-latest-version-of-php/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"XML Sitemaps plugin supports latest version of PHP?\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:87:\"https://wordpress.org/support/topic/xml-sitemaps-plugin-supports-latest-version-of-php/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 02 Jan 2022 23:06:28 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:302:\"\n						\n						<p>Replies: 0</p>\n						<p>Hello</p>\n<p>I need to update my site&#8217;s PHP to a newer version, so I would like to know what PHP version your plugin supports.<br />\nWordpress is recommending a minimum version of 7.4. Does your plugin support this version?</p>\n<p>Thanks!</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Rodrigo\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://wordpress.org/support/topic/page-id-for-php-pages/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"Page ID for php pages\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"https://wordpress.org/support/topic/page-id-for-php-pages/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 24 Dec 2021 02:10:13 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:416:\"\n						\n						<p>Replies: 0</p>\n						<p>How can I get the page ID for php pages, as php do not show up in Dashboard/Pages.</p>\n<p>Reason being is all of a sudden I&#8217;m getting the Google Search Console Error (5XX) for at least 7 php pages.</p>\n<p>What I don&#8217;t understand is I&#8217;ve been error free for many years, but starting December 7 the errors stared showing up in search console.</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"jg100\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://wordpress.org/support/topic/split-sitemap-tag-10000-links-page/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"Split sitemap [tag] 10,000 links/page\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"https://wordpress.org/support/topic/split-sitemap-tag-10000-links-page/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 18 Dec 2021 02:58:46 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:152:\"\n						\n						<p>Replies: 1</p>\n						<p>Split sitemap [tag] 10,000 links/page<br />\nCurrently not separating into a very heavy sitemap</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"tanhqs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"https://wordpress.org/support/topic/error-loading-stylesheet-8/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Error loading stylesheet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"https://wordpress.org/support/topic/error-loading-stylesheet-8/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 13 Dec 2021 08:28:19 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:266:\"\n						\n						<p>Replies: 0</p>\n						<p>Hi,</p>\n<p>When clicking the link next to <strong>The URL to your sitemap index file is:</strong> I get this error:<br />\nError loading stylesheet: Parsing an XSLT stylesheet failed.</p>\n<p>Thanks</p>\n<p>Noam</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"narodu\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"https://wordpress.org/support/topic/wrong-sitemap-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"wrong sitemap\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"https://wordpress.org/support/topic/wrong-sitemap-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 09 Dec 2021 20:32:28 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:573:\"\n						\n						<p>Replies: 0</p>\n						<p>I noticed that my website has a problem with link indexing. I read on the internet that one of these types of problems may be an incorrect site map. I ask users with more knowledge than mine to check my sitemap file at. </p>\n<p><a href=\"https://bitcoin-tidings.com/sitemap.xml\" rel=\"nofollow ugc\">https://bitcoin-tidings.com/sitemap.xml</a></p>\n<p>All comments, be helpful to me. I am not able to modify anything in the plugin code, so please provide a specific plugin that would solve my problem.</p>\n<p>Thank you </p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"johnp1988\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"https://wordpress.org/support/topic/can-this-work-on-wp5-8-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Can this work on WP5.8.2?\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"https://wordpress.org/support/topic/can-this-work-on-wp5-8-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 01 Dec 2021 07:01:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"\n						\n						<p>Replies: 1</p>\n						<p>Can this work on WP 5.8.2?</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"usaco\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"https://wordpress.org/support/topic/indexed-url-not-submitted-in-sitemap/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"Indexed URL, not submitted in Sitemap\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"https://wordpress.org/support/topic/indexed-url-not-submitted-in-sitemap/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 26 Nov 2021 07:00:19 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1578:\"\n						\n						<p>Replies: 2</p>\n						<p>I don&#8217;t see the sitemap automatically updating new links (I&#8217;m using the latest version of XML Sitemaps). In GSC I see more than 2000 links indexed but not in sitemap.<br />\nPlease help me with this problem, thanks!</p>\n<p>Demo: <a href=\"https://drive.google.com/file/d/195mFrDCNjNZWM-BCAWGq6BzC00K2HrtG/view?usp=sharing\" rel=\"nofollow ugc\">https://drive.google.com/file/d/195mFrDCNjNZWM-BCAWGq6BzC00K2HrtG/view?usp=sharing</a><br />\nLink sitemap detail: <a href=\"https://couponplay.com/sitemap-tax-stores.xml\" rel=\"nofollow ugc\">https://couponplay.com/sitemap-tax-stores.xml</a></p>\n<p>Some URLs of the same type are not updated in the sitemap </p>\n<pre><code>https://couponplay.com/stores/nordstrom/\nhttps://couponplay.com/stores/freshly/\nhttps://couponplay.com/stores/snowe/</code></pre>\n\n\n<ul id=\"bbp-topic-revision-log-15105510\" class=\"bbp-topic-revision-log\">\n\n	<li id=\"bbp-topic-revision-log-15105510-item-15105539\" class=\"bbp-topic-revision-log-item\">\n		This topic was modified 1 month, 2 weeks ago by <a href=\"https://wordpress.org/support/users/fierevere/\" title=\"View Yui&#039;s profile\" class=\"bbp-author-link\"><span  class=\"bbp-author-name\">Yui</span></a>.\n	</li>\n	<li id=\"bbp-topic-revision-log-15105510-item-15105540\" class=\"bbp-topic-revision-log-item\">\n		This topic was modified 1 month, 2 weeks ago by <a href=\"https://wordpress.org/support/users/fierevere/\" title=\"View Yui&#039;s profile\" class=\"bbp-author-link\"><span  class=\"bbp-author-name\">Yui</span></a>. Reason: formatting\n	</li>\n\n</ul>\n\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"nghiadinh89\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"https://wordpress.org/support/topic/all-links-broken-in-settings-xml-sitemap-area/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"ALL LINKS BROKEN IN SETTINGS/XML-Sitemap area\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"https://wordpress.org/support/topic/all-links-broken-in-settings-xml-sitemap-area/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 22 Nov 2021 14:46:46 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:544:\"\n						\n						<p>Replies: 0</p>\n						<p>In your SETTINGS/XML-Sitemap area, all the links that use the Amazon link structure are broken.<br />\nEX: <a href=\"https://8rkh4sskhh.execute-api.us-east-1.amazonaws.com/gsg/v1/\" rel=\"nofollow ugc\">https://8rkh4sskhh.execute-api.us-east-1.amazonaws.com/gsg/v1/</a></p>\n<p>See screenshot: <a href=\"https://drive.google.com/file/d/1-PSvKL8ZoqV6dURD5CsifUCrxEwSv8tp/view?usp=sharing\" rel=\"nofollow ugc\">https://drive.google.com/file/d/1-PSvKL8ZoqV6dURD5CsifUCrxEwSv8tp/view?usp=sharing</a></p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"AL Guevara\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:91:\"https://wordpress.org/support/topic/how-do-i-remove-the-link-to-the-sitemap-in-the-sitemap/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"How do I remove the link to the sitemap in the sitemap\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:91:\"https://wordpress.org/support/topic/how-do-i-remove-the-link-to-the-sitemap-in-the-sitemap/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 22 Nov 2021 06:55:02 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:168:\"\n						\n						<p>Replies: 2</p>\n						<p>How do I remove the link to the sitemap in the sitemap misc? Im getting a google console error for it. thanks!</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"aaronbarnett\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://wordpress.org/support/topic/doenst-index-on-search-console/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"Doens&amp;#8217;t index on search console\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://wordpress.org/support/topic/doenst-index-on-search-console/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 21 Nov 2021 05:35:55 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:313:\"\n						\n						<p>Replies: 0</p>\n						<p>Hello guys,<br />\nI submitted sitemap.xml on November 11 in the search console. After 3 days, only 2 categories of site map have been submitted. Posted again yesterday and post categories are not indexed. While on the sitemap there is a category of posts.</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"farid2878\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/support/topic/doenst-index-on-search-console-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"Doens&amp;#8217;t index on search console\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/support/topic/doenst-index-on-search-console-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 21 Nov 2021 04:56:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:516:\"\n						\n						<p>Replies: 0</p>\n						<p>Hello guys,<br />\nI submitted sitemap.xml on November 11 in the search console. After 3 days, only 2 categories of site map have been submitted. Posted again yesterday and post categories are not indexed. While on the sitemap there is a category of posts.<br />\nsitemap: <a href=\"https://bit.ly/3HBWCFL\" rel=\"nofollow ugc\">https://bit.ly/3HBWCFL</a><br />\nsearch console sitemap: <a href=\"https://ibb.co/4Mjh60Y\" rel=\"nofollow ugc\">https://ibb.co/4Mjh60Y</a></p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"farid2878\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"https://wordpress.org/support/topic/how-to-change-the-sitemap-url/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"How to change the sitemap URL\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"https://wordpress.org/support/topic/how-to-change-the-sitemap-url/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 19 Nov 2021 19:37:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:164:\"\n						\n						<p>Replies: 0</p>\n						<p>How to change the sitemap URL. I use Yoast SEO and its sitemap is sitemap_index.xml. Now how to change it?</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"sinin7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"https://wordpress.org/support/topic/index-tag-first-page-and-not-pagination/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"Index TAG first page and not pagination\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"https://wordpress.org/support/topic/index-tag-first-page-and-not-pagination/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 19 Nov 2021 11:51:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:729:\"\n						\n						<p>Replies: 2</p>\n						<p>Hi, we need to index the main TAG url of link such for example <a href=\"https://www.nonnapaperina.it/tag/senza-glutine/\" rel=\"nofollow ugc\">https://www.nonnapaperina.it/tag/senza-glutine/</a><br />\nbut not to index the same url with pagination.<br />\nSo url like<br />\n<a href=\"https://www.nonnapaperina.it/tag/senza-glutine/page/2/\" rel=\"nofollow ugc\">https://www.nonnapaperina.it/tag/senza-glutine/page/2/</a><br />\n<a href=\"https://www.nonnapaperina.it/tag/senza-glutine/page/3/\" rel=\"nofollow ugc\">https://www.nonnapaperina.it/tag/senza-glutine/page/3/</a><br />\netc&#8230;  should not be indexable.</p>\n<p>Is there a way to do this with this plugin?</p>\n<p>Thank you</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"flaviese\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://wordpress.org/support/topic/sitemap-double-on-robots-txt/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"Sitemap double on robots.txt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://wordpress.org/support/topic/sitemap-double-on-robots-txt/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 17 Nov 2021 08:57:55 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:860:\"\n						\n						<p>Replies: 1</p>\n						<p>Hello <a href=\"https://wordpress.org/support/users/auctollo/\" class=\"mention\" rel=\"nofollow\">@auctollo</a>,</p>\n<p>First I am love this plugin so much and more&#8230; but now after some updates on wp core, the sitemap have a high dangerous problem that can make your site or money source into deindex on google.  why? because the sitemap was double on virtual robots.txt</p>\n<p>this plugin still detect wordpress default sitemap there.</p>\n<p>see the screenshot here: <a href=\"https://imgur.com/a/GdZ4I8P\" rel=\"nofollow ugc\">https://imgur.com/a/GdZ4I8P</a></p>\n<p>that in that site i am use default setting of XML Sitemaps plugin. </p>\n<p>please update the plugin brother <a href=\"https://wordpress.org/support/users/auctollo/\" class=\"mention\" rel=\"nofollow\">@auctollo</a>. </p>\n<p>thank you in advance</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"cicisary\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"https://wordpress.org/support/topic/offer-hook-filter-for-excluded-external-pages/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:170:\"&lt;span class=&quot;resolved&quot; aria-label=&quot;Resolved&quot; title=&quot;Topic is resolved.&quot;&gt;&lt;/span&gt;Offer hook / filter for excluded / external Pages\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"https://wordpress.org/support/topic/offer-hook-filter-for-excluded-external-pages/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 16 Nov 2021 07:48:56 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1065:\"\n						\n						<p>Replies: 3</p>\n						<p>Hi There,</p>\n<p>I am using your plugin and I really like the simplicity compared to other full blown SEO Solutions.</p>\n<p>As I have dynamic pages based on user profiles, I am adding them as external pages to the sitemap config to have them in the sitemap. Currently I am doing that by directly updating the wp options database row &#8220;sm_cpages&#8221; with the newly added user. Could you add a filter / hook to the plugin to add external page links programmatically, so I don&#8217;t need to access the db options row directly?</p>\n<p>As I have a flag on my pages (via ACF) to decide, if the page should be indexed by google or not (robots meta tag), I need to keep those pages in sync with the excluded pages field in the sitemap config. Currently I am also doing that, by directly adding / removing the page Id to the database. Could you add a filter / hook to edit the excluded page field programmatically, so I don&#8217;t need to access the db options row directly?</p>\n<p>Thanks and BR<br />\nJan</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"janwidmer\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"https://wordpress.org/support/topic/change-the-url-of-sitemap/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Change the url of sitemap\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"https://wordpress.org/support/topic/change-the-url-of-sitemap/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 04 Nov 2021 17:46:22 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:128:\"\n						\n						<p>Replies: 0</p>\n						<p>i want Change the url of some of my sitemap<br />\nhow can i do that ??</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"parsaheydari\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://wordpress.org/support/topic/excess-url-google-webmaster/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:148:\"&lt;span class=&quot;resolved&quot; aria-label=&quot;Resolved&quot; title=&quot;Topic is resolved.&quot;&gt;&lt;/span&gt;Excess url google webmaster\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://wordpress.org/support/topic/excess-url-google-webmaster/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 02 Nov 2021 00:31:23 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:346:\"\n						\n						<p>Replies: 2</p>\n						<p>My sitemap (tag.xml) Tags links has more than 150,000 links. google showed me this message. Too many URLs / Your sitemap contains too many URLs. Create multiple sitemaps with up to 50,000 URLs each and submit all sitemaps. </p>\n<p>what do i do to create multiple sitemaps using the plugin</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"cris20127\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/support/topic/site-map-error-6/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Site map error\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/support/topic/site-map-error-6/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 31 Oct 2021 23:10:40 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:727:\"\n						\n						<p>Replies: 2</p>\n						<p>Good day my great developer,</p>\n<p>I got a new error message on my Google Search Console which says ”<br />\nSubmitted URL marked ‘noindex’<br />\n“. I have removed noindex tag from 3 of the affected 4 pages, the 1 left is sitemap.xml page.</p>\n<p>I went through setting and unmark “Include sitemap in HTML format”, but if you visit <a href=\"https://naijadiamond.com.ng/sitemap.html/\" rel=\"nofollow ugc\">https://naijadiamond.com.ng/sitemap.html/</a>, you will find out that the URL is accessible.</p>\n<p>Any help will be appreciated.</p>\n<p>The site I need help with: <a href=\"https://naijadiamond.com.ng/\" rel=\"nofollow ugc\">https://naijadiamond.com.ng/</a></p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Adeniji Damilare\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/support/topic/sitemap-tax-category-not-updated/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"sitemap-tax-category &amp;#8211; not updated\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/support/topic/sitemap-tax-category-not-updated/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 29 Oct 2021 19:18:28 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:284:\"\n						\n						<p>Replies: 0</p>\n						<p>Expected behavior:<br />\nWhen updating any post under any category, the category Last modified (GMT) value should be updated as well.</p>\n<p>Current behavior:<br />\nThe categories Last modified (GMT) values don&#8217;t change.</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"ronhening\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:20;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/support/topic/no-robots-txt-to-link-at-sitemap/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"No robots.txt to link at sitemap !\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://wordpress.org/support/topic/no-robots-txt-to-link-at-sitemap/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 27 Oct 2021 20:41:29 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:639:\"\n						\n						<p>Replies: 1</p>\n						<p>Hi</p>\n<p>WP 5.8.1 with plugin 4.1.1 hosted on apache (shared hosting). I checked and I have no robots.txt file at root of website (wp installed at root of website).<br />\nIf I try /robots.txt I get a 404 and as the sitemap is supposed to be either in root directory named sitemap.xml search bots can&#8217;t find it at <a href=\"https://www.domedia.net/index.php?xml_sitemap=params=\" rel=\"nofollow ugc\">https://www.domedia.net/index.php?xml_sitemap=params=</a><br />\nHow to fix that issue ? I don&#8217;t find anything in settings that could help ?</p>\n<p>Thanks</p>\n<p>Vincèn</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Vincèn\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:21;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"https://wordpress.org/support/topic/xml-site-not-working-with-nginx/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"XML site not working with nginx\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"https://wordpress.org/support/topic/xml-site-not-working-with-nginx/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 24 Oct 2021 08:41:27 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:324:\"\n						\n						<p>Replies: 0</p>\n						<p>HI<br />\nbefore the last update the plugins working great, After 4.1.1 the xml isn&#8217;t working, you can check the error ( <a href=\"https://athemeart.com/sitemap.xml\" rel=\"nofollow ugc\">https://athemeart.com/sitemap.xml</a> ) on google Google Chrome</p>\n<p>Thanks</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"aThemeArt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:22;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/support/topic/do-i-need-this-5/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Do I need this?\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"https://wordpress.org/support/topic/do-i-need-this-5/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 21 Oct 2021 23:11:04 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:205:\"\n						\n						<p>Replies: 0</p>\n						<p>Hi there,</p>\n<p>I&#8217;m currently using Yoast which creates xml sitemaps automatically. </p>\n<p>Do I still need to have the XML Sitemaps plugin?</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"droyed\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:23;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"https://wordpress.org/support/topic/exclude-categories-doesnt-seem-to-be-working/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"Exclude Categories Doesn&amp;#8217;t Seem To Be Working\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"https://wordpress.org/support/topic/exclude-categories-doesnt-seem-to-be-working/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 20 Oct 2021 21:37:58 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"\n						\n						<p>Replies: 1</p>\n						<p>Just a heads up on this</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"michty6\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:24;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"https://wordpress.org/support/topic/how-can-save-sitemap-on-my-wordpress-website/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"How Can Save Sitemap On my WordPress Website\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"https://wordpress.org/support/topic/how-can-save-sitemap-on-my-wordpress-website/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 19 Oct 2021 07:16:02 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:649:\"\n						\n						<p>Replies: 0</p>\n						<p>Please need a solution, please help me how can I add that sitemap on Google Search Console. This is my Domain: <a href=\"https://mailbd.net/\" rel=\"nofollow ugc\">https://mailbd.net/</a></p>\n\n\n<ul id=\"bbp-topic-revision-log-14983178\" class=\"bbp-topic-revision-log\">\n\n	<li id=\"bbp-topic-revision-log-14983178-item-14983182\" class=\"bbp-topic-revision-log-item\">\n		This topic was modified 2 months, 3 weeks ago by <a href=\"https://wordpress.org/support/users/mailbdofficial/\" title=\"View Mail BD&#039;s profile\" class=\"bbp-author-link\"><span  class=\"bbp-author-name\">Mail BD</span></a>.\n	</li>\n\n</ul>\n\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Mail BD\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:25;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://wordpress.org/support/topic/how-do-i-correct-my-sitemap/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"How do I correct my sitemap?\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://wordpress.org/support/topic/how-do-i-correct-my-sitemap/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 13 Oct 2021 18:52:13 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:739:\"\n						\n						<p>Replies: 2</p>\n						<p>It doesn&#8217;t seem to matter what I do. When I pull up my sitemap for this site it says that there is no style information, and it only shows 1 url. All of my other sites generate a map with plenty of links for Google to crawl. I have been struggling with this for many weeks, trying to figure out what is wrong. Do you have any suggestions?</p>\n<p>I thought it might be the theme, but I have another site on the same hosting with the same theme and its sitemap is fine. I went through my file manager and put .bak on the 2 sitemaps I found in the wp-content/uploads folder. I don&#8217;t see anything anywhere else. I just don&#8217;t understand why the sitemap is so limited. </p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"amyleforge\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:26;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"https://wordpress.org/support/topic/time-zone-36/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:130:\"&lt;span class=&quot;resolved&quot; aria-label=&quot;Resolved&quot; title=&quot;Topic is resolved.&quot;&gt;&lt;/span&gt;Time zone\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"https://wordpress.org/support/topic/time-zone-36/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 08 Oct 2021 09:21:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:198:\"\n						\n						<p>Replies: 2</p>\n						<p>Hi, the sitemap time zone remains GMT, instead the WordPress time is GMT + 2.<br />\nIs it possible to change it in the sitemap?<br />\nThanks</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"marcorroma\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:27;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:90:\"https://wordpress.org/support/topic/got-an-error-php-fatal-error-uncaught-typeerror-count/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:285:\"&lt;span class=&quot;resolved&quot; aria-label=&quot;Resolved&quot; title=&quot;Topic is resolved.&quot;&gt;&lt;/span&gt;&lt;abbr title=&quot;Not Safe For Work / Mature content&quot;&gt;[NSFW]&lt;/abbr&gt; Got an error &amp;#8220;PHP Fatal error: Uncaught TypeError: count()&amp;#8221;\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:90:\"https://wordpress.org/support/topic/got-an-error-php-fatal-error-uncaught-typeerror-count/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 08 Oct 2021 02:53:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3343:\"\n						\n						<p>Replies: 2</p>\n						<p>I&#8217;m running 10 WordPress sites and I&#8217;ve got following error on a few sites of them.</p>\n<pre><code>\n`[08-Oct-2021 02:37:19 UTC] PHP Fatal error:  Uncaught TypeError: count(): Argument #1 ($var) must be of type Countable|array, string given in /home/matsu/Sites/teraren.com/diary/wp-content/plugins/google-sitemap-generator/sitemap-builder.php:475\nStack trace:\n#0 /home/matsu/Sites/teraren.com/diary/wp-includes/class-wp-hook.php(303): GoogleSitemapGeneratorStandardBuilder-&gt;Index(Object(GoogleSitemapGenerator))\n#1 /home/matsu/Sites/teraren.com/diary/wp-includes/class-wp-hook.php(327): WP_Hook-&gt;apply_filters(&#039;&#039;, Array)\n#2 /home/matsu/Sites/teraren.com/diary/wp-includes/plugin.php(470): WP_Hook-&gt;do_action(Array)\n#3 /home/matsu/Sites/teraren.com/diary/wp-content/plugins/google-sitemap-generator/sitemap-core.php(1623): do_action(&#039;sm_build_index&#039;, Object(GoogleSitemapGenerator))\n#4 /home/matsu/Sites/teraren.com/diary/wp-content/plugins/google-sitemap-generator/sitemap-loader.php(327): GoogleSitemapGenerator-&gt;ShowSitemap(Array)\n#5 /home/matsu/Sites/teraren.com/diary/wp-content/plugins/google-sitemap-generator/sitemap-loader.php(202): GoogleSitemapGeneratorLoader::CallShowSitemap(&#039;params=&#039;)\n#6 /home/matsu/Sites/teraren.com/diary/wp-includes/class-wp-hook.php(301): GoogleSitemapGeneratorLoader::DoTemplateRedirect()\n#7 /home/matsu/Sites/teraren.com/diary/wp-includes/class-wp-hook.php(327): WP_Hook-&gt;apply_filters(true, Array)\n#8 /home/matsu/Sites/teraren.com/diary/wp-includes/plugin.php(470): WP_Hook-&gt;do_action(Array)\n#9 /home/matsu/Sites/teraren.com/diary/wp-includes/template-loader.php(13): do_action(&#039;template_redire...&#039;)\n#10 /home/matsu/Sites/teraren.com/diary/wp-blog-header.php(19): require_once(&#039;/home/matsu/Sit...&#039;)\n#11 /home/matsu/Sites/teraren.com/diary/index.php(17): require(&#039;/home/matsu/Sit...&#039;)\n#12 {main}\n  thrown in /home/matsu/Sites/teraren.com/diary/wp-content/plugins/google-sitemap-generator/sitemap-builder.php on line 475\n</code></pre>\n<p>I wrote a patch to avoid the error.</p>\n<pre><code>\n% diff -u /path/to/old/sitemap-builder.php /path/to/new/sitemap-builder.php\n--- /home/matsu/Sites/teraren.com/je1wfv/wp-content/plugins/google-sitemap-generator/sitemap-builder.php	2021-10-08 02:38:49.268861006 +0000\n+++ /home/matsu/Sites/teraren.com/matsu/blog/wp-content/plugins/google-sitemap-generator/sitemap-builder.php	2021-09-03 09:01:22.833828604 +0000\n@@ -472,7 +472,7 @@\n 		}\n\n 		$pages = $gsg-&gt;GetPages();\n-		if(count($pages) &gt; 0) {\n+		if(is_array($pages) &amp;&amp; count($pages) &gt; 0) {\n 			foreach($pages AS $page) {\n 				if($page instanceof GoogleSitemapGeneratorPage &amp;&amp; $page-&gt;GetUrl()) {\n 					$gsg-&gt;AddSitemap(&quot;externals&quot;, null, $blogUpdate);\n</code></pre>\n<p>Root cause is that the original code expects <code>$pages</code> is an array but the content of the variable is string.</p>\n<p>My server environment.</p>\n<pre><code>\n$ php -v\nPHP 8.0.8 (cli) (built: Jul  7 2021 17:35:32) ( NTS )\nCopyright (c) The PHP Group\nZend Engine v4.0.8, Copyright (c) Zend Technologies\n    with Zend OPcache v8.0.8, Copyright (c), by Zend Technologies\n</code></pre>\n<p>Wordpress 5.8.1</p>\n<p>I&#8217;d appriciate if the patch is merged.</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"matsubobo\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:28;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"https://wordpress.org/support/topic/wp-5-8-1-support-4/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"WP 5.8.1 support\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"https://wordpress.org/support/topic/wp-5-8-1-support-4/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 06 Oct 2021 04:34:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:129:\"\n						\n						<p>Replies: 0</p>\n						<p>Hello, is there any plan to support WP 5.8.1 for <em>XML Sitemaps</em>?</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"ivano098\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:29;a:6:{s:4:\"data\";s:67:\"\n					\n					\n					\n					\n					\n\n					\n					\n\n					\n					\n					\n				\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"https://wordpress.org/support/topic/how-to-exclude-specific-authors/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"how to exclude specific authors\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"https://wordpress.org/support/topic/how-to-exclude-specific-authors/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 05 Oct 2021 09:17:16 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:250:\"\n						\n						<p>Replies: 1</p>\n						<p>There are certain author pages that are showing up in our sitemap that aren&#8217;t actually authors (they are admins who created pages and the like). How can I exclude these from the sitemap?</p>\n						\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"NBH707\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:67:\"https://wordpress.org/support/plugin/google-sitemap-generator/feed/\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";O:42:\"Requests_Utility_CaseInsensitiveDictionary\":1:{s:7:\"\0*\0data\";a:8:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Tue, 11 Jan 2022 10:35:35 GMT\";s:12:\"content-type\";s:34:\"application/rss+xml; charset=UTF-8\";s:25:\"strict-transport-security\";s:11:\"max-age=360\";s:6:\"x-olaf\";s:3:\"⛄\";s:12:\"x-robots-tag\";s:15:\"noindex, follow\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";s:4:\"x-nc\";s:9:\"HIT ord 2\";}}s:5:\"build\";s:14:\"20201209111631\";}','no'),(162756,'_transient_timeout_feed_mod_d21d2a68bac70d38fb7f9a7bd3d1725e','1642502135','no'),(162757,'_transient_feed_mod_d21d2a68bac70d38fb7f9a7bd3d1725e','1641897335','no'),(162806,'_site_transient_timeout_theme_roots','1641936648','no'),(162807,'_site_transient_theme_roots','a:11:{s:11:\"hoary-child\";s:7:\"/themes\";s:5:\"hoary\";s:7:\"/themes\";s:17:\"simplicity2-child\";s:7:\"/themes\";s:11:\"simplicity2\";s:7:\"/themes\";s:14:\"twentynineteen\";s:7:\"/themes\";s:15:\"twentyseventeen\";s:7:\"/themes\";s:13:\"twentysixteen\";s:7:\"/themes\";s:12:\"twentytwenty\";s:7:\"/themes\";s:15:\"twentytwentyone\";s:7:\"/themes\";s:23:\"understrap-child-master\";s:7:\"/themes\";s:17:\"understrap-master\";s:7:\"/themes\";}','no'),(162810,'_site_transient_update_core','O:8:\"stdClass\":4:{s:7:\"updates\";a:5:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:62:\"https://downloads.wordpress.org/release/ja/wordpress-5.8.3.zip\";s:6:\"locale\";s:2:\"ja\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:62:\"https://downloads.wordpress.org/release/ja/wordpress-5.8.3.zip\";s:10:\"no_content\";s:0:\"\";s:11:\"new_bundled\";s:0:\"\";s:7:\"partial\";s:0:\"\";s:8:\"rollback\";s:0:\"\";}s:7:\"current\";s:5:\"5.8.3\";s:7:\"version\";s:5:\"5.8.3\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.6\";s:15:\"partial_version\";s:0:\"\";}i:1;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.8.3.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.8.3.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-5.8.3-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.8.3-new-bundled.zip\";s:7:\"partial\";s:0:\"\";s:8:\"rollback\";s:0:\"\";}s:7:\"current\";s:5:\"5.8.3\";s:7:\"version\";s:5:\"5.8.3\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.6\";s:15:\"partial_version\";s:0:\"\";}i:2;O:8:\"stdClass\":11:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:62:\"https://downloads.wordpress.org/release/ja/wordpress-5.8.3.zip\";s:6:\"locale\";s:2:\"ja\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:62:\"https://downloads.wordpress.org/release/ja/wordpress-5.8.3.zip\";s:10:\"no_content\";s:0:\"\";s:11:\"new_bundled\";s:0:\"\";s:7:\"partial\";s:0:\"\";s:8:\"rollback\";s:0:\"\";}s:7:\"current\";s:5:\"5.8.3\";s:7:\"version\";s:5:\"5.8.3\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.6\";s:15:\"partial_version\";s:0:\"\";s:9:\"new_files\";s:1:\"1\";}i:3;O:8:\"stdClass\":11:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:62:\"https://downloads.wordpress.org/release/ja/wordpress-5.7.5.zip\";s:6:\"locale\";s:2:\"ja\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:62:\"https://downloads.wordpress.org/release/ja/wordpress-5.7.5.zip\";s:10:\"no_content\";s:0:\"\";s:11:\"new_bundled\";s:0:\"\";s:7:\"partial\";s:0:\"\";s:8:\"rollback\";s:0:\"\";}s:7:\"current\";s:5:\"5.7.5\";s:7:\"version\";s:5:\"5.7.5\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.6\";s:15:\"partial_version\";s:0:\"\";s:9:\"new_files\";s:1:\"1\";}i:4;O:8:\"stdClass\":11:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:62:\"https://downloads.wordpress.org/release/ja/wordpress-5.6.7.zip\";s:6:\"locale\";s:2:\"ja\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:62:\"https://downloads.wordpress.org/release/ja/wordpress-5.6.7.zip\";s:10:\"no_content\";s:0:\"\";s:11:\"new_bundled\";s:0:\"\";s:7:\"partial\";s:0:\"\";s:8:\"rollback\";s:0:\"\";}s:7:\"current\";s:5:\"5.6.7\";s:7:\"version\";s:5:\"5.6.7\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.6\";s:15:\"partial_version\";s:0:\"\";s:9:\"new_files\";s:1:\"1\";}}s:12:\"last_checked\";i:1641934852;s:15:\"version_checked\";s:3:\"5.6\";s:12:\"translations\";a:1:{i:0;a:7:{s:4:\"type\";s:4:\"core\";s:4:\"slug\";s:7:\"default\";s:8:\"language\";s:2:\"ja\";s:7:\"version\";s:3:\"5.6\";s:7:\"updated\";s:19:\"2021-01-31 01:17:57\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/5.6/ja.zip\";s:10:\"autoupdate\";b:1;}}}','no'),(162811,'_site_transient_update_themes','O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1641934853;s:7:\"checked\";a:11:{s:11:\"hoary-child\";s:3:\"1.0\";s:5:\"hoary\";s:5:\"1.2.1\";s:17:\"simplicity2-child\";s:8:\"20161002\";s:11:\"simplicity2\";s:5:\"2.7.7\";s:14:\"twentynineteen\";s:3:\"1.4\";s:15:\"twentyseventeen\";s:3:\"2.2\";s:13:\"twentysixteen\";s:3:\"2.0\";s:12:\"twentytwenty\";s:3:\"1.1\";s:15:\"twentytwentyone\";s:3:\"1.0\";s:23:\"understrap-child-master\";s:5:\"0.5.5\";s:17:\"understrap-master\";s:5:\"0.9.3\";}s:8:\"response\";a:5:{s:14:\"twentynineteen\";a:6:{s:5:\"theme\";s:14:\"twentynineteen\";s:11:\"new_version\";s:3:\"2.1\";s:3:\"url\";s:44:\"https://wordpress.org/themes/twentynineteen/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/theme/twentynineteen.2.1.zip\";s:8:\"requires\";s:5:\"4.9.6\";s:12:\"requires_php\";s:5:\"5.2.4\";}s:15:\"twentyseventeen\";a:6:{s:5:\"theme\";s:15:\"twentyseventeen\";s:11:\"new_version\";s:3:\"2.8\";s:3:\"url\";s:45:\"https://wordpress.org/themes/twentyseventeen/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/theme/twentyseventeen.2.8.zip\";s:8:\"requires\";s:3:\"4.7\";s:12:\"requires_php\";s:5:\"5.2.4\";}s:13:\"twentysixteen\";a:6:{s:5:\"theme\";s:13:\"twentysixteen\";s:11:\"new_version\";s:3:\"2.5\";s:3:\"url\";s:43:\"https://wordpress.org/themes/twentysixteen/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/theme/twentysixteen.2.5.zip\";s:8:\"requires\";s:3:\"4.4\";s:12:\"requires_php\";s:5:\"5.2.4\";}s:12:\"twentytwenty\";a:6:{s:5:\"theme\";s:12:\"twentytwenty\";s:11:\"new_version\";s:3:\"1.8\";s:3:\"url\";s:42:\"https://wordpress.org/themes/twentytwenty/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/theme/twentytwenty.1.8.zip\";s:8:\"requires\";s:3:\"4.7\";s:12:\"requires_php\";s:5:\"5.2.4\";}s:15:\"twentytwentyone\";a:6:{s:5:\"theme\";s:15:\"twentytwentyone\";s:11:\"new_version\";s:3:\"1.4\";s:3:\"url\";s:45:\"https://wordpress.org/themes/twentytwentyone/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/theme/twentytwentyone.1.4.zip\";s:8:\"requires\";s:3:\"5.3\";s:12:\"requires_php\";s:3:\"5.6\";}}s:9:\"no_update\";a:0:{}s:12:\"translations\";a:1:{i:0;a:7:{s:4:\"type\";s:5:\"theme\";s:4:\"slug\";s:15:\"twentytwentyone\";s:8:\"language\";s:2:\"ja\";s:7:\"version\";s:3:\"1.0\";s:7:\"updated\";s:19:\"2021-03-11 02:03:13\";s:7:\"package\";s:76:\"https://downloads.wordpress.org/translation/theme/twentytwentyone/1.0/ja.zip\";s:10:\"autoupdate\";b:1;}}}','no'),(162812,'_site_transient_update_plugins','O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1641934855;s:7:\"checked\";a:33:{s:19:\"akismet/akismet.php\";s:5:\"4.1.7\";s:51:\"all-in-one-wp-migration/all-in-one-wp-migration.php\";s:4:\"7.31\";s:21:\"backwpup/backwpup.php\";s:5:\"3.8.0\";s:37:\"breadcrumb-navxt/breadcrumb-navxt.php\";s:5:\"6.6.0\";s:45:\"taxonomy-terms-order/taxonomy-terms-order.php\";s:7:\"1.5.7.3\";s:60:\"category-specific-rss-feed-menu/category-specific-rss-wp.php\";s:4:\"v2.1\";s:33:\"classic-editor/classic-editor.php\";s:3:\"1.6\";s:36:\"contact-form-7/wp-contact-form-7.php\";s:5:\"5.1.7\";s:53:\"contact-form-7-add-confirm/contact-form-7-confirm.php\";s:3:\"5.1\";s:33:\"contact-form-7-modules/hidden.php\";s:5:\"2.0.2\";s:42:\"contact-form-7-modules/send-all-fields.php\";s:5:\"2.0.2\";s:59:\"custom-post-type-permalinks/custom-post-type-permalinks.php\";s:5:\"3.4.3\";s:53:\"custom-post-type-rewrite/custom-post-type-rewrite.php\";s:5:\"1.0.4\";s:43:\"custom-post-type-ui/custom-post-type-ui.php\";s:5:\"1.7.4\";s:53:\"custom-post-type-widgets/custom-post-type-widgets.php\";s:5:\"1.3.0\";s:31:\"feedwordpress/feedwordpress.php\";s:9:\"2020.0818\";s:36:\"feedzy-rss-feeds/feedzy-rss-feed.php\";s:5:\"3.5.1\";s:36:\"google-sitemap-generator/sitemap.php\";s:5:\"4.1.1\";s:9:\"hello.php\";s:5:\"1.7.2\";s:59:\"intuitive-custom-post-order/intuitive-custom-post-order.php\";s:5:\"3.1.2\";s:35:\"markdown-editor/markdown-editor.php\";s:5:\"0.1.7\";s:39:\"permalink-manager/permalink-manager.php\";s:7:\"2.2.9.2\";s:27:\"popup-maker/popup-maker.php\";s:6:\"1.13.1\";s:37:\"recent-posts-widget-extended/rpwe.php\";s:7:\"0.9.9.7\";s:55:\"remove-taxonomy-base-slug/remove-taxonomy-base-slug.php\";s:3:\"2.1\";s:27:\"rss-antenna/rss-antenna.php\";s:5:\"2.2.0\";s:27:\"rss-post-importer/index.php\";s:5:\"2.5.2\";s:33:\"search-exclude/search-exclude.php\";s:5:\"1.2.6\";s:25:\"widget-shortcode/init.php\";s:5:\"0.3.5\";s:30:\"wp-githuber-md/githuber-md.php\";s:6:\"1.15.2\";s:29:\"wp-mail-smtp/wp_mail_smtp.php\";s:5:\"2.5.1\";s:53:\"wp-recaptcha-integration/wp-recaptcha-integration.php\";s:5:\"1.2.4\";s:39:\"wp-rss-aggregator/wp-rss-aggregator.php\";s:7:\"4.17.10\";}s:8:\"response\";a:19:{s:19:\"akismet/akismet.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:21:\"w.org/plugins/akismet\";s:4:\"slug\";s:7:\"akismet\";s:6:\"plugin\";s:19:\"akismet/akismet.php\";s:11:\"new_version\";s:5:\"4.2.1\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/akismet/\";s:7:\"package\";s:56:\"https://downloads.wordpress.org/plugin/akismet.4.2.1.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:59:\"https://ps.w.org/akismet/assets/icon-256x256.png?rev=969272\";s:2:\"1x\";s:59:\"https://ps.w.org/akismet/assets/icon-128x128.png?rev=969272\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:61:\"https://ps.w.org/akismet/assets/banner-772x250.jpg?rev=479904\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"5.0\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:51:\"all-in-one-wp-migration/all-in-one-wp-migration.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:37:\"w.org/plugins/all-in-one-wp-migration\";s:4:\"slug\";s:23:\"all-in-one-wp-migration\";s:6:\"plugin\";s:51:\"all-in-one-wp-migration/all-in-one-wp-migration.php\";s:11:\"new_version\";s:4:\"7.52\";s:3:\"url\";s:54:\"https://wordpress.org/plugins/all-in-one-wp-migration/\";s:7:\"package\";s:71:\"https://downloads.wordpress.org/plugin/all-in-one-wp-migration.7.52.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:76:\"https://ps.w.org/all-in-one-wp-migration/assets/icon-256x256.png?rev=2458334\";s:2:\"1x\";s:76:\"https://ps.w.org/all-in-one-wp-migration/assets/icon-128x128.png?rev=2458334\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:79:\"https://ps.w.org/all-in-one-wp-migration/assets/banner-1544x500.png?rev=2648792\";s:2:\"1x\";s:78:\"https://ps.w.org/all-in-one-wp-migration/assets/banner-772x250.png?rev=2648792\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"3.3\";s:6:\"tested\";s:3:\"5.9\";s:12:\"requires_php\";s:6:\"5.2.17\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:21:\"backwpup/backwpup.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:22:\"w.org/plugins/backwpup\";s:4:\"slug\";s:8:\"backwpup\";s:6:\"plugin\";s:21:\"backwpup/backwpup.php\";s:11:\"new_version\";s:6:\"3.10.0\";s:3:\"url\";s:39:\"https://wordpress.org/plugins/backwpup/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/backwpup.3.10.0.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:61:\"https://ps.w.org/backwpup/assets/icon-256x256.png?rev=1422084\";s:2:\"1x\";s:61:\"https://ps.w.org/backwpup/assets/icon-128x128.png?rev=1422084\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:64:\"https://ps.w.org/backwpup/assets/banner-1544x500.png?rev=2639960\";s:2:\"1x\";s:63:\"https://ps.w.org/backwpup/assets/banner-772x250.png?rev=2639960\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"3.9\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";s:3:\"5.6\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:37:\"breadcrumb-navxt/breadcrumb-navxt.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:30:\"w.org/plugins/breadcrumb-navxt\";s:4:\"slug\";s:16:\"breadcrumb-navxt\";s:6:\"plugin\";s:37:\"breadcrumb-navxt/breadcrumb-navxt.php\";s:11:\"new_version\";s:5:\"7.0.2\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/breadcrumb-navxt/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/breadcrumb-navxt.7.0.2.zip\";s:5:\"icons\";a:3:{s:2:\"2x\";s:69:\"https://ps.w.org/breadcrumb-navxt/assets/icon-256x256.png?rev=2410525\";s:2:\"1x\";s:61:\"https://ps.w.org/breadcrumb-navxt/assets/icon.svg?rev=1927103\";s:3:\"svg\";s:61:\"https://ps.w.org/breadcrumb-navxt/assets/icon.svg?rev=1927103\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:72:\"https://ps.w.org/breadcrumb-navxt/assets/banner-1544x500.png?rev=1927103\";s:2:\"1x\";s:71:\"https://ps.w.org/breadcrumb-navxt/assets/banner-772x250.png?rev=1927103\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.9\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";s:3:\"7.0\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:45:\"taxonomy-terms-order/taxonomy-terms-order.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:34:\"w.org/plugins/taxonomy-terms-order\";s:4:\"slug\";s:20:\"taxonomy-terms-order\";s:6:\"plugin\";s:45:\"taxonomy-terms-order/taxonomy-terms-order.php\";s:11:\"new_version\";s:5:\"1.5.9\";s:3:\"url\";s:51:\"https://wordpress.org/plugins/taxonomy-terms-order/\";s:7:\"package\";s:69:\"https://downloads.wordpress.org/plugin/taxonomy-terms-order.1.5.9.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:73:\"https://ps.w.org/taxonomy-terms-order/assets/icon-256x256.png?rev=1564412\";s:2:\"1x\";s:73:\"https://ps.w.org/taxonomy-terms-order/assets/icon-128x128.png?rev=1564412\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:76:\"https://ps.w.org/taxonomy-terms-order/assets/banner-1544x500.png?rev=1564412\";s:2:\"1x\";s:75:\"https://ps.w.org/taxonomy-terms-order/assets/banner-772x250.png?rev=1564412\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"2.8\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:33:\"classic-editor/classic-editor.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:28:\"w.org/plugins/classic-editor\";s:4:\"slug\";s:14:\"classic-editor\";s:6:\"plugin\";s:33:\"classic-editor/classic-editor.php\";s:11:\"new_version\";s:5:\"1.6.2\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/classic-editor/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/classic-editor.1.6.2.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:67:\"https://ps.w.org/classic-editor/assets/icon-256x256.png?rev=1998671\";s:2:\"1x\";s:67:\"https://ps.w.org/classic-editor/assets/icon-128x128.png?rev=1998671\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:70:\"https://ps.w.org/classic-editor/assets/banner-1544x500.png?rev=1998671\";s:2:\"1x\";s:69:\"https://ps.w.org/classic-editor/assets/banner-772x250.png?rev=1998676\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.9\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";s:5:\"5.2.4\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:59:\"custom-post-type-permalinks/custom-post-type-permalinks.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:41:\"w.org/plugins/custom-post-type-permalinks\";s:4:\"slug\";s:27:\"custom-post-type-permalinks\";s:6:\"plugin\";s:59:\"custom-post-type-permalinks/custom-post-type-permalinks.php\";s:11:\"new_version\";s:5:\"3.4.5\";s:3:\"url\";s:58:\"https://wordpress.org/plugins/custom-post-type-permalinks/\";s:7:\"package\";s:76:\"https://downloads.wordpress.org/plugin/custom-post-type-permalinks.3.4.5.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:80:\"https://ps.w.org/custom-post-type-permalinks/assets/icon-256x256.png?rev=1044337\";s:2:\"1x\";s:80:\"https://ps.w.org/custom-post-type-permalinks/assets/icon-128x128.png?rev=1044337\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:83:\"https://ps.w.org/custom-post-type-permalinks/assets/banner-1544x500.png?rev=1044335\";s:2:\"1x\";s:81:\"https://ps.w.org/custom-post-type-permalinks/assets/banner-772x250.png?rev=785437\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.7\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";s:3:\"5.6\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:53:\"custom-post-type-rewrite/custom-post-type-rewrite.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:38:\"w.org/plugins/custom-post-type-rewrite\";s:4:\"slug\";s:24:\"custom-post-type-rewrite\";s:6:\"plugin\";s:53:\"custom-post-type-rewrite/custom-post-type-rewrite.php\";s:11:\"new_version\";s:5:\"1.1.1\";s:3:\"url\";s:55:\"https://wordpress.org/plugins/custom-post-type-rewrite/\";s:7:\"package\";s:73:\"https://downloads.wordpress.org/plugin/custom-post-type-rewrite.1.1.1.zip\";s:5:\"icons\";a:1:{s:7:\"default\";s:68:\"https://s.w.org/plugins/geopattern-icon/custom-post-type-rewrite.svg\";}s:7:\"banners\";a:0:{}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"3.8\";s:6:\"tested\";s:5:\"5.8.0\";s:12:\"requires_php\";s:3:\"5.4\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:43:\"custom-post-type-ui/custom-post-type-ui.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:33:\"w.org/plugins/custom-post-type-ui\";s:4:\"slug\";s:19:\"custom-post-type-ui\";s:6:\"plugin\";s:43:\"custom-post-type-ui/custom-post-type-ui.php\";s:11:\"new_version\";s:6:\"1.10.1\";s:3:\"url\";s:50:\"https://wordpress.org/plugins/custom-post-type-ui/\";s:7:\"package\";s:69:\"https://downloads.wordpress.org/plugin/custom-post-type-ui.1.10.1.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:72:\"https://ps.w.org/custom-post-type-ui/assets/icon-256x256.png?rev=2549362\";s:2:\"1x\";s:72:\"https://ps.w.org/custom-post-type-ui/assets/icon-128x128.png?rev=2549362\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:75:\"https://ps.w.org/custom-post-type-ui/assets/banner-1544x500.png?rev=2549362\";s:2:\"1x\";s:74:\"https://ps.w.org/custom-post-type-ui/assets/banner-772x250.png?rev=2549362\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"5.5\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";s:3:\"5.6\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:53:\"custom-post-type-widgets/custom-post-type-widgets.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:38:\"w.org/plugins/custom-post-type-widgets\";s:4:\"slug\";s:24:\"custom-post-type-widgets\";s:6:\"plugin\";s:53:\"custom-post-type-widgets/custom-post-type-widgets.php\";s:11:\"new_version\";s:5:\"1.4.0\";s:3:\"url\";s:55:\"https://wordpress.org/plugins/custom-post-type-widgets/\";s:7:\"package\";s:73:\"https://downloads.wordpress.org/plugin/custom-post-type-widgets.1.4.0.zip\";s:5:\"icons\";a:1:{s:7:\"default\";s:68:\"https://s.w.org/plugins/geopattern-icon/custom-post-type-widgets.svg\";}s:7:\"banners\";a:0:{}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.0\";s:6:\"tested\";s:5:\"5.8.0\";s:12:\"requires_php\";s:3:\"5.4\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:31:\"feedwordpress/feedwordpress.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:27:\"w.org/plugins/feedwordpress\";s:4:\"slug\";s:13:\"feedwordpress\";s:6:\"plugin\";s:31:\"feedwordpress/feedwordpress.php\";s:11:\"new_version\";s:9:\"2021.0713\";s:3:\"url\";s:44:\"https://wordpress.org/plugins/feedwordpress/\";s:7:\"package\";s:66:\"https://downloads.wordpress.org/plugin/feedwordpress.2021.0713.zip\";s:5:\"icons\";a:1:{s:7:\"default\";s:64:\"https://s.w.org/plugins/geopattern-icon/feedwordpress_a6a79a.svg\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:68:\"https://ps.w.org/feedwordpress/assets/banner-772x250.jpg?rev=1413333\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.5\";s:6:\"tested\";s:5:\"5.7.5\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:36:\"feedzy-rss-feeds/feedzy-rss-feed.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:30:\"w.org/plugins/feedzy-rss-feeds\";s:4:\"slug\";s:16:\"feedzy-rss-feeds\";s:6:\"plugin\";s:36:\"feedzy-rss-feeds/feedzy-rss-feed.php\";s:11:\"new_version\";s:5:\"3.8.1\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/feedzy-rss-feeds/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/plugin/feedzy-rss-feeds.zip\";s:5:\"icons\";a:2:{s:2:\"1x\";s:61:\"https://ps.w.org/feedzy-rss-feeds/assets/icon.svg?rev=2089818\";s:3:\"svg\";s:61:\"https://ps.w.org/feedzy-rss-feeds/assets/icon.svg?rev=2089818\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:71:\"https://ps.w.org/feedzy-rss-feeds/assets/banner-772x250.png?rev=2089818\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"3.7\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";s:3:\"5.6\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:59:\"intuitive-custom-post-order/intuitive-custom-post-order.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:41:\"w.org/plugins/intuitive-custom-post-order\";s:4:\"slug\";s:27:\"intuitive-custom-post-order\";s:6:\"plugin\";s:59:\"intuitive-custom-post-order/intuitive-custom-post-order.php\";s:11:\"new_version\";s:5:\"3.1.3\";s:3:\"url\";s:58:\"https://wordpress.org/plugins/intuitive-custom-post-order/\";s:7:\"package\";s:76:\"https://downloads.wordpress.org/plugin/intuitive-custom-post-order.3.1.3.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:80:\"https://ps.w.org/intuitive-custom-post-order/assets/icon-256x256.png?rev=1078797\";s:2:\"1x\";s:80:\"https://ps.w.org/intuitive-custom-post-order/assets/icon-128x128.png?rev=1078797\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:83:\"https://ps.w.org/intuitive-custom-post-order/assets/banner-1544x500.png?rev=1209666\";s:2:\"1x\";s:82:\"https://ps.w.org/intuitive-custom-post-order/assets/banner-772x250.png?rev=1078755\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:5:\"3.5.0\";s:6:\"tested\";s:5:\"5.5.8\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:39:\"permalink-manager/permalink-manager.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:31:\"w.org/plugins/permalink-manager\";s:4:\"slug\";s:17:\"permalink-manager\";s:6:\"plugin\";s:39:\"permalink-manager/permalink-manager.php\";s:11:\"new_version\";s:6:\"2.2.14\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/permalink-manager/\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/plugin/permalink-manager.2.2.14.zip\";s:5:\"icons\";a:3:{s:2:\"2x\";s:70:\"https://ps.w.org/permalink-manager/assets/icon-256x256.png?rev=2625166\";s:2:\"1x\";s:62:\"https://ps.w.org/permalink-manager/assets/icon.svg?rev=2625166\";s:3:\"svg\";s:62:\"https://ps.w.org/permalink-manager/assets/icon.svg?rev=2625166\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:73:\"https://ps.w.org/permalink-manager/assets/banner-1544x500.png?rev=2625164\";s:2:\"1x\";s:72:\"https://ps.w.org/permalink-manager/assets/banner-772x250.png?rev=2625164\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:5:\"4.4.0\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";s:3:\"5.4\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:27:\"popup-maker/popup-maker.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:25:\"w.org/plugins/popup-maker\";s:4:\"slug\";s:11:\"popup-maker\";s:6:\"plugin\";s:27:\"popup-maker/popup-maker.php\";s:11:\"new_version\";s:6:\"1.16.3\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/popup-maker/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/plugin/popup-maker.1.16.3.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:64:\"https://ps.w.org/popup-maker/assets/icon-256x256.jpg?rev=2045655\";s:2:\"1x\";s:64:\"https://ps.w.org/popup-maker/assets/icon-128x128.jpg?rev=2045655\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:67:\"https://ps.w.org/popup-maker/assets/banner-1544x500.jpg?rev=2045655\";s:2:\"1x\";s:66:\"https://ps.w.org/popup-maker/assets/banner-772x250.jpg?rev=2045655\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.9\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";s:3:\"5.6\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:30:\"wp-githuber-md/githuber-md.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:28:\"w.org/plugins/wp-githuber-md\";s:4:\"slug\";s:14:\"wp-githuber-md\";s:6:\"plugin\";s:30:\"wp-githuber-md/githuber-md.php\";s:11:\"new_version\";s:6:\"1.16.1\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/wp-githuber-md/\";s:7:\"package\";s:57:\"https://downloads.wordpress.org/plugin/wp-githuber-md.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:67:\"https://ps.w.org/wp-githuber-md/assets/icon-256x256.png?rev=2194656\";s:2:\"1x\";s:67:\"https://ps.w.org/wp-githuber-md/assets/icon-256x256.png?rev=2194656\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:69:\"https://ps.w.org/wp-githuber-md/assets/banner-772x250.png?rev=2045452\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.0\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";s:5:\"5.3.0\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:29:\"wp-mail-smtp/wp_mail_smtp.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:26:\"w.org/plugins/wp-mail-smtp\";s:4:\"slug\";s:12:\"wp-mail-smtp\";s:6:\"plugin\";s:29:\"wp-mail-smtp/wp_mail_smtp.php\";s:11:\"new_version\";s:5:\"3.2.1\";s:3:\"url\";s:43:\"https://wordpress.org/plugins/wp-mail-smtp/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/plugin/wp-mail-smtp.3.2.1.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:65:\"https://ps.w.org/wp-mail-smtp/assets/icon-256x256.png?rev=1755440\";s:2:\"1x\";s:65:\"https://ps.w.org/wp-mail-smtp/assets/icon-128x128.png?rev=1755440\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:68:\"https://ps.w.org/wp-mail-smtp/assets/banner-1544x500.png?rev=2468655\";s:2:\"1x\";s:67:\"https://ps.w.org/wp-mail-smtp/assets/banner-772x250.png?rev=2468655\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.9\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";s:6:\"5.6.20\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:53:\"wp-recaptcha-integration/wp-recaptcha-integration.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:38:\"w.org/plugins/wp-recaptcha-integration\";s:4:\"slug\";s:24:\"wp-recaptcha-integration\";s:6:\"plugin\";s:53:\"wp-recaptcha-integration/wp-recaptcha-integration.php\";s:11:\"new_version\";s:5:\"1.2.5\";s:3:\"url\";s:55:\"https://wordpress.org/plugins/wp-recaptcha-integration/\";s:7:\"package\";s:73:\"https://downloads.wordpress.org/plugin/wp-recaptcha-integration.1.2.5.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:77:\"https://ps.w.org/wp-recaptcha-integration/assets/icon-256x256.png?rev=2337056\";s:2:\"1x\";s:77:\"https://ps.w.org/wp-recaptcha-integration/assets/icon-128x128.png?rev=2337056\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:80:\"https://ps.w.org/wp-recaptcha-integration/assets/banner-1544x500.png?rev=2337056\";s:2:\"1x\";s:79:\"https://ps.w.org/wp-recaptcha-integration/assets/banner-772x250.png?rev=2337056\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"3.8\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";s:3:\"5.4\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:39:\"wp-rss-aggregator/wp-rss-aggregator.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:31:\"w.org/plugins/wp-rss-aggregator\";s:4:\"slug\";s:17:\"wp-rss-aggregator\";s:6:\"plugin\";s:39:\"wp-rss-aggregator/wp-rss-aggregator.php\";s:11:\"new_version\";s:6:\"4.19.3\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/wp-rss-aggregator/\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/plugin/wp-rss-aggregator.4.19.3.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:70:\"https://ps.w.org/wp-rss-aggregator/assets/icon-256x256.png?rev=1823609\";s:2:\"1x\";s:70:\"https://ps.w.org/wp-rss-aggregator/assets/icon-128x128.png?rev=1823609\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:73:\"https://ps.w.org/wp-rss-aggregator/assets/banner-1544x500.png?rev=2040548\";s:2:\"1x\";s:72:\"https://ps.w.org/wp-rss-aggregator/assets/banner-772x250.png?rev=2210123\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.0\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";s:3:\"5.4\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}}s:12:\"translations\";a:7:{i:0;a:7:{s:4:\"type\";s:6:\"plugin\";s:4:\"slug\";s:23:\"all-in-one-wp-migration\";s:8:\"language\";s:2:\"ja\";s:7:\"version\";s:4:\"7.31\";s:7:\"updated\";s:19:\"2020-10-09 00:44:40\";s:7:\"package\";s:86:\"https://downloads.wordpress.org/translation/plugin/all-in-one-wp-migration/7.31/ja.zip\";s:10:\"autoupdate\";b:1;}i:1;a:7:{s:4:\"type\";s:6:\"plugin\";s:4:\"slug\";s:8:\"backwpup\";s:8:\"language\";s:2:\"ja\";s:7:\"version\";s:5:\"3.8.0\";s:7:\"updated\";s:19:\"2020-09-23 15:22:57\";s:7:\"package\";s:72:\"https://downloads.wordpress.org/translation/plugin/backwpup/3.8.0/ja.zip\";s:10:\"autoupdate\";b:1;}i:2;a:7:{s:4:\"type\";s:6:\"plugin\";s:4:\"slug\";s:16:\"breadcrumb-navxt\";s:8:\"language\";s:2:\"ja\";s:7:\"version\";s:5:\"6.6.0\";s:7:\"updated\";s:19:\"2019-07-17 14:58:35\";s:7:\"package\";s:80:\"https://downloads.wordpress.org/translation/plugin/breadcrumb-navxt/6.6.0/ja.zip\";s:10:\"autoupdate\";b:1;}i:3;a:7:{s:4:\"type\";s:6:\"plugin\";s:4:\"slug\";s:14:\"classic-editor\";s:8:\"language\";s:2:\"ja\";s:7:\"version\";s:3:\"1.6\";s:7:\"updated\";s:19:\"2020-08-13 02:19:33\";s:7:\"package\";s:76:\"https://downloads.wordpress.org/translation/plugin/classic-editor/1.6/ja.zip\";s:10:\"autoupdate\";b:1;}i:4;a:7:{s:4:\"type\";s:6:\"plugin\";s:4:\"slug\";s:11:\"hello-dolly\";s:8:\"language\";s:2:\"ja\";s:7:\"version\";s:5:\"1.7.2\";s:7:\"updated\";s:19:\"2020-10-30 07:03:00\";s:7:\"package\";s:75:\"https://downloads.wordpress.org/translation/plugin/hello-dolly/1.7.2/ja.zip\";s:10:\"autoupdate\";b:1;}i:5;a:7:{s:4:\"type\";s:6:\"plugin\";s:4:\"slug\";s:27:\"intuitive-custom-post-order\";s:8:\"language\";s:2:\"ja\";s:7:\"version\";s:5:\"3.1.2\";s:7:\"updated\";s:19:\"2020-04-13 14:51:18\";s:7:\"package\";s:91:\"https://downloads.wordpress.org/translation/plugin/intuitive-custom-post-order/3.1.2/ja.zip\";s:10:\"autoupdate\";b:1;}i:6;a:7:{s:4:\"type\";s:6:\"plugin\";s:4:\"slug\";s:12:\"wp-mail-smtp\";s:8:\"language\";s:2:\"ja\";s:7:\"version\";s:5:\"2.5.1\";s:7:\"updated\";s:19:\"2020-10-26 21:59:53\";s:7:\"package\";s:76:\"https://downloads.wordpress.org/translation/plugin/wp-mail-smtp/2.5.1/ja.zip\";s:10:\"autoupdate\";b:1;}}s:9:\"no_update\";a:13:{s:60:\"category-specific-rss-feed-menu/category-specific-rss-wp.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:45:\"w.org/plugins/category-specific-rss-feed-menu\";s:4:\"slug\";s:31:\"category-specific-rss-feed-menu\";s:6:\"plugin\";s:60:\"category-specific-rss-feed-menu/category-specific-rss-wp.php\";s:11:\"new_version\";s:4:\"v2.1\";s:3:\"url\";s:62:\"https://wordpress.org/plugins/category-specific-rss-feed-menu/\";s:7:\"package\";s:74:\"https://downloads.wordpress.org/plugin/category-specific-rss-feed-menu.zip\";s:5:\"icons\";a:1:{s:2:\"1x\";s:84:\"https://ps.w.org/category-specific-rss-feed-menu/assets/icon-128x128.png?rev=1209670\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:85:\"https://ps.w.org/category-specific-rss-feed-menu/assets/banner-772x250.jpg?rev=815256\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"3.0\";}s:36:\"contact-form-7/wp-contact-form-7.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:28:\"w.org/plugins/contact-form-7\";s:4:\"slug\";s:14:\"contact-form-7\";s:6:\"plugin\";s:36:\"contact-form-7/wp-contact-form-7.php\";s:11:\"new_version\";s:5:\"5.5.3\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/contact-form-7/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/contact-form-7.5.5.3.zip\";s:5:\"icons\";a:3:{s:2:\"2x\";s:67:\"https://ps.w.org/contact-form-7/assets/icon-256x256.png?rev=2279696\";s:2:\"1x\";s:59:\"https://ps.w.org/contact-form-7/assets/icon.svg?rev=2339255\";s:3:\"svg\";s:59:\"https://ps.w.org/contact-form-7/assets/icon.svg?rev=2339255\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:69:\"https://ps.w.org/contact-form-7/assets/banner-1544x500.png?rev=860901\";s:2:\"1x\";s:68:\"https://ps.w.org/contact-form-7/assets/banner-772x250.png?rev=880427\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"5.7\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";a:0:{}}s:53:\"contact-form-7-add-confirm/contact-form-7-confirm.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:40:\"w.org/plugins/contact-form-7-add-confirm\";s:4:\"slug\";s:26:\"contact-form-7-add-confirm\";s:6:\"plugin\";s:53:\"contact-form-7-add-confirm/contact-form-7-confirm.php\";s:11:\"new_version\";s:3:\"5.1\";s:3:\"url\";s:57:\"https://wordpress.org/plugins/contact-form-7-add-confirm/\";s:7:\"package\";s:73:\"https://downloads.wordpress.org/plugin/contact-form-7-add-confirm.5.1.zip\";s:5:\"icons\";a:1:{s:7:\"default\";s:70:\"https://s.w.org/plugins/geopattern-icon/contact-form-7-add-confirm.svg\";}s:7:\"banners\";a:0:{}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"3.8\";}s:33:\"contact-form-7-modules/hidden.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:36:\"w.org/plugins/contact-form-7-modules\";s:4:\"slug\";s:22:\"contact-form-7-modules\";s:6:\"plugin\";s:33:\"contact-form-7-modules/hidden.php\";s:11:\"new_version\";s:5:\"2.0.2\";s:3:\"url\";s:53:\"https://wordpress.org/plugins/contact-form-7-modules/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/contact-form-7-modules.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:75:\"https://ps.w.org/contact-form-7-modules/assets/icon-256x256.jpg?rev=1586889\";s:2:\"1x\";s:75:\"https://ps.w.org/contact-form-7-modules/assets/icon-128x128.jpg?rev=1586889\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:78:\"https://ps.w.org/contact-form-7-modules/assets/banner-1544x500.jpg?rev=1586889\";s:2:\"1x\";s:76:\"https://ps.w.org/contact-form-7-modules/assets/banner-772x250.jpg?rev=530361\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"2.8\";}s:42:\"contact-form-7-modules/send-all-fields.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:36:\"w.org/plugins/contact-form-7-modules\";s:4:\"slug\";s:22:\"contact-form-7-modules\";s:6:\"plugin\";s:42:\"contact-form-7-modules/send-all-fields.php\";s:11:\"new_version\";s:5:\"2.0.2\";s:3:\"url\";s:53:\"https://wordpress.org/plugins/contact-form-7-modules/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/contact-form-7-modules.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:75:\"https://ps.w.org/contact-form-7-modules/assets/icon-256x256.jpg?rev=1586889\";s:2:\"1x\";s:75:\"https://ps.w.org/contact-form-7-modules/assets/icon-128x128.jpg?rev=1586889\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:78:\"https://ps.w.org/contact-form-7-modules/assets/banner-1544x500.jpg?rev=1586889\";s:2:\"1x\";s:76:\"https://ps.w.org/contact-form-7-modules/assets/banner-772x250.jpg?rev=530361\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"2.8\";}s:36:\"google-sitemap-generator/sitemap.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:38:\"w.org/plugins/google-sitemap-generator\";s:4:\"slug\";s:24:\"google-sitemap-generator\";s:6:\"plugin\";s:36:\"google-sitemap-generator/sitemap.php\";s:11:\"new_version\";s:5:\"4.1.1\";s:3:\"url\";s:55:\"https://wordpress.org/plugins/google-sitemap-generator/\";s:7:\"package\";s:73:\"https://downloads.wordpress.org/plugin/google-sitemap-generator.4.1.1.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:77:\"https://ps.w.org/google-sitemap-generator/assets/icon-256x256.png?rev=1701944\";s:2:\"1x\";s:77:\"https://ps.w.org/google-sitemap-generator/assets/icon-128x128.png?rev=1701944\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:79:\"https://ps.w.org/google-sitemap-generator/assets/banner-772x250.png?rev=1701944\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"3.3\";}s:9:\"hello.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:25:\"w.org/plugins/hello-dolly\";s:4:\"slug\";s:11:\"hello-dolly\";s:6:\"plugin\";s:9:\"hello.php\";s:11:\"new_version\";s:5:\"1.7.2\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/hello-dolly/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/hello-dolly.1.7.2.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:64:\"https://ps.w.org/hello-dolly/assets/icon-256x256.jpg?rev=2052855\";s:2:\"1x\";s:64:\"https://ps.w.org/hello-dolly/assets/icon-128x128.jpg?rev=2052855\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:67:\"https://ps.w.org/hello-dolly/assets/banner-1544x500.jpg?rev=2645582\";s:2:\"1x\";s:66:\"https://ps.w.org/hello-dolly/assets/banner-772x250.jpg?rev=2052855\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.6\";}s:35:\"markdown-editor/markdown-editor.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:29:\"w.org/plugins/markdown-editor\";s:4:\"slug\";s:15:\"markdown-editor\";s:6:\"plugin\";s:35:\"markdown-editor/markdown-editor.php\";s:11:\"new_version\";s:5:\"0.1.7\";s:3:\"url\";s:46:\"https://wordpress.org/plugins/markdown-editor/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/markdown-editor.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:68:\"https://ps.w.org/markdown-editor/assets/icon-256x256.png?rev=1709072\";s:2:\"1x\";s:68:\"https://ps.w.org/markdown-editor/assets/icon-128x128.png?rev=1709072\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:71:\"https://ps.w.org/markdown-editor/assets/banner-1544x500.png?rev=1708852\";s:2:\"1x\";s:70:\"https://ps.w.org/markdown-editor/assets/banner-772x250.png?rev=1708852\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.8\";}s:37:\"recent-posts-widget-extended/rpwe.php\";O:8:\"stdClass\":13:{s:2:\"id\";s:42:\"w.org/plugins/recent-posts-widget-extended\";s:4:\"slug\";s:28:\"recent-posts-widget-extended\";s:6:\"plugin\";s:37:\"recent-posts-widget-extended/rpwe.php\";s:11:\"new_version\";s:5:\"1.1.0\";s:3:\"url\";s:59:\"https://wordpress.org/plugins/recent-posts-widget-extended/\";s:7:\"package\";s:77:\"https://downloads.wordpress.org/plugin/recent-posts-widget-extended.1.1.0.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:81:\"https://ps.w.org/recent-posts-widget-extended/assets/icon-256x256.png?rev=2619497\";s:2:\"1x\";s:81:\"https://ps.w.org/recent-posts-widget-extended/assets/icon-128x128.png?rev=2619497\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:84:\"https://ps.w.org/recent-posts-widget-extended/assets/banner-1544x500.png?rev=2619497\";s:2:\"1x\";s:83:\"https://ps.w.org/recent-posts-widget-extended/assets/banner-772x250.png?rev=2619497\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"5.8\";s:6:\"tested\";s:5:\"5.8.3\";s:12:\"requires_php\";s:3:\"7.2\";s:13:\"compatibility\";a:0:{}}s:55:\"remove-taxonomy-base-slug/remove-taxonomy-base-slug.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:39:\"w.org/plugins/remove-taxonomy-base-slug\";s:4:\"slug\";s:25:\"remove-taxonomy-base-slug\";s:6:\"plugin\";s:55:\"remove-taxonomy-base-slug/remove-taxonomy-base-slug.php\";s:11:\"new_version\";s:3:\"2.1\";s:3:\"url\";s:56:\"https://wordpress.org/plugins/remove-taxonomy-base-slug/\";s:7:\"package\";s:68:\"https://downloads.wordpress.org/plugin/remove-taxonomy-base-slug.zip\";s:5:\"icons\";a:1:{s:7:\"default\";s:69:\"https://s.w.org/plugins/geopattern-icon/remove-taxonomy-base-slug.svg\";}s:7:\"banners\";a:0:{}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"3.4\";}s:27:\"rss-antenna/rss-antenna.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:25:\"w.org/plugins/rss-antenna\";s:4:\"slug\";s:11:\"rss-antenna\";s:6:\"plugin\";s:27:\"rss-antenna/rss-antenna.php\";s:11:\"new_version\";s:5:\"2.2.0\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/rss-antenna/\";s:7:\"package\";s:54:\"https://downloads.wordpress.org/plugin/rss-antenna.zip\";s:5:\"icons\";a:1:{s:7:\"default\";s:55:\"https://s.w.org/plugins/geopattern-icon/rss-antenna.svg\";}s:7:\"banners\";a:0:{}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.0\";}s:33:\"search-exclude/search-exclude.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:28:\"w.org/plugins/search-exclude\";s:4:\"slug\";s:14:\"search-exclude\";s:6:\"plugin\";s:33:\"search-exclude/search-exclude.php\";s:11:\"new_version\";s:5:\"1.2.6\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/search-exclude/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/search-exclude.1.2.6.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:67:\"https://ps.w.org/search-exclude/assets/icon-256x256.png?rev=1385618\";s:2:\"1x\";s:67:\"https://ps.w.org/search-exclude/assets/icon-128x128.png?rev=1385618\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:70:\"https://ps.w.org/search-exclude/assets/banner-1544x500.jpg?rev=1084914\";s:2:\"1x\";s:69:\"https://ps.w.org/search-exclude/assets/banner-772x250.jpg?rev=1084914\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"3.3\";}s:25:\"widget-shortcode/init.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:30:\"w.org/plugins/widget-shortcode\";s:4:\"slug\";s:16:\"widget-shortcode\";s:6:\"plugin\";s:25:\"widget-shortcode/init.php\";s:11:\"new_version\";s:5:\"0.3.5\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/widget-shortcode/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/plugin/widget-shortcode.zip\";s:5:\"icons\";a:1:{s:7:\"default\";s:60:\"https://s.w.org/plugins/geopattern-icon/widget-shortcode.svg\";}s:7:\"banners\";a:0:{}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"3.0\";}}}','no');
/*!40000 ALTER TABLE `wp_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_postmeta`
--

DROP TABLE IF EXISTS `wp_postmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=4659 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_postmeta`
--

LOCK TABLES `wp_postmeta` WRITE;
/*!40000 ALTER TABLE `wp_postmeta` DISABLE KEYS */;
INSERT INTO `wp_postmeta` VALUES (21,7,'_edit_last','1'),(23,7,'_edit_lock','1569177401:1'),(25,9,'_edit_last','1'),(27,9,'_edit_lock','1569177343:1'),(71,14,'_menu_item_type','taxonomy'),(72,14,'_menu_item_menu_item_parent','0'),(73,14,'_menu_item_object_id','3'),(74,14,'_menu_item_object','category'),(75,14,'_menu_item_target',''),(76,14,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(77,14,'_menu_item_xfn',''),(78,14,'_menu_item_url',''),(81,15,'_menu_item_type','taxonomy'),(82,15,'_menu_item_menu_item_parent','0'),(83,15,'_menu_item_object_id','4'),(84,15,'_menu_item_object','category'),(85,15,'_menu_item_target',''),(86,15,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(87,15,'_menu_item_xfn',''),(88,15,'_menu_item_url',''),(91,16,'_menu_item_type','taxonomy'),(92,16,'_menu_item_menu_item_parent','0'),(93,16,'_menu_item_object_id','5'),(94,16,'_menu_item_object','category'),(95,16,'_menu_item_target',''),(96,16,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(97,16,'_menu_item_xfn',''),(98,16,'_menu_item_url',''),(101,17,'_menu_item_type','taxonomy'),(102,17,'_menu_item_menu_item_parent','0'),(103,17,'_menu_item_object_id','6'),(104,17,'_menu_item_object','category'),(105,17,'_menu_item_target',''),(106,17,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(107,17,'_menu_item_xfn',''),(108,17,'_menu_item_url',''),(111,18,'_menu_item_type','taxonomy'),(112,18,'_menu_item_menu_item_parent','0'),(113,18,'_menu_item_object_id','7'),(114,18,'_menu_item_object','category'),(115,18,'_menu_item_target',''),(116,18,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(117,18,'_menu_item_xfn',''),(118,18,'_menu_item_url',''),(121,19,'_menu_item_type','taxonomy'),(122,19,'_menu_item_menu_item_parent','0'),(123,19,'_menu_item_object_id','8'),(124,19,'_menu_item_object','category'),(125,19,'_menu_item_target',''),(126,19,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(127,19,'_menu_item_xfn',''),(128,19,'_menu_item_url',''),(136,20,'_edit_last','1'),(138,20,'_edit_lock','1569215010:1'),(151,20,'_wp_page_template','default'),(155,26,'_menu_item_type','post_type'),(156,26,'_menu_item_menu_item_parent','0'),(157,26,'_menu_item_object_id','20'),(158,26,'_menu_item_object','page'),(159,26,'_menu_item_target',''),(160,26,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(161,26,'_menu_item_xfn',''),(162,26,'_menu_item_url',''),(179,27,'_menu_item_type','post_type'),(180,27,'_menu_item_menu_item_parent','0'),(181,27,'_menu_item_object_id','9'),(182,27,'_menu_item_object','environment'),(183,27,'_menu_item_target',''),(184,27,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(185,27,'_menu_item_xfn',''),(186,27,'_menu_item_url',''),(189,28,'_menu_item_type','post_type'),(190,28,'_menu_item_menu_item_parent','0'),(191,28,'_menu_item_object_id','7'),(192,28,'_menu_item_object','environment'),(193,28,'_menu_item_target',''),(194,28,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(195,28,'_menu_item_xfn',''),(196,28,'_menu_item_url',''),(212,30,'_wp_attached_file','2019/06/851x315-1.png'),(213,30,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:851;s:6:\"height\";i:315;s:4:\"file\";s:21:\"2019/06/851x315-1.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"851x315-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"851x315-1-300x111.png\";s:5:\"width\";i:300;s:6:\"height\";i:111;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"851x315-1-768x284.png\";s:5:\"width\";i:768;s:6:\"height\";i:284;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(218,7,'custom_popular_ranking','1120'),(219,9,'custom_popular_ranking','1348'),(223,33,'_wp_attached_file','2019/06/BDL015.jpg'),(224,33,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:316;s:6:\"height\";i:211;s:4:\"file\";s:18:\"2019/06/BDL015.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"BDL015-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"BDL015-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(229,35,'_edit_last','1'),(230,35,'_wp_page_template','default'),(232,35,'_edit_lock','1571880779:1'),(253,43,'_wp_attached_file','2019/06/vagrant_logo.png'),(254,43,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:432;s:6:\"height\";i:117;s:4:\"file\";s:24:\"2019/06/vagrant_logo.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"vagrant_logo-150x117.png\";s:5:\"width\";i:150;s:6:\"height\";i:117;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"vagrant_logo-300x81.png\";s:5:\"width\";i:300;s:6:\"height\";i:81;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(255,44,'_wp_attached_file','2019/06/virtualbox_logo.png'),(256,44,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:455;s:6:\"height\";i:111;s:4:\"file\";s:27:\"2019/06/virtualbox_logo.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"virtualbox_logo-150x111.png\";s:5:\"width\";i:150;s:6:\"height\";i:111;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"virtualbox_logo-300x73.png\";s:5:\"width\";i:300;s:6:\"height\";i:73;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(258,9,'_is_githuber_markdown','1'),(336,45,'_is_githuber_markdown','1'),(337,45,'_edit_last','1'),(341,46,'_is_githuber_markdown','1'),(343,45,'_edit_lock','1569239686:1'),(344,45,'custom_popular_ranking','1139'),(348,47,'_is_githuber_markdown','1'),(353,48,'_is_githuber_markdown','1'),(362,49,'_is_githuber_markdown','1'),(367,50,'_is_githuber_markdown','1'),(372,51,'_is_githuber_markdown','1'),(377,52,'_is_githuber_markdown','1'),(382,53,'_is_githuber_markdown','1'),(393,7,'_is_githuber_markdown','1'),(396,54,'_wp_attached_file','2019/06/environment_create.png'),(397,54,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:30:\"2019/06/environment_create.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"environment_create-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"environment_create-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(399,9,'_thumbnail_id','54'),(403,55,'_wp_attached_file','2019/06/composer.png'),(404,55,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:20:\"2019/06/composer.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"composer-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"composer-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(406,45,'_thumbnail_id','55'),(417,56,'_is_githuber_markdown','1'),(419,57,'_wp_attached_file','2019/06/mokuji.png'),(420,57,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:18:\"2019/06/mokuji.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"mokuji-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"mokuji-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(421,7,'_thumbnail_id','57'),(425,58,'_menu_item_type','post_type'),(426,58,'_menu_item_menu_item_parent','0'),(427,58,'_menu_item_object_id','9'),(428,58,'_menu_item_object','environment'),(429,58,'_menu_item_target',''),(430,58,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(431,58,'_menu_item_xfn',''),(432,58,'_menu_item_url',''),(450,60,'_wp_attached_file','2019/06/top.png'),(451,60,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:798;s:6:\"height\";i:205;s:4:\"file\";s:15:\"2019/06/top.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"top-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:14:\"top-300x77.png\";s:5:\"width\";i:300;s:6:\"height\";i:77;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:15:\"top-768x197.png\";s:5:\"width\";i:768;s:6:\"height\";i:197;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(455,61,'_is_githuber_markdown','1'),(468,65,'_is_githuber_markdown','1'),(469,65,'_edit_last','1'),(472,65,'_edit_lock','1569176959:1'),(477,67,'_wp_attached_file','2019/06/vagrantile.png'),(478,67,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:22:\"2019/06/vagrantile.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"vagrantile-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"vagrantile-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(480,65,'_thumbnail_id','67'),(484,65,'custom_popular_ranking','1073'),(598,70,'_menu_item_type','post_type'),(599,70,'_menu_item_menu_item_parent','0'),(600,70,'_menu_item_object_id','65'),(601,70,'_menu_item_object','environment'),(602,70,'_menu_item_target',''),(603,70,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(604,70,'_menu_item_xfn',''),(605,70,'_menu_item_url',''),(614,71,'_menu_item_type','post_type'),(615,71,'_menu_item_menu_item_parent','0'),(616,71,'_menu_item_object_id','65'),(617,71,'_menu_item_object','environment'),(618,71,'_menu_item_target',''),(619,71,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(620,71,'_menu_item_xfn',''),(621,71,'_menu_item_url',''),(625,72,'_pum_built_in','default-theme'),(626,72,'_pum_default_theme','1'),(627,72,'popup_theme_data_version','3'),(628,72,'popup_theme_settings','a:67:{s:24:\"overlay_background_color\";s:7:\"#ffffff\";s:26:\"overlay_background_opacity\";i:100;s:13:\"atc_promotion\";N;s:17:\"container_padding\";i:18;s:23:\"container_border_radius\";N;s:26:\"container_background_color\";s:7:\"#f9f9f9\";s:28:\"container_background_opacity\";i:100;s:22:\"container_border_style\";s:4:\"none\";s:22:\"container_border_color\";s:7:\"#000000\";s:22:\"container_border_width\";i:1;s:25:\"container_boxshadow_color\";s:7:\"#020202\";s:27:\"container_boxshadow_opacity\";i:23;s:30:\"container_boxshadow_horizontal\";i:1;s:28:\"container_boxshadow_vertical\";i:1;s:24:\"container_boxshadow_blur\";i:3;s:26:\"container_boxshadow_spread\";N;s:25:\"container_boxshadow_inset\";s:2:\"no\";s:16:\"title_font_color\";s:7:\"#000000\";s:15:\"title_font_size\";i:32;s:17:\"title_line_height\";i:36;s:17:\"title_font_family\";s:7:\"inherit\";s:17:\"title_font_weight\";i:400;s:16:\"title_font_style\";s:6:\"normal\";s:16:\"title_text_align\";s:4:\"left\";s:22:\"title_textshadow_color\";s:7:\"#020202\";s:24:\"title_textshadow_opacity\";i:23;s:27:\"title_textshadow_horizontal\";N;s:25:\"title_textshadow_vertical\";N;s:21:\"title_textshadow_blur\";N;s:18:\"content_font_color\";s:7:\"#8c8c8c\";s:19:\"content_font_family\";s:7:\"inherit\";s:19:\"content_font_weight\";i:400;s:18:\"content_font_style\";s:7:\"inherit\";s:10:\"close_text\";s:5:\"CLOSE\";s:22:\"close_position_outside\";b:0;s:14:\"close_location\";s:8:\"topright\";s:18:\"close_position_top\";N;s:21:\"close_position_bottom\";N;s:19:\"close_position_left\";N;s:20:\"close_position_right\";N;s:13:\"close_padding\";i:8;s:12:\"close_height\";N;s:11:\"close_width\";N;s:19:\"close_border_radius\";N;s:22:\"close_background_color\";s:7:\"#00b7cd\";s:24:\"close_background_opacity\";i:100;s:16:\"close_font_color\";s:7:\"#ffffff\";s:15:\"close_font_size\";i:12;s:17:\"close_line_height\";i:36;s:17:\"close_font_family\";s:7:\"inherit\";s:17:\"close_font_weight\";i:400;s:16:\"close_font_style\";s:7:\"inherit\";s:18:\"close_border_style\";s:4:\"none\";s:18:\"close_border_color\";s:7:\"#ffffff\";s:18:\"close_border_width\";i:1;s:21:\"close_boxshadow_color\";s:7:\"#020202\";s:23:\"close_boxshadow_opacity\";i:23;s:26:\"close_boxshadow_horizontal\";i:1;s:24:\"close_boxshadow_vertical\";i:1;s:20:\"close_boxshadow_blur\";i:3;s:22:\"close_boxshadow_spread\";N;s:21:\"close_boxshadow_inset\";s:2:\"no\";s:22:\"close_textshadow_color\";s:7:\"#000000\";s:24:\"close_textshadow_opacity\";i:23;s:27:\"close_textshadow_horizontal\";N;s:25:\"close_textshadow_vertical\";N;s:21:\"close_textshadow_blur\";N;}'),(629,73,'popup_theme_settings','a:67:{s:24:\"overlay_background_color\";s:7:\"#000000\";s:26:\"overlay_background_opacity\";s:2:\"60\";s:17:\"container_padding\";s:2:\"18\";s:26:\"container_background_color\";s:7:\"#ffffff\";s:28:\"container_background_opacity\";s:3:\"100\";s:22:\"container_border_style\";s:5:\"solid\";s:22:\"container_border_color\";s:7:\"#000000\";s:22:\"container_border_width\";s:1:\"8\";s:23:\"container_border_radius\";s:1:\"3\";s:25:\"container_boxshadow_inset\";s:2:\"no\";s:30:\"container_boxshadow_horizontal\";s:1:\"0\";s:28:\"container_boxshadow_vertical\";s:1:\"0\";s:24:\"container_boxshadow_blur\";s:2:\"30\";s:26:\"container_boxshadow_spread\";s:1:\"0\";s:25:\"container_boxshadow_color\";s:7:\"#020202\";s:27:\"container_boxshadow_opacity\";s:3:\"100\";s:16:\"title_font_color\";s:7:\"#000000\";s:17:\"title_line_height\";s:2:\"36\";s:15:\"title_font_size\";s:2:\"32\";s:17:\"title_font_family\";s:7:\"inherit\";s:17:\"title_font_weight\";s:3:\"100\";s:16:\"title_font_style\";s:0:\"\";s:16:\"title_text_align\";s:4:\"left\";s:27:\"title_textshadow_horizontal\";s:1:\"0\";s:25:\"title_textshadow_vertical\";s:1:\"0\";s:21:\"title_textshadow_blur\";s:1:\"0\";s:22:\"title_textshadow_color\";s:7:\"#020202\";s:24:\"title_textshadow_opacity\";s:2:\"23\";s:18:\"content_font_color\";s:7:\"#000000\";s:19:\"content_font_family\";s:7:\"inherit\";s:19:\"content_font_weight\";s:3:\"100\";s:18:\"content_font_style\";s:0:\"\";s:10:\"close_text\";s:7:\"&times;\";s:14:\"close_location\";s:8:\"topright\";s:18:\"close_position_top\";s:3:\"-13\";s:19:\"close_position_left\";s:1:\"0\";s:21:\"close_position_bottom\";s:1:\"0\";s:20:\"close_position_right\";s:3:\"-13\";s:13:\"close_padding\";s:1:\"0\";s:12:\"close_height\";s:2:\"26\";s:11:\"close_width\";s:2:\"26\";s:22:\"close_background_color\";s:7:\"#000000\";s:24:\"close_background_opacity\";s:3:\"100\";s:16:\"close_font_color\";s:7:\"#ffffff\";s:17:\"close_line_height\";s:2:\"24\";s:15:\"close_font_size\";s:2:\"24\";s:17:\"close_font_family\";s:5:\"Arial\";s:17:\"close_font_weight\";s:3:\"100\";s:16:\"close_font_style\";s:0:\"\";s:18:\"close_border_style\";s:5:\"solid\";s:18:\"close_border_color\";s:7:\"#ffffff\";s:18:\"close_border_width\";s:1:\"2\";s:19:\"close_border_radius\";s:2:\"26\";s:21:\"close_boxshadow_inset\";s:2:\"no\";s:26:\"close_boxshadow_horizontal\";s:1:\"0\";s:24:\"close_boxshadow_vertical\";s:1:\"0\";s:20:\"close_boxshadow_blur\";s:2:\"15\";s:22:\"close_boxshadow_spread\";s:1:\"1\";s:21:\"close_boxshadow_color\";s:7:\"#020202\";s:23:\"close_boxshadow_opacity\";s:2:\"75\";s:27:\"close_textshadow_horizontal\";s:1:\"0\";s:25:\"close_textshadow_vertical\";s:1:\"0\";s:21:\"close_textshadow_blur\";s:1:\"0\";s:22:\"close_textshadow_color\";s:7:\"#000000\";s:24:\"close_textshadow_opacity\";s:2:\"23\";s:13:\"atc_promotion\";N;s:22:\"close_position_outside\";i:0;}'),(630,73,'popup_theme_data_version','3'),(631,73,'_pum_built_in','lightbox'),(632,74,'popup_theme_settings','a:67:{s:24:\"overlay_background_color\";s:7:\"#000000\";s:26:\"overlay_background_opacity\";s:2:\"70\";s:17:\"container_padding\";s:2:\"28\";s:26:\"container_background_color\";s:7:\"#ffffff\";s:28:\"container_background_opacity\";s:3:\"100\";s:22:\"container_border_style\";s:4:\"none\";s:22:\"container_border_color\";s:7:\"#000000\";s:22:\"container_border_width\";s:1:\"1\";s:23:\"container_border_radius\";s:1:\"5\";s:25:\"container_boxshadow_inset\";s:2:\"no\";s:30:\"container_boxshadow_horizontal\";s:1:\"0\";s:28:\"container_boxshadow_vertical\";s:2:\"10\";s:24:\"container_boxshadow_blur\";s:2:\"25\";s:26:\"container_boxshadow_spread\";s:1:\"4\";s:25:\"container_boxshadow_color\";s:7:\"#020202\";s:27:\"container_boxshadow_opacity\";s:2:\"50\";s:16:\"title_font_color\";s:7:\"#315b7c\";s:17:\"title_line_height\";s:2:\"36\";s:15:\"title_font_size\";s:2:\"34\";s:17:\"title_font_family\";s:7:\"inherit\";s:17:\"title_font_weight\";s:3:\"100\";s:16:\"title_font_style\";s:0:\"\";s:16:\"title_text_align\";s:4:\"left\";s:27:\"title_textshadow_horizontal\";s:1:\"0\";s:25:\"title_textshadow_vertical\";s:1:\"0\";s:21:\"title_textshadow_blur\";s:1:\"0\";s:22:\"title_textshadow_color\";s:7:\"#020202\";s:24:\"title_textshadow_opacity\";s:2:\"23\";s:18:\"content_font_color\";s:7:\"#2d2d2d\";s:19:\"content_font_family\";s:7:\"inherit\";s:19:\"content_font_weight\";s:3:\"100\";s:18:\"content_font_style\";s:0:\"\";s:10:\"close_text\";s:2:\"×\";s:14:\"close_location\";s:8:\"topright\";s:18:\"close_position_top\";s:1:\"8\";s:19:\"close_position_left\";s:1:\"0\";s:21:\"close_position_bottom\";s:1:\"0\";s:20:\"close_position_right\";s:1:\"8\";s:13:\"close_padding\";s:1:\"4\";s:12:\"close_height\";s:2:\"28\";s:11:\"close_width\";s:2:\"28\";s:22:\"close_background_color\";s:7:\"#315b7c\";s:24:\"close_background_opacity\";s:3:\"100\";s:16:\"close_font_color\";s:7:\"#ffffff\";s:17:\"close_line_height\";s:2:\"20\";s:15:\"close_font_size\";s:2:\"20\";s:17:\"close_font_family\";s:15:\"Times New Roman\";s:17:\"close_font_weight\";s:3:\"100\";s:16:\"close_font_style\";s:0:\"\";s:18:\"close_border_style\";s:4:\"none\";s:18:\"close_border_color\";s:7:\"#ffffff\";s:18:\"close_border_width\";s:1:\"1\";s:19:\"close_border_radius\";s:2:\"42\";s:21:\"close_boxshadow_inset\";s:2:\"no\";s:26:\"close_boxshadow_horizontal\";s:1:\"0\";s:24:\"close_boxshadow_vertical\";s:1:\"0\";s:20:\"close_boxshadow_blur\";s:1:\"0\";s:22:\"close_boxshadow_spread\";s:1:\"0\";s:21:\"close_boxshadow_color\";s:7:\"#020202\";s:23:\"close_boxshadow_opacity\";s:2:\"23\";s:27:\"close_textshadow_horizontal\";s:1:\"0\";s:25:\"close_textshadow_vertical\";s:1:\"0\";s:21:\"close_textshadow_blur\";s:1:\"0\";s:22:\"close_textshadow_color\";s:7:\"#000000\";s:24:\"close_textshadow_opacity\";s:2:\"23\";s:13:\"atc_promotion\";N;s:22:\"close_position_outside\";i:0;}'),(633,74,'popup_theme_data_version','3'),(634,74,'_pum_built_in','enterprise-blue'),(635,75,'popup_theme_settings','a:67:{s:24:\"overlay_background_color\";s:7:\"#000000\";s:26:\"overlay_background_opacity\";s:2:\"75\";s:17:\"container_padding\";s:2:\"30\";s:26:\"container_background_color\";s:7:\"#ffffff\";s:28:\"container_background_opacity\";s:3:\"100\";s:22:\"container_border_style\";s:5:\"solid\";s:22:\"container_border_color\";s:7:\"#81d742\";s:22:\"container_border_width\";s:2:\"14\";s:23:\"container_border_radius\";s:2:\"80\";s:25:\"container_boxshadow_inset\";s:2:\"no\";s:30:\"container_boxshadow_horizontal\";s:1:\"0\";s:28:\"container_boxshadow_vertical\";s:1:\"0\";s:24:\"container_boxshadow_blur\";s:1:\"0\";s:26:\"container_boxshadow_spread\";s:1:\"0\";s:25:\"container_boxshadow_color\";s:7:\"#020202\";s:27:\"container_boxshadow_opacity\";s:1:\"0\";s:16:\"title_font_color\";s:7:\"#2d2d2d\";s:17:\"title_line_height\";s:2:\"36\";s:15:\"title_font_size\";s:2:\"32\";s:17:\"title_font_family\";s:10:\"Montserrat\";s:17:\"title_font_weight\";s:3:\"100\";s:16:\"title_font_style\";s:0:\"\";s:16:\"title_text_align\";s:4:\"left\";s:27:\"title_textshadow_horizontal\";s:1:\"0\";s:25:\"title_textshadow_vertical\";s:1:\"0\";s:21:\"title_textshadow_blur\";s:1:\"0\";s:22:\"title_textshadow_color\";s:7:\"#020202\";s:24:\"title_textshadow_opacity\";s:2:\"23\";s:18:\"content_font_color\";s:7:\"#2d2d2d\";s:19:\"content_font_family\";s:7:\"inherit\";s:19:\"content_font_weight\";s:3:\"100\";s:18:\"content_font_style\";s:0:\"\";s:10:\"close_text\";s:2:\"×\";s:14:\"close_location\";s:8:\"topright\";s:18:\"close_position_top\";s:3:\"-30\";s:19:\"close_position_left\";s:3:\"-30\";s:21:\"close_position_bottom\";s:1:\"0\";s:20:\"close_position_right\";s:3:\"-30\";s:13:\"close_padding\";s:1:\"0\";s:12:\"close_height\";s:1:\"0\";s:11:\"close_width\";s:1:\"0\";s:22:\"close_background_color\";s:7:\"#ffffff\";s:24:\"close_background_opacity\";s:3:\"100\";s:16:\"close_font_color\";s:7:\"#2d2d2d\";s:17:\"close_line_height\";s:2:\"28\";s:15:\"close_font_size\";s:2:\"32\";s:17:\"close_font_family\";s:15:\"Times New Roman\";s:17:\"close_font_weight\";s:3:\"100\";s:16:\"close_font_style\";s:0:\"\";s:18:\"close_border_style\";s:4:\"none\";s:18:\"close_border_color\";s:7:\"#ffffff\";s:18:\"close_border_width\";s:1:\"1\";s:19:\"close_border_radius\";s:2:\"28\";s:21:\"close_boxshadow_inset\";s:2:\"no\";s:26:\"close_boxshadow_horizontal\";s:1:\"0\";s:24:\"close_boxshadow_vertical\";s:1:\"0\";s:20:\"close_boxshadow_blur\";s:1:\"0\";s:22:\"close_boxshadow_spread\";s:1:\"0\";s:21:\"close_boxshadow_color\";s:7:\"#020202\";s:23:\"close_boxshadow_opacity\";s:2:\"23\";s:27:\"close_textshadow_horizontal\";s:1:\"0\";s:25:\"close_textshadow_vertical\";s:1:\"0\";s:21:\"close_textshadow_blur\";s:1:\"0\";s:22:\"close_textshadow_color\";s:7:\"#000000\";s:24:\"close_textshadow_opacity\";s:2:\"23\";s:13:\"atc_promotion\";N;s:22:\"close_position_outside\";i:0;}'),(636,75,'popup_theme_data_version','3'),(637,75,'_pum_built_in','hello-box'),(638,76,'popup_theme_settings','a:67:{s:24:\"overlay_background_color\";s:7:\"#000000\";s:26:\"overlay_background_opacity\";s:2:\"50\";s:17:\"container_padding\";s:2:\"18\";s:26:\"container_background_color\";s:7:\"#1e73be\";s:28:\"container_background_opacity\";s:3:\"100\";s:22:\"container_border_style\";s:4:\"none\";s:22:\"container_border_color\";s:7:\"#000000\";s:22:\"container_border_width\";s:1:\"1\";s:23:\"container_border_radius\";s:1:\"0\";s:25:\"container_boxshadow_inset\";s:2:\"no\";s:30:\"container_boxshadow_horizontal\";s:1:\"0\";s:28:\"container_boxshadow_vertical\";s:2:\"10\";s:24:\"container_boxshadow_blur\";s:2:\"25\";s:26:\"container_boxshadow_spread\";s:1:\"0\";s:25:\"container_boxshadow_color\";s:7:\"#020202\";s:27:\"container_boxshadow_opacity\";s:2:\"50\";s:16:\"title_font_color\";s:7:\"#ffffff\";s:17:\"title_line_height\";s:2:\"28\";s:15:\"title_font_size\";s:2:\"26\";s:17:\"title_font_family\";s:10:\"Sans-Serif\";s:17:\"title_font_weight\";s:3:\"100\";s:16:\"title_font_style\";s:0:\"\";s:16:\"title_text_align\";s:4:\"left\";s:27:\"title_textshadow_horizontal\";s:1:\"0\";s:25:\"title_textshadow_vertical\";s:1:\"0\";s:21:\"title_textshadow_blur\";s:1:\"0\";s:22:\"title_textshadow_color\";s:7:\"#020202\";s:24:\"title_textshadow_opacity\";s:2:\"23\";s:18:\"content_font_color\";s:7:\"#ffffff\";s:19:\"content_font_family\";s:7:\"inherit\";s:19:\"content_font_weight\";s:3:\"100\";s:18:\"content_font_style\";s:0:\"\";s:10:\"close_text\";s:2:\"×\";s:14:\"close_location\";s:8:\"topright\";s:18:\"close_position_top\";s:1:\"0\";s:19:\"close_position_left\";s:1:\"0\";s:21:\"close_position_bottom\";s:1:\"0\";s:20:\"close_position_right\";s:1:\"0\";s:13:\"close_padding\";s:1:\"0\";s:12:\"close_height\";s:2:\"24\";s:11:\"close_width\";s:2:\"24\";s:22:\"close_background_color\";s:7:\"#eeee22\";s:24:\"close_background_opacity\";s:3:\"100\";s:16:\"close_font_color\";s:7:\"#1e73be\";s:17:\"close_line_height\";s:2:\"24\";s:15:\"close_font_size\";s:2:\"32\";s:17:\"close_font_family\";s:15:\"Times New Roman\";s:17:\"close_font_weight\";s:3:\"100\";s:16:\"close_font_style\";s:0:\"\";s:18:\"close_border_style\";s:4:\"none\";s:18:\"close_border_color\";s:7:\"#ffffff\";s:18:\"close_border_width\";s:1:\"1\";s:19:\"close_border_radius\";s:1:\"0\";s:21:\"close_boxshadow_inset\";s:2:\"no\";s:26:\"close_boxshadow_horizontal\";s:2:\"-1\";s:24:\"close_boxshadow_vertical\";s:1:\"1\";s:20:\"close_boxshadow_blur\";s:1:\"1\";s:22:\"close_boxshadow_spread\";s:1:\"0\";s:21:\"close_boxshadow_color\";s:7:\"#020202\";s:23:\"close_boxshadow_opacity\";s:2:\"10\";s:27:\"close_textshadow_horizontal\";s:2:\"-1\";s:25:\"close_textshadow_vertical\";s:1:\"1\";s:21:\"close_textshadow_blur\";s:1:\"1\";s:22:\"close_textshadow_color\";s:7:\"#000000\";s:24:\"close_textshadow_opacity\";s:2:\"10\";s:13:\"atc_promotion\";N;s:22:\"close_position_outside\";i:0;}'),(639,76,'popup_theme_data_version','3'),(640,76,'_pum_built_in','cutting-edge'),(641,77,'popup_theme_settings','a:67:{s:24:\"overlay_background_color\";s:7:\"#ffffff\";s:26:\"overlay_background_opacity\";s:2:\"50\";s:17:\"container_padding\";s:2:\"18\";s:26:\"container_background_color\";s:7:\"#fffbef\";s:28:\"container_background_opacity\";s:3:\"100\";s:22:\"container_border_style\";s:6:\"outset\";s:22:\"container_border_color\";s:7:\"#dd3333\";s:22:\"container_border_width\";s:2:\"20\";s:23:\"container_border_radius\";s:1:\"0\";s:25:\"container_boxshadow_inset\";s:3:\"yes\";s:30:\"container_boxshadow_horizontal\";s:1:\"1\";s:28:\"container_boxshadow_vertical\";s:1:\"1\";s:24:\"container_boxshadow_blur\";s:1:\"3\";s:26:\"container_boxshadow_spread\";s:1:\"0\";s:25:\"container_boxshadow_color\";s:7:\"#020202\";s:27:\"container_boxshadow_opacity\";s:2:\"97\";s:16:\"title_font_color\";s:7:\"#000000\";s:17:\"title_line_height\";s:2:\"36\";s:15:\"title_font_size\";s:2:\"32\";s:17:\"title_font_family\";s:7:\"inherit\";s:17:\"title_font_weight\";s:3:\"100\";s:16:\"title_font_style\";s:0:\"\";s:16:\"title_text_align\";s:4:\"left\";s:27:\"title_textshadow_horizontal\";s:1:\"0\";s:25:\"title_textshadow_vertical\";s:1:\"0\";s:21:\"title_textshadow_blur\";s:1:\"0\";s:22:\"title_textshadow_color\";s:7:\"#020202\";s:24:\"title_textshadow_opacity\";s:2:\"23\";s:18:\"content_font_color\";s:7:\"#2d2d2d\";s:19:\"content_font_family\";s:7:\"inherit\";s:19:\"content_font_weight\";s:3:\"100\";s:18:\"content_font_style\";s:0:\"\";s:10:\"close_text\";s:2:\"×\";s:14:\"close_location\";s:8:\"topright\";s:18:\"close_position_top\";s:3:\"-20\";s:19:\"close_position_left\";s:3:\"-20\";s:21:\"close_position_bottom\";s:1:\"0\";s:20:\"close_position_right\";s:3:\"-20\";s:13:\"close_padding\";s:1:\"0\";s:12:\"close_height\";s:2:\"20\";s:11:\"close_width\";s:2:\"20\";s:22:\"close_background_color\";s:7:\"#000000\";s:24:\"close_background_opacity\";s:2:\"55\";s:16:\"close_font_color\";s:7:\"#ffffff\";s:17:\"close_line_height\";s:2:\"18\";s:15:\"close_font_size\";s:2:\"16\";s:17:\"close_font_family\";s:6:\"Tahoma\";s:17:\"close_font_weight\";s:3:\"700\";s:16:\"close_font_style\";s:0:\"\";s:18:\"close_border_style\";s:4:\"none\";s:18:\"close_border_color\";s:7:\"#ffffff\";s:18:\"close_border_width\";s:1:\"1\";s:19:\"close_border_radius\";s:1:\"0\";s:21:\"close_boxshadow_inset\";s:2:\"no\";s:26:\"close_boxshadow_horizontal\";s:1:\"0\";s:24:\"close_boxshadow_vertical\";s:1:\"0\";s:20:\"close_boxshadow_blur\";s:1:\"0\";s:22:\"close_boxshadow_spread\";s:1:\"0\";s:21:\"close_boxshadow_color\";s:7:\"#020202\";s:23:\"close_boxshadow_opacity\";s:2:\"23\";s:27:\"close_textshadow_horizontal\";s:1:\"0\";s:25:\"close_textshadow_vertical\";s:1:\"0\";s:21:\"close_textshadow_blur\";s:1:\"0\";s:22:\"close_textshadow_color\";s:7:\"#000000\";s:24:\"close_textshadow_opacity\";s:2:\"23\";s:13:\"atc_promotion\";N;s:22:\"close_position_outside\";i:0;}'),(642,77,'popup_theme_data_version','3'),(643,77,'_pum_built_in','framed-border'),(644,78,'data_version','3'),(645,78,'popup_open_count','0'),(646,78,'_edit_last','1'),(648,78,'_edit_lock','1560303981:1'),(655,79,'_wp_attached_file','2019/06/vagrantfile-img-001.png'),(656,79,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:904;s:6:\"height\";i:585;s:4:\"file\";s:31:\"2019/06/vagrantfile-img-001.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"vagrantfile-img-001-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"vagrantfile-img-001-300x194.png\";s:5:\"width\";i:300;s:6:\"height\";i:194;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:31:\"vagrantfile-img-001-768x497.png\";s:5:\"width\";i:768;s:6:\"height\";i:497;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(667,80,'_is_githuber_markdown','1'),(669,35,'_is_githuber_markdown','1'),(674,81,'_is_githuber_markdown','1'),(692,84,'_is_githuber_markdown','1'),(694,20,'_is_githuber_markdown','1'),(728,101,'_wp_attached_file','2019/06/dev-env.png'),(729,101,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:350;s:6:\"height\";i:350;s:4:\"file\";s:19:\"2019/06/dev-env.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"dev-env-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"dev-env-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(735,104,'_wp_attached_file','2019/06/profile.jpg'),(736,104,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:400;s:6:\"height\";i:400;s:4:\"file\";s:19:\"2019/06/profile.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"profile-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"profile-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(737,105,'_form','<div class=\"row\">\n<div class=\"col-12 form-group\">\n	[text* text-794 your-name class::form-control placeholder \"お名前*\"]\n</div>\n<div class=\"col-12 form-group\">\n	[email* email-287 email class::form-control placeholder \"メールアドレス*\"]\n</div>\n<div class=\"col-12 form-group\">\n	[text* text-746 your-subject class::form-control placeholder \"件名*\"]\n</div>\n<div class=\"col-12 form-group\">\n	[textarea* textarea-464 your-message x8 class::form-control placeholder \"お問い合わせ内容*\"]\n</div>\n <div class=\"col-12\">\n[response]\n</div>\n<div class=\"col-12\">\n[acceptance acceptance-543 \"内容に間違いありません\"]\n</div>\n<div class=\"col-12 form-group form-send\">\n[submit \"送信\"]\n</div>\n</div>'),(738,105,'_mail','a:9:{s:6:\"active\";b:1;s:7:\"subject\";s:39:\"お問い合わせがありました。\";s:6:\"sender\";s:65:\"おっさんWEBエンジニアのブログ <blog@webdimension.jp>\";s:9:\"recipient\";s:20:\"blog@webdimension.jp\";s:4:\"body\";s:178:\"■以下の内容でお問合せがありました。\n\n\nご名前様 : [text-794]\n\nメールアドレス : [email-287]\n\n件名 : [text-746]\n\nお問合せ内容 : \n[textarea-464]\";s:18:\"additional_headers\";s:0:\"\";s:11:\"attachments\";s:0:\"\";s:8:\"use_html\";b:0;s:13:\"exclude_blank\";b:0;}'),(739,105,'_mail_2','a:9:{s:6:\"active\";b:1;s:7:\"subject\";s:45:\"お問合せありがとうございます。\";s:6:\"sender\";s:65:\"おっさんWEBエンジニアのブログ <blog@webdimension.jp>\";s:9:\"recipient\";s:11:\"[email-287]\";s:4:\"body\";s:345:\"[text-794] 様\n\nお問い合わせいただき、誠にありがとうございます。\n後ほど、担当者よりご連絡させていただきます。今しばらくお待ちくださいませ。\n\n\n■お問合せ内容\nご名前様 : [text-794]\n\nメールアドレス : [email-287]\n\n件名 : [text-746]\n\nお問合せ内容 :\n[textarea-464]\";s:18:\"additional_headers\";s:25:\"Bcc: blog@webdimension.jp\";s:11:\"attachments\";s:0:\"\";s:8:\"use_html\";b:0;s:13:\"exclude_blank\";b:0;}'),(740,105,'_messages','a:23:{s:12:\"mail_sent_ok\";s:75:\"ありがとうございます。メッセージは送信されました。\";s:12:\"mail_sent_ng\";s:84:\"メッセージの送信に失敗しました。後でまたお試しください。\";s:16:\"validation_error\";s:81:\"入力内容に問題があります。確認して再度お試しください。\";s:4:\"spam\";s:84:\"メッセージの送信に失敗しました。後でまたお試しください。\";s:12:\"accept_terms\";s:66:\"メッセージを送信する前に承諾確認が必要です。\";s:16:\"invalid_required\";s:42:\"必須項目に入力してください。\";s:16:\"invalid_too_long\";s:48:\"入力されたテキストが長すぎます。\";s:17:\"invalid_too_short\";s:48:\"入力されたテキストが短すぎます。\";s:12:\"invalid_date\";s:45:\"日付の形式が正しくありません。\";s:14:\"date_too_early\";s:42:\"選択された日付は早すぎます。\";s:13:\"date_too_late\";s:42:\"選択された日付は遅すぎます。\";s:13:\"upload_failed\";s:81:\"ファイルのアップロード時に不明なエラーが発生しました。\";s:24:\"upload_file_type_invalid\";s:66:\"この形式のファイルはアップロードできません。\";s:21:\"upload_file_too_large\";s:36:\"ファイルが大きすぎます。\";s:23:\"upload_failed_php_error\";s:72:\"ファイルのアップロード中にエラーが発生しました。\";s:14:\"invalid_number\";s:45:\"数値の形式に間違いがあります。\";s:16:\"number_too_small\";s:45:\"入力された数値が小さすぎます。\";s:16:\"number_too_large\";s:48:\"数値が最大許容値を超えています。\";s:23:\"quiz_answer_not_correct\";s:48:\"クイズの答えが正しくありません。\";s:17:\"captcha_not_match\";s:31:\"Your entered code is incorrect.\";s:13:\"invalid_email\";s:66:\"入力されたメールアドレスに間違いがあります。\";s:11:\"invalid_url\";s:34:\"URL に間違いがあります。\";s:11:\"invalid_tel\";s:42:\"電話番号に間違いがあります。\";}'),(741,105,'_additional_settings',''),(742,105,'_locale','ja'),(812,110,'_is_githuber_markdown','1'),(814,110,'_edit_last','1'),(816,110,'_edit_lock','1569176851:1'),(817,110,'custom_popular_ranking','531'),(819,112,'_wp_attached_file','2019/08/vagrant_command.jpg'),(820,112,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:27:\"2019/08/vagrant_command.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"vagrant_command-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"vagrant_command-300x250.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(821,110,'_thumbnail_id','112'),(823,113,'_is_githuber_markdown','1'),(825,113,'_edit_last','1'),(827,113,'_edit_lock','1569177270:1'),(830,113,'custom_popular_ranking','567'),(837,115,'_wp_attached_file','2019/08/vim.jpg'),(838,115,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:15:\"2019/08/vim.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"vim-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"vim-300x250.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(839,113,'_thumbnail_id','115'),(844,116,'_menu_item_type','post_type'),(845,116,'_menu_item_menu_item_parent','0'),(846,116,'_menu_item_object_id','113'),(847,116,'_menu_item_object','environment'),(848,116,'_menu_item_target',''),(849,116,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(850,116,'_menu_item_xfn',''),(851,116,'_menu_item_url',''),(854,117,'_menu_item_type','post_type'),(855,117,'_menu_item_menu_item_parent','0'),(856,117,'_menu_item_object_id','110'),(857,117,'_menu_item_object','environment'),(858,117,'_menu_item_target',''),(859,117,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(860,117,'_menu_item_xfn',''),(861,117,'_menu_item_url',''),(867,118,'_is_githuber_markdown','1'),(868,118,'_edit_last','1'),(870,118,'_edit_lock','1569177482:1'),(877,118,'custom_popular_ranking','518'),(886,119,'_wp_attached_file','2019/08/Preparation.jpg'),(887,119,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:23:\"2019/08/Preparation.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"Preparation-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"Preparation-300x250.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(889,118,'_thumbnail_id','119'),(891,120,'_wp_attached_file','2019/08/Screen-Shot-2019-08-11-at-10.34.59.png'),(892,120,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:461;s:6:\"height\";i:258;s:4:\"file\";s:46:\"2019/08/Screen-Shot-2019-08-11-at-10.34.59.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-11-at-10.34.59-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-11-at-10.34.59-300x168.png\";s:5:\"width\";i:300;s:6:\"height\";i:168;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(895,121,'_wp_attached_file','2019/08/Screen-Shot-2019-08-11-at-14.28.57.png'),(896,121,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:549;s:6:\"height\";i:312;s:4:\"file\";s:46:\"2019/08/Screen-Shot-2019-08-11-at-14.28.57.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-11-at-14.28.57-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-11-at-14.28.57-300x170.png\";s:5:\"width\";i:300;s:6:\"height\";i:170;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(901,124,'_is_githuber_markdown','1'),(902,124,'_edit_last','1'),(905,124,'_edit_lock','1569176912:1'),(906,124,'custom_popular_ranking','858'),(907,125,'_wp_attached_file','2019/08/vim8.jpg'),(908,125,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:16:\"2019/08/vim8.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"vim8-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:16:\"vim8-300x250.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(910,124,'_thumbnail_id','125'),(919,126,'_menu_item_type','post_type'),(920,126,'_menu_item_menu_item_parent','0'),(921,126,'_menu_item_object_id','124'),(922,126,'_menu_item_object','environment'),(923,126,'_menu_item_target',''),(924,126,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(925,126,'_menu_item_xfn',''),(926,126,'_menu_item_url',''),(929,127,'_menu_item_type','post_type'),(930,127,'_menu_item_menu_item_parent','0'),(931,127,'_menu_item_object_id','118'),(932,127,'_menu_item_object','environment'),(933,127,'_menu_item_target',''),(934,127,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(935,127,'_menu_item_xfn',''),(936,127,'_menu_item_url',''),(946,128,'_is_githuber_markdown','1'),(947,128,'_edit_last','1'),(950,128,'_edit_lock','1569177011:1'),(951,124,'_githuber_prismjs','bash'),(953,129,'_wp_attached_file','2019/08/Screen-Shot-2019-08-12-at-10.23.46.png'),(954,129,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1646;s:6:\"height\";i:726;s:4:\"file\";s:46:\"2019/08/Screen-Shot-2019-08-12-at-10.23.46.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-12-at-10.23.46-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-12-at-10.23.46-300x132.png\";s:5:\"width\";i:300;s:6:\"height\";i:132;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-12-at-10.23.46-768x339.png\";s:5:\"width\";i:768;s:6:\"height\";i:339;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:47:\"Screen-Shot-2019-08-12-at-10.23.46-1024x452.png\";s:5:\"width\";i:1024;s:6:\"height\";i:452;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(955,130,'_wp_attached_file','2019/08/名称未設定-1.jpg'),(956,130,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:29:\"2019/08/名称未設定-1.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"名称未設定-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"名称未設定-1-300x250.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(958,128,'_thumbnail_id','130'),(960,128,'custom_popular_ranking','689'),(984,131,'_menu_item_type','post_type'),(985,131,'_menu_item_menu_item_parent','0'),(986,131,'_menu_item_object_id','128'),(987,131,'_menu_item_object','environment'),(988,131,'_menu_item_target',''),(989,131,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(990,131,'_menu_item_xfn',''),(991,131,'_menu_item_url',''),(1012,128,'_is_githuber_mermaid',''),(1013,128,'_is_githuber_katex',''),(1015,133,'_is_githuber_markdown','1'),(1016,133,'_edit_last','1'),(1020,133,'_is_githuber_mermaid',''),(1021,133,'_is_githuber_katex',''),(1023,133,'_edit_lock','1569177054:1'),(1032,133,'custom_popular_ranking','2279'),(1049,134,'_wp_attached_file','2019/08/php_mysql.jpg'),(1050,134,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:21:\"2019/08/php_mysql.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"php_mysql-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"php_mysql-300x250.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1054,133,'_thumbnail_id','134'),(1056,135,'_wp_attached_file','2019/08/Screen-Shot-2019-08-12-at-18.57.00.png'),(1057,135,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:999;s:6:\"height\";i:743;s:4:\"file\";s:46:\"2019/08/Screen-Shot-2019-08-12-at-18.57.00.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-12-at-18.57.00-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-12-at-18.57.00-300x223.png\";s:5:\"width\";i:300;s:6:\"height\";i:223;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-12-at-18.57.00-768x571.png\";s:5:\"width\";i:768;s:6:\"height\";i:571;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1067,136,'_menu_item_type','post_type'),(1068,136,'_menu_item_menu_item_parent','0'),(1069,136,'_menu_item_object_id','133'),(1070,136,'_menu_item_object','environment'),(1071,136,'_menu_item_target',''),(1072,136,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(1073,136,'_menu_item_xfn',''),(1074,136,'_menu_item_url',''),(1075,136,'_menu_item_orphaned','1565603981'),(1088,128,'_githuber_prismjs','bash'),(1089,128,'_is_githuber_sequence',''),(1090,128,'_is_githuber_flow_chart',''),(1093,137,'_menu_item_type','post_type'),(1094,137,'_menu_item_menu_item_parent','0'),(1095,137,'_menu_item_object_id','133'),(1096,137,'_menu_item_object','environment'),(1097,137,'_menu_item_target',''),(1098,137,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(1099,137,'_menu_item_xfn',''),(1100,137,'_menu_item_url',''),(1110,138,'_is_githuber_markdown','1'),(1111,138,'_edit_last','1'),(1115,138,'_is_githuber_mermaid',''),(1116,138,'_is_githuber_katex',''),(1118,138,'_edit_lock','1569177095:1'),(1119,139,'_wp_attached_file','2019/08/Screen-Shot-2019-08-13-at-7.00.08.png'),(1120,139,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1136;s:6:\"height\";i:704;s:4:\"file\";s:45:\"2019/08/Screen-Shot-2019-08-13-at-7.00.08.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-08-13-at-7.00.08-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-08-13-at-7.00.08-300x186.png\";s:5:\"width\";i:300;s:6:\"height\";i:186;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-08-13-at-7.00.08-768x476.png\";s:5:\"width\";i:768;s:6:\"height\";i:476;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-13-at-7.00.08-1024x635.png\";s:5:\"width\";i:1024;s:6:\"height\";i:635;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1121,140,'_wp_attached_file','2019/08/Screen-Shot-2019-08-13-at-7.06.04.png'),(1122,140,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1053;s:6:\"height\";i:961;s:4:\"file\";s:45:\"2019/08/Screen-Shot-2019-08-13-at-7.06.04.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-08-13-at-7.06.04-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-08-13-at-7.06.04-300x274.png\";s:5:\"width\";i:300;s:6:\"height\";i:274;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-08-13-at-7.06.04-768x701.png\";s:5:\"width\";i:768;s:6:\"height\";i:701;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-13-at-7.06.04-1024x935.png\";s:5:\"width\";i:1024;s:6:\"height\";i:935;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1131,138,'custom_popular_ranking','606'),(1132,141,'_wp_attached_file','2019/08/wp.jpg'),(1133,141,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:14:\"2019/08/wp.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:14:\"wp-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:14:\"wp-300x250.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1137,138,'_thumbnail_id','141'),(1139,138,'_githuber_prismjs','bash'),(1140,138,'_is_githuber_sequence',''),(1141,138,'_is_githuber_flow_chart',''),(1144,143,'_is_githuber_markdown','1'),(1145,144,'_wp_attached_file','2019/08/openssl_mailcatcher.png'),(1146,144,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:31:\"2019/08/openssl_mailcatcher.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"openssl_mailcatcher-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"openssl_mailcatcher-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1147,143,'_edit_last','1'),(1151,143,'_is_githuber_mermaid',''),(1152,143,'_is_githuber_katex',''),(1153,143,'_thumbnail_id','144'),(1155,143,'_edit_lock','1569177233:1'),(1156,145,'_wp_attached_file','2019/08/Screen-Shot-2019-08-15-at-13.39.10.png'),(1157,145,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1605;s:6:\"height\";i:528;s:4:\"file\";s:46:\"2019/08/Screen-Shot-2019-08-15-at-13.39.10.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-15-at-13.39.10-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-08-15-at-13.39.10-300x99.png\";s:5:\"width\";i:300;s:6:\"height\";i:99;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-15-at-13.39.10-768x253.png\";s:5:\"width\";i:768;s:6:\"height\";i:253;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:47:\"Screen-Shot-2019-08-15-at-13.39.10-1024x337.png\";s:5:\"width\";i:1024;s:6:\"height\";i:337;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1166,143,'custom_popular_ranking','1358'),(1167,146,'_wp_attached_file','2019/08/Screen-Shot-2019-08-15-at-12.46.32.png'),(1168,146,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1112;s:6:\"height\";i:628;s:4:\"file\";s:46:\"2019/08/Screen-Shot-2019-08-15-at-12.46.32.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-15-at-12.46.32-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-15-at-12.46.32-300x169.png\";s:5:\"width\";i:300;s:6:\"height\";i:169;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-08-15-at-12.46.32-768x434.png\";s:5:\"width\";i:768;s:6:\"height\";i:434;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:47:\"Screen-Shot-2019-08-15-at-12.46.32-1024x578.png\";s:5:\"width\";i:1024;s:6:\"height\";i:578;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1301,143,'_is_githuber_markdown_enabled','no'),(1318,143,'_githuber_prismjs','bash,php,clike,markup-templating'),(1319,143,'_is_githuber_sequence',''),(1320,143,'_is_githuber_flow_chart',''),(1323,143,'_oembed_f08c79c539ae90545fbbf724ac626445','{{unknown}}'),(1328,147,'_menu_item_type','post_type'),(1329,147,'_menu_item_menu_item_parent','0'),(1330,147,'_menu_item_object_id','143'),(1331,147,'_menu_item_object','environment'),(1332,147,'_menu_item_target',''),(1333,147,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(1334,147,'_menu_item_xfn',''),(1335,147,'_menu_item_url',''),(1338,148,'_menu_item_type','post_type'),(1339,148,'_menu_item_menu_item_parent','0'),(1340,148,'_menu_item_object_id','138'),(1341,148,'_menu_item_object','environment'),(1342,148,'_menu_item_target',''),(1343,148,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(1344,148,'_menu_item_xfn',''),(1345,148,'_menu_item_url',''),(1357,149,'_is_githuber_markdown','1'),(1361,118,'_is_githuber_mermaid',''),(1362,118,'_is_githuber_katex',''),(1371,9,'_is_githuber_mermaid',''),(1372,9,'_is_githuber_katex',''),(1377,113,'_is_githuber_mermaid',''),(1378,113,'_is_githuber_katex',''),(1388,113,'_githuber_prismjs',''),(1389,113,'_is_githuber_sequence',''),(1390,113,'_is_githuber_flow_chart',''),(1392,113,'_is_githuber_markdown_enabled','no'),(1395,150,'_is_githuber_markdown','1'),(1398,124,'_is_githuber_markdown_enabled','no'),(1400,128,'_is_githuber_markdown_enabled','no'),(1403,133,'_is_githuber_markdown_enabled','yes'),(1405,138,'_is_githuber_markdown_enabled','no'),(1406,151,'_is_githuber_markdown','1'),(1413,154,'_is_githuber_markdown','1'),(1414,154,'_edit_last','1'),(1418,154,'_is_githuber_mermaid',''),(1419,154,'_is_githuber_katex',''),(1420,155,'_is_githuber_markdown','1'),(1422,154,'_edit_lock','1569237103:1'),(1427,154,'custom_popular_ranking','554'),(1431,156,'_is_githuber_markdown','1'),(1436,157,'_is_githuber_markdown','1'),(1453,158,'_is_githuber_markdown','1'),(1475,164,'_is_githuber_markdown','1'),(1476,164,'_edit_last','1'),(1480,164,'_is_githuber_mermaid',''),(1481,164,'_is_githuber_katex',''),(1482,165,'_is_githuber_markdown','1'),(1484,164,'_edit_lock','1569236359:1'),(1485,166,'_wp_attached_file','2019/09/Screen-Shot-2019-09-15-at-16.06.42.png'),(1486,166,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:478;s:6:\"height\";i:143;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-16.06.42-150x143.png\";s:5:\"width\";i:150;s:6:\"height\";i:143;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-09-15-at-16.06.42-300x90.png\";s:5:\"width\";i:300;s:6:\"height\";i:90;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1489,168,'_wp_attached_file','2019/09/Screen-Shot-2019-09-15-at-16.07.11.png'),(1490,168,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:684;s:6:\"height\";i:246;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-16.07.11-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-16.07.11-300x108.png\";s:5:\"width\";i:300;s:6:\"height\";i:108;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1491,169,'_wp_attached_file','2019/09/Screen-Shot-2019-09-15-at-16.06.26.png'),(1492,169,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1235;s:6:\"height\";i:973;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-16.06.26-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-16.06.26-300x236.png\";s:5:\"width\";i:300;s:6:\"height\";i:236;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-16.06.26-768x605.png\";s:5:\"width\";i:768;s:6:\"height\";i:605;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:47:\"Screen-Shot-2019-09-15-at-16.06.26-1024x807.png\";s:5:\"width\";i:1024;s:6:\"height\";i:807;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1493,170,'_wp_attached_file','2019/09/Screen-Shot-2019-09-15-at-16.13.56.png'),(1494,170,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:621;s:6:\"height\";i:45;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-09-15-at-16.13.56-150x45.png\";s:5:\"width\";i:150;s:6:\"height\";i:45;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-09-15-at-16.13.56-300x22.png\";s:5:\"width\";i:300;s:6:\"height\";i:22;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1495,171,'_wp_attached_file','2019/09/Screen-Shot-2019-09-15-at-19.37.54.png'),(1496,171,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:633;s:6:\"height\";i:470;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-19.37.54-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-19.37.54-300x223.png\";s:5:\"width\";i:300;s:6:\"height\";i:223;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1497,172,'_wp_attached_file','2019/09/Screen-Shot-2019-09-15-at-19.40.06.png'),(1498,172,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:547;s:6:\"height\";i:529;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-19.40.06-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-19.40.06-300x290.png\";s:5:\"width\";i:300;s:6:\"height\";i:290;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1499,173,'_wp_attached_file','2019/09/Screen-Shot-2019-09-15-at-19.05.13.png'),(1500,173,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1206;s:6:\"height\";i:780;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-15-at-19.05.13.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-19.05.13-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-19.05.13-300x194.png\";s:5:\"width\";i:300;s:6:\"height\";i:194;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-19.05.13-768x497.png\";s:5:\"width\";i:768;s:6:\"height\";i:497;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:47:\"Screen-Shot-2019-09-15-at-19.05.13-1024x662.png\";s:5:\"width\";i:1024;s:6:\"height\";i:662;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1501,174,'_wp_attached_file','2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png'),(1502,174,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1206;s:6:\"height\";i:780;s:4:\"file\";s:48:\"2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2019-09-15-at-19.05.13-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2019-09-15-at-19.05.13-1-300x194.png\";s:5:\"width\";i:300;s:6:\"height\";i:194;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2019-09-15-at-19.05.13-1-768x497.png\";s:5:\"width\";i:768;s:6:\"height\";i:497;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:49:\"Screen-Shot-2019-09-15-at-19.05.13-1-1024x662.png\";s:5:\"width\";i:1024;s:6:\"height\";i:662;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1508,176,'_is_githuber_markdown','1'),(1514,164,'custom_popular_ranking','2407'),(1522,179,'_is_githuber_markdown','1'),(1524,180,'_wp_attached_file','2019/09/Screen-Shot-2019-09-15-at-17.02.05.png'),(1525,180,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1025;s:6:\"height\";i:538;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-17.02.05-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-17.02.05-300x157.png\";s:5:\"width\";i:300;s:6:\"height\";i:157;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-17.02.05-768x403.png\";s:5:\"width\";i:768;s:6:\"height\";i:403;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:47:\"Screen-Shot-2019-09-15-at-17.02.05-1024x537.png\";s:5:\"width\";i:1024;s:6:\"height\";i:537;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1526,181,'_wp_attached_file','2019/09/Screen-Shot-2019-09-15-at-18.40.17.png'),(1527,181,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1147;s:6:\"height\";i:608;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-18.40.17-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-18.40.17-300x159.png\";s:5:\"width\";i:300;s:6:\"height\";i:159;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-18.40.17-768x407.png\";s:5:\"width\";i:768;s:6:\"height\";i:407;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:47:\"Screen-Shot-2019-09-15-at-18.40.17-1024x543.png\";s:5:\"width\";i:1024;s:6:\"height\";i:543;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1531,182,'_is_githuber_markdown','1'),(1536,183,'_is_githuber_markdown','1'),(1541,184,'_is_githuber_markdown','1'),(1548,185,'_is_githuber_markdown','1'),(1553,186,'_is_githuber_markdown','1'),(1558,187,'_is_githuber_markdown','1'),(1563,188,'_is_githuber_markdown','1'),(1572,189,'_is_githuber_markdown','1'),(1577,190,'_is_githuber_markdown','1'),(1582,191,'_is_githuber_markdown','1'),(1587,192,'_is_githuber_markdown','1'),(1592,193,'_is_githuber_markdown','1'),(1597,194,'_is_githuber_markdown','1'),(1610,196,'_wp_attached_file','2019/09/Screen-Shot-2019-09-15-at-16.55.01.png'),(1611,196,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:645;s:6:\"height\";i:501;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-15-at-16.55.01.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-16.55.01-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-15-at-16.55.01-300x233.png\";s:5:\"width\";i:300;s:6:\"height\";i:233;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1617,197,'_is_githuber_markdown','1'),(1619,198,'_wp_attached_file','2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png'),(1620,198,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1539;s:6:\"height\";i:1060;s:4:\"file\";s:48:\"2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2019-09-15-at-18.02.31-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2019-09-15-at-18.02.31-1-300x207.png\";s:5:\"width\";i:300;s:6:\"height\";i:207;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2019-09-15-at-18.02.31-1-768x529.png\";s:5:\"width\";i:768;s:6:\"height\";i:529;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:49:\"Screen-Shot-2019-09-15-at-18.02.31-1-1024x705.png\";s:5:\"width\";i:1024;s:6:\"height\";i:705;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1626,199,'_is_githuber_markdown','1'),(1633,200,'_is_githuber_markdown','1'),(1640,201,'_is_githuber_markdown','1'),(1642,202,'_is_githuber_markdown','1'),(1645,204,'_wp_attached_file','2019/09/Screen-Shot-2019-09-16-at-21.07.44.png'),(1646,204,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:893;s:6:\"height\";i:697;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-16-at-21.07.44-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-16-at-21.07.44-300x234.png\";s:5:\"width\";i:300;s:6:\"height\";i:234;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-16-at-21.07.44-768x599.png\";s:5:\"width\";i:768;s:6:\"height\";i:599;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1647,202,'_edit_last','1'),(1651,202,'_is_githuber_mermaid',''),(1652,202,'_is_githuber_katex',''),(1653,205,'_is_githuber_markdown','1'),(1655,202,'_edit_lock','1573180485:1'),(1656,206,'_wp_attached_file','2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png'),(1657,206,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:293;s:6:\"height\";i:656;s:4:\"file\";s:62:\"2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:62:\"Screen-Shot-2019-09-16-at-21.08.34-のコピー-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:62:\"Screen-Shot-2019-09-16-at-21.08.34-のコピー-134x300.png\";s:5:\"width\";i:134;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1658,207,'_wp_attached_file','2019/09/wifi-usb.jpg'),(1659,207,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:2048;s:6:\"height\";i:1536;s:4:\"file\";s:20:\"2019/09/wifi-usb.jpg\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"wifi-usb-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"wifi-usb-300x225.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:20:\"wifi-usb-768x576.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:576;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"wifi-usb-1024x768.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:768;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:3:\"1.8\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:8:\"iPhone 7\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:10:\"1568668605\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:4:\"3.99\";s:3:\"iso\";s:2:\"80\";s:13:\"shutter_speed\";s:16:\"0.14285714285714\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),(1660,208,'_wp_attached_file','2019/09/Screen-Shot-2019-09-16-at-21.23.42.png'),(1661,208,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:435;s:6:\"height\";i:198;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-16-at-21.23.42-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-16-at-21.23.42-300x137.png\";s:5:\"width\";i:300;s:6:\"height\";i:137;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1665,209,'_is_githuber_markdown','1'),(1675,214,'_wp_attached_file','2019/09/airodump.jpg'),(1676,214,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:956;s:6:\"height\";i:567;s:4:\"file\";s:20:\"2019/09/airodump.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"airodump-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"airodump-300x178.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:178;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:20:\"airodump-768x455.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:455;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),(1681,218,'_wp_attached_file','2019/09/Screen-Shot-2019-09-16-at-21.27.22.png'),(1682,218,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:793;s:6:\"height\";i:314;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-16-at-21.27.22-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-16-at-21.27.22-300x119.png\";s:5:\"width\";i:300;s:6:\"height\";i:119;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-16-at-21.27.22-768x304.png\";s:5:\"width\";i:768;s:6:\"height\";i:304;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1683,219,'_wp_attached_file','2019/09/Screen-Shot-2019-09-16-at-21.28.22.png'),(1684,219,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:784;s:6:\"height\";i:228;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-16-at-21.28.22-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-09-16-at-21.28.22-300x87.png\";s:5:\"width\";i:300;s:6:\"height\";i:87;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-16-at-21.28.22-768x223.png\";s:5:\"width\";i:768;s:6:\"height\";i:223;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1688,220,'_is_githuber_markdown','1'),(1690,221,'_wp_attached_file','2019/09/airodump-1.jpg'),(1691,221,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:956;s:6:\"height\";i:567;s:4:\"file\";s:22:\"2019/09/airodump-1.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"airodump-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"airodump-1-300x178.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:178;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"airodump-1-768x455.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:455;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),(1695,222,'_is_githuber_markdown','1'),(1697,223,'_wp_attached_file','2019/09/Screen-Shot-2019-09-17-at-0.38.20.png'),(1698,223,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:886;s:6:\"height\";i:194;s:4:\"file\";s:45:\"2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-09-17-at-0.38.20-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:44:\"Screen-Shot-2019-09-17-at-0.38.20-300x66.png\";s:5:\"width\";i:300;s:6:\"height\";i:66;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-09-17-at-0.38.20-768x168.png\";s:5:\"width\";i:768;s:6:\"height\";i:168;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1708,224,'_is_githuber_markdown','1'),(1710,225,'_wp_attached_file','2019/09/handshake.jpg'),(1711,225,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:889;s:6:\"height\";i:187;s:4:\"file\";s:21:\"2019/09/handshake.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"handshake-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"handshake-300x63.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:63;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"handshake-768x162.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:162;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1715,226,'_is_githuber_markdown','1'),(1720,227,'_is_githuber_markdown','1'),(1722,228,'_wp_attached_file','2019/09/Screen-Shot-2019-09-17-at-0.51.28.png'),(1723,228,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:784;s:6:\"height\";i:320;s:4:\"file\";s:45:\"2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-09-17-at-0.51.28-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-09-17-at-0.51.28-300x122.png\";s:5:\"width\";i:300;s:6:\"height\";i:122;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-09-17-at-0.51.28-768x313.png\";s:5:\"width\";i:768;s:6:\"height\";i:313;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1727,229,'_is_githuber_markdown','1'),(1732,230,'_is_githuber_markdown','1'),(1737,231,'_is_githuber_markdown','1'),(1739,202,'custom_popular_ranking','625'),(1743,232,'_is_githuber_markdown','1'),(1748,233,'_is_githuber_markdown','1'),(1753,234,'_is_githuber_markdown','1'),(1762,235,'_is_githuber_markdown','1'),(1767,236,'_is_githuber_markdown','1'),(1769,237,'_wp_attached_file','2019/09/wifi-password.png'),(1770,237,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:25:\"2019/09/wifi-password.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"wifi-password-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"wifi-password-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1774,202,'_thumbnail_id','237'),(1779,238,'_is_githuber_markdown','1'),(1784,239,'_is_githuber_markdown','1'),(1789,240,'_is_githuber_markdown','1'),(1794,241,'_is_githuber_markdown','1'),(1799,242,'_is_githuber_markdown','1'),(1809,245,'_is_githuber_markdown','1'),(1810,246,'_wp_attached_file','2019/09/vpn.png'),(1811,246,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:15:\"2019/09/vpn.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"vpn-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"vpn-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1812,245,'_edit_last','1'),(1816,245,'_is_githuber_mermaid',''),(1817,245,'_is_githuber_katex',''),(1818,245,'_thumbnail_id','246'),(1819,247,'_is_githuber_markdown','1'),(1821,245,'_edit_lock','1571374130:1'),(1822,245,'custom_popular_ranking','705'),(1826,248,'_is_githuber_markdown','1'),(1832,249,'_is_githuber_markdown','1'),(1833,250,'_wp_attached_file','2019/09/Screen-Shot-2019-09-22-at-10.46.29.png'),(1834,250,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:800;s:6:\"height\";i:913;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-10.46.29-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-10.46.29-263x300.png\";s:5:\"width\";i:263;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-10.46.29-768x876.png\";s:5:\"width\";i:768;s:6:\"height\";i:876;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1835,251,'_wp_attached_file','2019/09/Screen-Shot-2019-09-22-at-10.46.43.png'),(1836,251,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:733;s:6:\"height\";i:935;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-10.46.43-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-10.46.43-235x300.png\";s:5:\"width\";i:235;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1837,252,'_wp_attached_file','2019/09/Screen-Shot-2019-09-22-at-10.52.58.png'),(1838,252,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:755;s:6:\"height\";i:966;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-10.52.58-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-10.52.58-234x300.png\";s:5:\"width\";i:234;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1841,249,'_edit_last','1'),(1845,249,'_is_githuber_mermaid',''),(1846,249,'_is_githuber_katex',''),(1848,254,'_is_githuber_markdown','1'),(1850,249,'_edit_lock','1569239064:1'),(1851,249,'custom_popular_ranking','582'),(1855,255,'_is_githuber_markdown','1'),(1861,256,'_wp_attached_file','2019/09/dev-env.png'),(1862,256,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:350;s:6:\"height\";i:350;s:4:\"file\";s:19:\"2019/09/dev-env.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"dev-env-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"dev-env-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1870,257,'_is_githuber_markdown','1'),(1875,258,'_is_githuber_markdown','1'),(1877,259,'_is_githuber_markdown','1'),(1878,260,'_wp_attached_file','2019/09/Screen-Shot-2019-09-22-at-15.59.10.png'),(1879,260,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1376;s:6:\"height\";i:712;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-22-at-15.59.10.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-15.59.10-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-15.59.10-300x155.png\";s:5:\"width\";i:300;s:6:\"height\";i:155;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-15.59.10-768x397.png\";s:5:\"width\";i:768;s:6:\"height\";i:397;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:47:\"Screen-Shot-2019-09-22-at-15.59.10-1024x530.png\";s:5:\"width\";i:1024;s:6:\"height\";i:530;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1880,261,'_wp_attached_file','2019/09/Screen-Shot-2019-09-22-at-16.02.55.png'),(1881,261,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:383;s:6:\"height\";i:1061;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-22-at-16.02.55.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-16.02.55-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-16.02.55-108x300.png\";s:5:\"width\";i:108;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:47:\"Screen-Shot-2019-09-22-at-16.02.55-370x1024.png\";s:5:\"width\";i:370;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1884,263,'_wp_attached_file','2019/09/Screen-Shot-2019-09-22-at-16.04.14.png'),(1885,263,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:357;s:6:\"height\";i:592;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-22-at-16.04.14.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-16.04.14-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-16.04.14-181x300.png\";s:5:\"width\";i:181;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1886,264,'_wp_attached_file','2019/09/Screen-Shot-2019-09-22-at-16.07.39.png'),(1887,264,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:397;s:6:\"height\";i:323;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-22-at-16.07.39.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-16.07.39-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-16.07.39-300x244.png\";s:5:\"width\";i:300;s:6:\"height\";i:244;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1888,265,'_wp_attached_file','2019/09/Screen-Shot-2019-09-22-at-16.12.21.png'),(1889,265,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1201;s:6:\"height\";i:468;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-22-at-16.12.21.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-16.12.21-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-16.12.21-300x117.png\";s:5:\"width\";i:300;s:6:\"height\";i:117;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-16.12.21-768x299.png\";s:5:\"width\";i:768;s:6:\"height\";i:299;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:47:\"Screen-Shot-2019-09-22-at-16.12.21-1024x399.png\";s:5:\"width\";i:1024;s:6:\"height\";i:399;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1890,266,'_wp_attached_file','2019/09/Screen-Shot-2019-09-22-at-16.23.03.png'),(1891,266,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:670;s:6:\"height\";i:270;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-22-at-16.23.03.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-16.23.03-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-16.23.03-300x121.png\";s:5:\"width\";i:300;s:6:\"height\";i:121;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1892,267,'_wp_attached_file','2019/09/Screen-Shot-2019-09-22-at-16.37.22.png'),(1893,267,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1142;s:6:\"height\";i:254;s:4:\"file\";s:46:\"2019/09/Screen-Shot-2019-09-22-at-16.37.22.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-16.37.22-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-09-22-at-16.37.22-300x67.png\";s:5:\"width\";i:300;s:6:\"height\";i:67;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-09-22-at-16.37.22-768x171.png\";s:5:\"width\";i:768;s:6:\"height\";i:171;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:47:\"Screen-Shot-2019-09-22-at-16.37.22-1024x228.png\";s:5:\"width\";i:1024;s:6:\"height\";i:228;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(1896,259,'_edit_last','1'),(1900,259,'_is_githuber_mermaid',''),(1901,259,'_is_githuber_katex',''),(1903,269,'_is_githuber_markdown','1'),(1905,259,'_edit_lock','1569237189:1'),(1910,259,'custom_popular_ranking','1745'),(1914,270,'_is_githuber_markdown','1'),(1919,271,'_is_githuber_markdown','1'),(1926,273,'_is_githuber_markdown','1'),(1927,273,'_edit_last','1'),(1931,273,'_is_githuber_mermaid',''),(1932,273,'_is_githuber_katex',''),(1933,274,'_is_githuber_markdown','1'),(1935,273,'_edit_lock','1569235206:1'),(1946,276,'_is_githuber_markdown','1'),(1951,277,'_is_githuber_markdown','1'),(1957,273,'custom_popular_ranking','698'),(1961,278,'_is_githuber_markdown','1'),(1966,279,'_is_githuber_markdown','1'),(1971,280,'_is_githuber_markdown','1'),(1977,45,'_is_githuber_mermaid',''),(1978,45,'_is_githuber_katex',''),(1990,110,'_githuber_prismjs',''),(1991,110,'_is_githuber_sequence',''),(1992,110,'_is_githuber_flow_chart',''),(1993,110,'_is_githuber_mermaid',''),(1994,110,'_is_githuber_katex',''),(2000,65,'_is_githuber_mermaid',''),(2001,65,'_is_githuber_katex',''),(2011,65,'_githuber_prismjs','bash'),(2012,65,'_is_githuber_sequence',''),(2013,65,'_is_githuber_flow_chart',''),(2016,133,'_githuber_prismjs','bash'),(2017,133,'_is_githuber_sequence',''),(2018,133,'_is_githuber_flow_chart',''),(2024,9,'_githuber_prismjs','bash'),(2025,9,'_is_githuber_sequence',''),(2026,9,'_is_githuber_flow_chart',''),(2028,7,'_githuber_prismjs',''),(2029,7,'_is_githuber_sequence',''),(2030,7,'_is_githuber_flow_chart',''),(2031,7,'_is_githuber_mermaid',''),(2032,7,'_is_githuber_katex',''),(2034,118,'_githuber_prismjs','bash'),(2035,118,'_is_githuber_sequence',''),(2036,118,'_is_githuber_flow_chart',''),(2065,245,'_wp_old_date','2019-09-22'),(2090,282,'_is_githuber_markdown','1'),(2097,283,'_is_githuber_markdown','1'),(2110,284,'_is_githuber_markdown','1'),(2117,285,'_is_githuber_markdown','1'),(2119,286,'_wp_attached_file','2019/09/idea-npm-1.png'),(2120,286,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:22:\"2019/09/idea-npm-1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"idea-npm-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"idea-npm-1-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2124,259,'_thumbnail_id','286'),(2127,287,'_is_githuber_markdown','1'),(2134,288,'_is_githuber_markdown','1'),(2172,35,'_is_githuber_mermaid',''),(2173,35,'_is_githuber_katex',''),(2175,20,'_githuber_prismjs',''),(2176,20,'_is_githuber_sequence',''),(2177,20,'_is_githuber_flow_chart',''),(2178,20,'_is_githuber_mermaid',''),(2179,20,'_is_githuber_katex',''),(2194,294,'_edit_lock','1571375403:1'),(2195,294,'_edit_last','1'),(2198,294,'custom_popular_ranking','742'),(2200,297,'_wp_attached_file','2019/09/gitlab-webhook.png'),(2201,297,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1495;s:6:\"height\";i:977;s:4:\"file\";s:26:\"2019/09/gitlab-webhook.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"gitlab-webhook-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"gitlab-webhook-300x196.png\";s:5:\"width\";i:300;s:6:\"height\";i:196;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:26:\"gitlab-webhook-768x502.png\";s:5:\"width\";i:768;s:6:\"height\";i:502;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:27:\"gitlab-webhook-1024x669.png\";s:5:\"width\";i:1024;s:6:\"height\";i:669;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2205,294,'_is_githuber_mermaid',''),(2206,294,'_is_githuber_katex',''),(2207,298,'_is_githuber_markdown','1'),(2209,294,'_is_githuber_markdown','1'),(2213,299,'_is_githuber_markdown','1'),(2230,300,'_is_githuber_markdown','1'),(2239,301,'_is_githuber_markdown','1'),(2244,302,'_is_githuber_markdown','1'),(2249,303,'_is_githuber_markdown','1'),(2254,304,'_is_githuber_markdown','1'),(2259,305,'_is_githuber_markdown','1'),(2263,307,'_wp_attached_file','2019/09/wodpress-sync.png'),(2264,307,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:25:\"2019/09/wodpress-sync.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"wodpress-sync-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"wodpress-sync-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2268,294,'_thumbnail_id','307'),(2273,308,'_is_githuber_markdown','1'),(2285,309,'_wp_attached_file','2019/09/chrome-vimim.jpg'),(2286,309,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:24:\"2019/09/chrome-vimim.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"chrome-vimim-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"chrome-vimim-300x250.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2290,249,'_thumbnail_id','309'),(2294,310,'_wp_attached_file','2019/09/mysql-login.jpg'),(2295,310,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:23:\"2019/09/mysql-login.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"mysql-login-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"mysql-login-300x250.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2299,273,'_thumbnail_id','310'),(2303,311,'_wp_attached_file','2019/09/dockrer-on-vagrant.jpg'),(2304,311,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:30:\"2019/09/dockrer-on-vagrant.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"dockrer-on-vagrant-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"dockrer-on-vagrant-300x250.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2308,164,'_thumbnail_id','311'),(2312,312,'_wp_attached_file','2019/09/wodpress-sync-1.png'),(2313,312,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:27:\"2019/09/wodpress-sync-1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"wodpress-sync-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"wodpress-sync-1-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2314,313,'_wp_attached_file','2019/09/vagrant-tpl.jpg'),(2315,313,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:23:\"2019/09/vagrant-tpl.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"vagrant-tpl-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"vagrant-tpl-300x250.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2319,154,'_thumbnail_id','313'),(2323,294,'_is_githuber_markdown_enabled','yes'),(2330,315,'_is_githuber_markdown','1'),(2332,294,'_githuber_prismjs','php,clike,markup-templating,bash'),(2333,294,'_is_githuber_sequence',''),(2334,294,'_is_githuber_flow_chart',''),(2338,273,'_githuber_prismjs','bash'),(2339,273,'_is_githuber_sequence',''),(2340,273,'_is_githuber_flow_chart',''),(2343,316,'_is_githuber_markdown','1'),(2350,317,'_is_githuber_markdown','1'),(2358,319,'_is_githuber_markdown','1'),(2365,320,'_is_githuber_markdown','1'),(2372,321,'_is_githuber_markdown','1'),(2374,245,'_githuber_prismjs',''),(2375,245,'_is_githuber_sequence',''),(2376,245,'_is_githuber_flow_chart',''),(2379,322,'_is_githuber_markdown','1'),(2386,323,'_is_githuber_markdown','1'),(2393,324,'_is_githuber_markdown','1'),(2400,325,'_is_githuber_markdown','1'),(2402,164,'_githuber_prismjs','bash'),(2403,164,'_is_githuber_sequence',''),(2404,164,'_is_githuber_flow_chart',''),(2407,326,'_is_githuber_markdown','1'),(2414,327,'_is_githuber_markdown','1'),(2416,154,'_githuber_prismjs','bash'),(2417,154,'_is_githuber_sequence',''),(2418,154,'_is_githuber_flow_chart',''),(2421,328,'_is_githuber_markdown','1'),(2423,259,'_githuber_prismjs','bash'),(2424,259,'_is_githuber_sequence',''),(2425,259,'_is_githuber_flow_chart',''),(2428,329,'_is_githuber_markdown','1'),(2435,330,'_is_githuber_markdown','1'),(2437,331,'_is_githuber_markdown','1'),(2443,332,'_is_githuber_markdown','1'),(2450,333,'_is_githuber_markdown','1'),(2457,334,'_is_githuber_markdown','1'),(2476,335,'_is_githuber_markdown','1'),(2483,336,'_is_githuber_markdown','1'),(2490,337,'_is_githuber_markdown','1'),(2497,338,'_is_githuber_markdown','1'),(2504,339,'_is_githuber_markdown','1'),(2517,340,'_is_githuber_markdown','1'),(2522,331,'_is_githuber_mermaid',''),(2523,331,'_is_githuber_katex',''),(2524,249,'_githuber_prismjs','bash'),(2525,249,'_is_githuber_sequence',''),(2526,249,'_is_githuber_flow_chart',''),(2529,341,'_is_githuber_markdown','1'),(2531,331,'_githuber_prismjs','bash'),(2532,331,'_is_githuber_sequence',''),(2533,331,'_is_githuber_flow_chart',''),(2534,45,'_githuber_prismjs','json,php,clike,markup-templating,bash'),(2535,45,'_is_githuber_sequence',''),(2536,45,'_is_githuber_flow_chart',''),(2539,342,'_is_githuber_markdown','1'),(2546,344,'_is_githuber_markdown','1'),(2547,344,'_edit_last','1'),(2551,344,'_is_githuber_mermaid',''),(2552,344,'_is_githuber_katex',''),(2553,345,'_is_githuber_markdown','1'),(2555,344,'_edit_lock','1572703116:1'),(2565,349,'_is_githuber_markdown','1'),(2571,344,'custom_popular_ranking','512'),(2600,352,'_is_githuber_markdown','1'),(2607,353,'_is_githuber_markdown','1'),(2609,354,'_is_githuber_markdown','1'),(2610,354,'_edit_last','1'),(2614,354,'_is_githuber_mermaid',''),(2615,354,'_is_githuber_katex',''),(2616,355,'_is_githuber_markdown','1'),(2618,354,'_edit_lock','1572709999:1'),(2622,356,'_is_githuber_markdown','1'),(2629,344,'_wp_old_slug','vagrantvirtualbox%e3%81%a8vmwear-fusion-%e3%82%92%e3%83%8d%e3%83%83%e3%83%88%e3%83%af%e3%83%bc%e3%82%af%e5%85%b1%e6%9c%89'),(2634,357,'_is_githuber_markdown','1'),(2640,354,'custom_popular_ranking','839'),(2645,358,'_is_githuber_markdown','1'),(2646,358,'_edit_last','1'),(2650,358,'_is_githuber_mermaid',''),(2651,358,'_is_githuber_katex',''),(2652,359,'_is_githuber_markdown','1'),(2654,358,'_edit_lock','1572703203:1'),(2660,361,'_is_githuber_markdown','1'),(2667,363,'_is_githuber_markdown','1'),(2672,364,'_is_githuber_markdown','1'),(2685,358,'custom_popular_ranking','1504'),(2692,367,'_is_githuber_markdown','1'),(2705,369,'_is_githuber_markdown','1'),(2706,369,'_edit_last','1'),(2710,369,'_is_githuber_mermaid',''),(2711,369,'_is_githuber_katex',''),(2712,370,'_is_githuber_markdown','1'),(2714,369,'_edit_lock','1573059564:1'),(2726,369,'custom_popular_ranking','327'),(2730,372,'_is_githuber_markdown','1'),(2732,373,'_is_githuber_markdown','1'),(2741,373,'_edit_last','1'),(2745,373,'_is_githuber_mermaid',''),(2746,373,'_is_githuber_katex',''),(2747,378,'_is_githuber_markdown','1'),(2749,373,'_edit_lock','1571531297:1'),(2753,379,'_is_githuber_markdown','1'),(2759,373,'custom_popular_ranking','3969'),(2763,380,'_is_githuber_markdown','1'),(2768,381,'_is_githuber_markdown','1'),(2781,383,'_is_githuber_markdown','1'),(2788,383,'_edit_last','1'),(2792,383,'_is_githuber_mermaid',''),(2793,383,'_is_githuber_katex',''),(2794,387,'_is_githuber_markdown','1'),(2796,383,'_edit_lock','1573180305:1'),(2808,383,'custom_popular_ranking','647'),(2812,389,'_is_githuber_markdown','1'),(2817,390,'_is_githuber_markdown','1'),(2822,391,'_is_githuber_markdown','1'),(2827,392,'_is_githuber_markdown','1'),(2832,393,'_is_githuber_markdown','1'),(2837,394,'_is_githuber_markdown','1'),(2842,395,'_is_githuber_markdown','1'),(2852,397,'_is_githuber_markdown','1'),(2857,398,'_is_githuber_markdown','1'),(2862,399,'_is_githuber_markdown','1'),(2873,400,'_is_githuber_markdown','1'),(2885,402,'_wp_attached_file','2019/10/vmwear-vagrant-network.png'),(2886,402,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:34:\"2019/10/vmwear-vagrant-network.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"vmwear-vagrant-network-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:34:\"vmwear-vagrant-network-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2887,403,'_wp_attached_file','2019/10/スクリーンショット-2019-10-01-12.39.35.png'),(2888,403,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1292;s:6:\"height\";i:926;s:4:\"file\";s:59:\"2019/10/スクリーンショット-2019-10-01-12.39.35.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:59:\"スクリーンショット-2019-10-01-12.39.35-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:59:\"スクリーンショット-2019-10-01-12.39.35-300x215.png\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:59:\"スクリーンショット-2019-10-01-12.39.35-768x550.png\";s:5:\"width\";i:768;s:6:\"height\";i:550;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:60:\"スクリーンショット-2019-10-01-12.39.35-1024x734.png\";s:5:\"width\";i:1024;s:6:\"height\";i:734;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2889,404,'_wp_attached_file','2019/10/スクリーンショット-2019-10-01-12.40.35.png'),(2890,404,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1276;s:6:\"height\";i:648;s:4:\"file\";s:59:\"2019/10/スクリーンショット-2019-10-01-12.40.35.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:59:\"スクリーンショット-2019-10-01-12.40.35-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:59:\"スクリーンショット-2019-10-01-12.40.35-300x152.png\";s:5:\"width\";i:300;s:6:\"height\";i:152;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:59:\"スクリーンショット-2019-10-01-12.40.35-768x390.png\";s:5:\"width\";i:768;s:6:\"height\";i:390;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:60:\"スクリーンショット-2019-10-01-12.40.35-1024x520.png\";s:5:\"width\";i:1024;s:6:\"height\";i:520;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2891,405,'_wp_attached_file','2019/10/スクリーンショット-2019-10-01-14.00.03.png'),(2892,405,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1230;s:6:\"height\";i:736;s:4:\"file\";s:59:\"2019/10/スクリーンショット-2019-10-01-14.00.03.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:59:\"スクリーンショット-2019-10-01-14.00.03-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:59:\"スクリーンショット-2019-10-01-14.00.03-300x180.png\";s:5:\"width\";i:300;s:6:\"height\";i:180;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:59:\"スクリーンショット-2019-10-01-14.00.03-768x460.png\";s:5:\"width\";i:768;s:6:\"height\";i:460;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:60:\"スクリーンショット-2019-10-01-14.00.03-1024x613.png\";s:5:\"width\";i:1024;s:6:\"height\";i:613;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2897,406,'_wp_attached_file','2019/10/pwgen.jpg'),(2898,406,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:17:\"2019/10/pwgen.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"pwgen-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"pwgen-300x250.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2902,354,'_thumbnail_id','406'),(2904,407,'_wp_attached_file','2019/10/スクリーンショット-2019-10-01-15.47.43.png'),(2905,407,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1568;s:6:\"height\";i:1764;s:4:\"file\";s:59:\"2019/10/スクリーンショット-2019-10-01-15.47.43.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:59:\"スクリーンショット-2019-10-01-15.47.43-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:59:\"スクリーンショット-2019-10-01-15.47.43-267x300.png\";s:5:\"width\";i:267;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:59:\"スクリーンショット-2019-10-01-15.47.43-768x864.png\";s:5:\"width\";i:768;s:6:\"height\";i:864;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:60:\"スクリーンショット-2019-10-01-15.47.43-910x1024.png\";s:5:\"width\";i:910;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2906,408,'_wp_attached_file','2019/10/スクリーンショット-2019-10-01-15.48.02.png'),(2907,408,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1582;s:6:\"height\";i:1730;s:4:\"file\";s:59:\"2019/10/スクリーンショット-2019-10-01-15.48.02.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:59:\"スクリーンショット-2019-10-01-15.48.02-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:59:\"スクリーンショット-2019-10-01-15.48.02-274x300.png\";s:5:\"width\";i:274;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:59:\"スクリーンショット-2019-10-01-15.48.02-768x840.png\";s:5:\"width\";i:768;s:6:\"height\";i:840;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:60:\"スクリーンショット-2019-10-01-15.48.02-936x1024.png\";s:5:\"width\";i:936;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2910,410,'_wp_attached_file','2019/10/care-your-eyes.png'),(2911,410,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:26:\"2019/10/care-your-eyes.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"care-your-eyes-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"care-your-eyes-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2915,358,'_thumbnail_id','410'),(2917,411,'_wp_attached_file','2019/10/sshs.jpg'),(2918,411,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:16:\"2019/10/sshs.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"sshs-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:16:\"sshs-300x250.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2922,369,'_thumbnail_id','411'),(2927,344,'_thumbnail_id','402'),(2930,413,'_wp_attached_file','2019/10/Screen-Shot-2019-10-01-at-20.57.15.png'),(2931,413,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1854;s:6:\"height\";i:1134;s:4:\"file\";s:46:\"2019/10/Screen-Shot-2019-10-01-at-20.57.15.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-10-01-at-20.57.15-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-10-01-at-20.57.15-300x183.png\";s:5:\"width\";i:300;s:6:\"height\";i:183;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-10-01-at-20.57.15-768x470.png\";s:5:\"width\";i:768;s:6:\"height\";i:470;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:47:\"Screen-Shot-2019-10-01-at-20.57.15-1024x626.png\";s:5:\"width\";i:1024;s:6:\"height\";i:626;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2932,414,'_wp_attached_file','2019/10/Screen-Shot-2019-10-01-at-20.57.31.png'),(2933,414,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1606;s:6:\"height\";i:1112;s:4:\"file\";s:46:\"2019/10/Screen-Shot-2019-10-01-at-20.57.31.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-10-01-at-20.57.31-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-10-01-at-20.57.31-300x208.png\";s:5:\"width\";i:300;s:6:\"height\";i:208;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-10-01-at-20.57.31-768x532.png\";s:5:\"width\";i:768;s:6:\"height\";i:532;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:47:\"Screen-Shot-2019-10-01-at-20.57.31-1024x709.png\";s:5:\"width\";i:1024;s:6:\"height\";i:709;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2934,415,'_wp_attached_file','2019/10/Screen-Shot-2019-10-01-at-21.07.26.png'),(2935,415,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1839;s:6:\"height\";i:1137;s:4:\"file\";s:46:\"2019/10/Screen-Shot-2019-10-01-at-21.07.26.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-10-01-at-21.07.26-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-10-01-at-21.07.26-300x185.png\";s:5:\"width\";i:300;s:6:\"height\";i:185;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-10-01-at-21.07.26-768x475.png\";s:5:\"width\";i:768;s:6:\"height\";i:475;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:47:\"Screen-Shot-2019-10-01-at-21.07.26-1024x633.png\";s:5:\"width\";i:1024;s:6:\"height\";i:633;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2936,416,'_wp_attached_file','2019/10/Screen-Shot-2019-10-01-at-21.09.29.png'),(2937,416,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1404;s:6:\"height\";i:1103;s:4:\"file\";s:46:\"2019/10/Screen-Shot-2019-10-01-at-21.09.29.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-10-01-at-21.09.29-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-10-01-at-21.09.29-300x236.png\";s:5:\"width\";i:300;s:6:\"height\";i:236;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-10-01-at-21.09.29-768x603.png\";s:5:\"width\";i:768;s:6:\"height\";i:603;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:47:\"Screen-Shot-2019-10-01-at-21.09.29-1024x804.png\";s:5:\"width\";i:1024;s:6:\"height\";i:804;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2938,417,'_wp_attached_file','2019/10/Screen-Shot-2019-10-02-at-21.58.08.png'),(2939,417,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:962;s:6:\"height\";i:527;s:4:\"file\";s:46:\"2019/10/Screen-Shot-2019-10-02-at-21.58.08.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-10-02-at-21.58.08-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-10-02-at-21.58.08-300x164.png\";s:5:\"width\";i:300;s:6:\"height\";i:164;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-10-02-at-21.58.08-768x421.png\";s:5:\"width\";i:768;s:6:\"height\";i:421;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2944,418,'_wp_attached_file','2019/10/parrot.jpg'),(2945,418,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:18:\"2019/10/parrot.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"parrot-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"parrot-300x250.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2949,373,'_thumbnail_id','418'),(2959,419,'_wp_attached_file','2019/10/Screen-Shot-2019-10-02-at-21.58.08-1.png'),(2960,419,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:962;s:6:\"height\";i:527;s:4:\"file\";s:48:\"2019/10/Screen-Shot-2019-10-02-at-21.58.08-1.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2019-10-02-at-21.58.08-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2019-10-02-at-21.58.08-1-300x164.png\";s:5:\"width\";i:300;s:6:\"height\";i:164;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:48:\"Screen-Shot-2019-10-02-at-21.58.08-1-768x421.png\";s:5:\"width\";i:768;s:6:\"height\";i:421;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2961,420,'_wp_attached_file','2019/10/karabiner.jpg'),(2962,420,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:21:\"2019/10/karabiner.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"karabiner-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"karabiner-300x250.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2963,421,'_wp_attached_file','2019/10/us-kbd.png'),(2964,421,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:1020;s:6:\"height\";i:480;s:4:\"file\";s:18:\"2019/10/us-kbd.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"us-kbd-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"us-kbd-300x141.png\";s:5:\"width\";i:300;s:6:\"height\";i:141;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:18:\"us-kbd-768x361.png\";s:5:\"width\";i:768;s:6:\"height\";i:361;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(2968,383,'_thumbnail_id','420'),(2978,373,'_githuber_prismjs','bash'),(2979,373,'_is_githuber_sequence',''),(2980,373,'_is_githuber_flow_chart',''),(2987,422,'_is_githuber_markdown','1'),(2992,423,'_is_githuber_markdown','1'),(2997,424,'_is_githuber_markdown','1'),(3002,425,'_is_githuber_markdown','1'),(3011,426,'_is_githuber_markdown','1'),(3016,427,'_is_githuber_markdown','1'),(3025,428,'_is_githuber_markdown','1'),(3030,429,'_is_githuber_markdown','1'),(3034,35,'_githuber_prismjs',''),(3035,35,'_is_githuber_sequence',''),(3036,35,'_is_githuber_flow_chart',''),(3037,432,'_is_githuber_markdown','1'),(3051,434,'_is_githuber_markdown','1'),(3053,344,'_githuber_prismjs','bash'),(3054,344,'_is_githuber_sequence',''),(3055,344,'_is_githuber_flow_chart',''),(3058,435,'_is_githuber_markdown','1'),(3060,358,'_githuber_prismjs',''),(3061,358,'_is_githuber_sequence',''),(3062,358,'_is_githuber_flow_chart',''),(3065,358,'_wp_old_date','2019-10-18'),(3072,383,'_wp_old_date','2019-10-20'),(3079,436,'_is_githuber_markdown','1'),(3086,437,'_is_githuber_markdown','1'),(3097,369,'_wp_old_date','2019-10-18'),(3104,354,'_wp_old_date','2019-10-18'),(3106,354,'_githuber_prismjs','bash'),(3107,354,'_is_githuber_sequence',''),(3108,354,'_is_githuber_flow_chart',''),(3112,438,'_is_githuber_markdown','1'),(3113,438,'_edit_last','1'),(3117,438,'_is_githuber_mermaid',''),(3118,438,'_is_githuber_katex',''),(3119,439,'_is_githuber_markdown','1'),(3121,438,'_edit_lock','1572809244:1'),(3122,440,'_wp_attached_file','2019/11/Screen-Shot-2019-11-02-at-16.20.03.png'),(3123,440,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:907;s:6:\"height\";i:325;s:4:\"file\";s:46:\"2019/11/Screen-Shot-2019-11-02-at-16.20.03.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-11-02-at-16.20.03-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-11-02-at-16.20.03-300x107.png\";s:5:\"width\";i:300;s:6:\"height\";i:107;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-11-02-at-16.20.03-768x275.png\";s:5:\"width\";i:768;s:6:\"height\";i:275;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3129,443,'_is_githuber_markdown','1'),(3134,444,'_is_githuber_markdown','1'),(3139,448,'_wp_attached_file','2019/11/Screen-Shot-2019-11-03-at-11.45.33.png'),(3140,448,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:958;s:6:\"height\";i:298;s:4:\"file\";s:46:\"2019/11/Screen-Shot-2019-11-03-at-11.45.33.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-11-03-at-11.45.33-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:45:\"Screen-Shot-2019-11-03-at-11.45.33-300x93.png\";s:5:\"width\";i:300;s:6:\"height\";i:93;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2019-11-03-at-11.45.33-768x239.png\";s:5:\"width\";i:768;s:6:\"height\";i:239;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3144,449,'_is_githuber_markdown','1'),(3149,450,'_is_githuber_markdown','1'),(3155,438,'custom_popular_ranking','1226'),(3159,451,'_is_githuber_markdown','1'),(3168,452,'_is_githuber_markdown','1'),(3173,453,'_is_githuber_markdown','1'),(3178,454,'_is_githuber_markdown','1'),(3180,455,'_wp_attached_file','2019/11/jupyterlab_logo.png'),(3181,455,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:27:\"2019/11/jupyterlab_logo.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"jupyterlab_logo-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"jupyterlab_logo-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3185,438,'_thumbnail_id','455'),(3191,438,'_githuber_prismjs','bash'),(3192,438,'_is_githuber_sequence',''),(3193,438,'_is_githuber_flow_chart',''),(3197,369,'_githuber_prismjs','bash'),(3198,369,'_is_githuber_sequence',''),(3199,369,'_is_githuber_flow_chart',''),(3202,456,'_is_githuber_markdown','1'),(3204,383,'_githuber_prismjs',''),(3205,383,'_is_githuber_sequence',''),(3206,383,'_is_githuber_flow_chart',''),(3210,202,'_githuber_prismjs','bash'),(3211,202,'_is_githuber_sequence',''),(3212,202,'_is_githuber_flow_chart',''),(3228,461,'_is_githuber_markdown','1'),(3229,461,'_edit_last','1'),(3230,461,'_githuber_prismjs',''),(3231,461,'_is_githuber_sequence',''),(3232,461,'_is_githuber_flow_chart',''),(3233,461,'_is_githuber_mermaid',''),(3234,461,'_is_githuber_katex',''),(3235,462,'_is_githuber_markdown','1'),(3237,461,'_edit_lock','1581653314:1'),(3238,463,'_is_githuber_markdown','1'),(3239,463,'_edit_last','1'),(3243,463,'_is_githuber_mermaid',''),(3244,463,'_is_githuber_katex',''),(3245,464,'_is_githuber_markdown','1'),(3247,463,'_edit_lock','1581764665:1'),(3251,465,'_is_githuber_markdown','1'),(3254,467,'_is_githuber_markdown','1'),(3255,467,'_edit_last','1'),(3259,467,'_is_githuber_mermaid',''),(3260,467,'_is_githuber_katex',''),(3261,468,'_is_githuber_markdown','1'),(3263,467,'_edit_lock','1581764648:1'),(3264,469,'_is_githuber_markdown','1'),(3265,469,'_edit_last','1'),(3269,469,'_is_githuber_mermaid',''),(3270,469,'_is_githuber_katex',''),(3271,470,'_is_githuber_markdown','1'),(3273,469,'_edit_lock','1581764588:1'),(3274,471,'_is_githuber_markdown','1'),(3275,471,'_edit_last','1'),(3279,471,'_is_githuber_mermaid',''),(3280,471,'_is_githuber_katex',''),(3281,472,'_is_githuber_markdown','1'),(3283,471,'_edit_lock','1581764677:1'),(3284,473,'_is_githuber_markdown','1'),(3285,473,'_edit_last','1'),(3289,473,'_is_githuber_mermaid',''),(3290,473,'_is_githuber_katex',''),(3291,474,'_is_githuber_markdown','1'),(3293,473,'_edit_lock','1581764545:1'),(3298,475,'_is_githuber_markdown','1'),(3299,475,'_edit_last','1'),(3303,475,'_is_githuber_mermaid',''),(3304,475,'_is_githuber_katex',''),(3305,476,'_is_githuber_markdown','1'),(3307,475,'_edit_lock','1581766339:1'),(3308,477,'_is_githuber_markdown','1'),(3309,477,'_edit_last','1'),(3313,477,'_is_githuber_mermaid',''),(3314,477,'_is_githuber_katex',''),(3315,478,'_is_githuber_markdown','1'),(3317,477,'_edit_lock','1581764606:1'),(3322,479,'_is_githuber_markdown','1'),(3323,479,'_edit_last','1'),(3327,479,'_is_githuber_mermaid',''),(3328,479,'_is_githuber_katex',''),(3329,480,'_is_githuber_markdown','1'),(3331,479,'_edit_lock','1581657058:1'),(3332,481,'_is_githuber_markdown','1'),(3333,481,'_edit_last','1'),(3337,481,'_is_githuber_mermaid',''),(3338,481,'_is_githuber_katex',''),(3339,482,'_is_githuber_markdown','1'),(3341,481,'_edit_lock','1581657245:1'),(3346,483,'_is_githuber_markdown','1'),(3347,483,'_edit_last','1'),(3351,483,'_is_githuber_mermaid',''),(3352,483,'_is_githuber_katex',''),(3353,484,'_is_githuber_markdown','1'),(3355,483,'_edit_lock','1581657249:1'),(3359,485,'_is_githuber_markdown','1'),(3361,486,'_is_githuber_markdown','1'),(3362,486,'_edit_last','1'),(3363,486,'_githuber_prismjs',''),(3364,486,'_is_githuber_sequence',''),(3365,486,'_is_githuber_flow_chart',''),(3366,486,'_is_githuber_mermaid',''),(3367,486,'_is_githuber_katex',''),(3368,487,'_is_githuber_markdown','1'),(3370,486,'_edit_lock','1581657227:1'),(3375,489,'_is_githuber_markdown','1'),(3377,483,'_githuber_prismjs',''),(3378,483,'_is_githuber_sequence',''),(3379,483,'_is_githuber_flow_chart',''),(3380,490,'_is_githuber_markdown','1'),(3382,491,'_is_githuber_markdown','1'),(3383,491,'_edit_last','1'),(3387,491,'_is_githuber_mermaid',''),(3388,491,'_is_githuber_katex',''),(3389,492,'_is_githuber_markdown','1'),(3391,491,'_edit_lock','1581657386:1'),(3392,491,'_githuber_prismjs',''),(3393,491,'_is_githuber_sequence',''),(3394,491,'_is_githuber_flow_chart',''),(3395,493,'_is_githuber_markdown','1'),(3397,494,'_is_githuber_markdown','1'),(3398,494,'_edit_last','1'),(3402,494,'_is_githuber_mermaid',''),(3403,494,'_is_githuber_katex',''),(3404,495,'_is_githuber_markdown','1'),(3406,494,'_edit_lock','1581656052:1'),(3407,494,'_githuber_prismjs',''),(3408,494,'_is_githuber_sequence',''),(3409,494,'_is_githuber_flow_chart',''),(3411,496,'_is_githuber_markdown','1'),(3412,496,'_edit_last','1'),(3416,496,'_is_githuber_mermaid',''),(3417,496,'_is_githuber_katex',''),(3418,497,'_is_githuber_markdown','1'),(3420,496,'_edit_lock','1581656113:1'),(3421,496,'_githuber_prismjs',''),(3422,496,'_is_githuber_sequence',''),(3423,496,'_is_githuber_flow_chart',''),(3425,498,'_is_githuber_markdown','1'),(3426,498,'_edit_last','1'),(3430,498,'_is_githuber_mermaid',''),(3431,498,'_is_githuber_katex',''),(3432,499,'_is_githuber_markdown','1'),(3434,498,'_edit_lock','1581656182:1'),(3435,498,'_githuber_prismjs',''),(3436,498,'_is_githuber_sequence',''),(3437,498,'_is_githuber_flow_chart',''),(3463,504,'_is_githuber_markdown','1'),(3464,504,'_edit_last','1'),(3468,504,'_is_githuber_mermaid',''),(3469,504,'_is_githuber_katex',''),(3470,505,'_is_githuber_markdown','1'),(3472,504,'_edit_lock','1581656403:1'),(3473,504,'_githuber_prismjs',''),(3474,504,'_is_githuber_sequence',''),(3475,504,'_is_githuber_flow_chart',''),(3477,506,'_is_githuber_markdown','1'),(3478,506,'_edit_last','1'),(3482,506,'_is_githuber_mermaid',''),(3483,506,'_is_githuber_katex',''),(3484,507,'_is_githuber_markdown','1'),(3486,506,'_edit_lock','1581656468:1'),(3487,506,'_githuber_prismjs',''),(3488,506,'_is_githuber_sequence',''),(3489,506,'_is_githuber_flow_chart',''),(3490,508,'_is_githuber_markdown','1'),(3492,509,'_is_githuber_markdown','1'),(3493,509,'_edit_last','1'),(3494,509,'_githuber_prismjs',''),(3495,509,'_is_githuber_sequence',''),(3496,509,'_is_githuber_flow_chart',''),(3497,509,'_is_githuber_mermaid',''),(3498,509,'_is_githuber_katex',''),(3499,510,'_is_githuber_markdown','1'),(3501,509,'_edit_lock','1581656553:1'),(3502,511,'_is_githuber_markdown','1'),(3503,511,'_edit_last','1'),(3504,511,'_githuber_prismjs',''),(3505,511,'_is_githuber_sequence',''),(3506,511,'_is_githuber_flow_chart',''),(3507,511,'_is_githuber_mermaid',''),(3508,511,'_is_githuber_katex',''),(3509,512,'_is_githuber_markdown','1'),(3511,511,'_edit_lock','1581656608:1'),(3534,516,'_is_githuber_markdown','1'),(3539,517,'_is_githuber_markdown','1'),(3544,518,'_is_githuber_markdown','1'),(3546,479,'_githuber_prismjs',''),(3547,479,'_is_githuber_sequence',''),(3548,479,'_is_githuber_flow_chart',''),(3549,519,'_is_githuber_markdown','1'),(3551,481,'_githuber_prismjs',''),(3552,481,'_is_githuber_sequence',''),(3553,481,'_is_githuber_flow_chart',''),(3554,520,'_is_githuber_markdown','1'),(3559,521,'_is_githuber_markdown','1'),(3564,522,'_is_githuber_markdown','1'),(3579,525,'_wp_attached_file','2020/02/nginx-proxy.png'),(3580,525,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:23:\"2020/02/nginx-proxy.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"nginx-proxy-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"nginx-proxy-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3603,526,'_is_githuber_markdown','1'),(3614,527,'_is_githuber_markdown','1'),(3621,471,'custom_popular_ranking','470'),(3626,528,'_is_githuber_markdown','1'),(3628,529,'_wp_attached_file','2020/02/laravel-pre-01.png'),(3629,529,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:26:\"2020/02/laravel-pre-01.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"laravel-pre-01-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"laravel-pre-01-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3634,471,'_thumbnail_id','529'),(3656,471,'_githuber_prismjs','bash'),(3657,471,'_githuber_highlightjs',''),(3658,471,'_is_githuber_sequence',''),(3659,471,'_is_githuber_flow_chart',''),(3691,533,'_is_githuber_markdown','1'),(3700,535,'_wp_attached_file','2020/02/php-cs-fixer.png'),(3701,535,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:24:\"2020/02/php-cs-fixer.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"php-cs-fixer-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"php-cs-fixer-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3706,463,'_thumbnail_id','535'),(3713,463,'custom_popular_ranking','1803'),(3718,536,'_is_githuber_markdown','1'),(3724,537,'_is_githuber_markdown','1'),(3726,538,'_wp_attached_file','2020/02/Screen-Shot-2020-02-15-at-15.18.48.png'),(3727,538,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:966;s:6:\"height\";i:687;s:4:\"file\";s:46:\"2020/02/Screen-Shot-2020-02-15-at-15.18.48.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-15.18.48-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-15.18.48-300x213.png\";s:5:\"width\";i:300;s:6:\"height\";i:213;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-15.18.48-768x546.png\";s:5:\"width\";i:768;s:6:\"height\";i:546;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3728,539,'_wp_attached_file','2020/02/Screen-Shot-2020-02-15-at-15.21.18.png'),(3729,539,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:642;s:6:\"height\";i:237;s:4:\"file\";s:46:\"2020/02/Screen-Shot-2020-02-15-at-15.21.18.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-15.21.18-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-15.21.18-300x111.png\";s:5:\"width\";i:300;s:6:\"height\";i:111;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3734,540,'_is_githuber_markdown','1'),(3743,541,'_wp_attached_file','2020/02/Screen-Shot-2020-02-15-at-16.00.39.png'),(3744,541,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:973;s:6:\"height\";i:700;s:4:\"file\";s:46:\"2020/02/Screen-Shot-2020-02-15-at-16.00.39.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-16.00.39-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-16.00.39-300x216.png\";s:5:\"width\";i:300;s:6:\"height\";i:216;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-16.00.39-768x553.png\";s:5:\"width\";i:768;s:6:\"height\";i:553;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3745,542,'_wp_attached_file','2020/02/Screen-Shot-2020-02-15-at-16.01.06.png'),(3746,542,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:852;s:6:\"height\";i:444;s:4:\"file\";s:46:\"2020/02/Screen-Shot-2020-02-15-at-16.01.06.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-16.01.06-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-16.01.06-300x156.png\";s:5:\"width\";i:300;s:6:\"height\";i:156;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-16.01.06-768x400.png\";s:5:\"width\";i:768;s:6:\"height\";i:400;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3751,543,'_is_githuber_markdown','1'),(3758,544,'_wp_attached_file','2020/02/eslint.png'),(3759,544,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:18:\"2020/02/eslint.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"eslint-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"eslint-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3764,467,'_thumbnail_id','544'),(3770,545,'_is_githuber_markdown','1'),(3777,467,'custom_popular_ranking','1154'),(3785,463,'_githuber_prismjs','bash'),(3786,463,'_githuber_highlightjs',''),(3787,463,'_is_githuber_sequence',''),(3788,463,'_is_githuber_flow_chart',''),(3791,463,'_wp_old_slug','laravel-preparation-02'),(3799,546,'_is_githuber_markdown','1'),(3805,547,'_is_githuber_markdown','1'),(3811,548,'_is_githuber_markdown','1'),(3818,477,'custom_popular_ranking','661'),(3819,549,'_wp_attached_file','2020/02/phpunit.png'),(3820,549,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:19:\"2020/02/phpunit.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"phpunit-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"phpunit-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3825,477,'_thumbnail_id','549'),(3834,550,'_wp_attached_file','2020/02/Screen-Shot-2020-02-15-at-18.04.51.png'),(3835,550,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:978;s:6:\"height\";i:700;s:4:\"file\";s:46:\"2020/02/Screen-Shot-2020-02-15-at-18.04.51.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-18.04.51-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-18.04.51-300x215.png\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-18.04.51-768x550.png\";s:5:\"width\";i:768;s:6:\"height\";i:550;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3836,551,'_wp_attached_file','2020/02/Screen-Shot-2020-02-15-at-18.06.52.png'),(3837,551,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:564;s:6:\"height\";i:402;s:4:\"file\";s:46:\"2020/02/Screen-Shot-2020-02-15-at-18.06.52.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-18.06.52-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-18.06.52-300x214.png\";s:5:\"width\";i:300;s:6:\"height\";i:214;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3838,552,'_wp_attached_file','2020/02/Screen-Shot-2020-02-15-at-18.07.53.png'),(3839,552,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:572;s:6:\"height\";i:403;s:4:\"file\";s:46:\"2020/02/Screen-Shot-2020-02-15-at-18.07.53.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-18.07.53-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-18.07.53-300x211.png\";s:5:\"width\";i:300;s:6:\"height\";i:211;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3844,553,'_is_githuber_markdown','1'),(3846,554,'_wp_attached_file','2020/02/vue-test.png'),(3847,554,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:20:\"2020/02/vue-test.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"vue-test-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"vue-test-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3852,469,'_thumbnail_id','554'),(3859,469,'custom_popular_ranking','1210'),(3864,555,'_is_githuber_markdown','1'),(3879,556,'_is_githuber_markdown','1'),(3881,477,'_githuber_prismjs','bash'),(3882,477,'_githuber_highlightjs',''),(3883,477,'_is_githuber_sequence',''),(3884,477,'_is_githuber_flow_chart',''),(3895,557,'_wp_attached_file','2020/02/Screen-Shot-2020-02-15-at-19.08.22.png'),(3896,557,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:572;s:6:\"height\";i:423;s:4:\"file\";s:46:\"2020/02/Screen-Shot-2020-02-15-at-19.08.22.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-19.08.22-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-19.08.22-300x222.png\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3897,558,'_wp_attached_file','2020/02/Screen-Shot-2020-02-15-at-19.07.26.png'),(3898,558,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:547;s:6:\"height\";i:228;s:4:\"file\";s:46:\"2020/02/Screen-Shot-2020-02-15-at-19.07.26.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-19.07.26-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-19.07.26-300x125.png\";s:5:\"width\";i:300;s:6:\"height\";i:125;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3905,559,'_is_githuber_markdown','1'),(3906,473,'_wp_old_date','2020-02-14'),(3908,473,'custom_popular_ranking','1453'),(3915,473,'_thumbnail_id','561'),(3919,561,'_wp_attached_file','2020/02/webpack-1.png'),(3920,561,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:21:\"2020/02/webpack-1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"webpack-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"webpack-1-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3928,562,'_is_githuber_markdown','1'),(3931,564,'_wp_attached_file','2020/02/Screen-Shot-2020-02-15-at-19.41.14.png'),(3932,564,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:720;s:6:\"height\";i:708;s:4:\"file\";s:46:\"2020/02/Screen-Shot-2020-02-15-at-19.41.14.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-19.41.14-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-19.41.14-300x295.png\";s:5:\"width\";i:300;s:6:\"height\";i:295;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3933,565,'_wp_attached_file','2020/02/Screen-Shot-2020-02-15-at-19.41.28.png'),(3934,565,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:570;s:6:\"height\";i:307;s:4:\"file\";s:46:\"2020/02/Screen-Shot-2020-02-15-at-19.41.28.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-19.41.28-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:46:\"Screen-Shot-2020-02-15-at-19.41.28-300x162.png\";s:5:\"width\";i:300;s:6:\"height\";i:162;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3935,562,'_edit_last','1'),(3940,562,'_is_githuber_mermaid',''),(3941,562,'_is_githuber_katex',''),(3942,566,'_is_githuber_markdown','1'),(3944,562,'_edit_lock','1581764418:1'),(3945,567,'_wp_attached_file','2020/02/stylelint.png'),(3946,567,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:21:\"2020/02/stylelint.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"stylelint-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"stylelint-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(3951,562,'_thumbnail_id','567'),(3958,562,'custom_popular_ranking','863'),(3959,562,'_githuber_prismjs','bash,javascript,clike'),(3960,562,'_githuber_highlightjs',''),(3961,562,'_is_githuber_sequence',''),(3962,562,'_is_githuber_flow_chart',''),(3966,473,'_githuber_prismjs','bash'),(3967,473,'_githuber_highlightjs',''),(3968,473,'_is_githuber_sequence',''),(3969,473,'_is_githuber_flow_chart',''),(3972,568,'_is_githuber_markdown','1'),(3974,469,'_githuber_prismjs','bash'),(3975,469,'_githuber_highlightjs',''),(3976,469,'_is_githuber_sequence',''),(3977,469,'_is_githuber_flow_chart',''),(3980,569,'_is_githuber_markdown','1'),(3982,467,'_githuber_prismjs','bash,javascript,clike'),(3983,467,'_githuber_highlightjs',''),(3984,467,'_is_githuber_sequence',''),(3985,467,'_is_githuber_flow_chart',''),(3988,570,'_is_githuber_markdown','1'),(3994,571,'_is_githuber_markdown','1'),(4000,572,'_is_githuber_markdown','1'),(4006,573,'_is_githuber_markdown','1'),(4013,574,'_wp_attached_file','2020/02/npm-build-lint.png'),(4014,574,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:26:\"2020/02/npm-build-lint.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"npm-build-lint-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"npm-build-lint-300x250.png\";s:5:\"width\";i:300;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4019,475,'_thumbnail_id','574'),(4026,475,'custom_popular_ranking','1088'),(4031,575,'_is_githuber_markdown','1'),(4042,576,'_is_githuber_markdown','1'),(4044,475,'_githuber_prismjs','bash'),(4045,475,'_githuber_highlightjs',''),(4046,475,'_is_githuber_sequence',''),(4047,475,'_is_githuber_flow_chart',''),(4050,579,'_is_githuber_markdown','1'),(4051,579,'_edit_last','1'),(4056,579,'_is_githuber_mermaid',''),(4057,579,'_is_githuber_katex',''),(4058,580,'_is_githuber_markdown','1'),(4060,579,'_edit_lock','1607511716:1'),(4071,579,'custom_popular_ranking','234'),(4072,581,'_wp_attached_file','2020/12/gh-ubuntu-on-mac.jpg'),(4073,581,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:28:\"2020/12/gh-ubuntu-on-mac.jpg\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"gh-ubuntu-on-mac-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4078,579,'_thumbnail_id','581'),(4084,582,'_is_githuber_markdown','1'),(4090,583,'_is_githuber_markdown','1'),(4102,579,'_githuber_prismjs',''),(4103,579,'_githuber_highlightjs',''),(4104,579,'_is_githuber_sequence',''),(4105,579,'_is_githuber_flow_chart',''),(4113,588,'_is_githuber_markdown','1'),(4114,588,'_edit_last','1'),(4119,588,'_is_githuber_mermaid',''),(4120,588,'_is_githuber_katex',''),(4121,588,'_is_githuber_mathjax',''),(4122,589,'_is_githuber_markdown','1'),(4123,588,'_edit_lock','1607916455:1'),(4128,588,'custom_popular_ranking','527'),(4133,590,'_is_githuber_markdown','1'),(4138,591,'_is_githuber_markdown','1'),(4143,592,'_wp_attached_file','2020/12/ansible_softether.jpg'),(4144,592,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:29:\"2020/12/ansible_softether.jpg\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"ansible_softether-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4149,588,'_thumbnail_id','592'),(4156,588,'_githuber_prismjs','python,bash'),(4157,588,'_githuber_highlightjs',''),(4158,588,'_is_githuber_sequence',''),(4159,588,'_is_githuber_flow_chart',''),(4162,593,'_is_githuber_markdown','1'),(4163,594,'_is_githuber_markdown','1'),(4164,594,'_edit_last','1'),(4169,594,'_is_githuber_mermaid',''),(4170,594,'_is_githuber_katex',''),(4171,594,'_is_githuber_mathjax',''),(4172,595,'_is_githuber_markdown','1'),(4173,594,'_edit_lock','1607918317:1'),(4182,594,'custom_popular_ranking','437'),(4193,596,'_is_githuber_markdown','1'),(4194,597,'_is_githuber_markdown','1'),(4195,598,'_wp_attached_file','2020/12/laravel_circle_ci.png'),(4196,598,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:29:\"2020/12/laravel_circle_ci.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"laravel_circle_ci-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4201,597,'_is_githuber_mermaid',''),(4202,597,'_is_githuber_katex',''),(4203,597,'_is_githuber_mathjax',''),(4212,594,'_thumbnail_id','598'),(4215,599,'_is_githuber_markdown','1'),(4224,600,'_is_githuber_markdown','1'),(4225,594,'_githuber_prismjs','bash,yaml'),(4226,594,'_githuber_highlightjs',''),(4227,594,'_is_githuber_sequence',''),(4228,594,'_is_githuber_flow_chart',''),(4231,597,'_githuber_prismjs','bash,yaml'),(4232,597,'_githuber_highlightjs',''),(4233,597,'_is_githuber_sequence',''),(4234,597,'_is_githuber_flow_chart',''),(4235,601,'_is_githuber_markdown','1'),(4236,601,'_edit_last','1'),(4241,601,'_is_githuber_mermaid',''),(4242,601,'_is_githuber_katex',''),(4243,601,'_is_githuber_mathjax',''),(4244,602,'_is_githuber_markdown','1'),(4245,601,'_edit_lock','1607919264:1'),(4250,603,'_is_githuber_markdown','1'),(4255,601,'custom_popular_ranking','382'),(4256,604,'_wp_attached_file','2020/12/ansible_letsencrypt.png'),(4257,604,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:31:\"2020/12/ansible_letsencrypt.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"ansible_letsencrypt-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4262,601,'_thumbnail_id','604'),(4271,601,'_githuber_prismjs','yaml'),(4272,601,'_githuber_highlightjs',''),(4273,601,'_is_githuber_sequence',''),(4274,601,'_is_githuber_flow_chart',''),(4277,605,'_is_githuber_markdown','1'),(4278,605,'_edit_last','1'),(4283,605,'_is_githuber_mermaid',''),(4284,605,'_is_githuber_katex',''),(4285,605,'_is_githuber_mathjax',''),(4286,606,'_is_githuber_markdown','1'),(4287,605,'_edit_lock','1608000100:1'),(4296,605,'custom_popular_ranking','442'),(4297,607,'_wp_attached_file','2020/12/github_actions.png'),(4298,607,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:26:\"2020/12/github_actions.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"github_actions-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4303,605,'_thumbnail_id','607'),(4304,605,'_githuber_prismjs','bash,yaml'),(4305,605,'_githuber_highlightjs',''),(4306,605,'_is_githuber_sequence',''),(4307,605,'_is_githuber_flow_chart',''),(4310,608,'_is_githuber_markdown','1'),(4311,609,'_wp_attached_file','2020/12/laravel_middelware.png'),(4312,609,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:30:\"2020/12/laravel_middelware.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"laravel_middelware-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4313,608,'_edit_last','1'),(4318,608,'_is_githuber_mermaid',''),(4319,608,'_is_githuber_katex',''),(4320,608,'_is_githuber_mathjax',''),(4321,608,'_thumbnail_id','609'),(4322,610,'_is_githuber_markdown','1'),(4323,608,'_edit_lock','1608000900:1'),(4328,608,'custom_popular_ranking','282'),(4329,608,'_githuber_prismjs','bash,php,clike,markup-templating'),(4330,608,'_githuber_highlightjs',''),(4331,608,'_is_githuber_sequence',''),(4332,608,'_is_githuber_flow_chart',''),(4335,611,'_is_githuber_markdown','1'),(4336,611,'_edit_last','1'),(4341,611,'_is_githuber_mermaid',''),(4342,611,'_is_githuber_katex',''),(4343,611,'_is_githuber_mathjax',''),(4344,612,'_is_githuber_markdown','1'),(4345,611,'_edit_lock','1608001388:1'),(4346,613,'_wp_attached_file','2020/12/laravel_cache.png'),(4347,613,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:25:\"2020/12/laravel_cache.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"laravel_cache-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4352,611,'_thumbnail_id','613'),(4353,611,'custom_popular_ranking','426'),(4354,611,'_githuber_prismjs','bash'),(4355,611,'_githuber_highlightjs',''),(4356,611,'_is_githuber_sequence',''),(4357,611,'_is_githuber_flow_chart',''),(4360,614,'_is_githuber_markdown','1'),(4361,614,'_edit_last','1'),(4366,614,'_is_githuber_mermaid',''),(4367,614,'_is_githuber_katex',''),(4368,614,'_is_githuber_mathjax',''),(4369,615,'_is_githuber_markdown','1'),(4370,614,'_edit_lock','1608001941:1'),(4377,616,'_wp_attached_file','2020/12/laravel_db_name.png'),(4378,616,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:27:\"2020/12/laravel_db_name.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"laravel_db_name-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4379,614,'_githuber_prismjs','php,clike,markup-templating'),(4380,614,'_githuber_highlightjs',''),(4381,614,'_is_githuber_sequence',''),(4382,614,'_is_githuber_flow_chart',''),(4383,614,'_thumbnail_id','616'),(4386,617,'_is_githuber_markdown','1'),(4387,618,'_is_githuber_markdown','1'),(4388,618,'_edit_last','1'),(4393,618,'_is_githuber_mermaid',''),(4394,618,'_is_githuber_katex',''),(4395,618,'_is_githuber_mathjax',''),(4396,619,'_is_githuber_markdown','1'),(4397,618,'_edit_lock','1608002860:1'),(4402,618,'custom_popular_ranking','650'),(4407,620,'_is_githuber_markdown','1'),(4414,621,'_is_githuber_markdown','1'),(4415,614,'custom_popular_ranking','704'),(4416,621,'_edit_last','1'),(4421,621,'_is_githuber_mermaid',''),(4422,621,'_is_githuber_katex',''),(4423,621,'_is_githuber_mathjax',''),(4424,622,'_is_githuber_markdown','1'),(4425,621,'_edit_lock','1608002765:1'),(4430,621,'custom_popular_ranking','251'),(4431,623,'_wp_attached_file','2020/12/laravel_eloquent.png'),(4432,623,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:28:\"2020/12/laravel_eloquent.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"laravel_eloquent-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4433,621,'_githuber_prismjs','php,clike,markup-templating'),(4434,621,'_githuber_highlightjs',''),(4435,621,'_is_githuber_sequence',''),(4436,621,'_is_githuber_flow_chart',''),(4437,621,'_thumbnail_id','623'),(4440,624,'_wp_attached_file','2020/12/laravel_docker.png'),(4441,624,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:26:\"2020/12/laravel_docker.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"laravel_docker-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4442,618,'_githuber_prismjs','yaml'),(4443,618,'_githuber_highlightjs',''),(4444,618,'_is_githuber_sequence',''),(4445,618,'_is_githuber_flow_chart',''),(4446,618,'_thumbnail_id','624'),(4449,625,'_is_githuber_markdown','1'),(4450,625,'_edit_last','1'),(4455,625,'_is_githuber_mermaid',''),(4456,625,'_is_githuber_katex',''),(4457,625,'_is_githuber_mathjax',''),(4458,626,'_is_githuber_markdown','1'),(4459,625,'_edit_lock','1608003663:1'),(4460,627,'_wp_attached_file','2020/12/laravel_formfacade.png'),(4461,627,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:30:\"2020/12/laravel_formfacade.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"laravel_formfacade-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4462,625,'_githuber_prismjs','html'),(4463,625,'_githuber_highlightjs',''),(4464,625,'_is_githuber_sequence',''),(4465,625,'_is_githuber_flow_chart',''),(4466,625,'_thumbnail_id','627'),(4469,625,'custom_popular_ranking','226'),(4471,629,'_is_githuber_markdown','1'),(4472,629,'_edit_last','1'),(4477,629,'_is_githuber_mermaid',''),(4478,629,'_is_githuber_katex',''),(4479,629,'_is_githuber_mathjax',''),(4480,630,'_is_githuber_markdown','1'),(4481,629,'_edit_lock','1608004348:1'),(4486,631,'_is_githuber_markdown','1'),(4491,632,'_wp_attached_file','2020/12/laravel_fillable_gurd.png'),(4492,632,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:33:\"2020/12/laravel_fillable_gurd.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"laravel_fillable_gurd-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4493,629,'_githuber_prismjs','php,clike,markup-templating'),(4494,629,'_githuber_highlightjs',''),(4495,629,'_is_githuber_sequence',''),(4496,629,'_is_githuber_flow_chart',''),(4497,629,'_thumbnail_id','632'),(4500,629,'custom_popular_ranking','221'),(4501,633,'_is_githuber_markdown','1'),(4502,633,'_edit_last','1'),(4507,633,'_is_githuber_mermaid',''),(4508,633,'_is_githuber_katex',''),(4509,633,'_is_githuber_mathjax',''),(4510,634,'_is_githuber_markdown','1'),(4511,633,'_edit_lock','1608004877:1'),(4516,635,'_is_githuber_markdown','1'),(4517,636,'_wp_attached_file','2020/12/laravel_login_feature.png'),(4518,636,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:33:\"2020/12/laravel_login_feature.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"laravel_login_feature-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4523,633,'_thumbnail_id','636'),(4528,633,'custom_popular_ranking','324'),(4529,633,'_githuber_prismjs','bash,php,clike,markup-templating'),(4530,633,'_githuber_highlightjs',''),(4531,633,'_is_githuber_sequence',''),(4532,633,'_is_githuber_flow_chart',''),(4535,637,'_is_githuber_markdown','1'),(4536,637,'_edit_last','1'),(4541,637,'_is_githuber_mermaid',''),(4542,637,'_is_githuber_katex',''),(4543,637,'_is_githuber_mathjax',''),(4544,638,'_is_githuber_markdown','1'),(4545,637,'_edit_lock','1608005362:1'),(4550,639,'_is_githuber_markdown','1'),(4559,640,'_is_githuber_markdown','1'),(4560,641,'_wp_attached_file','2020/12/laravel_seeder_facker.png'),(4561,641,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:33:\"2020/12/laravel_seeder_facker.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"laravel_seeder_facker-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4566,637,'_thumbnail_id','641'),(4571,637,'custom_popular_ranking','257'),(4572,637,'_githuber_prismjs','bash,php,clike,markup-templating'),(4573,637,'_githuber_highlightjs',''),(4574,637,'_is_githuber_sequence',''),(4575,637,'_is_githuber_flow_chart',''),(4578,642,'_is_githuber_markdown','1'),(4579,642,'_edit_last','1'),(4584,642,'_is_githuber_mermaid',''),(4585,642,'_is_githuber_katex',''),(4586,642,'_is_githuber_mathjax',''),(4587,643,'_is_githuber_markdown','1'),(4588,642,'_edit_lock','1608006218:1'),(4593,644,'_is_githuber_markdown','1'),(4598,645,'_wp_attached_file','2020/12/laravel_softdelete.png'),(4599,645,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:30:\"2020/12/laravel_softdelete.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"laravel_softdelete-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4600,642,'_githuber_prismjs','php,clike,markup-templating'),(4601,642,'_githuber_highlightjs',''),(4602,642,'_is_githuber_sequence',''),(4603,642,'_is_githuber_flow_chart',''),(4604,642,'_thumbnail_id','645'),(4608,642,'custom_popular_ranking','331'),(4609,647,'_wp_attached_file','2020/12/laravel_varidation.png'),(4610,647,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:30:\"2020/12/laravel_varidation.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"laravel_varidation-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4612,649,'_is_githuber_markdown','1'),(4613,649,'_edit_last','1'),(4618,649,'_is_githuber_mermaid',''),(4619,649,'_is_githuber_katex',''),(4620,649,'_is_githuber_mathjax',''),(4621,650,'_is_githuber_markdown','1'),(4622,649,'_edit_lock','1608006270:1'),(4624,649,'_githuber_prismjs','php,clike,markup-templating'),(4625,649,'_githuber_highlightjs',''),(4626,649,'_is_githuber_sequence',''),(4627,649,'_is_githuber_flow_chart',''),(4628,649,'_thumbnail_id','647'),(4631,652,'_is_githuber_markdown','1'),(4632,649,'custom_popular_ranking','301'),(4633,653,'_is_githuber_markdown','1'),(4634,653,'_edit_last','1'),(4639,653,'_is_githuber_mermaid',''),(4640,653,'_is_githuber_katex',''),(4641,653,'_is_githuber_mathjax',''),(4642,654,'_is_githuber_markdown','1'),(4643,653,'_edit_lock','1608006974:1'),(4648,655,'_wp_attached_file','2020/12/docker_memo.png'),(4649,655,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:300;s:6:\"height\";i:250;s:4:\"file\";s:23:\"2020/12/docker_memo.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"docker_memo-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(4650,653,'_githuber_prismjs','bash'),(4651,653,'_githuber_highlightjs',''),(4652,653,'_is_githuber_sequence',''),(4653,653,'_is_githuber_flow_chart',''),(4654,653,'_thumbnail_id','655'),(4657,653,'custom_popular_ranking','337');
/*!40000 ALTER TABLE `wp_postmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_posts`
--

DROP TABLE IF EXISTS `wp_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_title` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_excerpt` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `to_ping` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `pinged` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`(191)),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=InnoDB AUTO_INCREMENT=657 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_posts`
--

LOCK TABLES `wp_posts` WRITE;
/*!40000 ALTER TABLE `wp_posts` DISABLE KEYS */;
INSERT INTO `wp_posts` VALUES (7,1,'2019-06-09 18:10:03','2019-06-09 09:10:03','<h2>VirtualBox &amp; Vagrant で LAMP環境を構築</h2>\n<p>[widget id=\"nav_menu-4\"]</p>','目次  - VirtualBox & Vagrant で開発環境を構築 -','開発環境構築するにあたっての大まかなメニュー','publish','closed','closed','','environment-contents','','','2019-09-23 03:38:55','2019-09-22 18:38:55','##VirtualBox & Vagrant で LAMP環境を構築\r\n[widget id=\"nav_menu-4\"]',0,'http://blog.webdimension.jp/?post_type=environment&#038;p=7',0,'environment','',0),(9,1,'2019-06-09 18:15:34','2019-06-09 09:15:34','<h2>VirtualBox と Vagrant を準備</h2>\n<h3>仮想OSを動かすためのVirtualBoxをInstall</h3>\n<p><a href=\"https://www.virtualbox.org/\"><img src=\"http://blog.webdimension.jp/wp-content/uploads/2019/06/virtualbox_logo-300x73.png\" alt=\"\" /></a>\nここから <a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"noopener noreferrer\">\nVirtualBox</a>をダウンロード</p>\n<h3>仮想OSを便利に設定、コントロールできるVagrantをInstall</h3>\n<p><a href=\"https://www.vagrantup.com/\"><img src=\"http://blog.webdimension.jp/wp-content/uploads/2019/06/vagrant_logo-300x81.png\" alt=\"\" /></a>\nここから<a href=\"https://www.vagrantup.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\nVagrant</a>をダウンロード</p>\n<h2>Vagarnt Box を追加</h2>\n<p>これからCentos7をInstallします。\nターミナルを立ち上げよう。 ターミナルが苦手でも大丈夫。 今回使うコマンドは</p>\n<ul>\n<li>pwd   (現在地を表示)</li>\n<li>cd   (ディレクトリ移動)</li>\n<li>ls   (フォルダ、ファイルの情報を表示)</li>\n<li>mkdir   (ディレクトリを作成)</li>\n<li>vagrant  (vagrant操作のためのコマンド)</li>\n</ul>\n<p>これくらい。</p>\n<p>CentOS7 を Vagrant に追加します。 (信頼できる Vgrant 本家から追加します)<br />\nターミナルで実行            </p>\n<pre><code class=\"language-bash\"> $ vagrant box add centos76 https://vagrantcloud.com/centos/boxes/7/versions/1902.01/providers/virtualbox.box</code></pre>\n<p>VagratBox追加</p>\n<p><code>versions/1902.01</code> は　CentOS7.6なので <code>vagrant box add centos76</code> CentOS76 という名前を設定しています。名前はご自由に。</p>\n<pre><code class=\"language-bash\">==&gt; box: Box file was not detected as metadata. Adding it directly...\n==&gt; box: Adding box &#039;centos76&#039; (v0) for provider:\n    box: Downloading: https://vagrantcloud.com/centos/boxes/7/versions/1902.01/providers/virtualbox.box\n    box: Download redirected to host: cloud.centos.org\n==&gt; box: Successfully added box &#039;centos76&#039; (v0) for &#039;virtualbox&#039;!</code></pre>\n<p>という結果だとOK。<br />\n<em>Successfully</em></p>\n<p>これでCentOS7のImageファイル ( OS を Install するためのファイル )ができました。<br />\nこれから CentOS を展開していきます。  </p>\n<h2>仮想OSをInstall</h2>\n<h3>仮想OSの配置場所を作る</h3>\n<pre><code class=\"language-bash\">$ cd  </code></pre>\n<p>homeディレクトリに移動</p>\n<pre><code class=\"language-bash\">$ pwd\n/Users/UseName </code></pre>\n<p>現在地を確認。    </p>\n<pre><code class=\"language-bash\"> $ mkdir vagrant</code></pre>\n<p>仮想OSを置くためのディレクトリを作成 ( 今回はvagrant という名前で作ります ) </p>\n<pre><code class=\"language-bash\"> $ cd vagrant</code></pre>\n<pre><code class=\"language-bash\"> $ mkdir centos76</code></pre>\n<pre><code class=\"language-bash\"> $ cd centos76</code></pre>\n<p>vagrant ディレクトリに移動して centos76 というディレクトリを作成       </p>\n<pre><code class=\"language-bash\">$ pwd\n/Users/UseName/vagrant/centos76 </code></pre>\n<p>現在地を確認。    </p>\n<h3>仮想OSをInstall</h3>\n<pre><code class=\"language-bash\">$ vagrant init centos76</code></pre>\n<p>仮想OSを作るための初期化,Vagrantfile が作成される </p>\n<pre><code class=\"language-bash\">$ ls\nVagrantfile</code></pre>\n<p>Vgarantfile の存在を確認。     </p>\n<h3>仮想OSを起動</h3>\n<p>仮想OSを立ち上げる。今後仮想OSを立ち上げる場合も <code>vagrant up</code> で立ち上げる。初回の<code>vagrant up</code> は仮想OSを作成するのとGuest\nAdditionsというメインOSとの連携を便利にしてくれるToolをインストールするため少々時間がかかる。</p>\n<pre><code class=\"language-bash\">$ vagrant up</code></pre>\n<pre><code class=\"language-bash\">.\n.\n.\n\n==&gt; default: Checking for guest additions in VM...\n==&gt; default: Rsyncing folder: /Users/UserName/vagrant/centos76/ =&gt; /vagrant</code></pre>\n<p>という結果が帰って来れば仮想OSのインストールは成功です。   </p>\n<h3>仮想OSにログインしてみる</h3>\n<pre><code class=\"language-bash\">$ vagrant ssh\n[vagrant@localhost ~]$ </code></pre>\n<p>となれば仮想OSに SSH でログインできてます。<br />\nする</p>\n<h3>仮想OSからログアウト</h3>\n<pre><code class=\"language-bash\">$ exit</code></pre>\n<p>で 仮想OSからログアウトします。メインOSに戻ってきます。  </p>\n<h3>仮想OSを停止</h3>\n<pre><code class=\"language-bash\">$ vagrant halt</code></pre>\n<p>仮想OSをシャットダウンします。</p>\n<h4>- 次回 -</h4>\n<p class=\"next_description\">\n これで仮想OSを立ち上げることができました。\n しかしこのままではデフォルトのままです。次回は Vagrantfile を編集して\n 開発環境として使えるよう便利な設定をしてみます。\n </p>','VirtualBox & Vagrant でCentOS7 をインストール','開発環境を構築するため VirtualBox & Vagant で CentOS7 をインストールする。','publish','closed','closed','','env-vagrant','','','2019-09-23 03:37:55','2019-09-22 18:37:55','## VirtualBox と Vagrant を準備\r\n\r\n### 仮想OSを動かすためのVirtualBoxをInstall\r\n\r\n[![](http://blog.webdimension.jp/wp-content/uploads/2019/06/virtualbox_logo-300x73.png)](https://www.virtualbox.org/)\r\nここから <a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\nVirtualBox</a>をダウンロード\r\n\r\n### 仮想OSを便利に設定、コントロールできるVagrantをInstall\r\n[![](http://blog.webdimension.jp/wp-content/uploads/2019/06/vagrant_logo-300x81.png)](https://www.vagrantup.com/)\r\nここから<a href=\"https://www.vagrantup.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\nVagrant</a>をダウンロード\r\n\r\n## Vagarnt Box を追加\r\nこれからCentos7をInstallします。\r\nターミナルを立ち上げよう。 ターミナルが苦手でも大丈夫。 今回使うコマンドは\r\n- pwd   (現在地を表示)\r\n- cd   (ディレクトリ移動)\r\n- ls   (フォルダ、ファイルの情報を表示)\r\n- mkdir   (ディレクトリを作成)\r\n- vagrant  (vagrant操作のためのコマンド)\r\n\r\nこれくらい。\r\n\r\n\r\nCentOS7 を Vagrant に追加します。 (信頼できる Vgrant 本家から追加します)   \r\nターミナルで実行            \r\n\r\n```bash\r\n $ vagrant box add centos76 https://vagrantcloud.com/centos/boxes/7/versions/1902.01/providers/virtualbox.box\r\n```\r\nVagratBox追加\r\n\r\n`versions/1902.01` は　CentOS7.6なので `vagrant\r\nbox add centos76` CentOS76 という名前を設定しています。名前はご自由に。\r\n\r\n```bash\r\n==&gt; box: Box file was not detected as metadata. Adding it directly...\r\n==&gt; box: Adding box &#039;centos76&#039; (v0) for provider:\r\n    box: Downloading: https://vagrantcloud.com/centos/boxes/7/versions/1902.01/providers/virtualbox.box\r\n    box: Download redirected to host: cloud.centos.org\r\n==&gt; box: Successfully added box &#039;centos76&#039; (v0) for &#039;virtualbox&#039;!\r\n```\r\n\r\nという結果だとOK。              \r\n*Successfully*\r\n\r\nこれでCentOS7のImageファイル ( OS を Install するためのファイル )ができました。  \r\nこれから CentOS を展開していきます。  \r\n\r\n## 仮想OSをInstall\r\n### 仮想OSの配置場所を作る\r\n```bash\r\n$ cd  \r\n```\r\nhomeディレクトリに移動\r\n\r\n```bash\r\n$ pwd\r\n/Users/UseName \r\n```\r\n現在地を確認。    \r\n\r\n ```bash\r\n $ mkdir vagrant\r\n ```\r\n仮想OSを置くためのディレクトリを作成 ( 今回はvagrant という名前で作ります ) \r\n ```bash\r\n $ cd vagrant\r\n ```\r\n ```bash\r\n $ mkdir centos76\r\n ```\r\n```bash\r\n $ cd centos76\r\n```\r\n   vagrant ディレクトリに移動して centos76 というディレクトリを作成       \r\n```bash\r\n$ pwd\r\n/Users/UseName/vagrant/centos76 \r\n```\r\n 現在地を確認。    \r\n\r\n### 仮想OSをInstall\r\n```bash\r\n$ vagrant init centos76\r\n```\r\n仮想OSを作るための初期化,Vagrantfile が作成される \r\n```bash\r\n$ ls\r\nVagrantfile\r\n```\r\nVgarantfile の存在を確認。     \r\n\r\n\r\n### 仮想OSを起動\r\n\r\n仮想OSを立ち上げる。今後仮想OSを立ち上げる場合も `vagrant up` で立ち上げる。初回の`vagrant up` は仮想OSを作成するのとGuest\r\nAdditionsというメインOSとの連携を便利にしてくれるToolをインストールするため少々時間がかかる。\r\n```bash\r\n$ vagrant up\r\n```\r\n\r\n```bash\r\n.\r\n.\r\n.\r\n\r\n==&gt; default: Checking for guest additions in VM...\r\n==&gt; default: Rsyncing folder: /Users/UserName/vagrant/centos76/ =&gt; /vagrant\r\n```\r\n\r\nという結果が帰って来れば仮想OSのインストールは成功です。	\r\n### 仮想OSにログインしてみる\r\n```bash\r\n$ vagrant ssh\r\n[vagrant@localhost ~]$ \r\n```\r\nとなれば仮想OSに SSH でログインできてます。   \r\nする\r\n### 仮想OSからログアウト\r\n```bash\r\n$ exit\r\n```\r\nで 仮想OSからログアウトします。メインOSに戻ってきます。  \r\n\r\n### 仮想OSを停止\r\n```bash\r\n$ vagrant halt\r\n```\r\n仮想OSをシャットダウンします。\r\n\r\n #### - 次回 - \r\n <p class=\"next_description\">\r\n これで仮想OSを立ち上げることができました。\r\n しかしこのままではデフォルトのままです。次回は Vagrantfile を編集して\r\n 開発環境として使えるよう便利な設定をしてみます。\r\n </p>\r\n',0,'http://blog.webdimension.jp/?post_type=environment&#038;p=9',0,'environment','',0),(14,1,'2019-06-07 18:51:30','2019-06-07 09:51:30',' ','','','publish','closed','closed','','14','','','2019-06-07 18:55:22','2019-06-07 09:55:22','',0,'http://blog.webdimension.jp/?p=14',1,'nav_menu_item','',0),(15,1,'2019-06-07 18:51:30','2019-06-07 09:51:30',' ','','','publish','closed','closed','','15','','','2019-06-07 18:55:22','2019-06-07 09:55:22','',0,'http://blog.webdimension.jp/?p=15',2,'nav_menu_item','',0),(16,1,'2019-06-07 18:51:31','2019-06-07 09:51:31',' ','','','publish','closed','closed','','16','','','2019-06-07 18:55:22','2019-06-07 09:55:22','',0,'http://blog.webdimension.jp/?p=16',3,'nav_menu_item','',0),(17,1,'2019-06-07 18:51:31','2019-06-07 09:51:31',' ','','','publish','closed','closed','','17','','','2019-06-07 18:55:22','2019-06-07 09:55:22','',0,'http://blog.webdimension.jp/?p=17',5,'nav_menu_item','',0),(18,1,'2019-06-07 18:51:31','2019-06-07 09:51:31',' ','','','publish','closed','closed','','18','','','2019-06-07 18:55:22','2019-06-07 09:55:22','',0,'http://blog.webdimension.jp/?p=18',4,'nav_menu_item','',0),(19,1,'2019-06-07 18:51:31','2019-06-07 09:51:31',' ','','','publish','closed','closed','','19','','','2019-06-07 18:55:22','2019-06-07 09:55:22','',0,'http://blog.webdimension.jp/?p=19',6,'nav_menu_item','',0),(20,1,'2019-06-07 18:54:31','2019-06-07 09:54:31','<p>[qiitaRss my_limit=6]</p>','Qiita','','publish','closed','closed','','qiita','','','2019-09-23 14:03:30','2019-09-23 05:03:30','[qiitaRss my_limit=6]',0,'http://blog.webdimension.jp/?page_id=20',0,'page','',0),(25,1,'2019-06-07 18:53:46','2019-06-07 09:53:46','','Qiita','','inherit','closed','closed','','20-revision-v1','','','2019-06-07 18:53:46','2019-06-07 09:53:46','',20,'http://blog.webdimension.jp/2019/06/07/20-revision-v1/',0,'revision','',0),(26,1,'2019-06-07 18:55:02','2019-06-07 09:55:02',' ','','','publish','closed','closed','','26','','','2019-06-07 18:55:22','2019-06-07 09:55:22','',0,'http://blog.webdimension.jp/?p=26',7,'nav_menu_item','',0),(27,1,'2019-06-07 18:56:49','2019-06-07 09:56:49',' ','','','publish','closed','closed','','27','','','2019-06-12 00:49:28','2019-06-11 15:49:28','',0,'http://blog.webdimension.jp/?p=27',2,'nav_menu_item','',0),(28,1,'2019-06-07 18:56:49','2019-06-07 09:56:49','','目次  – VirtualBox & Vagrant で開発環境を構築 –','','publish','closed','closed','','28','','','2019-06-12 00:49:28','2019-06-11 15:49:28','',0,'http://blog.webdimension.jp/?p=28',1,'nav_menu_item','',0),(30,1,'2019-06-07 19:08:20','2019-06-07 10:08:20','','851x315','','inherit','open','closed','','851x315','','','2019-06-07 19:08:20','2019-06-07 10:08:20','',0,'http://blog.webdimension.jp/wp-content/uploads/2019/06/851x315-1.png',0,'attachment','image/png',0),(33,1,'2019-06-07 19:11:29','2019-06-07 10:11:29','','BDL015','','inherit','open','closed','','bdl015','','','2019-06-07 19:11:29','2019-06-07 10:11:29','',0,'http://blog.webdimension.jp/wp-content/uploads/2019/06/BDL015.jpg',0,'attachment','image/jpeg',0),(35,1,'2019-06-07 19:14:06','2019-06-07 10:14:06','<p>[myRecentPosts my_limit=6]</p>\n<div class=\"row mr-0 ml-0 mb-3\">\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script><!-- wide1 --><ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\" style=\"display:block\" data-ad-client=\"ca-pub-9655568772147861\" data-ad-slot=\"4206718020\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n                        <script>\n                            (adsbygoogle = window.adsbygoogle || []).push({});\n                        </script></div>\n<p>[myRankingPosts my_limit=6]</p>\n<div class=\"row mr-0 ml-0 mb-3\">\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script><!-- wide2 --><ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\" style=\"display:block\" data-ad-client=\"ca-pub-9655568772147861\" data-ad-slot=\"1864104647\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n                        <script>\n                            (adsbygoogle = window.adsbygoogle || []).push({});\n                        </script></div>','','','publish','closed','closed','','35-2','','','2019-10-24 10:32:56','2019-10-24 01:32:56',' [myRecentPosts my_limit=6]\r\n                    <div class=\"row mr-0 ml-0 mb-3\" >\r\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\r\n                        <!-- wide1 -->\r\n                        <ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\"\r\n                             style=\"display:block\"\r\n     data-ad-client=\"ca-pub-9655568772147861\"\r\n     data-ad-slot=\"4206718020\"\r\n                             data-ad-format=\"auto\"\r\n                             data-full-width-responsive=\"true\"></ins>\r\n                        <script>\r\n                            (adsbygoogle = window.adsbygoogle || []).push({});\r\n                        </script>\r\n                    </div>\r\n\r\n\r\n[myRankingPosts my_limit=6]\r\n                   <div class=\"row mr-0 ml-0 mb-3\" >\r\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\r\n                        <!-- wide2 -->\r\n                        <ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\"\r\n                             style=\"display:block\"\r\n     data-ad-client=\"ca-pub-9655568772147861\"\r\n     data-ad-slot=\"1864104647\"\r\n                             data-ad-format=\"auto\"\r\n                             data-full-width-responsive=\"true\"></ins>\r\n                        <script>\r\n                            (adsbygoogle = window.adsbygoogle || []).push({});\r\n                        </script>\r\n                    </div>\r\n\r\n',0,'http://blog.webdimension.jp/?page_id=35',0,'page','',0),(36,1,'2019-06-07 19:14:06','2019-06-07 10:14:06','[myRecentPosts my_limit=3]\r\n[myRankingPosts my_limit=3]','','','inherit','closed','closed','','35-revision-v1','','','2019-06-07 19:14:06','2019-06-07 10:14:06','',35,'http://blog.webdimension.jp/2019/06/07/35-revision-v1/',0,'revision','',0),(43,1,'2019-06-09 02:43:03','2019-06-08 17:43:03','','vagrant_logo','','inherit','open','closed','','vagrant_logo','','','2019-06-09 02:43:03','2019-06-08 17:43:03','',9,'http://blog.webdimension.jp/wp-content/uploads/2019/06/vagrant_logo.png',0,'attachment','image/png',0),(44,1,'2019-06-09 02:43:08','2019-06-08 17:43:08','','virtualbox_logo','','inherit','open','closed','','virtualbox_logo','','','2019-06-09 02:43:08','2019-06-08 17:43:08','',9,'http://blog.webdimension.jp/wp-content/uploads/2019/06/virtualbox_logo.png',0,'attachment','image/png',0),(45,1,'2019-06-09 22:50:58','2019-06-09 13:50:58','<h2>PHP Composer とは</h2>\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\nNode.js の npm と似た扱いになります。<br />\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p></p>\n<p><em>なにがいいのかというと</em></p>\n<ul><li>ライブラリーを簡単にインストールできる</li>\n<li>ライブラリーの依存関係を解決してくれる</li>\n<li>composer.json の内容からパッケージをインストールするのでチームでの共有がしやすい。(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\nに影響をあたえない。 </li>\n</ul>\n<p>と言われてます。</p>\n<h3>Composer がない時代</h3>\n<p>経験談ですが・・・<br>\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\nをインストールしランキングを表示させるモジュールを作る。\nサイト内でランキングを表示する。    </p>\n<p>その後        </p>\n<p>ランミング結果を xml化し軽量化および外部配信を試みる 。<br><em>XML_Query2XML</em><br>\nという SQL の結果を簡単にxmlファイルへ変換してくれるライブラリーをインストール       </p>\n<p>それなりのスクリプトを組んで実行してみる。</p>\n<p>PearDB には対応してません。　とエラーになる。<br>\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br>\nMDB2 をインストールおよび動作チェック。</p>\n<p>もう<span class=\"under_line\">めんどくさい</span></p>\n<h3>Composer があると</h3>\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\n<pre><code class=\"language-json\">  \"require\": {\n  \"php\": \"&gt;=5.5.9\",\n  \"laravel/framework\": \"5.2.*\",\n   }\n  \"require-dev\": {\n  \"phpunit/phpunit\": \"3.7.*\"\n  }</code></pre>\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\nその時依存関係を解決をComposerが試みてくれます。</p>\n<h3>Autoloader</h3>\n<pre><code class=\"language-json\">\"autoload\":\n{\n        \"psr-4\": {\n            \"myhoge\\\\\": \"src/\"\n        }\n    }</code></pre>\n<p>オートローダーはファイルを自動で読み込んでくれる仕組みです。      </p>\n<pre><code class=\"language-php\"> &lt;?php\nnamespace myhoge;\nclass hoge {\n function hogehoge(){\n   return true;   \n }\n  }\n}\n?&gt; </code></pre>\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\n<h2>PHP Composer を CentOS7 にインストール</h2>\n<p>以下Root権限　もしくは sudo  </p>\n<pre><code class=\"language-bash\"># php -r \"copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');\"</code></pre>\n<p>公式サイト推奨のインストール方法です。<br>\ncomposer-setup.php のダウンロードをしてます。        </p>\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\n<p>composer の本体である composer.phar を作ります。        </p>\n<pre><code class=\"language-bash\"># php -r \"unlink(\'composer-setup.php\');\"</code></pre>\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\n<pre><code class=\"language-bash\"># which composer\n/usr/local/bin/composer </code></pre>\n<p>composer が配置されたか確認      </p>\n<pre><code class=\"language-bash\"># composer --version\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\n<p>Version確認</p>\n<p>これで Composer の準備が整いました。</p>','PHP Composer','PHP のパッケージマネージャー Composer .\r\nその特徴とインストール','publish','closed','open','','php-composer','','','2019-09-23 20:51:17','2019-09-23 11:51:17','<h2>PHP Composer とは</h2>\r\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\r\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\r\nNode.js の npm と似た扱いになります。<br />\r\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p>\r\n<p><em>なにがいいのかというと</em></p>\r\n<ul>\r\n<li>ライブラリーを簡単にインストールできる</li>\r\n<li>ライブラリーの依存関係を解決してくれる</li>\r\n<li>composer.json の内容からパッケージをインストールするのでチームでの共有がしやすい。(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\r\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\r\nに影響をあたえない。 </li>\r\n</ul>\r\n<p>と言われてます。</p>\r\n<h3>Composer がない時代</h3>\r\n<p>経験談ですが・・・<br />\r\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\r\nをインストールしランキングを表示させるモジュールを作る。\r\nサイト内でランキングを表示する。    </p>\r\n<p>その後        </p>\r\n<p>ランミング結果を xml化し軽量化および外部配信を試みる 。<br />\r\n<em>XML_Query2XML</em><br />\r\nという SQL の結果を簡単にxmlファイルへ変換してくれるライブラリーをインストール       </p>\r\n<p>それなりのスクリプトを組んで実行してみる。</p>\r\n<p>PearDB には対応してません。　とエラーになる。<br />\r\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br />\r\nMDB2 をインストールおよび動作チェック。</p>\r\nもう<span class=\"under_line\">めんどくさい</span>\r\n\r\n<h3>Composer があると</h3>\r\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\r\n<pre><code class=\"language-json\">  &quot;require&quot;: {\r\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\r\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\r\n   }\r\n  &quot;require-dev&quot;: {\r\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\r\n  }</code></pre>\r\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\r\nその時依存関係を解決をComposerが試みてくれます。</p>\r\n<h3>Autoloader</h3>\r\n<pre><code class=\"language-json\">&quot;autoload&quot;:\r\n{\r\n        &quot;psr-4&quot;: {\r\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\r\n        }\r\n    }</code></pre>\r\n<p>オートローダーはファイルを自動で読み込んでくれる仕組みです。      </p>\r\n<pre><code class=\"language-php\"> &lt;?php\r\nnamespace myhoge;\r\nclass hoge {\r\n function hogehoge(){\r\n   return true;   \r\n }\r\n  }\r\n}\r\n?&gt; </code></pre>\r\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\r\n<h2>PHP Composer を CentOS7 にインストール</h2>\r\n<p>以下Root権限　もしくは sudo  </p>\r\n<pre><code class=\"language-bash\"># php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;</code></pre>\r\n<p>公式サイト推奨のインストール方法です。<br />\r\ncomposer-setup.php のダウンロードをしてます。        </p>\r\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\r\n<p>composer の本体である composer.phar を作ります。        </p>\r\n<pre><code class=\"language-bash\"># php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;</code></pre>\r\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\r\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\r\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\r\n<pre><code class=\"language-bash\"># which composer\r\n/usr/local/bin/composer </code></pre>\r\n<p>composer が配置されたか確認      </p>\r\n<pre><code class=\"language-bash\"># composer --version\r\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\r\n<p>Version確認</p>\r\n<p>これで Composer の準備が整いました。</p>',0,'http://blog.webdimension.jp/?p=45',0,'post','',0),(46,1,'2019-06-09 22:50:58','2019-06-09 13:50:58','<p>PHP## PHP Composer とは</p>\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\nNode.js の npm と似た扱いになります。<br />\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p>\n<p><em>なにがいいのかというと</em></p>\n<ul>\n<li>ライブラリーを簡単にインストールできる</li>\n<li>ライブラリーの依存関係を解決してくれる</li>\n<li>composer.json の内容からパッケージ\nをインストールするのでチームでの共有がしやすい。\n(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\nに影響をあたえない。 </li>\n</ul>\n<p>と言われてます。</p>\n<h3>Composer がない時代</h3>\n<p>経験談ですが・・・<br />\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\nをインストールしランキングを表示させるモジュールを作る。\nサイト内でランキングを表示する。    </p>\n<p>その後        </p>\n<p>ランミング結果を xml化し　軽量化および外部配信を試みる 。<br />\n<em>XML_Query2XML</em><br />\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       </p>\n<p>それなりのスクリプトを組んで実行してみる。</p>\n<p>PearDB には対応してません。　とエラーになる。<br />\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br />\nMDB2 をインストール　および　動作チェック。</p>\n<h3>Composer があると</h3>\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\n<pre><code class=\"language-json\">  &quot;require&quot;: {\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\n   }\n  &quot;require-dev&quot;: {\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\n  }</code></pre>\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\nその時依存関係を解決をComposerが試みてくれます。</p>\n<h3>Autoloader</h3>\n<pre><code class=\"language-json\">{\n        &quot;psr-4&quot;: {\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\n        }\n    }\n ```\nオートローダーはファイルを自動で読み込んでくれる仕組みです。      \n```php\n <?php\nnamespace myhoge;\nclass hoge {\n function hogehoge(){\n   return true;   \n }\n  }\n}\n?> </code></pre>\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\n<h2>PHP Composer を CentOS7 にインストール</h2>\n<pre><code class=\"language-bash\"># php -r \"copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');\"</code></pre>\n<p>公式サイト推奨のインストール方法です。<br />\ncomposer-setup.php のダウンロードをしてます。        </p>\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\n<p>composer の本体である composer.phar を作ります。        </p>\n<pre><code class=\"language-bash\"># php -r \"unlink(\'composer-setup.php\');\"</code></pre>\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\n<pre><code class=\"language-bash\"> which composer\n/usr/local/bin/composer </code></pre>\n<p>composer が配置されたか確認      </p>\n<pre><code class=\"language-bash\">composer --version\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\n<p>Version確認</p>\n<p>これで Composer の準備が整いました。</p>','PHP Composer','','inherit','closed','closed','','45-revision-v1','','','2019-06-09 22:50:58','2019-06-09 13:50:58','PHP## PHP Composer とは\r\n\r\n*PHP のパッケージ管理ツール* と呼ばれてます。     \r\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。     \r\nNode.js の npm と似た扱いになります。   \r\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　\r\n\r\n\r\n*なにがいいのかというと*\r\n- ライブラリーを簡単にインストールできる\r\n- ライブラリーの依存関係を解決してくれる\r\n- composer.json の内容からパッケージ\r\n  をインストールするのでチームでの共有がしやすい。\r\n  (プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)\r\n- インストールされたパッケージは基本Gitの管理外なので Git-Repository\r\n  に影響をあたえない。 \r\n  \r\nと言われてます。\r\n\r\n\r\n### Composer がない時代\r\n経験談ですが・・・   \r\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\r\nをインストールしランキングを表示させるモジュールを作る。\r\nサイト内でランキングを表示する。    \r\n        \r\nその後        \r\n        \r\nランミング結果を xml化し　軽量化および外部配信を試みる 。     \r\n*XML_Query2XML*    \r\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       \r\n        \r\nそれなりのスクリプトを組んで実行してみる。\r\n        \r\nPearDB には対応してません。　とエラーになる。      \r\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。      \r\nMDB2 をインストール　および　動作チェック。\r\n\r\n### Composer があると\r\ncomposer.jsonに 必要なライブラリーを記述します。    \r\n```json\r\n  &quot;require&quot;: {\r\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\r\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\r\n   }\r\n  &quot;require-dev&quot;: {\r\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\r\n  }\r\n```\r\nこの記述例をもとにRepositoryからダウンロートしてくれます。\r\nその時依存関係を解決をComposerが試みてくれます。\r\n\r\n### Autoloader\r\n```json \"autoload\": \r\n{\r\n        &quot;psr-4&quot;: {\r\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\r\n        }\r\n    }\r\n &#x60;&#x60;&#x60;\r\nオートローダーはファイルを自動で読み込んでくれる仕組みです。      \r\n```php\r\n <?php\r\nnamespace myhoge;\r\nclass hoge {\r\n function hogehoge(){\r\n   return true;   \r\n }\r\n  }\r\n}\r\n?> \r\n```\r\nディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。\r\n\r\n\r\n## PHP Composer を CentOS7 にインストール\r\n```bash\r\n# php -r \"copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');\"\r\n```\r\n公式サイト推奨のインストール方法です。     \r\ncomposer-setup.php のダウンロードをしてます。        \r\n```bash\r\n# php composer-setup.php\r\n```\r\ncomposer の本体である composer.phar を作ります。        \r\n```bash\r\n# php -r \"unlink(\'composer-setup.php\');\"\r\n```\r\ncomposer.phar ができたのでダウンロードした omposer-setup.php を削除します。\r\n```bash\r\n# mv composer.phar /usr/local/bin/composer\r\n```\r\ncomposerをグローバルで使えるよう/usr/local/bin/ に配置してます。    \r\n```bash\r\n which composer\r\n/usr/local/bin/composer \r\n```\r\ncomposer が配置されたか確認      \r\n```bash\r\ncomposer --version\r\nComposer version 1.8.3 2019-01-30 08:31:33\r\n```\r\nVersion確認\r\n\r\nこれで Composer の準備が整いました。\r\n\r\n\r\n  \r\n\r\n',45,'http://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/45-revision-v1/',0,'revision','',0),(47,1,'2019-06-09 22:52:20','2019-06-09 13:52:20','<h2>PHP Composer とは</h2>\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\nNode.js の npm と似た扱いになります。<br />\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p>\n<p><em>なにがいいのかというと</em></p>\n<ul>\n<li>ライブラリーを簡単にインストールできる</li>\n<li>ライブラリーの依存関係を解決してくれる</li>\n<li>composer.json の内容からパッケージ\nをインストールするのでチームでの共有がしやすい。\n(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\nに影響をあたえない。 </li>\n</ul>\n<p>と言われてます。</p>\n<h3>Composer がない時代</h3>\n<p>経験談ですが・・・<br />\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\nをインストールしランキングを表示させるモジュールを作る。\nサイト内でランキングを表示する。    </p>\n<p>その後        </p>\n<p>ランミング結果を xml化し　軽量化および外部配信を試みる 。<br />\n<em>XML_Query2XML</em><br />\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       </p>\n<p>それなりのスクリプトを組んで実行してみる。</p>\n<p>PearDB には対応してません。　とエラーになる。<br />\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br />\nMDB2 をインストール　および　動作チェック。</p>\n<h3>Composer があると</h3>\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\n<pre><code class=\"language-json\">  &quot;require&quot;: {\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\n   }\n  &quot;require-dev&quot;: {\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\n  }</code></pre>\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\nその時依存関係を解決をComposerが試みてくれます。</p>\n<h3>Autoloader</h3>\n<pre><code class=\"language-json\">{\n        &quot;psr-4&quot;: {\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\n        }\n    }\n ```\nオートローダーはファイルを自動で読み込んでくれる仕組みです。      \n```php\n <?php\nnamespace myhoge;\nclass hoge {\n function hogehoge(){\n   return true;   \n }\n  }\n}\n?> </code></pre>\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\n<h2>PHP Composer を CentOS7 にインストール</h2>\n<pre><code class=\"language-bash\"># php -r \"copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');\"</code></pre>\n<p>公式サイト推奨のインストール方法です。<br />\ncomposer-setup.php のダウンロードをしてます。        </p>\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\n<p>composer の本体である composer.phar を作ります。        </p>\n<pre><code class=\"language-bash\"># php -r \"unlink(\'composer-setup.php\');\"</code></pre>\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\n<pre><code class=\"language-bash\"> which composer\n/usr/local/bin/composer </code></pre>\n<p>composer が配置されたか確認      </p>\n<pre><code class=\"language-bash\">composer --version\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\n<p>Version確認</p>\n<p>これで Composer の準備が整いました。</p>','PHP Composer','','inherit','closed','closed','','45-revision-v1','','','2019-06-09 22:52:20','2019-06-09 13:52:20','## PHP Composer とは\r\n\r\n*PHP のパッケージ管理ツール* と呼ばれてます。     \r\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。     \r\nNode.js の npm と似た扱いになります。   \r\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　\r\n\r\n\r\n*なにがいいのかというと*\r\n- ライブラリーを簡単にインストールできる\r\n- ライブラリーの依存関係を解決してくれる\r\n- composer.json の内容からパッケージ\r\n  をインストールするのでチームでの共有がしやすい。\r\n  (プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)\r\n- インストールされたパッケージは基本Gitの管理外なので Git-Repository\r\n  に影響をあたえない。 \r\n  \r\nと言われてます。\r\n\r\n\r\n### Composer がない時代\r\n経験談ですが・・・   \r\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\r\nをインストールしランキングを表示させるモジュールを作る。\r\nサイト内でランキングを表示する。    \r\n        \r\nその後        \r\n        \r\nランミング結果を xml化し　軽量化および外部配信を試みる 。     \r\n*XML_Query2XML*    \r\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       \r\n        \r\nそれなりのスクリプトを組んで実行してみる。\r\n        \r\nPearDB には対応してません。　とエラーになる。      \r\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。      \r\nMDB2 をインストール　および　動作チェック。\r\n\r\n### Composer があると\r\ncomposer.jsonに 必要なライブラリーを記述します。    \r\n```json\r\n  &quot;require&quot;: {\r\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\r\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\r\n   }\r\n  &quot;require-dev&quot;: {\r\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\r\n  }\r\n```\r\nこの記述例をもとにRepositoryからダウンロートしてくれます。\r\nその時依存関係を解決をComposerが試みてくれます。\r\n\r\n### Autoloader\r\n```json \"autoload\": \r\n{\r\n        &quot;psr-4&quot;: {\r\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\r\n        }\r\n    }\r\n &#x60;&#x60;&#x60;\r\nオートローダーはファイルを自動で読み込んでくれる仕組みです。      \r\n```php\r\n <?php\r\nnamespace myhoge;\r\nclass hoge {\r\n function hogehoge(){\r\n   return true;   \r\n }\r\n  }\r\n}\r\n?> \r\n```\r\nディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。\r\n\r\n\r\n## PHP Composer を CentOS7 にインストール\r\n```bash\r\n# php -r \"copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');\"\r\n```\r\n公式サイト推奨のインストール方法です。     \r\ncomposer-setup.php のダウンロードをしてます。        \r\n```bash\r\n# php composer-setup.php\r\n```\r\ncomposer の本体である composer.phar を作ります。        \r\n```bash\r\n# php -r \"unlink(\'composer-setup.php\');\"\r\n```\r\ncomposer.phar ができたのでダウンロードした omposer-setup.php を削除します。\r\n```bash\r\n# mv composer.phar /usr/local/bin/composer\r\n```\r\ncomposerをグローバルで使えるよう/usr/local/bin/ に配置してます。    \r\n```bash\r\n which composer\r\n/usr/local/bin/composer \r\n```\r\ncomposer が配置されたか確認      \r\n```bash\r\ncomposer --version\r\nComposer version 1.8.3 2019-01-30 08:31:33\r\n```\r\nVersion確認\r\n\r\nこれで Composer の準備が整いました。\r\n\r\n\r\n  \r\n\r\n',45,'http://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/45-revision-v1/',0,'revision','',0),(48,1,'2019-06-09 22:53:51','2019-06-09 13:53:51','<h2>PHP Composer とは</h2>\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\nNode.js の npm と似た扱いになります。<br />\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p>\n<p><em>なにがいいのかというと</em></p>\n<ul>\n<li>ライブラリーを簡単にインストールできる</li>\n<li>ライブラリーの依存関係を解決してくれる</li>\n<li>composer.json の内容からパッケージ\nをインストールするのでチームでの共有がしやすい。\n(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\nに影響をあたえない。 </li>\n</ul>\n<p>と言われてます。</p>\n<h3>Composer がない時代</h3>\n<p>経験談ですが・・・<br />\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\nをインストールしランキングを表示させるモジュールを作る。\nサイト内でランキングを表示する。    </p>\n<p>その後        </p>\n<p>ランミング結果を xml化し　軽量化および外部配信を試みる 。<br />\n<em>XML_Query2XML</em><br />\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       </p>\n<p>それなりのスクリプトを組んで実行してみる。</p>\n<p>PearDB には対応してません。　とエラーになる。<br />\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br />\nMDB2 をインストール　および　動作チェック。</p>\n<h3>Composer があると</h3>\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\n<pre><code class=\"language-json\">  &quot;require&quot;: {\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\n   }\n  &quot;require-dev&quot;: {\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\n  }</code></pre>\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\nその時依存関係を解決をComposerが試みてくれます。</p>\n<h3>Autoloader</h3>\n<pre><code class=\"language-json\">&quot;autoload&quot;: \n{\n        &quot;psr-4&quot;: {\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\n        }\n    }\n ```\nオートローダーはファイルを自動で読み込んでくれる仕組みです。      \n```php\n <?php\nnamespace myhoge;\nclass hoge {\n function hogehoge(){\n   return true;   \n }\n  }\n}\n?> </code></pre>\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\n<h2>PHP Composer を CentOS7 にインストール</h2>\n<pre><code class=\"language-bash\"># php -r \"copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');\"</code></pre>\n<p>公式サイト推奨のインストール方法です。<br />\ncomposer-setup.php のダウンロードをしてます。        </p>\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\n<p>composer の本体である composer.phar を作ります。        </p>\n<pre><code class=\"language-bash\"># php -r \"unlink(\'composer-setup.php\');\"</code></pre>\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\n<pre><code class=\"language-bash\"> which composer\n/usr/local/bin/composer </code></pre>\n<p>composer が配置されたか確認      </p>\n<pre><code class=\"language-bash\">composer --version\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\n<p>Version確認</p>\n<p>これで Composer の準備が整いました。</p>','PHP Composer','','inherit','closed','closed','','45-revision-v1','','','2019-06-09 22:53:51','2019-06-09 13:53:51','## PHP Composer とは\r\n\r\n*PHP のパッケージ管理ツール* と呼ばれてます。     \r\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。     \r\nNode.js の npm と似た扱いになります。   \r\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　\r\n\r\n\r\n*なにがいいのかというと*\r\n- ライブラリーを簡単にインストールできる\r\n- ライブラリーの依存関係を解決してくれる\r\n- composer.json の内容からパッケージ\r\n  をインストールするのでチームでの共有がしやすい。\r\n  (プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)\r\n- インストールされたパッケージは基本Gitの管理外なので Git-Repository\r\n  に影響をあたえない。 \r\n  \r\nと言われてます。\r\n\r\n\r\n### Composer がない時代\r\n経験談ですが・・・   \r\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\r\nをインストールしランキングを表示させるモジュールを作る。\r\nサイト内でランキングを表示する。    \r\n        \r\nその後        \r\n        \r\nランミング結果を xml化し　軽量化および外部配信を試みる 。     \r\n*XML_Query2XML*    \r\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       \r\n        \r\nそれなりのスクリプトを組んで実行してみる。\r\n        \r\nPearDB には対応してません。　とエラーになる。      \r\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。      \r\nMDB2 をインストール　および　動作チェック。\r\n\r\n### Composer があると\r\ncomposer.jsonに 必要なライブラリーを記述します。    \r\n```json\r\n  &quot;require&quot;: {\r\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\r\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\r\n   }\r\n  &quot;require-dev&quot;: {\r\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\r\n  }\r\n```\r\nこの記述例をもとにRepositoryからダウンロートしてくれます。\r\nその時依存関係を解決をComposerが試みてくれます。\r\n\r\n### Autoloader\r\n```json\r\n&quot;autoload&quot;: \r\n{\r\n        &quot;psr-4&quot;: {\r\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\r\n        }\r\n    }\r\n &#x60;&#x60;&#x60;\r\nオートローダーはファイルを自動で読み込んでくれる仕組みです。      \r\n```php\r\n <?php\r\nnamespace myhoge;\r\nclass hoge {\r\n function hogehoge(){\r\n   return true;   \r\n }\r\n  }\r\n}\r\n?> \r\n```\r\nディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。\r\n\r\n\r\n## PHP Composer を CentOS7 にインストール\r\n```bash\r\n# php -r \"copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');\"\r\n```\r\n公式サイト推奨のインストール方法です。     \r\ncomposer-setup.php のダウンロードをしてます。        \r\n```bash\r\n# php composer-setup.php\r\n```\r\ncomposer の本体である composer.phar を作ります。        \r\n```bash\r\n# php -r \"unlink(\'composer-setup.php\');\"\r\n```\r\ncomposer.phar ができたのでダウンロードした omposer-setup.php を削除します。\r\n```bash\r\n# mv composer.phar /usr/local/bin/composer\r\n```\r\ncomposerをグローバルで使えるよう/usr/local/bin/ に配置してます。    \r\n```bash\r\n which composer\r\n/usr/local/bin/composer \r\n```\r\ncomposer が配置されたか確認      \r\n```bash\r\ncomposer --version\r\nComposer version 1.8.3 2019-01-30 08:31:33\r\n```\r\nVersion確認\r\n\r\nこれで Composer の準備が整いました。\r\n\r\n\r\n  \r\n\r\n',45,'http://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/45-revision-v1/',0,'revision','',0),(49,1,'2019-06-09 22:54:46','2019-06-09 13:54:46','<h2>PHP Composer とは</h2>\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\nNode.js の npm と似た扱いになります。<br />\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p>\n<p><em>なにがいいのかというと</em></p>\n<ul>\n<li>ライブラリーを簡単にインストールできる</li>\n<li>ライブラリーの依存関係を解決してくれる</li>\n<li>composer.json の内容からパッケージ\nをインストールするのでチームでの共有がしやすい。\n(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\nに影響をあたえない。 </li>\n</ul>\n<p>と言われてます。</p>\n<h3>Composer がない時代</h3>\n<p>経験談ですが・・・<br />\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\nをインストールしランキングを表示させるモジュールを作る。\nサイト内でランキングを表示する。    </p>\n<p>その後        </p>\n<p>ランミング結果を xml化し　軽量化および外部配信を試みる 。<br />\n<em>XML_Query2XML</em><br />\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       </p>\n<p>それなりのスクリプトを組んで実行してみる。</p>\n<p>PearDB には対応してません。　とエラーになる。<br />\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br />\nMDB2 をインストール　および　動作チェック。</p>\n<h3>Composer があると</h3>\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\n<pre><code class=\"language-json\">  &quot;require&quot;: {\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\n   }\n  &quot;require-dev&quot;: {\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\n  }</code></pre>\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\nその時依存関係を解決をComposerが試みてくれます。</p>\n<h3>Autoloader</h3>\n<pre><code class=\"language-json\">&quot;autoload&quot;:\n{\n        &quot;psr-4&quot;: {\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\n        }\n    }</code></pre>\n<p>オートローダーはファイルを自動で読み込んでくれる仕組みです。      </p>\n<pre><code class=\"language-php\"> &lt;?php\nnamespace myhoge;\nclass hoge {\n function hogehoge(){\n   return true;   \n }\n  }\n}\n?&gt; </code></pre>\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\n<h2>PHP Composer を CentOS7 にインストール</h2>\n<pre><code class=\"language-bash\"># php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;</code></pre>\n<p>公式サイト推奨のインストール方法です。<br />\ncomposer-setup.php のダウンロードをしてます。        </p>\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\n<p>composer の本体である composer.phar を作ります。        </p>\n<pre><code class=\"language-bash\"># php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;</code></pre>\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\n<pre><code class=\"language-bash\"> which composer\n/usr/local/bin/composer </code></pre>\n<p>composer が配置されたか確認      </p>\n<pre><code class=\"language-bash\">composer --version\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\n<p>Version確認</p>\n<p>これで Composer の準備が整いました。</p>','PHP Composer','','inherit','closed','closed','','45-revision-v1','','','2019-06-09 22:54:46','2019-06-09 13:54:46','## PHP Composer とは\r\n\r\n*PHP のパッケージ管理ツール* と呼ばれてます。     \r\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。     \r\nNode.js の npm と似た扱いになります。   \r\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　\r\n\r\n\r\n*なにがいいのかというと*\r\n- ライブラリーを簡単にインストールできる\r\n- ライブラリーの依存関係を解決してくれる\r\n- composer.json の内容からパッケージ\r\n  をインストールするのでチームでの共有がしやすい。\r\n  (プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)\r\n- インストールされたパッケージは基本Gitの管理外なので Git-Repository\r\n  に影響をあたえない。 \r\n  \r\nと言われてます。\r\n\r\n\r\n### Composer がない時代\r\n経験談ですが・・・   \r\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\r\nをインストールしランキングを表示させるモジュールを作る。\r\nサイト内でランキングを表示する。    \r\n        \r\nその後        \r\n        \r\nランミング結果を xml化し　軽量化および外部配信を試みる 。     \r\n*XML_Query2XML*    \r\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       \r\n        \r\nそれなりのスクリプトを組んで実行してみる。\r\n        \r\nPearDB には対応してません。　とエラーになる。      \r\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。      \r\nMDB2 をインストール　および　動作チェック。\r\n\r\n### Composer があると\r\ncomposer.jsonに 必要なライブラリーを記述します。    \r\n```json\r\n  &quot;require&quot;: {\r\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\r\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\r\n   }\r\n  &quot;require-dev&quot;: {\r\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\r\n  }\r\n```\r\nこの記述例をもとにRepositoryからダウンロートしてくれます。\r\nその時依存関係を解決をComposerが試みてくれます。\r\n\r\n### Autoloader\r\n```json\r\n&quot;autoload&quot;:\r\n{\r\n        &quot;psr-4&quot;: {\r\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\r\n        }\r\n    }\r\n```\r\nオートローダーはファイルを自動で読み込んでくれる仕組みです。      \r\n```php\r\n &lt;?php\r\nnamespace myhoge;\r\nclass hoge {\r\n function hogehoge(){\r\n   return true;   \r\n }\r\n  }\r\n}\r\n?&gt; \r\n```\r\nディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。\r\n\r\n\r\n## PHP Composer を CentOS7 にインストール\r\n```bash\r\n# php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;\r\n```\r\n公式サイト推奨のインストール方法です。     \r\ncomposer-setup.php のダウンロードをしてます。        \r\n```bash\r\n# php composer-setup.php\r\n```\r\ncomposer の本体である composer.phar を作ります。        \r\n```bash\r\n# php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;\r\n```\r\ncomposer.phar ができたのでダウンロードした omposer-setup.php を削除します。\r\n```bash\r\n# mv composer.phar /usr/local/bin/composer\r\n```\r\ncomposerをグローバルで使えるよう/usr/local/bin/ に配置してます。    \r\n```bash\r\n which composer\r\n/usr/local/bin/composer \r\n```\r\ncomposer が配置されたか確認      \r\n```bash\r\ncomposer --version\r\nComposer version 1.8.3 2019-01-30 08:31:33\r\n```\r\nVersion確認\r\n\r\nこれで Composer の準備が整いました。\r\n\r\n\r\n  \r\n\r\n',45,'http://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/45-revision-v1/',0,'revision','',0),(50,1,'2019-06-09 22:55:54','2019-06-09 13:55:54','<h2>PHP Composer とは</h2>\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\nNode.js の npm と似た扱いになります。<br />\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p>\n<p><em>なにがいいのかというと</em></p>\n<ul>\n<li>ライブラリーを簡単にインストールできる</li>\n<li>ライブラリーの依存関係を解決してくれる</li>\n<li>composer.json の内容からパッケージ\nをインストールするのでチームでの共有がしやすい。\n(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\nに影響をあたえない。 </li>\n</ul>\n<p>と言われてます。</p>\n<h3>Composer がない時代</h3>\n<p>経験談ですが・・・<br />\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\nをインストールしランキングを表示させるモジュールを作る。\nサイト内でランキングを表示する。    </p>\n<p>その後        </p>\n<p>ランミング結果を xml化し　軽量化および外部配信を試みる 。<br />\n<em>XML_Query2XML</em><br />\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       </p>\n<p>それなりのスクリプトを組んで実行してみる。</p>\n<p>PearDB には対応してません。　とエラーになる。<br />\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br />\nMDB2 をインストール　および　動作チェック。</p>\n<h3>Composer があると</h3>\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\n<pre><code class=\"language-json\">  &quot;require&quot;: {\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\n   }\n  &quot;require-dev&quot;: {\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\n  }</code></pre>\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\nその時依存関係を解決をComposerが試みてくれます。</p>\n<h3>Autoloader</h3>\n<pre><code class=\"language-json\">&quot;autoload&quot;:\n{\n        &quot;psr-4&quot;: {\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\n        }\n    }</code></pre>\n<p>オートローダーはファイルを自動で読み込んでくれる仕組みです。      </p>\n<pre><code class=\"language-php\"> &lt;?php\nnamespace myhoge;\nclass hoge {\n function hogehoge(){\n   return true;   \n }\n  }\n}\n?&gt; </code></pre>\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\n<h2>PHP Composer を CentOS7 にインストール</h2>\n<pre><code class=\"language-bash\"># php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;</code></pre>\n<p>公式サイト推奨のインストール方法です。<br />\ncomposer-setup.php のダウンロードをしてます。        </p>\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\n<p>composer の本体である composer.phar を作ります。        </p>\n<pre><code class=\"language-bash\"># php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;</code></pre>\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\n<pre><code class=\"language-bash\"># which composer\n/usr/local/bin/composer </code></pre>\n<p>composer が配置されたか確認      </p>\n<pre><code class=\"language-bash\"># composer --version\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\n<p>Version確認</p>\n<p>これで Composer の準備が整いました。</p>','PHP Composer','','inherit','closed','closed','','45-revision-v1','','','2019-06-09 22:55:54','2019-06-09 13:55:54','## PHP Composer とは\r\n\r\n*PHP のパッケージ管理ツール* と呼ばれてます。     \r\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。     \r\nNode.js の npm と似た扱いになります。   \r\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　\r\n\r\n\r\n*なにがいいのかというと*\r\n- ライブラリーを簡単にインストールできる\r\n- ライブラリーの依存関係を解決してくれる\r\n- composer.json の内容からパッケージ\r\n  をインストールするのでチームでの共有がしやすい。\r\n  (プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)\r\n- インストールされたパッケージは基本Gitの管理外なので Git-Repository\r\n  に影響をあたえない。 \r\n  \r\nと言われてます。\r\n\r\n\r\n### Composer がない時代\r\n経験談ですが・・・   \r\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\r\nをインストールしランキングを表示させるモジュールを作る。\r\nサイト内でランキングを表示する。    \r\n        \r\nその後        \r\n        \r\nランミング結果を xml化し　軽量化および外部配信を試みる 。     \r\n*XML_Query2XML*    \r\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       \r\n        \r\nそれなりのスクリプトを組んで実行してみる。\r\n        \r\nPearDB には対応してません。　とエラーになる。      \r\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。      \r\nMDB2 をインストール　および　動作チェック。\r\n\r\n### Composer があると\r\ncomposer.jsonに 必要なライブラリーを記述します。    \r\n```json\r\n  &quot;require&quot;: {\r\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\r\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\r\n   }\r\n  &quot;require-dev&quot;: {\r\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\r\n  }\r\n```\r\nこの記述例をもとにRepositoryからダウンロートしてくれます。\r\nその時依存関係を解決をComposerが試みてくれます。\r\n\r\n### Autoloader\r\n```json\r\n&quot;autoload&quot;:\r\n{\r\n        &quot;psr-4&quot;: {\r\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\r\n        }\r\n    }\r\n```\r\nオートローダーはファイルを自動で読み込んでくれる仕組みです。      \r\n```php\r\n &lt;?php\r\nnamespace myhoge;\r\nclass hoge {\r\n function hogehoge(){\r\n   return true;   \r\n }\r\n  }\r\n}\r\n?&gt; \r\n```\r\nディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。\r\n\r\n\r\n## PHP Composer を CentOS7 にインストール\r\n```bash\r\n# php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;\r\n```\r\n公式サイト推奨のインストール方法です。     \r\ncomposer-setup.php のダウンロードをしてます。        \r\n```bash\r\n# php composer-setup.php\r\n```\r\ncomposer の本体である composer.phar を作ります。        \r\n```bash\r\n# php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;\r\n```\r\ncomposer.phar ができたのでダウンロードした omposer-setup.php を削除します。\r\n```bash\r\n# mv composer.phar /usr/local/bin/composer\r\n```\r\ncomposerをグローバルで使えるよう/usr/local/bin/ に配置してます。    \r\n```bash\r\n# which composer\r\n/usr/local/bin/composer \r\n```\r\ncomposer が配置されたか確認      \r\n```bash\r\n# composer --version\r\nComposer version 1.8.3 2019-01-30 08:31:33\r\n```\r\nVersion確認\r\n\r\nこれで Composer の準備が整いました。\r\n\r\n\r\n  \r\n\r\n',45,'http://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/45-revision-v1/',0,'revision','',0),(51,1,'2019-06-09 22:59:40','2019-06-09 13:59:40','<h2>PHP Composer とは</h2>\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\nNode.js の npm と似た扱いになります。<br />\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p>\n<p><em>なにがいいのかというと</em></p>\n<ul>\n<li>ライブラリーを簡単にインストールできる</li>\n<li>ライブラリーの依存関係を解決してくれる</li>\n<li>composer.json の内容からパッケージ\nをインストールするのでチームでの共有がしやすい。\n(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\nに影響をあたえない。 </li>\n</ul>\n<p>と言われてます。</p>\n<h3>Composer がない時代</h3>\n<p>経験談ですが・・・<br />\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\nをインストールしランキングを表示させるモジュールを作る。\nサイト内でランキングを表示する。    </p>\n<p>その後        </p>\n<p>ランミング結果を xml化し　軽量化および外部配信を試みる 。<br />\n<em>XML_Query2XML</em><br />\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       </p>\n<p>それなりのスクリプトを組んで実行してみる。</p>\n<p>PearDB には対応してません。　とエラーになる。<br />\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br />\nMDB2 をインストール　および　動作チェック。</p>\n<h3>Composer があると</h3>\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\n<pre><code class=\"language-json\">  &quot;require&quot;: {\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\n   }\n  &quot;require-dev&quot;: {\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\n  }</code></pre>\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\nその時依存関係を解決をComposerが試みてくれます。</p>\n<h3>Autoloader</h3>\n<pre><code class=\"language-json\">&quot;autoload&quot;:\n{\n        &quot;psr-4&quot;: {\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\n        }\n    }</code></pre>\n<p>オートローダーはファイルを自動で読み込んでくれる仕組みです。      </p>\n<pre><code class=\"language-php\"> &lt;?php\nnamespace myhoge;\nclass hoge {\n function hogehoge(){\n   return true;   \n }\n  }\n}\n?&gt; </code></pre>\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\n<h2>PHP Composer を CentOS7 にインストール</h2>\n<p>以下Root権限　もしくは sudo  </p>\n<pre><code class=\"language-bash\"># php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;</code></pre>\n<p>公式サイト推奨のインストール方法です。<br />\ncomposer-setup.php のダウンロードをしてます。        </p>\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\n<p>composer の本体である composer.phar を作ります。        </p>\n<pre><code class=\"language-bash\"># php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;</code></pre>\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\n<pre><code class=\"language-bash\"># which composer\n/usr/local/bin/composer </code></pre>\n<p>composer が配置されたか確認      </p>\n<pre><code class=\"language-bash\"># composer --version\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\n<p>Version確認</p>\n<p>これで Composer の準備が整いました。</p>','PHP Composer','','inherit','closed','closed','','45-revision-v1','','','2019-06-09 22:59:40','2019-06-09 13:59:40','## PHP Composer とは\r\n\r\n*PHP のパッケージ管理ツール* と呼ばれてます。     \r\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。     \r\nNode.js の npm と似た扱いになります。   \r\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　\r\n\r\n\r\n*なにがいいのかというと*\r\n- ライブラリーを簡単にインストールできる\r\n- ライブラリーの依存関係を解決してくれる\r\n- composer.json の内容からパッケージ\r\n  をインストールするのでチームでの共有がしやすい。\r\n  (プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)\r\n- インストールされたパッケージは基本Gitの管理外なので Git-Repository\r\n  に影響をあたえない。 \r\n  \r\nと言われてます。\r\n\r\n\r\n### Composer がない時代\r\n経験談ですが・・・   \r\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\r\nをインストールしランキングを表示させるモジュールを作る。\r\nサイト内でランキングを表示する。    \r\n        \r\nその後        \r\n        \r\nランミング結果を xml化し　軽量化および外部配信を試みる 。     \r\n*XML_Query2XML*    \r\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       \r\n        \r\nそれなりのスクリプトを組んで実行してみる。\r\n        \r\nPearDB には対応してません。　とエラーになる。      \r\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。      \r\nMDB2 をインストール　および　動作チェック。\r\n\r\n### Composer があると\r\ncomposer.jsonに 必要なライブラリーを記述します。    \r\n```json\r\n  &quot;require&quot;: {\r\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\r\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\r\n   }\r\n  &quot;require-dev&quot;: {\r\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\r\n  }\r\n```\r\nこの記述例をもとにRepositoryからダウンロートしてくれます。\r\nその時依存関係を解決をComposerが試みてくれます。\r\n\r\n### Autoloader\r\n```json\r\n&quot;autoload&quot;:\r\n{\r\n        &quot;psr-4&quot;: {\r\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\r\n        }\r\n    }\r\n```\r\nオートローダーはファイルを自動で読み込んでくれる仕組みです。      \r\n```php\r\n &lt;?php\r\nnamespace myhoge;\r\nclass hoge {\r\n function hogehoge(){\r\n   return true;   \r\n }\r\n  }\r\n}\r\n?&gt; \r\n```\r\nディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。\r\n\r\n\r\n## PHP Composer を CentOS7 にインストール\r\n以下Root権限　もしくは sudo	\r\n```bash\r\n# php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;\r\n```\r\n公式サイト推奨のインストール方法です。     \r\ncomposer-setup.php のダウンロードをしてます。        \r\n```bash\r\n# php composer-setup.php\r\n```\r\ncomposer の本体である composer.phar を作ります。        \r\n```bash\r\n# php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;\r\n```\r\ncomposer.phar ができたのでダウンロードした omposer-setup.php を削除します。\r\n```bash\r\n# mv composer.phar /usr/local/bin/composer\r\n```\r\ncomposerをグローバルで使えるよう/usr/local/bin/ に配置してます。    \r\n```bash\r\n# which composer\r\n/usr/local/bin/composer \r\n```\r\ncomposer が配置されたか確認      \r\n```bash\r\n# composer --version\r\nComposer version 1.8.3 2019-01-30 08:31:33\r\n```\r\nVersion確認\r\n\r\nこれで Composer の準備が整いました。\r\n\r\n\r\n  \r\n\r\n',45,'http://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/45-revision-v1/',0,'revision','',0),(52,1,'2019-06-09 23:00:38','2019-06-09 14:00:38','<h2>PHP Composer とは</h2>\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\nNode.js の npm と似た扱いになります。<br />\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p>\n<p><em>なにがいいのかというと</em></p>\n<ul>\n<li>ライブラリーを簡単にインストールできる</li>\n<li>ライブラリーの依存関係を解決してくれる</li>\n<li>composer.json の内容からパッケージをインストールするのでチームでの共有がしやすい。\n(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\nに影響をあたえない。 </li>\n</ul>\n<p>と言われてます。</p>\n<h3>Composer がない時代</h3>\n<p>経験談ですが・・・<br />\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\nをインストールしランキングを表示させるモジュールを作る。\nサイト内でランキングを表示する。    </p>\n<p>その後        </p>\n<p>ランミング結果を xml化し　軽量化および外部配信を試みる 。<br />\n<em>XML_Query2XML</em><br />\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       </p>\n<p>それなりのスクリプトを組んで実行してみる。</p>\n<p>PearDB には対応してません。　とエラーになる。<br />\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br />\nMDB2 をインストール　および　動作チェック。</p>\n<h3>Composer があると</h3>\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\n<pre><code class=\"language-json\">  &quot;require&quot;: {\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\n   }\n  &quot;require-dev&quot;: {\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\n  }</code></pre>\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\nその時依存関係を解決をComposerが試みてくれます。</p>\n<h3>Autoloader</h3>\n<pre><code class=\"language-json\">&quot;autoload&quot;:\n{\n        &quot;psr-4&quot;: {\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\n        }\n    }</code></pre>\n<p>オートローダーはファイルを自動で読み込んでくれる仕組みです。      </p>\n<pre><code class=\"language-php\"> &lt;?php\nnamespace myhoge;\nclass hoge {\n function hogehoge(){\n   return true;   \n }\n  }\n}\n?&gt; </code></pre>\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\n<h2>PHP Composer を CentOS7 にインストール</h2>\n<p>以下Root権限　もしくは sudo  </p>\n<pre><code class=\"language-bash\"># php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;</code></pre>\n<p>公式サイト推奨のインストール方法です。<br />\ncomposer-setup.php のダウンロードをしてます。        </p>\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\n<p>composer の本体である composer.phar を作ります。        </p>\n<pre><code class=\"language-bash\"># php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;</code></pre>\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\n<pre><code class=\"language-bash\"># which composer\n/usr/local/bin/composer </code></pre>\n<p>composer が配置されたか確認      </p>\n<pre><code class=\"language-bash\"># composer --version\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\n<p>Version確認</p>\n<p>これで Composer の準備が整いました。</p>','PHP Composer','','inherit','closed','closed','','45-revision-v1','','','2019-06-09 23:00:38','2019-06-09 14:00:38','## PHP Composer とは\r\n\r\n*PHP のパッケージ管理ツール* と呼ばれてます。     \r\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。     \r\nNode.js の npm と似た扱いになります。   \r\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　\r\n\r\n\r\n*なにがいいのかというと*\r\n- ライブラリーを簡単にインストールできる\r\n- ライブラリーの依存関係を解決してくれる\r\n- composer.json の内容からパッケージをインストールするのでチームでの共有がしやすい。\r\n  (プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)\r\n- インストールされたパッケージは基本Gitの管理外なので Git-Repository\r\n  に影響をあたえない。 \r\n  \r\nと言われてます。\r\n\r\n\r\n### Composer がない時代\r\n経験談ですが・・・   \r\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\r\nをインストールしランキングを表示させるモジュールを作る。\r\nサイト内でランキングを表示する。    \r\n        \r\nその後        \r\n        \r\nランミング結果を xml化し　軽量化および外部配信を試みる 。     \r\n*XML_Query2XML*    \r\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       \r\n        \r\nそれなりのスクリプトを組んで実行してみる。\r\n        \r\nPearDB には対応してません。　とエラーになる。      \r\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。      \r\nMDB2 をインストール　および　動作チェック。\r\n\r\n### Composer があると\r\ncomposer.jsonに 必要なライブラリーを記述します。    \r\n```json\r\n  &quot;require&quot;: {\r\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\r\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\r\n   }\r\n  &quot;require-dev&quot;: {\r\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\r\n  }\r\n```\r\nこの記述例をもとにRepositoryからダウンロートしてくれます。\r\nその時依存関係を解決をComposerが試みてくれます。\r\n\r\n### Autoloader\r\n```json\r\n&quot;autoload&quot;:\r\n{\r\n        &quot;psr-4&quot;: {\r\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\r\n        }\r\n    }\r\n```\r\nオートローダーはファイルを自動で読み込んでくれる仕組みです。      \r\n```php\r\n &lt;?php\r\nnamespace myhoge;\r\nclass hoge {\r\n function hogehoge(){\r\n   return true;   \r\n }\r\n  }\r\n}\r\n?&gt; \r\n```\r\nディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。\r\n\r\n\r\n## PHP Composer を CentOS7 にインストール\r\n以下Root権限　もしくは sudo	\r\n```bash\r\n# php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;\r\n```\r\n公式サイト推奨のインストール方法です。     \r\ncomposer-setup.php のダウンロードをしてます。        \r\n```bash\r\n# php composer-setup.php\r\n```\r\ncomposer の本体である composer.phar を作ります。        \r\n```bash\r\n# php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;\r\n```\r\ncomposer.phar ができたのでダウンロードした omposer-setup.php を削除します。\r\n```bash\r\n# mv composer.phar /usr/local/bin/composer\r\n```\r\ncomposerをグローバルで使えるよう/usr/local/bin/ に配置してます。    \r\n```bash\r\n# which composer\r\n/usr/local/bin/composer \r\n```\r\ncomposer が配置されたか確認      \r\n```bash\r\n# composer --version\r\nComposer version 1.8.3 2019-01-30 08:31:33\r\n```\r\nVersion確認\r\n\r\nこれで Composer の準備が整いました。\r\n\r\n\r\n  \r\n\r\n',45,'http://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/45-revision-v1/',0,'revision','',0),(53,1,'2019-06-09 23:01:05','2019-06-09 14:01:05','<h2>PHP Composer とは</h2>\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\nNode.js の npm と似た扱いになります。<br />\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p>\n<p><em>なにがいいのかというと</em></p>\n<ul>\n<li>ライブラリーを簡単にインストールできる</li>\n<li>ライブラリーの依存関係を解決してくれる</li>\n<li>composer.json の内容からパッケージをインストールするのでチームでの共有がしやすい。(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\nに影響をあたえない。 </li>\n</ul>\n<p>と言われてます。</p>\n<h3>Composer がない時代</h3>\n<p>経験談ですが・・・<br />\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\nをインストールしランキングを表示させるモジュールを作る。\nサイト内でランキングを表示する。    </p>\n<p>その後        </p>\n<p>ランミング結果を xml化し　軽量化および外部配信を試みる 。<br />\n<em>XML_Query2XML</em><br />\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       </p>\n<p>それなりのスクリプトを組んで実行してみる。</p>\n<p>PearDB には対応してません。　とエラーになる。<br />\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br />\nMDB2 をインストール　および　動作チェック。</p>\n<h3>Composer があると</h3>\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\n<pre><code class=\"language-json\">  &quot;require&quot;: {\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\n   }\n  &quot;require-dev&quot;: {\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\n  }</code></pre>\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\nその時依存関係を解決をComposerが試みてくれます。</p>\n<h3>Autoloader</h3>\n<pre><code class=\"language-json\">&quot;autoload&quot;:\n{\n        &quot;psr-4&quot;: {\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\n        }\n    }</code></pre>\n<p>オートローダーはファイルを自動で読み込んでくれる仕組みです。      </p>\n<pre><code class=\"language-php\"> &lt;?php\nnamespace myhoge;\nclass hoge {\n function hogehoge(){\n   return true;   \n }\n  }\n}\n?&gt; </code></pre>\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\n<h2>PHP Composer を CentOS7 にインストール</h2>\n<p>以下Root権限　もしくは sudo  </p>\n<pre><code class=\"language-bash\"># php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;</code></pre>\n<p>公式サイト推奨のインストール方法です。<br />\ncomposer-setup.php のダウンロードをしてます。        </p>\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\n<p>composer の本体である composer.phar を作ります。        </p>\n<pre><code class=\"language-bash\"># php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;</code></pre>\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\n<pre><code class=\"language-bash\"># which composer\n/usr/local/bin/composer </code></pre>\n<p>composer が配置されたか確認      </p>\n<pre><code class=\"language-bash\"># composer --version\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\n<p>Version確認</p>\n<p>これで Composer の準備が整いました。</p>','PHP Composer','','inherit','closed','closed','','45-revision-v1','','','2019-06-09 23:01:05','2019-06-09 14:01:05','## PHP Composer とは\r\n\r\n*PHP のパッケージ管理ツール* と呼ばれてます。     \r\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。     \r\nNode.js の npm と似た扱いになります。   \r\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　\r\n\r\n\r\n*なにがいいのかというと*\r\n- ライブラリーを簡単にインストールできる\r\n- ライブラリーの依存関係を解決してくれる\r\n- composer.json の内容からパッケージをインストールするのでチームでの共有がしやすい。(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)\r\n- インストールされたパッケージは基本Gitの管理外なので Git-Repository\r\n  に影響をあたえない。 \r\n  \r\nと言われてます。\r\n\r\n\r\n### Composer がない時代\r\n経験談ですが・・・   \r\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\r\nをインストールしランキングを表示させるモジュールを作る。\r\nサイト内でランキングを表示する。    \r\n        \r\nその後        \r\n        \r\nランミング結果を xml化し　軽量化および外部配信を試みる 。     \r\n*XML_Query2XML*    \r\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       \r\n        \r\nそれなりのスクリプトを組んで実行してみる。\r\n        \r\nPearDB には対応してません。　とエラーになる。      \r\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。      \r\nMDB2 をインストール　および　動作チェック。\r\n\r\n### Composer があると\r\ncomposer.jsonに 必要なライブラリーを記述します。    \r\n```json\r\n  &quot;require&quot;: {\r\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\r\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\r\n   }\r\n  &quot;require-dev&quot;: {\r\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\r\n  }\r\n```\r\nこの記述例をもとにRepositoryからダウンロートしてくれます。\r\nその時依存関係を解決をComposerが試みてくれます。\r\n\r\n### Autoloader\r\n```json\r\n&quot;autoload&quot;:\r\n{\r\n        &quot;psr-4&quot;: {\r\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\r\n        }\r\n    }\r\n```\r\nオートローダーはファイルを自動で読み込んでくれる仕組みです。      \r\n```php\r\n &lt;?php\r\nnamespace myhoge;\r\nclass hoge {\r\n function hogehoge(){\r\n   return true;   \r\n }\r\n  }\r\n}\r\n?&gt; \r\n```\r\nディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。\r\n\r\n\r\n## PHP Composer を CentOS7 にインストール\r\n以下Root権限　もしくは sudo	\r\n```bash\r\n# php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;\r\n```\r\n公式サイト推奨のインストール方法です。     \r\ncomposer-setup.php のダウンロードをしてます。        \r\n```bash\r\n# php composer-setup.php\r\n```\r\ncomposer の本体である composer.phar を作ります。        \r\n```bash\r\n# php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;\r\n```\r\ncomposer.phar ができたのでダウンロードした omposer-setup.php を削除します。\r\n```bash\r\n# mv composer.phar /usr/local/bin/composer\r\n```\r\ncomposerをグローバルで使えるよう/usr/local/bin/ に配置してます。    \r\n```bash\r\n# which composer\r\n/usr/local/bin/composer \r\n```\r\ncomposer が配置されたか確認      \r\n```bash\r\n# composer --version\r\nComposer version 1.8.3 2019-01-30 08:31:33\r\n```\r\nVersion確認\r\n\r\nこれで Composer の準備が整いました。\r\n\r\n\r\n  \r\n\r\n',45,'http://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/45-revision-v1/',0,'revision','',0),(54,1,'2019-06-10 14:51:49','2019-06-10 05:51:49','','environment_create','','inherit','open','closed','','environment_create','','','2019-06-10 14:51:49','2019-06-10 05:51:49','',9,'http://blog.webdimension.jp/wp-content/uploads/2019/06/environment_create.png',0,'attachment','image/png',0),(55,1,'2019-06-10 15:00:21','2019-06-10 06:00:21','','composer','','inherit','open','closed','','composer','','','2019-06-10 15:00:21','2019-06-10 06:00:21','',45,'http://blog.webdimension.jp/wp-content/uploads/2019/06/composer.png',0,'attachment','image/png',0),(56,1,'2019-06-10 15:05:09','2019-06-10 06:05:09','<h2>PHP Composer とは</h2>\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\nNode.js の npm と似た扱いになります。<br />\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p>\n<p><em>なにがいいのかというと</em></p>\n<ul>\n<li>ライブラリーを簡単にインストールできる</li>\n<li>ライブラリーの依存関係を解決してくれる</li>\n<li>composer.json の内容からパッケージをインストールするのでチームでの共有がしやすい。(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\nに影響をあたえない。 </li>\n</ul>\n<p>と言われてます。</p>\n<h3>Composer がない時代</h3>\n<p>経験談ですが・・・<br />\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\nをインストールしランキングを表示させるモジュールを作る。\nサイト内でランキングを表示する。    </p>\n<p>その後        </p>\n<p>ランミング結果を xml化し　軽量化および外部配信を試みる 。<br />\n<em>XML_Query2XML</em><br />\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       </p>\n<p>それなりのスクリプトを組んで実行してみる。</p>\n<p>PearDB には対応してません。　とエラーになる。<br />\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br />\nMDB2 をインストール　および　動作チェック。</p>\n<h3>Composer があると</h3>\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\n<pre><code class=\"language-json\">  &quot;require&quot;: {\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\n   }\n  &quot;require-dev&quot;: {\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\n  }</code></pre>\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\nその時依存関係を解決をComposerが試みてくれます。</p>\n<h3>Autoloader</h3>\n<pre><code class=\"language-json\">&quot;autoload&quot;:\n{\n        &quot;psr-4&quot;: {\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\n        }\n    }</code></pre>\n<p>オートローダーはファイルを自動で読み込んでくれる仕組みです。      </p>\n<pre><code class=\"language-php\"> &lt;?php\nnamespace myhoge;\nclass hoge {\n function hogehoge(){\n   return true;   \n }\n  }\n}\n?&gt; </code></pre>\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\n<h2>PHP Composer を CentOS7 にインストール</h2>\n<p>以下Root権限　もしくは sudo  </p>\n<pre><code class=\"language-bash\"># php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;</code></pre>\n<p>公式サイト推奨のインストール方法です。<br />\ncomposer-setup.php のダウンロードをしてます。        </p>\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\n<p>composer の本体である composer.phar を作ります。        </p>\n<pre><code class=\"language-bash\"># php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;</code></pre>\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\n<pre><code class=\"language-bash\"># which composer\n/usr/local/bin/composer </code></pre>\n<p>composer が配置されたか確認      </p>\n<pre><code class=\"language-bash\"># composer --version\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\n<p>Version確認</p>\n<p>これで Composer の準備が整いました。</p>','PHP Composer','PHP のパッケージマネージャー Composer .\r\nその特徴とインストール','inherit','closed','closed','','45-revision-v1','','','2019-06-10 15:05:09','2019-06-10 06:05:09','## PHP Composer とは\r\n\r\n*PHP のパッケージ管理ツール* と呼ばれてます。     \r\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。     \r\nNode.js の npm と似た扱いになります。   \r\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　\r\n\r\n\r\n*なにがいいのかというと*\r\n- ライブラリーを簡単にインストールできる\r\n- ライブラリーの依存関係を解決してくれる\r\n- composer.json の内容からパッケージをインストールするのでチームでの共有がしやすい。(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)\r\n- インストールされたパッケージは基本Gitの管理外なので Git-Repository\r\n  に影響をあたえない。 \r\n  \r\nと言われてます。\r\n\r\n\r\n### Composer がない時代\r\n経験談ですが・・・   \r\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\r\nをインストールしランキングを表示させるモジュールを作る。\r\nサイト内でランキングを表示する。    \r\n        \r\nその後        \r\n        \r\nランミング結果を xml化し　軽量化および外部配信を試みる 。     \r\n*XML_Query2XML*    \r\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       \r\n        \r\nそれなりのスクリプトを組んで実行してみる。\r\n        \r\nPearDB には対応してません。　とエラーになる。      \r\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。      \r\nMDB2 をインストール　および　動作チェック。\r\n\r\n### Composer があると\r\ncomposer.jsonに 必要なライブラリーを記述します。    \r\n```json\r\n  &quot;require&quot;: {\r\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\r\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\r\n   }\r\n  &quot;require-dev&quot;: {\r\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\r\n  }\r\n```\r\nこの記述例をもとにRepositoryからダウンロートしてくれます。\r\nその時依存関係を解決をComposerが試みてくれます。\r\n\r\n### Autoloader\r\n```json\r\n&quot;autoload&quot;:\r\n{\r\n        &quot;psr-4&quot;: {\r\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\r\n        }\r\n    }\r\n```\r\nオートローダーはファイルを自動で読み込んでくれる仕組みです。      \r\n```php\r\n &lt;?php\r\nnamespace myhoge;\r\nclass hoge {\r\n function hogehoge(){\r\n   return true;   \r\n }\r\n  }\r\n}\r\n?&gt; \r\n```\r\nディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。\r\n\r\n\r\n## PHP Composer を CentOS7 にインストール\r\n以下Root権限　もしくは sudo	\r\n```bash\r\n# php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;\r\n```\r\n公式サイト推奨のインストール方法です。     \r\ncomposer-setup.php のダウンロードをしてます。        \r\n```bash\r\n# php composer-setup.php\r\n```\r\ncomposer の本体である composer.phar を作ります。        \r\n```bash\r\n# php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;\r\n```\r\ncomposer.phar ができたのでダウンロードした omposer-setup.php を削除します。\r\n```bash\r\n# mv composer.phar /usr/local/bin/composer\r\n```\r\ncomposerをグローバルで使えるよう/usr/local/bin/ に配置してます。    \r\n```bash\r\n# which composer\r\n/usr/local/bin/composer \r\n```\r\ncomposer が配置されたか確認      \r\n```bash\r\n# composer --version\r\nComposer version 1.8.3 2019-01-30 08:31:33\r\n```\r\nVersion確認\r\n\r\nこれで Composer の準備が整いました。\r\n\r\n\r\n  \r\n\r\n',45,'http://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/45-revision-v1/',0,'revision','',0),(57,1,'2019-06-10 15:58:49','2019-06-10 06:58:49','','mokuji','','inherit','open','closed','','mokuji','','','2019-06-10 15:58:49','2019-06-10 06:58:49','',7,'http://blog.webdimension.jp/wp-content/uploads/2019/06/mokuji.png',0,'attachment','image/png',0),(58,1,'2019-06-10 16:03:12','2019-06-10 07:03:12',' ','','','publish','closed','closed','','58','','','2019-08-15 16:05:22','2019-08-15 07:05:22','',0,'http://blog.webdimension.jp/?p=58',1,'nav_menu_item','',0),(60,1,'2019-06-10 16:47:21','2019-06-10 07:47:21','','top','','inherit','open','closed','','top','','','2019-06-10 16:47:21','2019-06-10 07:47:21','',0,'http://blog.webdimension.jp/wp-content/uploads/2019/06/top.png',0,'attachment','image/png',0),(61,1,'2019-06-11 16:53:30','2019-06-11 07:53:30','<h2>PHP Composer とは</h2>\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\nNode.js の npm と似た扱いになります。<br />\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p>\n<p><em>なにがいいのかというと</em></p>\n<ul><li>ライブラリーを簡単にインストールできる</li>\n<li>ライブラリーの依存関係を解決してくれる</li>\n<li>composer.json の内容からパッケージをインストールするのでチームでの共有がしやすい。(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\nに影響をあたえない。 </li>\n</ul>\n<p>と言われてます。</p>\n<h3>Composer がない時代</h3>\n<p>経験談ですが・・・<br />\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\nをインストールしランキングを表示させるモジュールを作る。\nサイト内でランキングを表示する。    </p>\n<p>その後        </p>\n<p>ランミング結果を xml化し　軽量化および外部配信を試みる 。<br />\n<em>XML_Query2XML</em><br />\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       </p>\n<p>それなりのスクリプトを組んで実行してみる。</p>\n<p>PearDB には対応してません。　とエラーになる。<br />\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br />\nMDB2 をインストール　および　動作チェック。</p>\n<h3>Composer があると</h3>\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\n<pre><code class=\"language-json\">  \"require\": {\n  \"php\": \"&gt;=5.5.9\",\n  \"laravel/framework\": \"5.2.*\",\n   }\n  \"require-dev\": {\n  \"phpunit/phpunit\": \"3.7.*\"\n  }</code></pre>\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\nその時依存関係を解決をComposerが試みてくれます。</p>\n<h3>Autoloader</h3>\n<pre><code class=\"language-json\">\"autoload\":\n{\n        \"psr-4\": {\n            \"myhoge\\\\\": \"src/\"\n        }\n    }</code></pre>\n<p>オートローダーはファイルを自動で読み込んでくれる仕組みです。      </p>\n<pre><code class=\"language-php\"> &lt;?php\nnamespace myhoge;\nclass hoge {\n function hogehoge(){\n   return true;   \n }\n  }\n}\n?&gt; </code></pre>\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\n<h2>PHP Composer を CentOS7 にインストール</h2>\n<p>以下Root権限　もしくは sudo  </p>\n<pre><code class=\"language-bash\"># php -r \"copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');\"</code></pre>\n<p>公式サイト推奨のインストール方法です。<br />\ncomposer-setup.php のダウンロードをしてます。        </p>\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\n<p>composer の本体である composer.phar を作ります。        </p>\n<pre><code class=\"language-bash\"># php -r \"unlink(\'composer-setup.php\');\"</code></pre>\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\n<pre><code class=\"language-bash\"># which composer\n/usr/local/bin/composer </code></pre>\n<p>composer が配置されたか確認      </p>\n<pre><code class=\"language-bash\"># composer --version\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\n<p>Version確認</p>\n<p>これで Composer の準備が整いました。</p>','PHP Composer','PHP のパッケージマネージャー Composer .\r\nその特徴とインストール','inherit','closed','closed','','45-revision-v1','','','2019-06-11 16:53:30','2019-06-11 07:53:30','<h2>PHP Composer とは</h2>\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\nNode.js の npm と似た扱いになります。<br />\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p>\n<p><em>なにがいいのかというと</em></p>\n<ul>\n<li>ライブラリーを簡単にインストールできる</li>\n<li>ライブラリーの依存関係を解決してくれる</li>\n<li>composer.json の内容からパッケージをインストールするのでチームでの共有がしやすい。(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\nに影響をあたえない。 </li>\n</ul>\n<p>と言われてます。</p>\n<h3>Composer がない時代</h3>\n<p>経験談ですが・・・<br />\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\nをインストールしランキングを表示させるモジュールを作る。\nサイト内でランキングを表示する。    </p>\n<p>その後        </p>\n<p>ランミング結果を xml化し　軽量化および外部配信を試みる 。<br />\n<em>XML_Query2XML</em><br />\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       </p>\n<p>それなりのスクリプトを組んで実行してみる。</p>\n<p>PearDB には対応してません。　とエラーになる。<br />\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br />\nMDB2 をインストール　および　動作チェック。</p>\n<h3>Composer があると</h3>\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\n<pre><code class=\"language-json\">  &quot;require&quot;: {\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\n   }\n  &quot;require-dev&quot;: {\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\n  }</code></pre>\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\nその時依存関係を解決をComposerが試みてくれます。</p>\n<h3>Autoloader</h3>\n<pre><code class=\"language-json\">&quot;autoload&quot;:\n{\n        &quot;psr-4&quot;: {\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\n        }\n    }</code></pre>\n<p>オートローダーはファイルを自動で読み込んでくれる仕組みです。      </p>\n<pre><code class=\"language-php\"> &lt;?php\nnamespace myhoge;\nclass hoge {\n function hogehoge(){\n   return true;   \n }\n  }\n}\n?&gt; </code></pre>\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\n<h2>PHP Composer を CentOS7 にインストール</h2>\n<p>以下Root権限　もしくは sudo  </p>\n<pre><code class=\"language-bash\"># php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;</code></pre>\n<p>公式サイト推奨のインストール方法です。<br />\ncomposer-setup.php のダウンロードをしてます。        </p>\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\n<p>composer の本体である composer.phar を作ります。        </p>\n<pre><code class=\"language-bash\"># php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;</code></pre>\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\n<pre><code class=\"language-bash\"># which composer\n/usr/local/bin/composer </code></pre>\n<p>composer が配置されたか確認      </p>\n<pre><code class=\"language-bash\"># composer --version\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\n<p>Version確認</p>\n<p>これで Composer の準備が整いました。</p>',45,'http://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/45-revision-v1/',0,'revision','',0),(65,1,'2019-06-12 00:30:51','2019-06-11 15:30:51','<h2>GuestOS に IPアドレスを割り振る</h2>\n<p><strong>Vagrantfile</strong> を開きIPアドレスを設定します。</p>\n<pre><code class=\"language-bash\">  # Create a private network, which allows host-only access to the machine\n  # using a specific IP.\n  # config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;\n   config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.100&quot;</code></pre>\n<p>192.168.33.100　というIPアドレスを設定しました。</p>\n<pre><code class=\"language-bash\">$ vagrant up</code></pre>\n<p>GuestOSを立ち上げます      </p>\n<pre><code class=\"language-bash\">$ vagrant ssh</code></pre>\n<p>ssh でログイン       </p>\n<pre><code class=\"language-bash\">$ ip addr\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 52:54:00:26:10:60 brd ff:ff:ff:ff:ff:ff\n    inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute dynamic eth0\n       valid_lft 86385sec preferred_lft 86385sec\n    inet6 fe80::5054:ff:fe26:1060/64 scope link \n       valid_lft forever preferred_lft forever\n3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 08:00:27:16:64:97 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.33.100/24 brd 192.168.33.255 scope global noprefixroute eth1\n       valid_lft forever preferred_lft forever\n    inet6 fe80::a00:27ff:fe16:6497/64 scope link \n       valid_lft forever preferred_lft forever</code></pre>\n<p>eth1 に 192.168.33.100 が設定されてます。</p>\n<h2>GuestOS とディレクトリを共有する</h2>\n<pre><code class=\"language-bash\">\n  # Share an additional folder to the guest VM. The first argument is\n  # the path on the host to the actual folder. The second argument is\n  # the path on the guest to mount the folder. And the optional third\n  # argument is a set of non-required options.\n  # config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;\n  config.vm.synced_folder &quot;../../workspace/centos76/http_doc&quot;, &quot;/var/www/html&quot;, type: &quot;nfs&quot;, nfs_export: true\n  config.vm.synced_folder &quot;../../workspace/centos76/mysql&quot;, &quot;/data/mysql&quot;, type: &quot;nfs&quot;, nfs_export: true</code></pre>\n<ul>\n<li>HostOS の~/workspace/centos76/http_doc を　GuestOS /var/www/html へマウント(html,php,css,jsなどWebDocumentの共有を想定)   </li>\n<li>HostOS の~/workspace/centos76/mysql をGuestOS /data.mysql へマウント (MySQLデータの共有を想定)     </li>\n</ul>\n<p>WebDocumentは HostOS 側で編集し実行は GuestOS(CentOS) を想定<br />\n上記ディレクトリを作成したうえで</p>\n<pre><code class=\"language-bash\">$ vagrant reload</code></pre>\n<p>GuestOS を再起動    </p>\n<pre><code class=\"language-bash\">$ vagrant ssh    \n$ ls /var/www/html</code></pre>\n<p>ファイルが存在してないのを確認<br />\nHostOS側の　~/workspace/centos76/http_doc　にディレクトリをつくる<br />\n<a href=\"http://blog.webdimension.jp/wp-content/uploads/2019/06/vagrantfile-img-001.png\">\n<img src=\"http://blog.webdimension.jp/wp-content/uploads/2019/06/vagrantfile-img-001-300x194.png\" alt=\"\" />\n</a></p>\n<pre><code class=\"language-bash\">$ ls /var/www/html\ntest_dir</code></pre>\n<p>GuestOS 側で ls。HostOS側で作成したファイル、フォルダを確認できれば共有成功！<br />\n, type: &quot;nfs&quot;, nfs_export: true<br />\nがポイントで nfs でマウントすることでHostOS GuestOS間でパーミッションの問題もいい感じにしてくれる。     </p>\n<p>VirtualBox の共有機能だと何かとパーミッションの問題に悩まされる。<br />\n<strong>Vagrant</strong> で共有をオススメしたい。        </p>\n<h2>なぜ、ファイル共有をするのか？</h2>\n<ul>\n<li>ファイル群は HostOS から編集できる（ <strong>FTP</strong> などいらない ）</li>\n<li><strong>バックアップをHostOS側で行える</strong>。(Mac の Timemachine　など、GuestOS丸ごとのバックアップは Timemachine には不向き(ファイルが大きすぎる)</li>\n</ul>\n<h3>- 次回 -</h3>\n<p class=\"next_description\">\n今後は <strong>Apache</strong> <strong>MySQL</strong> <strong>PHP</strong> などを Install していきます。   \nが、\nその為には　<strong>linuxコマンド</strong>、<strong>vim</strong> が多少必要になります。       \n覚えてて損はありません。　とくに <strong>vim</strong> は。\n</p>','Vagrantfileを編集してGuestOSを便利に使う','Vagrant GuestOSに固定IPの割り振り、HostOS,GuestOS間でディレクトリ共有','publish','closed','closed','','vagrantfile','','','2019-09-23 03:31:31','2019-09-22 18:31:31','##  GuestOS に IPアドレスを割り振る\r\n\r\n**Vagrantfile** を開きIPアドレスを設定します。\r\n```bash\r\n  # Create a private network, which allows host-only access to the machine\r\n  # using a specific IP.\r\n  # config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;\r\n   config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.100&quot;\r\n```\r\n192.168.33.100　というIPアドレスを設定しました。\r\n\r\n\r\n```bash\r\n$ vagrant up\r\n```\r\n\r\nGuestOSを立ち上げます      \r\n\r\n```bash\r\n$ vagrant ssh\r\n```\r\n\r\nssh でログイン       \r\n\r\n```bash\r\n$ ip addr\r\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\r\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\r\n    inet 127.0.0.1/8 scope host lo\r\n       valid_lft forever preferred_lft forever\r\n    inet6 ::1/128 scope host \r\n       valid_lft forever preferred_lft forever\r\n2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\r\n    link/ether 52:54:00:26:10:60 brd ff:ff:ff:ff:ff:ff\r\n    inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute dynamic eth0\r\n       valid_lft 86385sec preferred_lft 86385sec\r\n    inet6 fe80::5054:ff:fe26:1060/64 scope link \r\n       valid_lft forever preferred_lft forever\r\n3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\r\n    link/ether 08:00:27:16:64:97 brd ff:ff:ff:ff:ff:ff\r\n    inet 192.168.33.100/24 brd 192.168.33.255 scope global noprefixroute eth1\r\n       valid_lft forever preferred_lft forever\r\n    inet6 fe80::a00:27ff:fe16:6497/64 scope link \r\n       valid_lft forever preferred_lft forever\r\n```\r\neth1 に 192.168.33.100 が設定されてます。\r\n\r\n \r\n\r\n##  GuestOS とディレクトリを共有する\r\n\r\n```bash\r\n\r\n  # Share an additional folder to the guest VM. The first argument is\r\n  # the path on the host to the actual folder. The second argument is\r\n  # the path on the guest to mount the folder. And the optional third\r\n  # argument is a set of non-required options.\r\n  # config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;\r\n  config.vm.synced_folder &quot;../../workspace/centos76/http_doc&quot;, &quot;/var/www/html&quot;, type: &quot;nfs&quot;, nfs_export: true\r\n  config.vm.synced_folder &quot;../../workspace/centos76/mysql&quot;, &quot;/data/mysql&quot;, type: &quot;nfs&quot;, nfs_export: true\r\n```\r\n- HostOS の~/workspace/centos76/http_doc を　GuestOS /var/www/html へマウント(html,php,css,jsなどWebDocumentの共有を想定)   \r\n- HostOS の~/workspace/centos76/mysql をGuestOS /data.mysql へマウント (MySQLデータの共有を想定)     \r\n  \r\nWebDocumentは HostOS 側で編集し実行は GuestOS(CentOS) を想定      \r\n上記ディレクトリを作成したうえで\r\n  \r\n```bash\r\n$ vagrant reload\r\n```\r\n\r\nGuestOS を再起動    \r\n\r\n```bash\r\n$ vagrant ssh    \r\n$ ls /var/www/html\r\n```\r\n\r\nファイルが存在してないのを確認     \r\nHostOS側の　~/workspace/centos76/http_doc　にディレクトリをつくる      \r\n<a href=\"http://blog.webdimension.jp/wp-content/uploads/2019/06/vagrantfile-img-001.png\">\r\n![](http://blog.webdimension.jp/wp-content/uploads/2019/06/vagrantfile-img-001-300x194.png)\r\n</a>\r\n\r\n```bash\r\n$ ls /var/www/html\r\ntest_dir\r\n```\r\nGuestOS 側で ls。HostOS側で作成したファイル、フォルダを確認できれば共有成功！   \r\n, type: \"nfs\", nfs_export: true     \r\nがポイントで nfs でマウントすることでHostOS GuestOS間でパーミッションの問題もいい感じにしてくれる。     \r\n\r\nVirtualBox の共有機能だと何かとパーミッションの問題に悩まされる。      \r\n**Vagrant** で共有をオススメしたい。        \r\n## なぜ、ファイル共有をするのか？    \r\n\r\n\r\n- ファイル群は HostOS から編集できる（ **FTP** などいらない ）\r\n- **バックアップをHostOS側で行える**。(Mac の Timemachine　など、GuestOS丸ごとのバックアップは Timemachine には不向き(ファイルが大きすぎる)\r\n\r\n### - 次回 - 		\r\n\r\n<p class=\"next_description\">\r\n今後は <strong>Apache</strong> <strong>MySQL</strong> <strong>PHP</strong> などを Install していきます。   \r\nが、\r\nその為には　<strong>linuxコマンド</strong>、<strong>vim</strong> が多少必要になります。       \r\n覚えてて損はありません。　とくに <strong>vim</strong> は。\r\n</p>\r\n \r\n',0,'http://blog.webdimension.jp/?post_type=environment&#038;p=65',0,'environment','',0),(67,1,'2019-06-11 23:29:18','2019-06-11 14:29:18','','vagrantile','','inherit','closed','closed','','vagrantile','','','2019-06-11 23:29:18','2019-06-11 14:29:18','',65,'http://blog.webdimension.jp/wp-content/uploads/2019/06/vagrantile.png',0,'attachment','image/png',0),(70,1,'2019-06-12 00:49:20','2019-06-11 15:49:20',' ','','','publish','closed','closed','','70','','','2019-06-12 00:49:28','2019-06-11 15:49:28','',0,'http://blog.webdimension.jp/?p=70',3,'nav_menu_item','',0),(71,1,'2019-06-12 00:49:44','2019-06-11 15:49:44',' ','','','publish','closed','closed','','71','','','2019-08-15 16:05:22','2019-08-15 07:05:22','',0,'http://blog.webdimension.jp/?p=71',2,'nav_menu_item','',0),(72,1,'2019-06-12 10:43:05','2019-06-12 01:43:05','','Default Theme','','publish','closed','closed','','default-theme','','','2019-06-12 10:43:05','2019-06-12 01:43:05','',0,'http://blog.webdimension.jp/?post_type=popup_theme&p=72',0,'popup_theme','',0),(73,1,'2019-06-12 10:43:05','2019-06-12 01:43:05','','Light Box','','publish','closed','closed','','lightbox','','','2019-06-12 10:43:05','2019-06-12 01:43:05','',0,'http://blog.webdimension.jp/?post_type=popup_theme&p=73',0,'popup_theme','',0),(74,1,'2019-06-12 10:43:05','2019-06-12 01:43:05','','Enterprise Blue','','publish','closed','closed','','enterprise-blue','','','2019-06-12 10:43:05','2019-06-12 01:43:05','',0,'http://blog.webdimension.jp/?post_type=popup_theme&p=74',0,'popup_theme','',0),(75,1,'2019-06-12 10:43:05','2019-06-12 01:43:05','','Hello Box','','publish','closed','closed','','hello-box','','','2019-06-12 10:43:05','2019-06-12 01:43:05','',0,'http://blog.webdimension.jp/?post_type=popup_theme&p=75',0,'popup_theme','',0),(76,1,'2019-06-12 10:43:05','2019-06-12 01:43:05','','Cutting Edge','','publish','closed','closed','','cutting-edge','','','2019-06-12 10:43:05','2019-06-12 01:43:05','',0,'http://blog.webdimension.jp/?post_type=popup_theme&p=76',0,'popup_theme','',0),(77,1,'2019-06-12 10:43:05','2019-06-12 01:43:05','','Framed Border','','publish','closed','closed','','framed-border','','','2019-06-12 10:43:05','2019-06-12 01:43:05','',0,'http://blog.webdimension.jp/?post_type=popup_theme&p=77',0,'popup_theme','',0),(78,1,'2019-06-12 10:46:21','0000-00-00 00:00:00','','EntryImage','','draft','closed','closed','','','','','2019-06-12 10:46:21','2019-06-12 01:46:21','',0,'http://blog.webdimension.jp/?post_type=popup&#038;p=78',0,'popup','',0),(79,1,'2019-06-12 14:58:46','2019-06-12 05:58:46','','vagrantfile-img-001','','inherit','closed','closed','','vagrantfile-img-001','','','2019-06-12 15:01:40','2019-06-12 06:01:40','',65,'http://blog.webdimension.jp/wp-content/uploads/2019/06/vagrantfile-img-001.png',0,'attachment','image/png',0),(80,1,'2019-06-12 15:17:30','2019-06-12 06:17:30','<p>[myRecentPosts my_limit=6]\n[myRankingPosts my_limit=6]</p>','','','inherit','closed','closed','','35-revision-v1','','','2019-06-12 15:17:30','2019-06-12 06:17:30','[myRecentPosts my_limit=6]\r\n[myRankingPosts my_limit=6]',35,'http://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/35-revision-v1/',0,'revision','',0),(81,1,'2019-06-12 20:27:29','2019-06-12 11:27:29','<h2>PHP Composer とは</h2>\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\nNode.js の npm と似た扱いになります。<br />\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p></p>\n<p><em>なにがいいのかというと</em></p>\n<ul><li>ライブラリーを簡単にインストールできる</li>\n<li>ライブラリーの依存関係を解決してくれる</li>\n<li>composer.json の内容からパッケージをインストールするのでチームでの共有がしやすい。(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\nに影響をあたえない。 </li>\n</ul>\n<p>と言われてます。</p>\n<h3>Composer がない時代</h3>\n<p>経験談ですが・・・<br>\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\nをインストールしランキングを表示させるモジュールを作る。\nサイト内でランキングを表示する。    </p>\n<p>その後        </p>\n<p>ランミング結果を xml化し　軽量化および外部配信を試みる 。<br><em>XML_Query2XML</em><br>\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       </p>\n<p>それなりのスクリプトを組んで実行してみる。</p>\n<p>PearDB には対応してません。　とエラーになる。<br>\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br>\nMDB2 をインストール　および　動作チェック。</p>\n<h3>Composer があると</h3>\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\n<pre><code class=\"language-json\">  \"require\": {\n  \"php\": \"&gt;=5.5.9\",\n  \"laravel/framework\": \"5.2.*\",\n   }\n  \"require-dev\": {\n  \"phpunit/phpunit\": \"3.7.*\"\n  }</code></pre>\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\nその時依存関係を解決をComposerが試みてくれます。</p>\n<h3>Autoloader</h3>\n<pre><code class=\"language-json\">\"autoload\":\n{\n        \"psr-4\": {\n            \"myhoge\\\\\": \"src/\"\n        }\n    }</code></pre>\n<p>オートローダーはファイルを自動で読み込んでくれる仕組みです。      </p>\n<pre><code class=\"language-php\"> &lt;?php\nnamespace myhoge;\nclass hoge {\n function hogehoge(){\n   return true;   \n }\n  }\n}\n?&gt; </code></pre>\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\n<h2>PHP Composer を CentOS7 にインストール</h2>\n<p>以下Root権限　もしくは sudo  </p>\n<pre><code class=\"language-bash\"># php -r \"copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');\"</code></pre>\n<p>公式サイト推奨のインストール方法です。<br>\ncomposer-setup.php のダウンロードをしてます。        </p>\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\n<p>composer の本体である composer.phar を作ります。        </p>\n<pre><code class=\"language-bash\"># php -r \"unlink(\'composer-setup.php\');\"</code></pre>\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\n<pre><code class=\"language-bash\"># which composer\n/usr/local/bin/composer </code></pre>\n<p>composer が配置されたか確認      </p>\n<pre><code class=\"language-bash\"># composer --version\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\n<p>Version確認</p>\n<p>これで Composer の準備が整いました。</p>','PHP Composer','PHP のパッケージマネージャー Composer .\r\nその特徴とインストール','inherit','closed','closed','','45-revision-v1','','','2019-06-12 20:27:29','2019-06-12 11:27:29','<h2>PHP Composer とは</h2>\r\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\r\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\r\nNode.js の npm と似た扱いになります。<br />\r\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p>\r\n<p><em>なにがいいのかというと</em></p>\r\n<ul>\r\n<li>ライブラリーを簡単にインストールできる</li>\r\n<li>ライブラリーの依存関係を解決してくれる</li>\r\n<li>composer.json の内容からパッケージをインストールするのでチームでの共有がしやすい。(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\r\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\r\nに影響をあたえない。 </li>\r\n</ul>\r\n<p>と言われてます。</p>\r\n<h3>Composer がない時代</h3>\r\n<p>経験談ですが・・・<br />\r\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\r\nをインストールしランキングを表示させるモジュールを作る。\r\nサイト内でランキングを表示する。    </p>\r\n<p>その後        </p>\r\n<p>ランミング結果を xml化し　軽量化および外部配信を試みる 。<br />\r\n<em>XML_Query2XML</em><br />\r\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール       </p>\r\n<p>それなりのスクリプトを組んで実行してみる。</p>\r\n<p>PearDB には対応してません。　とエラーになる。<br />\r\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br />\r\nMDB2 をインストール　および　動作チェック。</p>\r\n<h3>Composer があると</h3>\r\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\r\n<pre><code class=\"language-json\">  &quot;require&quot;: {\r\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\r\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\r\n   }\r\n  &quot;require-dev&quot;: {\r\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\r\n  }</code></pre>\r\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\r\nその時依存関係を解決をComposerが試みてくれます。</p>\r\n<h3>Autoloader</h3>\r\n<pre><code class=\"language-json\">&quot;autoload&quot;:\r\n{\r\n        &quot;psr-4&quot;: {\r\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\r\n        }\r\n    }</code></pre>\r\n<p>オートローダーはファイルを自動で読み込んでくれる仕組みです。      </p>\r\n<pre><code class=\"language-php\"> &lt;?php\r\nnamespace myhoge;\r\nclass hoge {\r\n function hogehoge(){\r\n   return true;   \r\n }\r\n  }\r\n}\r\n?&gt; </code></pre>\r\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\r\n<h2>PHP Composer を CentOS7 にインストール</h2>\r\n<p>以下Root権限　もしくは sudo  </p>\r\n<pre><code class=\"language-bash\"># php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;</code></pre>\r\n<p>公式サイト推奨のインストール方法です。<br />\r\ncomposer-setup.php のダウンロードをしてます。        </p>\r\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\r\n<p>composer の本体である composer.phar を作ります。        </p>\r\n<pre><code class=\"language-bash\"># php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;</code></pre>\r\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\r\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\r\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\r\n<pre><code class=\"language-bash\"># which composer\r\n/usr/local/bin/composer </code></pre>\r\n<p>composer が配置されたか確認      </p>\r\n<pre><code class=\"language-bash\"># composer --version\r\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\r\n<p>Version確認</p>\r\n<p>これで Composer の準備が整いました。</p>',45,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/45-revision-v1/',0,'revision','',0),(84,1,'2019-06-16 23:01:46','2019-06-16 14:01:46','<p>[qiitaRss my_limit=6]</p>','Qiita','','inherit','closed','closed','','20-revision-v1','','','2019-06-16 23:01:46','2019-06-16 14:01:46','[qiitaRss my_limit=6]',20,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/20-revision-v1/',0,'revision','',0),(101,1,'2019-06-27 11:29:42','2019-06-27 02:29:42','','dev-env','','inherit','closed','closed','','dev-env','','','2019-06-27 11:29:42','2019-06-27 02:29:42','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/06/dev-env.png',0,'attachment','image/png',0),(104,1,'2019-06-27 11:44:14','2019-06-27 02:44:14','','profile','','inherit','closed','closed','','profile','','','2019-06-27 11:44:14','2019-06-27 02:44:14','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/06/profile.jpg',0,'attachment','image/jpeg',0),(105,1,'2019-06-29 10:28:44','2019-06-29 01:28:44','<div class=\"row\">\r\n<div class=\"col-12 form-group\">\r\n	[text* text-794 your-name class::form-control placeholder \"お名前*\"]\r\n</div>\r\n<div class=\"col-12 form-group\">\r\n	[email* email-287 email class::form-control placeholder \"メールアドレス*\"]\r\n</div>\r\n<div class=\"col-12 form-group\">\r\n	[text* text-746 your-subject class::form-control placeholder \"件名*\"]\r\n</div>\r\n<div class=\"col-12 form-group\">\r\n	[textarea* textarea-464 your-message x8 class::form-control placeholder \"お問い合わせ内容*\"]\r\n</div>\r\n <div class=\"col-12\">\r\n[response]\r\n</div>\r\n<div class=\"col-12\">\r\n[acceptance acceptance-543 \"内容に間違いありません\"]\r\n</div>\r\n<div class=\"col-12 form-group form-send\">\r\n[submit \"送信\"]\r\n</div>\r\n</div>\n1\nお問い合わせがありました。\nおっさんWEBエンジニアのブログ <blog@webdimension.jp>\nblog@webdimension.jp\n■以下の内容でお問合せがありました。\r\n\r\n\r\nご名前様 : [text-794]\r\n\r\nメールアドレス : [email-287]\r\n\r\n件名 : [text-746]\r\n\r\nお問合せ内容 : \r\n[textarea-464]\n\n\n\n\n1\nお問合せありがとうございます。\nおっさんWEBエンジニアのブログ <blog@webdimension.jp>\n[email-287]\n[text-794] 様\r\n\r\nお問い合わせいただき、誠にありがとうございます。\r\n後ほど、担当者よりご連絡させていただきます。今しばらくお待ちくださいませ。\r\n\r\n\r\n■お問合せ内容\r\nご名前様 : [text-794]\r\n\r\nメールアドレス : [email-287]\r\n\r\n件名 : [text-746]\r\n\r\nお問合せ内容 :\r\n[textarea-464]\nBcc: blog@webdimension.jp\n\n\n\nありがとうございます。メッセージは送信されました。\nメッセージの送信に失敗しました。後でまたお試しください。\n入力内容に問題があります。確認して再度お試しください。\nメッセージの送信に失敗しました。後でまたお試しください。\nメッセージを送信する前に承諾確認が必要です。\n必須項目に入力してください。\n入力されたテキストが長すぎます。\n入力されたテキストが短すぎます。\n日付の形式が正しくありません。\n選択された日付は早すぎます。\n選択された日付は遅すぎます。\nファイルのアップロード時に不明なエラーが発生しました。\nこの形式のファイルはアップロードできません。\nファイルが大きすぎます。\nファイルのアップロード中にエラーが発生しました。\n数値の形式に間違いがあります。\n入力された数値が小さすぎます。\n数値が最大許容値を超えています。\nクイズの答えが正しくありません。\nYour entered code is incorrect.\n入力されたメールアドレスに間違いがあります。\nURL に間違いがあります。\n電話番号に間違いがあります。','Contact form 1','','publish','closed','closed','','contact-form-1','','','2019-09-15 12:55:25','2019-09-15 03:55:25','',0,'https://blog.webdimension.jp/?post_type=wpcf7_contact_form&#038;p=105',0,'wpcf7_contact_form','',0),(110,1,'2019-08-09 11:24:17','2019-08-09 02:24:17','<h2>pwd</h2>\n<p>現在いる場所を表示</p>\n<pre><code>○ → pwd\n/home/vagrant</code></pre>\n<h2>cd</h2>\n<p>ディレクトリを移動    </p>\n<pre><code>○ → cd /home\n○ → pwd\n/home\n\n○ → cd ../\n○ → pwd\n/</code></pre>\n<h2>ls</h2>\n<p>ディレクトリの中身を表示    </p>\n<pre><code>○ → ls home\nvagrant\nls -a とすると不可視ファイルも表示</code></pre>\n<h2>yum install packege_name</h2>\n<p>ソフトウェアをインストール           </p>\n<pre><code>yum install httpd</code></pre>\n<h2>chmod</h2>\n<p>ヂレクトリファイルのパーミッション変更    </p>\n<pre><code>chmod 755 ファイル名 or フォルダ名</code></pre>\n<p>0: 権限なし<br />\n1: 実行<br />\n2: 書き込み<br />\n4: 読み込み</p>\n<p>左から　オーナー,グループ、その他<br />\n755 とは<br />\nオーナー 7 : 1 + 2 + 4 オーナーはフル権限<br />\nグループ7 7 : 1 + 2 + 4 グループフル権限<br />\nその他 5 : 1 + 4 その他は書き込み権限なし　　　　</p>\n<h2>chown</h2>\n<p>ディレクトリの所有者、グループを変更      </p>\n<pre><code>chown vagrant sample.txt\nsample.txt の所有者をshoyuushawo vagrant に変更</code></pre>\n<h2>sudo</h2>\n<p>Root権限で実行</p>\n<pre><code>sudo yum install httpd\nyum install はroot権限でないと実行できない。</code></pre>\n<h2>systemctl</h2>\n<p>アプリケーションの管理         </p>\n<pre><code>sudo systemctl status httpd\napache が起動している\n\nsudo systemctl start httpd\napache を起動\n\nsudo systemctl stop httpd\napache を起動\n\nsudo systemctl enable httpd\napache を自動起動する\n</code></pre>\n<h2>vim</h2>\n<p>ファイルを編集する       </p>\n<pre><code>vim /etc/php.ini\nターミナル上で php.iniを編集</code></pre>\n<p>LAMP環境の構築ならこれくらいのコマンドでなんとかなりそう。</p>\n<h3>- 次回 -</h3>\n<p class=\"next_description\">\n次回はVimエディタについての概要です。\nサーバーサイドの作業はVimが必須といってもいいくらいです。\n</p>','LAMP環境構築にあたって必要なコマンド(最低限)','VagrantへリモートログインしてLAMP環境構築するため、cd, pwd , ls など簡単コマンドを覚えてる。','publish','closed','closed','','command','','','2019-09-23 03:20:28','2019-09-22 18:20:28','## pwd\r\n現在いる場所を表示\r\n```\r\n○ → pwd\r\n/home/vagrant\r\n```\r\n## cd\r\nディレクトリを移動    \r\n```\r\n○ → cd /home\r\n○ → pwd\r\n/home\r\n\r\n○ → cd ../\r\n○ → pwd\r\n/\r\n```\r\n## ls\r\nディレクトリの中身を表示    \r\n```\r\n○ → ls home\r\nvagrant\r\nls -a とすると不可視ファイルも表示\r\n```\r\n## yum install packege_name \r\nソフトウェアをインストール           \r\n```\r\nyum install httpd\r\n```\r\n## chmod\r\nヂレクトリファイルのパーミッション変更    \r\n```\r\nchmod 755 ファイル名 or フォルダ名\r\n```\r\n0: 権限なし          \r\n1: 実行    \r\n2: 書き込み   \r\n4: 読み込み\r\n\r\n左から　オーナー,グループ、その他    \r\n755 とは    \r\nオーナー 7 : 1 + 2 + 4 オーナーはフル権限                \r\nグループ7 7 : 1 + 2 + 4 グループフル権限        \r\nその他 5 : 1 + 4 その他は書き込み権限なし　　　　\r\n\r\n## chown\r\nディレクトリの所有者、グループを変更      \r\n```\r\nchown vagrant sample.txt\r\nsample.txt の所有者をshoyuushawo vagrant に変更\r\n```\r\n## sudo \r\nRoot権限で実行\r\n```\r\nsudo yum install httpd\r\nyum install はroot権限でないと実行できない。\r\n```\r\n## systemctl\r\nアプリケーションの管理         \r\n```\r\nsudo systemctl status httpd\r\napache が起動している\r\n\r\nsudo systemctl start httpd\r\napache を起動\r\n\r\nsudo systemctl stop httpd\r\napache を起動\r\n\r\nsudo systemctl enable httpd\r\napache を自動起動する\r\n\r\n```\r\n## vim\r\nファイルを編集する       \r\n```\r\nvim /etc/php.ini\r\nターミナル上で php.iniを編集\r\n```\r\n\r\nLAMP環境の構築ならこれくらいのコマンドでなんとかなりそう。\r\n### - 次回 - 		\r\n\r\n<p class=\"next_description\">\r\n次回はVimエディタについての概要です。\r\nサーバーサイドの作業はVimが必須といってもいいくらいです。\r\n</p>\r\n',0,'https://blog.webdimension.jp/?post_type=environment&#038;p=110',0,'environment','',0),(112,1,'2019-08-09 11:50:06','2019-08-09 02:50:06','','vagrant_command','','inherit','closed','closed','','vagrant_command','','','2019-08-09 11:50:06','2019-08-09 02:50:06','',110,'https://blog.webdimension.jp/wp-content/uploads/2019/08/vagrant_command.jpg',0,'attachment','image/jpeg',0),(113,1,'2019-08-09 14:40:39','2019-08-09 05:40:39','Vimには長い歴史がありとても奥が深いです。\r\nvimの全ての機能を習得することは大変ですがガチガチのViimの使い手にならなくても大丈夫です。\r\nサーバー上のファイルを編集するにはVimは必須といってもいいくらいです。\r\nネット上には数多くのVimの情報がありますので\r\nここでは参考サイトを載せるにとどめます。\r\n<ul>\r\n 	<li><a href=\"https://qiita.com/JpnLavender/items/fabcc79b4ab0d52e1f6d\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/JpnLavender/items/fabcc79b4ab0d52e1f6d</a></li>\r\n 	<li><a href=\"https://qiita.com/34ro/items/6163f595785ae99a632a\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/34ro/items/6163f595785ae99a632a</a></li>\r\n 	<li><a href=\"https://qiita.com/34ro/items/e20fa0831d78566981d3\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/34ro/items/e20fa0831d78566981d3</a></li>\r\n 	<li><a href=\"https://qiita.com/doranekohc/items/3a1f4d13998dbe55cbbe\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/doranekohc/items/3a1f4d13998dbe55cbbe</a></li>\r\n</ul>\r\n全てのコマンドを覚えなくても大丈夫です。LAMP環境構築しながら少しづつ慣れていきましょう。\r\nVimを上手に使うには知識も必要ですが実際に手を動かして慣れていくことのほうがもっと重要です。\r\n慣れない間は思い通りにならずイライラすると思います。\r\nゆっくりじっくり体に馴染ませましょう。\r\nここではターミナル上でのVimを前提としてますがVImいんなれるため<a href=\"https://github.com/splhack/macvim-kaoriya/releases/tag/20180324\" target=\"_blank\" rel=\"noopener noreferrer\">MacVim</a>のようなGUIアプリケーションを使うのもいいでしょう。\r\nサーバー上のファイルを編集るるような場合は\r\n<ul>\r\n 	<li>ターミナルを立ち上げる</li>\r\n 	<li>sshでサーバーにログイン</li>\r\n 	<li>Vim で目的のファイルを編集</li>\r\n</ul>\r\nという流れになります。 この場合ターミナル上でVimを立ち上げるようになります。\r\n\r\nサーバーサイドでなくても通常使ってるツール　(Dreamweaver, Atom, Sublime Text,\r\nPhpStorm) などはVimPluginを用意しています。\r\n日頃のhtml,css,jsの編集もVimをつかうことができます。\r\nほぼほぼのことをキーボード操作のみ行います。マウスを使う機会が格段に減ることでしょう。\r\nこれらになれてくると作業スピードは飛躍的に上がります。\r\nVimなしでは仕事ができなくなるくらい中毒性があります。\r\n<h2>便利なVimアクション</h2>\r\n<ul>\r\n 	<li>ciw 単語削除して編集モード</li>\r\n 	<li>diw 単語を削除</li>\r\n 	<li>yi\" ダブルコーテーションの中をクリップボードへ</li>\r\n 	<li>ci\" ダブルコーテーションの中を削除して挿入モード</li>\r\n 	<li>f fキーの後に一文字なにか(例えばa)を押すと次にaが出現する場所へとカーソル移動\r\n;キーで次の出現箇所、 ,キーで前の出現箇所へ移動</li>\r\n</ul>\r\n<h3>- 次回 -</h3>\r\n<p class=\"next_description\">実際にSSHでリモートログインしてがっつり作業ができるための事前準備的なことをします。</p>','Vimをやってみよう','Vimにを覚えて遠隔操作に備える。','publish','closed','closed','','vim','','','2019-09-23 03:36:42','2019-09-22 18:36:42','Vimには長い歴史がありとても奥が深いです。\r\nvimの全ての機能を習得することは大変ですがガチガチのViimの使い手にならなくても大丈夫です。      \r\nサーバー上のファイルを編集するにはVimは必須といってもいいくらいです。        \r\nネット上には数多くのVimの情報がありますので\r\nここでは参考サイトを載せるにとどめます。\r\n- <a href=\"https://qiita.com/JpnLavender/items/fabcc79b4ab0d52e1f6d\" target=\"_blank\"  rel=\"noopener noreferrer\">https://qiita.com/JpnLavender/items/fabcc79b4ab0d52e1f6d</a>\r\n- <a href=\"https://qiita.com/34ro/items/6163f595785ae99a632a\" target=\"https://qiita.com/34ro/items/6163f595785ae99a632a\" rel=\"noopener noreferrer\">https://qiita.com/34ro/items/6163f595785ae99a632a</a>\r\n- <a href=\"https://qiita.com/34ro/items/e20fa0831d78566981d3\" target=\"https://qiita.com/34ro/items/e20fa0831d78566981d3\" rel=\"noopener noreferrer\">https://qiita.com/34ro/items/e20fa0831d78566981d3</a>\r\n- <a href=\"https://qiita.com/doranekohc/items/3a1f4d13998dbe55cbbe\" target=\"https://qiita.com/doranekohc/items/3a1f4d13998dbe55cbbe\" rel=\"noopener noreferrer\">https://qiita.com/doranekohc/items/3a1f4d13998dbe55cbbe</a>\r\n\r\n全てのコマンドを覚えなくても大丈夫です。LAMP環境構築しながら少しづつ慣れていきましょう。      \r\nVimを上手に使うには知識も必要ですが実際に手を動かして慣れていくことのほうがもっと重要です。\r\n慣れない間は思い通りにならずイライラすると思います。          \r\nゆっくりじっくり体に馴染ませましょう。\r\nここではターミナル上でのVimを前提としてますがVImいんなれるため[MacVim](https://github.com/splhack/macvim-kaoriya/releases/tag/20180324)のようなGUIアプリケーションを使うのもいいでしょう。\r\nサーバー上のファイルを編集るるような場合は\r\n\r\n- ターミナルを立ち上げる\r\n- sshでサーバーにログイン\r\n- Vim で目的のファイルを編集           \r\n\r\nという流れになります。 この場合ターミナル上でVimを立ち上げるようになります。\r\n\r\n\r\nサーバーサイドでなくても通常使ってるツール　(Dreamweaver, Atom, Sublime Text,\r\nPhpStorm) などはVimPluginを用意しています。       \r\n日頃のhtml,css,jsの編集もVimをつかうことができます。\r\nほぼほぼのことをキーボード操作のみ行います。マウスを使う機会が格段に減ることでしょう。\r\nこれらになれてくると作業スピードは飛躍的に上がります。\r\nVimなしでは仕事ができなくなるくらい中毒性があります。\r\n  \r\n## 便利なVimアクション\r\n- ciw 単語削除して編集モード\r\n- diw 単語を削除\r\n- yi\" ダブルコーテーションの中をクリップボードへ\r\n- ci\" ダブルコーテーションの中を削除して挿入モード\r\n- f fキーの後に一文字なにか(例えばa)を押すと次にaが出現する場所へとカーソル移動\r\n  ;キーで次の出現箇所、 ,キーで前の出現箇所へ移動\r\n\r\n\r\n### - 次回 - 		\r\n\r\n<p class=\"next_description\">\r\n実際にSSHでリモートログインしてがっつり作業ができるための事前準備的なことをします。\r\n</p>\r\n',0,'https://blog.webdimension.jp/?post_type=environment&#038;p=113',0,'environment','',0),(115,1,'2019-08-09 14:38:14','2019-08-09 05:38:14','','vim','','inherit','closed','closed','','vim-2','','','2019-08-09 14:38:14','2019-08-09 05:38:14','',113,'https://blog.webdimension.jp/wp-content/uploads/2019/08/vim.jpg',0,'attachment','image/jpeg',0),(116,1,'2019-08-11 10:04:07','2019-08-11 01:04:07',' ','','','publish','closed','closed','','116','','','2019-08-15 16:05:22','2019-08-15 07:05:22','',0,'https://blog.webdimension.jp/?p=116',4,'nav_menu_item','',0),(117,1,'2019-08-11 10:04:07','2019-08-11 01:04:07',' ','','','publish','closed','closed','','117','','','2019-08-15 16:05:22','2019-08-15 07:05:22','',0,'https://blog.webdimension.jp/?p=117',3,'nav_menu_item','',0),(118,1,'2019-08-11 16:38:15','2019-08-11 07:38:15','<h2>Vagrantに SSH ログイン</h2>\n<p>Vagrantfileがある場所へ移動(centos76はBox名、インストール環境に合わせせてます)</p>\n<pre><code class=\"language-bash\">cd ~/vagrant/centos76\nvagrant ssh</code></pre>\n<p>ログイできれば     </p>\n<pre><code class=\"language-bash\">Last login: Sun Aug 11 01:27:56 2019 from 10.0.2.2\n[vagrant@localhost ~]$ </code></pre>\n<p>コマンドを打ってみよう     </p>\n<pre><code class=\"language-bash\">ls -la</code></pre>\n<p>HOMEディレクトリの不可視ファイルを含めたすべてが表示される。</p>\n<pre><code class=\"language-bash\">total 16\ndrwx------. 3 vagrant vagrant  95  6月  8 19:13 .\ndrwxr-xr-x. 3 root    root     21  2月 28 20:53 ..\n-rw-------. 1 vagrant vagrant 101  8月 11 01:29 .bash_history\n-rw-r--r--. 1 vagrant vagrant  18 10月 30  2018 .bash_logout\n-rw-r--r--. 1 vagrant vagrant 193 10月 30  2018 .bash_profile\n-rw-r--r--. 1 vagrant vagrant 231 10月 30  2018 .bashrc\ndrwx------. 2 vagrant vagrant  29  6月  8 18:56 .ssh\n[vagrant@localhost ~]$ </code></pre>\n<h2>bash_it をインストール</h2>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-11-at-10.34.59.png\" alt=\"\" /><br />\nこんな感じで白黒の画面だとなんとなくおもしろくないのでちょっとおしゃれで便利な bash_it\nをインストールしてみます。</p>\n<pre><code class=\"language-bash\">git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\n\n~/.bash_it/install.sh</code></pre>\n<p>しかし     </p>\n<pre><code class=\"language-bash\">-bash: git: command not found</code></pre>\n<p>git コマンドがないよ！　というエラーです。 では git をインストール。      </p>\n<h2>Gitをインストール</h2>\n<p>gitをインストールするための依存ライブラリーをインストール\n<a href=\"https://qiita.com/homines22/items/7572cdba2d60a00a3ffc\" target=\"_blank\" rel=\"noopener noreferrer\">参考サイト</a></p>\n<pre><code class=\"language-bash\">wget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz</code></pre>\n<p>git-2.9.5をインストール。       </p>\n<pre><code class=\"language-bash\">wget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz </code></pre>\n<p>が wget というコマンドがありません。       </p>\n<pre><code class=\"language-bash\">-bash: wget: command not found</code></pre>\n<h2>wget をインストール</h2>\n<pre><code class=\"language-bash\">sudo yum -y install wget</code></pre>\n<p>complete! で成功。</p>\n<pre><code class=\"language-bash\">Installed:\n  wget.x86_64 0:1.14-18.el7_6.1                                                                                                                                                                                                      \n\nComplete!</code></pre>\n<h2>もう一度 Git をダウンロード</h2>\n<pre><code class=\"language-bash\">wget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz </code></pre>\n<pre><code class=\"language-bash\">2019-08-11 01:55:29 (20.2 MB/s) - `git-2.9.5.tar.gz&#039; へ保存完了 [5928730/5928730]</code></pre>\n<p>git をダウンロードできたので インストールします。     </p>\n<pre><code class=\"language-bash\">tar vfx git-2.9.5.tar.gz\ncd git-2.9.5\nmake configure\n./configure --prefix=/usr/local\nmake all\nsudo make install</code></pre>\n<p>確認      </p>\n<pre><code class=\"language-bash\">git --version</code></pre>\n<p>OK</p>\n<pre><code class=\"language-bash\">git version 2.9.5</code></pre>\n<p>bash_it をダウンロード</p>\n<pre><code class=\"language-bash\">git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it</code></pre>\n<p>インストール      </p>\n<pre><code class=\"language-bash\"> ~/.bash_it/install.sh</code></pre>\n<pre><code class=\"language-bash\">Would you like to keep your .bashrc and append bash-it templates at the end? [y/N] y</code></pre>\n<p>と聞かれるので y インストールできたら exit でログアウト vagrant ssh\nで再ログイン。カラフルになり見えやすくなります。　また先ほど ls -la\nとして不可視ファイルを含めたすべてが表示をしましたが、     </p>\n<pre><code class=\"language-bash\">ll</code></pre>\n<p>と打つだけで同じことができます。他にも便利なエイリアスを用意してくれてます。<br />\n.bash_it/aliases/available/<br />\nのファイル群です。<br />\nまた、カラーテーマを変更するには ~/.bashrc 内の       </p>\n<pre><code class=\"language-bash\">export BASH_IT_THEME=&#039;bobby&#039;</code></pre>\n<p>body を他のthemeに変更します。</p>\n<p><a href=\"https://github.com/Bash-it/bash-it/wiki/Themes\" target=\"_blank\" rel=\"noopener noreferrer\">テーマ一覧</a></p>\n<p>のファイル群です。</p>\n<p>このような見た目になります。\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-11-at-14.28.57.png\" alt=\"\" /></p>\n<p>Gitのインストールに使った　git-2.9.5  git-2.9.5.tar.gz　はインストール完了後削除します。</p>\n<pre><code class=\"language-bash\">rm -rf git-2.9.5\nrm git-2.9.5.tar.gz</code></pre>\n<h3>- 次回 -</h3>\n<p class=\"next_description\">\n次回はCentOSにVimをインストールします。\n</p>','開発環境構築を前の事前準備','SSHでリモートログインでの作業をしやすいように、ちょっとおしゃれに、といった事前準備','publish','closed','closed','','preparation','','','2019-09-23 03:40:02','2019-09-22 18:40:02','## Vagrantに SSH ログイン\r\nVagrantfileがある場所へ移動(centos76はBox名、インストール環境に合わせせてます)\r\n```bash\r\ncd ~/vagrant/centos76\r\nvagrant ssh\r\n```\r\nログイできれば     \r\n```bash\r\nLast login: Sun Aug 11 01:27:56 2019 from 10.0.2.2\r\n[vagrant@localhost ~]$ \r\n```\r\nコマンドを打ってみよう     \r\n```bash\r\nls -la\r\n```\r\nHOMEディレクトリの不可視ファイルを含めたすべてが表示される。\r\n```bash\r\ntotal 16\r\ndrwx------. 3 vagrant vagrant  95  6月  8 19:13 .\r\ndrwxr-xr-x. 3 root    root     21  2月 28 20:53 ..\r\n-rw-------. 1 vagrant vagrant 101  8月 11 01:29 .bash_history\r\n-rw-r--r--. 1 vagrant vagrant  18 10月 30  2018 .bash_logout\r\n-rw-r--r--. 1 vagrant vagrant 193 10月 30  2018 .bash_profile\r\n-rw-r--r--. 1 vagrant vagrant 231 10月 30  2018 .bashrc\r\ndrwx------. 2 vagrant vagrant  29  6月  8 18:56 .ssh\r\n[vagrant@localhost ~]$ \r\n```\r\n## bash_it をインストール\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-11-at-10.34.59.png)         \r\nこんな感じで白黒の画面だとなんとなくおもしろくないのでちょっとおしゃれで便利な bash_it\r\nをインストールしてみます。\r\n```bash\r\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\r\n\r\n~/.bash_it/install.sh\r\n```\r\nしかし     \r\n```bash\r\n-bash: git: command not found\r\n```\r\ngit コマンドがないよ！　というエラーです。 では git をインストール。      \r\n## Gitをインストール\r\n\r\ngitをインストールするための依存ライブラリーをインストール\r\n<a href=\"https://qiita.com/homines22/items/7572cdba2d60a00a3ffc\" target=\"_blank\" rel=\"noopener noreferrer\">参考サイト</a>\r\n\r\n```bash\r\nwget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz\r\n```\r\ngit-2.9.5をインストール。       \r\n```bash\r\nwget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz \r\n```\r\nが wget というコマンドがありません。       \r\n\r\n```bash\r\n-bash: wget: command not found\r\n```\r\n## wget をインストール\r\n```bash\r\nsudo yum -y install wget\r\n```\r\ncomplete! で成功。\r\n```bash\r\nInstalled:\r\n  wget.x86_64 0:1.14-18.el7_6.1                                                                                                                                                                                                      \r\n\r\nComplete!\r\n```\r\n## もう一度 Git をダウンロード\r\n```bash\r\nwget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz \r\n```\r\n```bash\r\n2019-08-11 01:55:29 (20.2 MB/s) - &#x60;git-2.9.5.tar.gz&#039; へ保存完了 [5928730/5928730]\r\n```\r\ngit をダウンロードできたので インストールします。     \r\n```bash\r\ntar vfx git-2.9.5.tar.gz\r\ncd git-2.9.5\r\nmake configure\r\n./configure --prefix=/usr/local\r\nmake all\r\nsudo make install\r\n```\r\n確認      \r\n```bash\r\ngit --version\r\n```\r\nOK\r\n```bash\r\ngit version 2.9.5\r\n```\r\nbash_it をダウンロード\r\n```bash\r\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\r\n```\r\nインストール      \r\n```bash\r\n ~/.bash_it/install.sh\r\n```\r\n```bash\r\nWould you like to keep your .bashrc and append bash-it templates at the end? [y/N] y\r\n```\r\nと聞かれるので y インストールできたら exit でログアウト vagrant ssh\r\nで再ログイン。カラフルになり見えやすくなります。　また先ほど ls -la\r\nとして不可視ファイルを含めたすべてが表示をしましたが、     \r\n```bash\r\nll\r\n```\r\nと打つだけで同じことができます。他にも便利なエイリアスを用意してくれてます。      \r\n.bash_it/aliases/available/     \r\nのファイル群です。   \r\nまた、カラーテーマを変更するには ~/.bashrc 内の       \r\n```bash\r\nexport BASH_IT_THEME=&#039;bobby&#039;\r\n```\r\nbody を他のthemeに変更します。\r\n\r\n<a href=\"https://github.com/Bash-it/bash-it/wiki/Themes\" target=\"_blank\" rel=\"noopener noreferrer\">テーマ一覧</a>\r\n\r\nのファイル群です。\r\n\r\nこのような見た目になります。\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-11-at-14.28.57.png)\r\n\r\nGitのインストールに使った　git-2.9.5  git-2.9.5.tar.gz　はインストール完了後削除します。\r\n```bash\r\nrm -rf git-2.9.5\r\nrm git-2.9.5.tar.gz\r\n```\r\n\r\n### - 次回 - 		\r\n\r\n<p class=\"next_description\">\r\n次回はCentOSにVimをインストールします。\r\n</p>\r\n\r\n\r\n\r\n\r\n',0,'https://blog.webdimension.jp/?post_type=environment&#038;p=118',0,'environment','',0),(119,1,'2019-08-11 14:37:21','2019-08-11 05:37:21','','Preparation','','inherit','closed','closed','','preparation-2','','','2019-08-11 14:37:21','2019-08-11 05:37:21','',118,'https://blog.webdimension.jp/wp-content/uploads/2019/08/Preparation.jpg',0,'attachment','image/jpeg',0),(120,1,'2019-08-11 14:41:48','2019-08-11 05:41:48','','Screen Shot 2019-08-11 at 10.34.59','','inherit','closed','closed','','screen-shot-2019-08-11-at-10-34-59','','','2019-08-11 14:41:48','2019-08-11 05:41:48','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-11-at-10.34.59.png',0,'attachment','image/png',0),(121,1,'2019-08-11 14:45:00','2019-08-11 05:45:00','','Screen Shot 2019-08-11 at 14.28.57','','inherit','closed','closed','','screen-shot-2019-08-11-at-14-28-57','','','2019-08-11 14:45:00','2019-08-11 05:45:00','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-11-at-14.28.57.png',0,'attachment','image/png',0),(124,1,'2019-08-11 16:39:00','2019-08-11 07:39:00','<h1>lua, python, ruby 対応版のVim8をインストール</h1>\r\nVimには豊富にプラグインがあります。\r\n今後いろいろなプラグインをいれて設定し自分なりのVimを作り上げていくことになるかと思います。\r\nそのためにもVimのインストール時に\r\n<ul>\r\n 	<li>python3</li>\r\n 	<li>ruby</li>\r\n 	<li>lua</li>\r\n</ul>\r\nに対応したVimをインストールしておくことでいろいろなプラグインが使えるようになります。\r\n素のVimを使っていいて途中でlua対応にしたいとなった時はちょと厄介です。\r\n再インストールするほうがはやい、となるでしょう。\r\nなので最初からいろいろなプラグインに対応できるVimをインストールしておきます。\r\nとてもわかりやすい参考サイトがありました。\r\n<a href=\"https://qiita.com/kiwi-bird/items/5539d094731e82df8427\" target=\"_blank\" rel=\"noopener noreferrer\">参考サイト</a>\r\n\r\nコピペで大丈夫です。\r\n難しいことはさておき、インストールしましょう。\r\n\r\nちなみに私の configure です。CentOS7の場合はすべてこれで設定しています。\r\n<pre><code class=\"language-bash\">sudo ./configure  --with-features=huge   --enable-pythoninterp  --enable-python3interp  --enable-perlinterp=yes  --disable-tclinterp  --enable-gui=gnome2 --enable-multibyte  --enable-cscope  --with-tlib=ncurses --enable-fail-if-missing --disable-darwin --enable-luainterp --enable-rubyinterp=yes --enable-terminal  --enable-fontset  vi_cv_path_python3=/usr/bin/python3.6 --with-ruby-command=/home/vagrant/.rbenv/shims/ruby</code></pre>\r\n参考サイトにもありますが最後に\r\n<pre><code class=\"language-bash\">vim --version</code></pre>\r\nとうってlua, python, rubyに + がついていれば成功です。\r\nコマンド操作に慣れないうちはゆっくりでいいので正確に打つことが大事です。\r\n<h2>.vimrc ファイルを設置</h2>\r\nホームディレクトリに .vimrc というファイルを設置します。\r\nこのファイルに追加の設定をしていきます。\r\nこのファイルはほんとに人それぞれです。\r\nいろいろな凡人じゃ思いつかないアイデアを記述している人もいます。\r\nそしてGitHubで公開してくださってる方も多数います。\r\n彼らのvimrcを見ることは大変勉強になります。\r\nVimになれてくるといろいろなプラグインをいれてみましょう。 surround-vim\r\nはhtml入力にはとても便利です。\r\nLAMP環境の構築には激しくカスマイズしたVimは必要ありません。いまのところこのままで構いません。プラグインは必要になったら入れていくというのでいいです。\r\nますは素のVimを体験しましょう。\r\n\r\n以下私のvimrcの一部(キーマップ部分)です。参考まで。\r\n<pre><code class=\"language-bash\">set fileencoding=utf-8 \" 保存時の文字コードset fileencodings=ucs-boms,utf-8,euc-jp,cp932 \" 読み込み時の文字コードの自動判別. 左側が優先される\r\nset fileformats=unix,dos,mac \" 改行コードの自動判別. 左側が優先される\r\nset ambiwidth=double \" □や○文字が崩れる問題を解\r\nset expandtab \" タブ入力を複数の空白入力に置き換える\r\nset tabstop=2 \" 画面上でタブ文字が占める幅\r\nset softtabstop=2 \" 連続した空白に対してタブキーやバックスペースキーでカーソルが動く幅\r\nset autoindent \" 改行時に前の行のインデントを継続する\r\nset smartindent \" 改行時に前の行の構文をチェックし次の行のインデントを増減する\r\nset shiftwidth=4 \" smartindentで増減する幅決\r\nset incsearch \" インクリメンタルサーチ. １文字入力毎に検索を行う\r\nset ignorecase \" 検索パターンに大文字小文字を区別しない\r\nset smartcase \" 検索パターンに大文字を含んでいたら大文字小文字を区別する\r\nset hlsearch \" 検索結果をハイライト\r\nset nf=\"\" \"0埋めの文字も10進数\r\nset noswapfile \" スワップファイルを作らない\r\nset autoread \" 編集中のファイルが変更されたら自動で読み直\r\nset hidden \" バッファが編集中でもその他のファイルを開けるように\r\nset conceallevel=0\r\nset clipboard=unnamed,autoselect\r\nset wildmenu\r\nset wildmode=full\r\nset history=200\r\nset nocompatible\r\nfiletype plugin on\r\nruntime macros/matchit.vim\r\n\r\nset splitright\r\n\r\n\"スクロール時に表示をn行確保\r\nset scrolloff=3\r\n\r\nlet mapleader = \"\\&lt;Space&gt;\"\r\n\r\nset pastetoggle=&lt;Leader&gt;pt\r\n\r\n\" nnoremap &lt;C-t&gt;l :tabclose&lt;CR&gt;\r\n\r\n\" ESCキー2度押しでハイライトの切り替え\r\nnnoremap &lt;C-c&gt; :&lt;C-u&gt;set nohlsearch!&lt;CR&gt;\r\n\r\nset whichwrap=b,s,h,l,&lt;,&gt;,[,],~ \" カーソルの左右移動で行末から次の行の行頭への移動が可能になる\r\n\r\nset number \" 行番号を表示\r\nset cursorline \" カーソルラインをハイライト\r\n\r\nnnoremap j gj\r\nnnoremap k gk\r\nnnoremap &lt;S-j&gt; 10j\r\n\r\nnnoremap &lt;S-k&gt; 10k\r\nnnoremap &lt;Leader&gt;. &lt;S-j&gt;\r\nnnoremap &lt;Leader&gt;, g&lt;S-j&gt;\r\nnnoremap &lt;Down&gt; gj\r\nnnoremap &lt;Up&gt;   gk\r\nnnoremap zz zt5&lt;C-y&gt;\r\nnnoremap - &lt;C-x&gt;\r\nnnoremap = &lt;C-a&gt;\r\n\r\n\"x キー削除でデフォルトレジスタに入れない\r\nnnoremap x \"_x\r\nvnoremap x \"_x\r\n\r\n\"\"vv で行末まで選択\r\nvnoremap v ^$h\r\n\r\n\"選択範囲のインデントを連続して変更\r\nvnoremap &lt; &lt;gv\r\nvnoremap &gt; &gt;gv\r\n\r\n\"\"ノーマルモード\r\nnoremap &lt;CR&gt; i&lt;CR&gt;&lt;Esc&gt;\r\nnoremap &lt;C-h&gt; ^\r\nnoremap &lt;C-l&gt; $\r\n\r\n\" 行が折り返し表示されていた場合、行単位ではなく表示行単位でカーソルを移動する\r\nnoremap &lt;C-J&gt; &lt;C-E&gt;j\r\nnoremap &lt;C-K&gt; &lt;C-Y&gt;k\r\nnoremap &lt;S-y&gt; y$\r\n\r\n\"\"\" Window\r\nnnoremap &lt;C-w&gt;l :close&lt;CR&gt;\r\n\r\n\"\"\" Tab\r\nnnoremap &lt;C-t&gt;n :tabedit&lt;CR&gt;\r\nnnoremap &lt;C-t&gt;p :tabedit \r\nnnoremap &lt;C-t&gt;l :tabclose&lt;CR&gt;\r\nnnoremap &lt;C-t&gt;o :tabonly&lt;CR&gt;\r\nnnoremap &lt;C-t&gt;c :tabnext \r\nnnoremap &lt;C-t&gt;m :tabmove \r\nnnoremap &lt;C-t&gt;w &lt;C-w&gt;T\r\n\" tab change\r\nnnoremap ]t gt\r\nnnoremap [t gT\r\n\r\n\"\"\" Buffer\r\n\" buffer list\r\nnnoremap &lt;silent&gt; [b :bprevious&lt;CR&gt;\r\nnnoremap &lt;silent&gt; ]b :bnext&lt;CR&gt;\r\nnnoremap &lt;silent&gt; [B :bfirst&lt;CR&gt;\r\nnnoremap &lt;silent&gt; ]B :blast&lt;CR&gt;\r\n\r\n\"\"\"Args\r\nnnoremap &lt;silent&gt; [a :previous&lt;CR&gt;\r\nnnoremap &lt;silent&gt; ]a :next&lt;CR&gt;\r\nnnoremap &lt;silent&gt; [A :first&lt;CR&gt;\r\nnnoremap &lt;silent&gt; ]A :last&lt;CR&gt;\r\n\r\nnnoremap &lt;Leader&gt;qq :q&lt;CR&gt;\r\nnnoremap &lt;Leader&gt;ww :w&lt;CR&gt;\r\nnnoremap &lt;Leader&gt;wa :wall&lt;CR&gt;\r\nnnoremap &lt;Leader&gt;wn :wa&lt;CR&gt;\r\nnnoremap &lt;Leader&gt;wq :wq&lt;CR&gt;\r\nnnoremap &lt;Leader&gt;qe :q!&lt;CR&gt;\r\n\" search\r\nnnoremap / /\\v\r\nvnoremap / /\\v\r\nnoremap n nzz\r\nnnoremap N Nzz\r\n\r\n\"インサートモード\r\ninoremap &lt;silent&gt; &lt;C-k&gt; &lt;Up&gt;\r\ninoremap &lt;silent&gt; &lt;C-j&gt; &lt;Down&gt;\r\ninoremap &lt;silent&gt; &lt;C-l&gt; &lt;Right&gt;\r\ninoremap &lt;silent&gt; &lt;C-h&gt; &lt;Left&gt;\r\ninoremap &lt;silent&gt; jj &lt;Esc&gt;\r\ninoremap &lt;silent&gt; jk &lt;Esc&gt;\r\ninoremap &lt;silent&gt; &lt;C-[&gt; &lt;Esc&gt;\r\ninoremap &lt;silent&gt; &lt;C-c&gt; &lt;Esc&gt;\r\ninoremap &lt;silent&gt; &lt;C-f&gt; &lt;S-Right&gt;\r\ninoremap &lt;silent&gt; &lt;C-b&gt; &lt;S-Left&gt;\r\ninoremap &lt;silent&gt; &lt;C-a&gt; &lt;Home&gt;\r\ninoremap &lt;silent&gt; &lt;C-e&gt; &lt;End&gt;\r\ninoremap &lt;silent&gt; &lt;C-z&gt; &lt;C-g&gt;u&lt;BS&gt;\r\ninoremap &lt;silent&gt; &lt;C-x&gt; &lt;C-g&gt;u&lt;Del&gt;\r\ninoremap &lt;silent&gt; &lt;C-w&gt; &lt;C-g&gt;u&lt;C-o&gt;daw\r\ninoremap &lt;silent&gt; &lt;C-y&gt; &lt;C-g&gt;u&lt;C-r&gt;0\r\ninoremap &lt;silent&gt; &lt;C-p&gt; &lt;C-g&gt;u&lt;C-r&gt;*\r\ninoremap &lt;silent&gt; &lt;C-m&gt; &lt;C-g&gt;u&lt;C-m&gt;\r\n\"vv で行末まで選択\r\nvnoremap v ^$h\r\n\r\ncnoremap w!! w !sudo tee &gt; /dev/null %&lt;CR&gt; :e!&lt;CR&gt;\r\ncnoremap &lt;expr&gt; %% getcmdtype() == \':\' ? expand(\'%:h\').\'/\' : \'%%\'\r\n\" バックスペースキーの有効化\r\nset backspace=indent,eol,start</code></pre>\r\n<h3>- 次回 -</h3>\r\n<p class=\"next_description\">次回はCentOSに httpd (Apache)をインストールしてhtmlファイルを表示します。\r\n少々ネットワークの知識を必要とします。</p>','Vagrant - Centos7にVIMをインストール','lua, python, ruby 対応Vimをコンパイルしてインストール','publish','closed','closed','','vim8-2','','','2019-09-23 03:30:44','2019-09-22 18:30:44','# lua, python, ruby 対応版のVim8をインストール\r\nVimには豊富にプラグインがあります。       \r\n今後いろいろなプラグインをいれて設定し自分なりのVimを作り上げていくことになるかと思います。     \r\nそのためにもVimのインストール時に      \r\n\r\n- python3\r\n- ruby\r\n- lua\r\n\r\nに対応したVimをインストールしておくことでいろいろなプラグインが使えるようになります。\r\n素のVimを使っていいて途中でlua対応にしたいとなった時はちょと厄介です。\r\n再インストールするほうがはやい、となるでしょう。        \r\nなので最初からいろいろなプラグインに対応できるVimをインストールしておきます。        \r\nとてもわかりやすい参考サイトがありました。   \r\n[参考サイト](https://qiita.com/kiwi-bird/items/5539d094731e82df8427)\r\n\r\nコピペで大丈夫です。      \r\n難しいことはさておき、インストールしましょう。\r\n\r\nちなみに私の configure です。CentOS7の場合はすべてこれで設定しています。       \r\n```bash\r\nsudo ./configure  --with-features=huge   --enable-pythoninterp  --enable-python3interp  --enable-perlinterp=yes  --disable-tclinterp  --enable-gui=gnome2 --enable-multibyte  --enable-cscope  --with-tlib=ncurses --enable-fail-if-missing --disable-darwin --enable-luainterp --enable-rubyinterp=yes --enable-terminal  --enable-fontset  vi_cv_path_python3=/usr/bin/python3.6 --with-ruby-command=/home/vagrant/.rbenv/shims/rubysudo ./configure  --with-features=huge   --enable-pythoninterp  --enable-python3interp  --enable-perlinterp=yes  --disable-tclinterp  --enable-gui=gnome2 --enable-multibyte  --enable-cscope  --with-tlib=ncurses --enable-fail-if-missing --disable-darwin --enable-luainterp --enable-rubyinterp=yes --enable-terminal  --enable-fontset  vi_cv_path_python3=/usr/bin/python3.6 --with-ruby-command=/home/vagrant/.rbenv/shims/ruby\r\n```\r\n\r\n参考サイトにもありますが最後に     \r\n```bash\r\nvim --version\r\n```\r\nとうってlua, python, rubyに + がついていれば成功です。\r\nコマンド操作に慣れないうちはゆっくりでいいので正確に打つことが大事です。    \r\n\r\n## .vimrc ファイルを設置\r\nホームディレクトリに .vimrc というファイルを設置します。\r\nこのファイルに追加の設定をしていきます。    \r\nこのファイルはほんとに人それぞれです。\r\nいろいろな凡人じゃ思いつかないアイデアを記述している人もいます。    \r\nそしてGitHubで公開してくださってる方も多数います。\r\n彼らのvimrcを見ることは大変勉強になります。        \r\nVimになれてくるといろいろなプラグインをいれてみましょう。 surround-vim\r\nはhtml入力にはとても便利です。       \r\nLAMP環境の構築には激しくカスマイズしたVimは必要ありません。いまのところこのままで構いません。プラグインは必要になったら入れていくというのでいいです。      \r\nますは素のVimを体験しましょう。\r\n\r\n以下私のvimrcの一部(キーマップ部分)です。参考まで。\r\n```bash\r\nset fileencoding=utf-8 &quot; 保存時の文字コードset fileencodings=ucs-boms,utf-8,euc-jp,cp932 &quot; 読み込み時の文字コードの自動判別. 左側が優先される\r\nset fileformats=unix,dos,mac &quot; 改行コードの自動判別. 左側が優先される\r\nset ambiwidth=double &quot; □や○文字が崩れる問題を解\r\nset expandtab &quot; タブ入力を複数の空白入力に置き換える\r\nset tabstop=2 &quot; 画面上でタブ文字が占める幅\r\nset softtabstop=2 &quot; 連続した空白に対してタブキーやバックスペースキーでカーソルが動く幅\r\nset autoindent &quot; 改行時に前の行のインデントを継続する\r\nset smartindent &quot; 改行時に前の行の構文をチェックし次の行のインデントを増減する\r\nset shiftwidth=4 &quot; smartindentで増減する幅決\r\nset incsearch &quot; インクリメンタルサーチ. １文字入力毎に検索を行う\r\nset ignorecase &quot; 検索パターンに大文字小文字を区別しない\r\nset smartcase &quot; 検索パターンに大文字を含んでいたら大文字小文字を区別する\r\nset hlsearch &quot; 検索結果をハイライト\r\nset nf=&quot;&quot; &quot;0埋めの文字も10進数\r\nset noswapfile &quot; スワップファイルを作らない\r\nset autoread &quot; 編集中のファイルが変更されたら自動で読み直\r\nset hidden &quot; バッファが編集中でもその他のファイルを開けるように\r\nset conceallevel=0\r\nset clipboard=unnamed,autoselect\r\nset wildmenu\r\nset wildmode=full\r\nset history=200\r\nset nocompatible\r\nfiletype plugin on\r\nruntime macros/matchit.vim\r\n\r\nset splitright\r\n\r\n&quot;スクロール時に表示をn行確保\r\nset scrolloff=3\r\n\r\nlet mapleader = &quot;\\&lt;Space&gt;&quot;\r\n\r\nset pastetoggle=&lt;Leader&gt;pt\r\n\r\n&quot; nnoremap &lt;C-t&gt;l :tabclose&lt;CR&gt;\r\n\r\n&quot; ESCキー2度押しでハイライトの切り替え\r\nnnoremap &lt;C-c&gt; :&lt;C-u&gt;set nohlsearch!&lt;CR&gt;\r\n\r\nset whichwrap=b,s,h,l,&lt;,&gt;,[,],~ &quot; カーソルの左右移動で行末から次の行の行頭への移動が可能になる\r\n\r\nset number &quot; 行番号を表示\r\nset cursorline &quot; カーソルラインをハイライト\r\n\r\nnnoremap j gj\r\nnnoremap k gk\r\nnnoremap &lt;S-j&gt; 10j\r\n\r\nnnoremap &lt;S-k&gt; 10k\r\nnnoremap &lt;Leader&gt;. &lt;S-j&gt;\r\nnnoremap &lt;Leader&gt;, g&lt;S-j&gt;\r\nnnoremap &lt;Down&gt; gj\r\nnnoremap &lt;Up&gt;   gk\r\nnnoremap zz zt5&lt;C-y&gt;\r\nnnoremap - &lt;C-x&gt;\r\nnnoremap = &lt;C-a&gt;\r\n\r\n&quot;x キー削除でデフォルトレジスタに入れない\r\nnnoremap x &quot;_x\r\nvnoremap x &quot;_x\r\n\r\n&quot;&quot;vv で行末まで選択\r\nvnoremap v ^$h\r\n\r\n&quot;選択範囲のインデントを連続して変更\r\nvnoremap &lt; &lt;gv\r\nvnoremap &gt; &gt;gv\r\n\r\n&quot;&quot;ノーマルモード\r\nnoremap &lt;CR&gt; i&lt;CR&gt;&lt;Esc&gt;\r\nnoremap &lt;C-h&gt; ^\r\nnoremap &lt;C-l&gt; $\r\n\r\n&quot; 行が折り返し表示されていた場合、行単位ではなく表示行単位でカーソルを移動する\r\nnoremap &lt;C-J&gt; &lt;C-E&gt;j\r\nnoremap &lt;C-K&gt; &lt;C-Y&gt;k\r\nnoremap &lt;S-y&gt; y$\r\n\r\n&quot;&quot;&quot; Window\r\nnnoremap &lt;C-w&gt;l :close&lt;CR&gt;\r\n\r\n&quot;&quot;&quot; Tab\r\nnnoremap &lt;C-t&gt;n :tabedit&lt;CR&gt;\r\nnnoremap &lt;C-t&gt;p :tabedit \r\nnnoremap &lt;C-t&gt;l :tabclose&lt;CR&gt;\r\nnnoremap &lt;C-t&gt;o :tabonly&lt;CR&gt;\r\nnnoremap &lt;C-t&gt;c :tabnext \r\nnnoremap &lt;C-t&gt;m :tabmove \r\nnnoremap &lt;C-t&gt;w &lt;C-w&gt;T\r\n&quot; tab change\r\nnnoremap ]t gt\r\nnnoremap [t gT\r\n\r\n&quot;&quot;&quot; Buffer\r\n&quot; buffer list\r\nnnoremap &lt;silent&gt; [b :bprevious&lt;CR&gt;\r\nnnoremap &lt;silent&gt; ]b :bnext&lt;CR&gt;\r\nnnoremap &lt;silent&gt; [B :bfirst&lt;CR&gt;\r\nnnoremap &lt;silent&gt; ]B :blast&lt;CR&gt;\r\n\r\n&quot;&quot;&quot;Args\r\nnnoremap &lt;silent&gt; [a :previous&lt;CR&gt;\r\nnnoremap &lt;silent&gt; ]a :next&lt;CR&gt;\r\nnnoremap &lt;silent&gt; [A :first&lt;CR&gt;\r\nnnoremap &lt;silent&gt; ]A :last&lt;CR&gt;\r\n\r\nnnoremap &lt;Leader&gt;qq :q&lt;CR&gt;\r\nnnoremap &lt;Leader&gt;ww :w&lt;CR&gt;\r\nnnoremap &lt;Leader&gt;wa :wall&lt;CR&gt;\r\nnnoremap &lt;Leader&gt;wn :wa&lt;CR&gt;\r\nnnoremap &lt;Leader&gt;wq :wq&lt;CR&gt;\r\nnnoremap &lt;Leader&gt;qe :q!&lt;CR&gt;\r\n&quot; search\r\nnnoremap / /\\v\r\nvnoremap / /\\v\r\nnoremap n nzz\r\nnnoremap N Nzz\r\n\r\n&quot;インサートモード\r\ninoremap &lt;silent&gt; &lt;C-k&gt; &lt;Up&gt;\r\ninoremap &lt;silent&gt; &lt;C-j&gt; &lt;Down&gt;\r\ninoremap &lt;silent&gt; &lt;C-l&gt; &lt;Right&gt;\r\ninoremap &lt;silent&gt; &lt;C-h&gt; &lt;Left&gt;\r\ninoremap &lt;silent&gt; jj &lt;Esc&gt;\r\ninoremap &lt;silent&gt; jk &lt;Esc&gt;\r\ninoremap &lt;silent&gt; &lt;C-[&gt; &lt;Esc&gt;\r\ninoremap &lt;silent&gt; &lt;C-c&gt; &lt;Esc&gt;\r\ninoremap &lt;silent&gt; &lt;C-f&gt; &lt;S-Right&gt;\r\ninoremap &lt;silent&gt; &lt;C-b&gt; &lt;S-Left&gt;\r\ninoremap &lt;silent&gt; &lt;C-a&gt; &lt;Home&gt;\r\ninoremap &lt;silent&gt; &lt;C-e&gt; &lt;End&gt;\r\ninoremap &lt;silent&gt; &lt;C-z&gt; &lt;C-g&gt;u&lt;BS&gt;\r\ninoremap &lt;silent&gt; &lt;C-x&gt; &lt;C-g&gt;u&lt;Del&gt;\r\ninoremap &lt;silent&gt; &lt;C-w&gt; &lt;C-g&gt;u&lt;C-o&gt;daw\r\ninoremap &lt;silent&gt; &lt;C-y&gt; &lt;C-g&gt;u&lt;C-r&gt;0\r\ninoremap &lt;silent&gt; &lt;C-p&gt; &lt;C-g&gt;u&lt;C-r&gt;*\r\ninoremap &lt;silent&gt; &lt;C-m&gt; &lt;C-g&gt;u&lt;C-m&gt;\r\n&quot;vv で行末まで選択\r\nvnoremap v ^$h\r\n\r\ncnoremap w!! w !sudo tee &gt; /dev/null %&lt;CR&gt; :e!&lt;CR&gt;\r\ncnoremap &lt;expr&gt; %% getcmdtype() == &#039;:&#039; ? expand(&#039;%:h&#039;).&#039;/&#039; : &#039;%%&#039;\r\n&quot; バックスペースキーの有効化\r\nset backspace=indent,eol,start\r\n```\r\n\r\n### - 次回 - 		\r\n\r\n<p class=\"next_description\">\r\n次回はCentOSに httpd (Apache)をインストールしてhtmlファイルを表示します。<br>\r\n少々ネットワークの知識を必要とします。\r\n</p>\r\n',0,'https://blog.webdimension.jp/?post_type=environment&#038;p=124',0,'environment','',0),(125,1,'2019-08-11 16:32:58','2019-08-11 07:32:58','','vim8','','inherit','closed','closed','','vim8','','','2019-09-15 19:46:52','2019-09-15 10:46:52','',164,'https://blog.webdimension.jp/wp-content/uploads/2019/08/vim8.jpg',0,'attachment','image/jpeg',0),(126,1,'2019-08-11 16:41:03','2019-08-11 07:41:03','','Vagrant – Centos7にVIMをインストール','','publish','closed','closed','','vagrant-centos7%e3%81%abvim%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab','','','2019-08-15 16:05:22','2019-08-15 07:05:22','',0,'https://blog.webdimension.jp/?p=126',6,'nav_menu_item','',0),(127,1,'2019-08-11 16:41:03','2019-08-11 07:41:03',' ','','','publish','closed','closed','','127','','','2019-08-15 16:05:22','2019-08-15 07:05:22','',0,'https://blog.webdimension.jp/?p=127',5,'nav_menu_item','',0),(128,1,'2019-08-12 11:14:52','2019-08-12 02:14:52','<h2>yumでApacheを簡単インストール</h2>\r\nApacheをインストールするコマンドです。\r\n<pre><code class=\"language-bash\">sudo yum -y install httpd</code></pre>\r\n確認してみます。 whichはどこにインストールされているのかというコマンドです。\r\n<pre><code class=\"language-bash\">○ → which httpd\r\n/usr/sbin/httpd</code></pre>\r\nversionは？\r\n<pre><code class=\"language-bash\">○ → httpd -version\r\nServer version: Apache/2.4.6 (CentOS)\r\nServer built:   Jul 29 2019 17:18:49</code></pre>\r\nApache 2.4がインストールされました。Apacheを起動します。\r\n<pre><code class=\"language-bash\">sudo systemctl status httpd</code></pre>\r\nActive: inactive (dead)\r\nというワードがあります。起動していないということです。\r\n<pre><code class=\"language-bash\">sudo systemctl start httpd</code></pre>\r\nActive: active (running) since 日 2019-08-11 11:46:03 UTC; 3s ago\r\nというワードがあります。起動されました。\r\n\r\nではApacheにアクセスしてみます。\r\nVagrantfile に設定した IP にアクセスします。\r\n<a href=\"/environment/vagrantfile/\">Vagrantfileの設定</a>\r\nここでは 192.168.33.100 なのでブラウザーのアドレス欄に貼り付けます。\r\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-12-at-10.23.46.png\" alt=\"\" />\r\nこのような画面が表示されます。\r\n<h2>VirtualHostを設定する</h2>\r\nApacheを無事インストールできましたがこのままでは開発環境としてはまだまだ足りてません。\r\n通常はこのサーバーにいくつもサイトが動くようにならなくてはいけません。\r\n例)\r\n<ul>\r\n 	<li>自分のブログ (wordpress)</li>\r\n 	<li>会社のサイト (a-blog cms)</li>\r\n 	<li>今受けている案件 (EC-CUBE)</li>\r\n</ul>\r\nなどです。一つのサーバーで複数のサイトを動かすには VirtualHost　の設定が必要です。\r\nここではA,Bという二つの VirtualHost を設定してみます。\r\n前提\r\n<ul>\r\n 	<li><a href=\"/environment/vagrantfile/\">Vagrantfileの設定</a> の GuestOS\r\nとディレクトリを共有する が設定済み。</li>\r\n 	<li>一つ目のサイト Aは　ドメイン a.centos76.test とする。Vagrantのディレクトリは\r\n/var/www/html/aとする。　(HostOS　側のディレクトリは\r\n~/workspace/centos76/http_doc/a となる。)</li>\r\n 	<li>二つ目のサイト Bは　ドメイン b.centos76.test とする。Vagrantのディレクトリは\r\n/var/www/html/b (HostOS　側のディレクトリは\r\n~/workspace/centos76/http_doc/b となる。)</li>\r\n</ul>\r\n<h3>DocumentRoot ディレクトリをつくる</h3>\r\nそれではまずディレクトリをつくり\'site-a\'と記述した index.html を配置します。\r\n<pre><code class=\"language-bash\">○ → cd /var/www/html/\r\n○ → mkdir a\r\n○ → cd a\r\nvim index.html</code></pre>\r\n空の index.html を Vim で開きました。 \'i\' を押して InsertMode にします。\r\nsite-a とタイプし エスケープボタン または CTRL-C を押して　NormalMode へもどる。:wqを押して保存終了。\r\nsite-b 用のディレクトリをつくる。 a ディレクトリをコピーして bディレクトリの\r\nindex.html の site-a を site-b に書き換えます。\r\n<pre><code class=\"language-bash\">○ → cd /var/www/html/\r\n○ → cp -rf a b\r\n○ → cd b \r\n○ → vim index.html</code></pre>\r\nb ディレクトリで vim index.html をしたらカーソルは1行目の左 sの上にあります。\r\n\'f a\' をタイプしカーソルを a の上に持ってくる。\r\n\'r b\' をタイプし　a を b に 書き換える。:wq を押して保存終了。\r\n<h3>Hostsファイルを編集する</h3>\r\n<em>ここ節はHostOS側の設定です。</em>\r\nMacOS だと /etc/hosts\r\nWindows10 だと C:\\Windows\\System32\\drivers\\etc\\hosts\r\nのファイルを編集します。 どちらも管理者権限が必要になります。\r\n\'MACではルートログインを有効にする\' などの設定が必要になります。 有効にした上で\r\n<a href=\"https://support.apple.com/ja-jp/HT204012\" target=\"_blank\" rel=\"noopener noreferrer\">https://support.apple.com/ja-jp/HT204012</a>\r\n<pre><code class=\"language-bash\">vim /etc/hosts</code></pre>\r\nとするところですがGUIアプリもあるのでそれを使うのもいいでしょう。\r\n<ul>\r\n 	<li>Mac用 その名も <a href=\"http://permanentmarkers.nl/software.html\" target=\"_blank\" rel=\"noopener noreferrer\">Hosts</a></li>\r\n 	<li>Win用 <a href=\"https://hostsfileeditor.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Hosts File Editor</a></li>\r\n</ul>\r\nhostsファイルはDNSサーバーよりも何よりも優先されるIPアドレスとドメインの対応を設定します。\r\n<pre><code class=\"language-bash\">192.168.33.100 a.centos75.test\r\n192.168.33.100 b.centos75.test</code></pre>\r\nこれで a.centos75.test へのアクセスは 192.168.33.100, b.centos75.test\r\nへのアクセスも 192.168.33.100 を示すことになります。\r\nちなみに\r\n<pre><code class=\"language-bash\">192.168.33.100 yahoo.co.jp</code></pre>\r\nとすればヤフーへのアクセスは 192.168.33.100\r\nを示します。(全く意味ないですが・・・仕組みとして)\r\n<h3>Apacheの virtual</h3>\r\nApacheの設定ファイルを編集します。root権限のファイルを編集することになります。\r\n<pre><code class=\"language-bash\">sudo コマンド　</code></pre>\r\nとすればroot権限できるのですがうまくいかない場合もあります。ざっくりですがsudoはrootとして実行します。\r\n一般ユーザーとは設定が違うので　command not found\r\nとなる場合がありますのでこれを回避します。\r\n<pre><code class=\"language-bash\">sudo visudo</code></pre>\r\nsecure_path をコメントアウト\r\n<pre><code class=\"language-#Defaults\">#Defaults       secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"</code></pre>\r\n新規追加\r\n<pre><code class=\"language-bash\">Defaults env_keep +=\"PATH\"</code></pre>\r\n+=\"PATH 一般ユーザーのPathを引き継いで実行？的なことだと思います。\r\n<pre><code class=\"language-bash\">○ → cd /etc/httpd/conf\r\n○ → sudo vim httpd.conf</code></pre>\r\nファイルの最終行あたりに\r\n<pre><code class=\"language-bash\">NameVirtualHost *:80\r\n&lt;VirtualHost *:80&gt; \r\n  DocumentRoot /var/www/html/a\r\n  ServerName a.centos76.test\r\n   &lt;Directory \"/var/www/html/a\"&gt; \r\n   Options Indexes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews \r\n   Require all granted \r\n   &lt;/Directory&gt; \r\n  &lt;/VirtualHost&gt;\r\n\r\n&lt;VirtualHost *:80&gt; \r\n  DocumentRoot /var/www/html/b\r\n  ServerName b.centos76.test\r\n   &lt;Directory \"/var/www/html/b\"&gt; \r\n   Options Indexes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews \r\n   Require all granted \r\n   &lt;/Directory&gt; \r\n  &lt;/VirtualHost&gt;</code></pre>\r\nを記述。\r\nDocumentRoot : ディレクトリPath\r\nServerName : ドメイン\r\nServerName でアクセスされるとDocumentRootを示すという設定です。\r\nで、Apache再起動\r\n<pre><code class=\"language-bash\">○ → sudo systemctl restart httpd</code></pre>\r\nブラウザで a.centos76.test へアクセス。\r\n\'site-a\' という表示になるはずが・・・\r\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-12-at-10.23.46.png\" alt=\"\" />\r\nが表示されます。これは SELinux というアクセス制御が関連しているからです。\r\nこれも本来は細かく設定するべきですが開発環境であることと\r\n<blockquote>VirtualBoxやVMwareなどの仮想機械で開発環境を構築している場合、共有ディレクトリのラベルは変更することができません。\r\nということらしいのでSELnuxを無効にします。\r\n<h2>SELinuxの無効化</h2>\r\n</blockquote>\r\n<pre><code class=\"language-bash\">○ → getenforce\r\nEnforcing</code></pre>\r\nEnforcing : 有効になってます。\r\n<pre><code class=\"language-bash\">○ → sudo setenforce 0\r\n○ → getenforce\r\nPermissive</code></pre>\r\n再度 a.centos76.test へアクセス。無事 \'site-a\'が表示されたのではないでしょうか。\r\nこのままだとサーバーを再起動すると SELinux\r\nが有効になるので永続的に無効にする設定をします。\r\n<pre><code class=\"language-bash\">○ → sudo vim /etc/selinux/config</code></pre>\r\nBefor : SELINUX=enforcing\r\nAfter : SELINUX=disabled\r\n<h2>開発ツールの設定</h2>\r\nDreamweaver,Eclipse,Atom,Sublime text など開発ツールの設定です。\r\nProject登録で\r\n~/workspace/centos76/http_doc/a\r\nを登録します。\r\n<ul>\r\n 	<li>ファイルの編集はHostOS側</li>\r\n 	<li>実行はVagrant</li>\r\n 	<li>ブラウザからVagrantへアクセスして確認</li>\r\n</ul>\r\nということができます。\r\n<h3>- 次回 -</h3>\r\n<p class=\"next_description\">次回はいよいよPHPとMySQLをインストール、設定してみます。</p>','VagrantにApacheをインストール','VagrantにApacheをインストールしてVirtualHostの設定をします。ドメインでアクセスできるようHostsファイルを編集します。','publish','closed','closed','','apache','','','2019-09-23 03:32:16','2019-09-22 18:32:16','## yumでApacheを簡単インストール\r\nApacheをインストールするコマンドです。      \r\n\r\n```bash\r\nsudo yum -y install httpd\r\n```\r\n\r\n確認してみます。 whichはどこにインストールされているのかというコマンドです。\r\n\r\n```bash\r\n○ → which httpd\r\n/usr/sbin/httpd\r\n```\r\n\r\nversionは？         \r\n\r\n```bash\r\n○ → httpd -version\r\nServer version: Apache/2.4.6 (CentOS)\r\nServer built:   Jul 29 2019 17:18:49\r\n```\r\n\r\nApache 2.4がインストールされました。Apacheを起動します。    \r\n\r\n```bash\r\nsudo systemctl status httpd\r\n```\r\n\r\nActive: inactive (dead)     \r\nというワードがあります。起動していないということです。     \r\n\r\n```bash\r\nsudo systemctl start httpd\r\n```\r\n\r\n Active: active (running) since 日 2019-08-11 11:46:03 UTC; 3s ago   \r\n というワードがあります。起動されました。   \r\n\r\nではApacheにアクセスしてみます。     \r\nVagrantfile に設定した IP にアクセスします。\r\n[Vagrantfileの設定](/environment/vagrantfile/)     \r\nここでは 192.168.33.100 なのでブラウザーのアドレス欄に貼り付けます。\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-12-at-10.23.46.png)      \r\nこのような画面が表示されます。\r\n \r\n## VirtualHostを設定する\r\nApacheを無事インストールできましたがこのままでは開発環境としてはまだまだ足りてません。      \r\n通常はこのサーバーにいくつもサイトが動くようにならなくてはいけません。     \r\n例)\r\n- 自分のブログ (wordpress)\r\n- 会社のサイト (a-blog cms)\r\n- 今受けている案件 (EC-CUBE)\r\n\r\nなどです。一つのサーバーで複数のサイトを動かすには VirtualHost　の設定が必要です。\r\nここではA,Bという二つの VirtualHost を設定してみます。       \r\n前提\r\n- [Vagrantfileの設定](/environment/vagrantfile/) の GuestOS\r\nとディレクトリを共有する が設定済み。\r\n- 一つ目のサイト Aは　ドメイン a.centos76.test とする。Vagrantのディレクトリは\r\n  /var/www/html/aとする。　(HostOS　側のディレクトリは\r\n  ~/workspace/centos76/http_doc/a となる。)\r\n- 二つ目のサイト Bは　ドメイン b.centos76.test とする。Vagrantのディレクトリは\r\n  /var/www/html/b (HostOS　側のディレクトリは\r\n  ~/workspace/centos76/http_doc/b となる。)\r\n\r\n### DocumentRoot ディレクトリをつくる\r\nそれではまずディレクトリをつくり\'site-a\'と記述した index.html を配置します。\r\n\r\n```bash\r\n○ → cd /var/www/html/\r\n○ → mkdir a\r\n○ → cd a\r\nvim index.html\r\n```\r\n\r\n空の index.html を Vim で開きました。 \'i\' を押して InsertMode にします。   \r\nsite-a とタイプし エスケープボタン または CTRL-C を押して　NormalMode へもどる。:wqを押して保存終了。       \r\nsite-b 用のディレクトリをつくる。 a ディレクトリをコピーして bディレクトリの\r\nindex.html の site-a を site-b に書き換えます。\r\n\r\n```bash\r\n○ → cd /var/www/html/\r\n○ → cp -rf a b\r\n○ → cd b \r\n○ → vim index.html\r\n```\r\n\r\nb ディレクトリで vim index.html をしたらカーソルは1行目の左 sの上にあります。    \r\n\'f a\' をタイプしカーソルを a の上に持ってくる。     \r\n\'r b\' をタイプし　a を b に 書き換える。:wq を押して保存終了。\r\n\r\n### Hostsファイルを編集する\r\n_ここ節はHostOS側の設定です。_     \r\nMacOS だと /etc/hosts            \r\nWindows10 だと C:\\Windows\\System32\\drivers\\etc\\hosts      \r\nのファイルを編集します。 どちらも管理者権限が必要になります。\r\n\'MACではルートログインを有効にする\' などの設定が必要になります。 有効にした上で     \r\n[https://support.apple.com/ja-jp/HT204012](https://support.apple.com/ja-jp/HT204012)\r\n\r\n```bash\r\nvim /etc/hosts\r\n```\r\n\r\nとするところですがGUIアプリもあるのでそれを使うのもいいでしょう。\r\n- Mac用 その名も [Hosts](https://support.apple.com/ja-jp/HT204012)\r\n- Win用 [Hosts File Editor](https://hostsfileeditor.com/)\r\n\r\nhostsファイルはDNSサーバーよりも何よりも優先されるIPアドレスとドメインの対応を設定します。\r\n\r\n```bash\r\n192.168.33.100 a.centos75.test\r\n192.168.33.100 b.centos75.test\r\n```\r\n\r\nこれで a.centos75.test へのアクセスは 192.168.33.100, b.centos75.test\r\nへのアクセスも 192.168.33.100 を示すことになります。      \r\nちなみに\r\n\r\n```bash\r\n192.168.33.100 yahoo.co.jp\r\n```\r\n\r\nとすればヤフーへのアクセスは 192.168.33.100\r\nを示します。(全く意味ないですが・・・仕組みとして)\r\n\r\n### Apacheの virtual\r\nApacheの設定ファイルを編集します。root権限のファイルを編集することになります。\r\n\r\n```bash\r\nsudo コマンド　\r\n```\r\n\r\nとすればroot権限できるのですがうまくいかない場合もあります。ざっくりですがsudoはrootとして実行します。\r\n一般ユーザーとは設定が違うので　command not found\r\nとなる場合がありますのでこれを回避します。\r\n\r\n```bash\r\nsudo visudo\r\n```\r\nsecure_path をコメントアウト        \r\n``` #Defaults\r\n#Defaults       secure_path=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;\r\n```\r\n新規追加        \r\n```bash\r\nDefaults env_keep +=&quot;PATH&quot;\r\n```\r\n+=\"PATH 一般ユーザーのPathを引き継いで実行？的なことだと思います。\r\n\r\n```bash\r\n○ → cd /etc/httpd/conf\r\n○ → sudo vim httpd.conf\r\n```\r\n\r\nファイルの最終行あたりに    \r\n\r\n```bash\r\nNameVirtualHost *:80\r\n&lt;VirtualHost *:80&gt; \r\n  DocumentRoot /var/www/html/a\r\n  ServerName a.centos76.test\r\n   &lt;Directory &quot;/var/www/html/a&quot;&gt; \r\n   Options Indexes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews \r\n   Require all granted \r\n   &lt;/Directory&gt; \r\n  &lt;/VirtualHost&gt;\r\n\r\n&lt;VirtualHost *:80&gt; \r\n  DocumentRoot /var/www/html/b\r\n  ServerName b.centos76.test\r\n   &lt;Directory &quot;/var/www/html/b&quot;&gt; \r\n   Options Indexes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews \r\n   Require all granted \r\n   &lt;/Directory&gt; \r\n  &lt;/VirtualHost&gt;\r\n```\r\n\r\nを記述。   \r\nDocumentRoot : ディレクトリPath       \r\nServerName : ドメイン   \r\nServerName でアクセスされるとDocumentRootを示すという設定です。     \r\nで、Apache再起動\r\n\r\n```bash\r\n○ → sudo systemctl restart httpd\r\n```\r\n\r\nブラウザで a.centos76.test へアクセス。    \r\n\'site-a\' という表示になるはずが・・・    \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-12-at-10.23.46.png)     \r\nが表示されます。これは SELinux というアクセス制御が関連しているからです。  \r\nこれも本来は細かく設定するべきですが開発環境であることと\r\n\r\n> VirtualBoxやVMwareなどの仮想機械で開発環境を構築している場合、共有ディレクトリのラベルは変更することができません。     \r\nということらしいのでSELnuxを無効にします。 \r\n## SELinuxの無効化\r\n\r\n```bash\r\n○ → getenforce\r\nEnforcing\r\n```\r\n\r\nEnforcing : 有効になってます。   \r\n\r\n```bash\r\n○ → sudo setenforce 0\r\n○ → getenforce\r\nPermissive\r\n```\r\n\r\n再度 a.centos76.test へアクセス。無事 \'site-a\'が表示されたのではないでしょうか。   \r\nこのままだとサーバーを再起動すると SELinux\r\nが有効になるので永続的に無効にする設定をします。    \r\n\r\n```bash\r\n○ → sudo vim /etc/selinux/config\r\n```\r\n\r\nBefor : SELINUX=enforcing       \r\nAfter : SELINUX=disabled        \r\n\r\n## 開発ツールの設定\r\nDreamweaver,Eclipse,Atom,Sublime text など開発ツールの設定です。     \r\nProject登録で      \r\n~/workspace/centos76/http_doc/a    \r\nを登録します。     \r\n\r\n- ファイルの編集はHostOS側     \r\n- 実行はVagrant      \r\n- ブラウザからVagrantへアクセスして確認 \r\n\r\nということができます。\r\n\r\n### - 次回 - 		\r\n\r\n<p class=\"next_description\">\r\n次回はいよいよPHPとMySQLをインストール、設定してみます。\r\n</p>\r\n',0,'https://blog.webdimension.jp/?post_type=environment&#038;p=128',0,'environment','',0),(129,1,'2019-08-12 10:39:40','2019-08-12 01:39:40','','Screen Shot 2019-08-12 at 10.23.46','','inherit','closed','closed','','screen-shot-2019-08-12-at-10-23-46','','','2019-09-15 19:35:30','2019-09-15 10:35:30','',164,'https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-12-at-10.23.46.png',0,'attachment','image/png',0),(130,1,'2019-08-12 10:51:27','2019-08-12 01:51:27','','apache','','inherit','closed','closed','','%e5%90%8d%e7%a7%b0%e6%9c%aa%e8%a8%ad%e5%ae%9a-1','','','2019-08-12 10:51:42','2019-08-12 01:51:42','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/08/名称未設定-1.jpg',0,'attachment','image/jpeg',0),(131,1,'2019-08-12 11:18:22','2019-08-12 02:18:22',' ','','','publish','closed','closed','','131','','','2019-08-15 16:05:22','2019-08-15 07:05:22','',0,'https://blog.webdimension.jp/?p=131',7,'nav_menu_item','',0),(133,1,'2019-08-12 18:59:24','2019-08-12 09:59:24','<h2>VagrantにPHPをインストール</h2>\n<p>2019/08時点最新であるPHP7.3をインストールします。<br />\nyum レポジトリを追加します。</p>\n<pre><code class=\"language-bash\">$ sudo rpm --import http://vault.centos.org/RPM-GPG-KEY-CentOS-7\n$ sudo rpm --import http://rpms.famillecollet.com/RPM-GPG-KEY-remi\n$ sudo yum install http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</code></pre>\n<p>インストール前の確認      </p>\n<pre><code class=\"language-bash\">$ sudo yum info php\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: ftp.nara.wide.ad.jp\n * epel: ftp.jaist.ac.jp\n * extras: ftp.nara.wide.ad.jp\n * remi-safe: ftp.riken.jp\n * updates: ftp.nara.wide.ad.jp\nInstalled Packages\nName        : php\nArch        : x86_64\nVersion     : 7.3.8\nRelease     : 1.el7.remi\nSize        : 10 M\nRepo        : installed\nFrom repo   : remi-php73\nSummary     : PHP scripting language for creating dynamic web sites\nURL         : http://www.php.net/\n......</code></pre>\n<p>7.3.8　を確認できます。PHPと比較的利用頻度が高いモジュール群も一緒にインストールします。(以下、一行です)           </p>\n<pre><code class=\"language-bash\"> $ yum -y install --enablerepo=remi,remi-php73 php php-mbstring\nphp-xml php-xmlrpc php-gd php-pdo php-pecl-mcrypt php-mysqlnd\nphp-pecl-mysqlyum -y install --enablerepo=remi,remi-php73 php\nphp-mbstring php-xml php-xmlrpc php-gd php-pdo php-pecl-mcrypt\nphp-mysqlnd php-pecl-mysql</code></pre>\n<p>PHPの設定ファイルである php.ini を編集します。 該当箇所を以下に変更してください。<br />\n行頭の ; はコメント行です。</p>\n<pre><code class=\"language-bash\">$default_charset = &quot;UTF-8&quot;\n\ndate.timezone = &quot;Asia/Tokyo&quot;\n\nmbstring.language = Japanese\nmbstring.internal_encoding = UTF-8\nmbstring.http_input = pass\nmbstring.http_output = pass\nmbstring.encoding_translation = Off\nmbstring.detect_order = auto\nmbstring.substitute_character = none;\nmbstring.func_overload = 0\nmbstring.strict_detection = Off php --version</code></pre>\n<p>念のためApacheを再起動      </p>\n<pre><code class=\"language-bash\">$ sudo systemctl restart httpd</code></pre>\n<p>phpinfoを表示してみる      </p>\n<pre><code class=\"language-bash\">$ cd /var/www/html/a \n$ vim phpinfo.php</code></pre>\n<p>phpinfo.phpに以下を記述       </p>\n<pre><code class=\"language-bash\">&lt;?php phpinfo(); ?&gt;</code></pre>\n<p>ブラウザで <a href=\"http://a.centos76.test/phpinfo.php\">http://a.centos76.test/phpinfo.php</a> へアクセス。<br />\nPHPの情報が表示されれば成功です。\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-12-at-18.57.00.png\" alt=\"\" /></p>\n<h2>VagrantにMySQL5.7をインストール</h2>\n<p>CentOS7はデフォルトではMySQLと互換性のあるMariaDBをデフォルトとして組み込まれてます。<br />\n誤作動や競合する場合もあるのでMariaDBを根こそぎアンインストールします。</p>\n<pre><code class=\"language-bash\">$ sudo yum remove mariadb-libs\n$ sudo rm -rf /var/lib/mysql/</code></pre>\n<p>MySQLをインストール        </p>\n<pre><code class=\"language-bash\">$ sudo yum localinstall http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm $\n$ sudo yum -y install mysql-community-server</code></pre>\n<p>確認      </p>\n<pre><code class=\"language-bash\">$ mysqld --version</code></pre>\n<p>自動起動設定      </p>\n<pre><code class=\"language-bash\">$ sudo systemctl enable mysqld.service</code></pre>\n<p>MySQL起動     </p>\n<pre><code class=\"language-bash\">$ sudo systemctl start mysqld.service</code></pre>\n<p>起動確認        </p>\n<pre><code class=\"language-bash\">$ sudo systemctl status mysqld.service</code></pre>\n<h2>MySQLログイン</h2>\n<p>MySQL5.7からは以前のバージョンに比べて面倒になってます。(セキュリティーポリシー)<br />\n初期ログインアカウントはroot<br />\n初期パスワードはインストール時にログに書き出されてます。   </p>\n<pre><code class=\"language-bash\">$ sudo cat /var/log/mysqld.log</code></pre>\n<p>この行です。      </p>\n<pre><code class=\"language-bash\">temporary password is generated for root@localhost: 0h7ku9hSGM(4</code></pre>\n<p>初期パスワードでログイン後に新たにパスワードを設定します。       </p>\n<pre><code class=\"language-bash\">mysql_secure_installation</code></pre>\n<p>初期パスワードを入力し、新しいパスワード、確認用パスワードを入力します。<br />\n大文字、小文字、数字、記号を混ぜなければいけません。<br />\n以前のバージョンのようにパスワードを空でログインする場合は       </p>\n<pre><code class=\"language-bash\">sudo vi /etc/my.cnf</code></pre>\n<p>skip-grant-tables<br />\nを追記します。</p>\n<p>また、デフォルトの大文字、小文字、数字、記号ではなくもっとゆるくしたい場合は      </p>\n<pre><code class=\"language-bash\">mysql -uroot -p</code></pre>\n<p>パスワード入力してログイン後      </p>\n<pre><code class=\"language-bash\">mysql&gt; SET GLOBAL validate_password_length=4; \nmysql&gt; SET GLOBAL validate_password_policy=LOW; </code></pre>\n<p>桁数は4、レベルはLOW、4桁のパスワードを設定できます。</p>\n<pre><code class=\"language-bash\">mysql&gt; set password for root@localhost=password(&#039;root&#039;);</code></pre>\n<p>備考<br />\nLOW : 桁数<br />\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字<br />\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      </p>\n<p>MySQLからログアウトは          </p>\n<pre><code class=\"language-bash\">mysql&gt; quit</code></pre>\n<p>データベース一覧は           </p>\n<pre><code class=\"language-bash\">mysql&gt; show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n4 rows in set (0.01 sec)\n</code></pre>\n<p>データベース mysql を使う場合      </p>\n<pre><code class=\"language-bash\">mysql&gt; use mysql\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\n</code></pre>\n<p>テーブル一覧      </p>\n<pre><code class=\"language-bash\">mysql&gt; show tables;\n+---------------------------+\n| Tables_in_mysql           |\n+---------------------------+\n| columns_priv              |\n| db                        |\n| engine_cost               |\n| event                     |\n| func                      |\n| general_log               |\n| gtid_executed             |\n| help_category             |\n| help_keyword              |\n| help_relation             |\n| help_topic                |\n| innodb_index_stats        |\n| innodb_table_stats        |\n| ndb_binlog_index          |\n| plugin                    |\n| proc                      |\n| procs_priv                |\n| proxies_priv              |\n| server_cost               |\n| servers                   |\n| slave_master_info         |\n| slave_relay_log_info      |\n| slave_worker_info         |\n| slow_log                  |\n| tables_priv               |\n| time_zone                 |\n| time_zone_leap_second     |\n| time_zone_name            |\n| time_zone_transition      |\n| time_zone_transition_type |\n| user                      |\n+---------------------------+\n31 rows in set (0.00 sec)</code></pre>\n<pre><code class=\"language-bash\">ユーザー一覧 \nmysql&gt; select User from user;\n+---------------+\n| User          |\n+---------------+\n| mysql.session |\n| mysql.sys     |\n| root          |\n+---------------+     \n\n3 rows in set (0.00 sec)</code></pre>\n<p>ユーザー数       </p>\n<pre><code class=\"language-bash\">mysql&gt; select count(User) from user;\n+-------------+\n| count(User) |\n+-------------+\n|           3 |\n+-------------+\n1 row in set (0.00 sec)</code></pre>\n<h3>- 次回 -</h3>\n<p class=\"next_description\">\n次回はベタですがワードプレスをインストールしてみます。\n</p>','VagrantにPHP MySQLをインストール','PHP7.3 と MySQL5.7 をインストールしWordpress や ECCUBEなどのCMSが動かすための設定をします。','publish','closed','closed','','vagrant%e3%81%abphp-mysql%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab','','','2019-09-23 03:33:06','2019-09-22 18:33:06','## VagrantにPHPをインストール\r\n2019/08時点最新であるPHP7.3をインストールします。     \r\nyum レポジトリを追加します。\r\n```bash\r\n$ sudo rpm --import http://vault.centos.org/RPM-GPG-KEY-CentOS-7\r\n$ sudo rpm --import http://rpms.famillecollet.com/RPM-GPG-KEY-remi\r\n$ sudo yum install http://rpms.famillecollet.com/enterprise/remi-release-7.rpm\r\n```\r\nインストール前の確認      \r\n```bash\r\n$ sudo yum info php\r\nLoaded plugins: fastestmirror\r\nLoading mirror speeds from cached hostfile\r\n * base: ftp.nara.wide.ad.jp\r\n * epel: ftp.jaist.ac.jp\r\n * extras: ftp.nara.wide.ad.jp\r\n * remi-safe: ftp.riken.jp\r\n * updates: ftp.nara.wide.ad.jp\r\nInstalled Packages\r\nName        : php\r\nArch        : x86_64\r\nVersion     : 7.3.8\r\nRelease     : 1.el7.remi\r\nSize        : 10 M\r\nRepo        : installed\r\nFrom repo   : remi-php73\r\nSummary     : PHP scripting language for creating dynamic web sites\r\nURL         : http://www.php.net/\r\n......\r\n```\r\n7.3.8　を確認できます。PHPと比較的利用頻度が高いモジュール群も一緒にインストールします。(以下、一行です)           \r\n```bash\r\n $ yum -y install --enablerepo=remi,remi-php73 php php-mbstring\r\nphp-xml php-xmlrpc php-gd php-pdo php-pecl-mcrypt php-mysqlnd\r\nphp-pecl-mysqlyum -y install --enablerepo=remi,remi-php73 php\r\nphp-mbstring php-xml php-xmlrpc php-gd php-pdo php-pecl-mcrypt\r\nphp-mysqlnd php-pecl-mysql\r\n```\r\nPHPの設定ファイルである php.ini を編集します。 該当箇所を以下に変更してください。     \r\n行頭の ; はコメント行です。\r\n```bash \r\n$default_charset = &quot;UTF-8&quot;\r\n\r\ndate.timezone = &quot;Asia/Tokyo&quot;\r\n\r\nmbstring.language = Japanese\r\nmbstring.internal_encoding = UTF-8\r\nmbstring.http_input = pass\r\nmbstring.http_output = pass\r\nmbstring.encoding_translation = Off\r\nmbstring.detect_order = auto\r\nmbstring.substitute_character = none;\r\nmbstring.func_overload = 0\r\nmbstring.strict_detection = Off php --version\r\n```\r\n念のためApacheを再起動      \r\n```bash\r\n$ sudo systemctl restart httpd\r\n```\r\nphpinfoを表示してみる      \r\n```bash\r\n$ cd /var/www/html/a \r\n$ vim phpinfo.php\r\n```\r\nphpinfo.phpに以下を記述       \r\n```bash\r\n&lt;?php phpinfo(); ?&gt;\r\n```\r\nブラウザで http://a.centos76.test/phpinfo.php へアクセス。     \r\nPHPの情報が表示されれば成功です。\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-12-at-18.57.00.png)\r\n## VagrantにMySQL5.7をインストール\r\nCentOS7はデフォルトではMySQLと互換性のあるMariaDBをデフォルトとして組み込まれてます。    \r\n誤作動や競合する場合もあるのでMariaDBを根こそぎアンインストールします。\r\n\r\n```bash \r\n$ sudo yum remove mariadb-libs\r\n$ sudo rm -rf /var/lib/mysql/\r\n```\r\n\r\nMySQLをインストール        \r\n```bash\r\n$ sudo yum localinstall http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm $\r\n$ sudo yum -y install mysql-community-server\r\n``` \r\n確認      \r\n```bash\r\n$ mysqld --version\r\n```\r\n自動起動設定      \r\n```bash\r\n$ sudo systemctl enable mysqld.service\r\n```\r\nMySQL起動     \r\n```bash\r\n$ sudo systemctl start mysqld.service\r\n```\r\n起動確認        \r\n```bash\r\n$ sudo systemctl status mysqld.service\r\n```\r\n## MySQLログイン\r\nMySQL5.7からは以前のバージョンに比べて面倒になってます。(セキュリティーポリシー)       \r\n初期ログインアカウントはroot      \r\n初期パスワードはインストール時にログに書き出されてます。   \r\n```bash\r\n$ sudo cat /var/log/mysqld.log\r\n```\r\nこの行です。      \r\n```bash\r\ntemporary password is generated for root@localhost: 0h7ku9hSGM(4\r\n```\r\n初期パスワードでログイン後に新たにパスワードを設定します。       \r\n```bash\r\nmysql_secure_installation\r\n```\r\n初期パスワードを入力し、新しいパスワード、確認用パスワードを入力します。        \r\n大文字、小文字、数字、記号を混ぜなければいけません。      \r\n以前のバージョンのようにパスワードを空でログインする場合は       \r\n```bash\r\nsudo vi /etc/my.cnf\r\n```\r\nskip-grant-tables       \r\nを追記します。\r\n\r\nまた、デフォルトの大文字、小文字、数字、記号ではなくもっとゆるくしたい場合は      \r\n```bash\r\nmysql -uroot -p\r\n```\r\nパスワード入力してログイン後      \r\n```bash\r\nmysql&gt; SET GLOBAL validate_password_length=4; \r\nmysql&gt; SET GLOBAL validate_password_policy=LOW; \r\n```\r\n桁数は4、レベルはLOW、4桁のパスワードを設定できます。\r\n```bash\r\nmysql&gt; set password for root@localhost=password(&#039;root&#039;);\r\n```\r\n備考      \r\nLOW : 桁数        \r\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字     \r\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      \r\n\r\nMySQLからログアウトは          \r\n```bash\r\nmysql&gt; quit\r\n```\r\nデータベース一覧は           \r\n```bash\r\nmysql&gt; show databases;\r\n+--------------------+\r\n| Database           |\r\n+--------------------+\r\n| information_schema |\r\n| mysql              |\r\n| performance_schema |\r\n| sys                |\r\n+--------------------+\r\n4 rows in set (0.01 sec)\r\n\r\n```\r\nデータベース mysql を使う場合      \r\n```bash \r\nmysql&gt; use mysql\r\nReading table information for completion of table and column names\r\nYou can turn off this feature to get a quicker startup with -A\r\n\r\nDatabase changed\r\n     \r\n```\r\nテーブル一覧      \r\n```bash\r\nmysql&gt; show tables;\r\n+---------------------------+\r\n| Tables_in_mysql           |\r\n+---------------------------+\r\n| columns_priv              |\r\n| db                        |\r\n| engine_cost               |\r\n| event                     |\r\n| func                      |\r\n| general_log               |\r\n| gtid_executed             |\r\n| help_category             |\r\n| help_keyword              |\r\n| help_relation             |\r\n| help_topic                |\r\n| innodb_index_stats        |\r\n| innodb_table_stats        |\r\n| ndb_binlog_index          |\r\n| plugin                    |\r\n| proc                      |\r\n| procs_priv                |\r\n| proxies_priv              |\r\n| server_cost               |\r\n| servers                   |\r\n| slave_master_info         |\r\n| slave_relay_log_info      |\r\n| slave_worker_info         |\r\n| slow_log                  |\r\n| tables_priv               |\r\n| time_zone                 |\r\n| time_zone_leap_second     |\r\n| time_zone_name            |\r\n| time_zone_transition      |\r\n| time_zone_transition_type |\r\n| user                      |\r\n+---------------------------+\r\n31 rows in set (0.00 sec)\r\n```\r\n```bash\r\nユーザー一覧 \r\nmysql&gt; select User from user;\r\n+---------------+\r\n| User          |\r\n+---------------+\r\n| mysql.session |\r\n| mysql.sys     |\r\n| root          |\r\n+---------------+     \r\n\r\n3 rows in set (0.00 sec)\r\n```\r\nユーザー数       \r\n```bash\r\nmysql&gt; select count(User) from user;\r\n+-------------+\r\n| count(User) |\r\n+-------------+\r\n|           3 |\r\n+-------------+\r\n1 row in set (0.00 sec)\r\n```\r\n### - 次回 - 		\r\n\r\n<p class=\"next_description\">\r\n次回はベタですがワードプレスをインストールしてみます。\r\n</p>\r\n\r\n\r\n\r\n\r\n',0,'https://blog.webdimension.jp/?post_type=environment&#038;p=133',0,'environment','',0),(134,1,'2019-08-12 18:55:33','2019-08-12 09:55:33','','php_mysql','','inherit','closed','closed','','php_mysql','','','2019-08-12 18:55:33','2019-08-12 09:55:33','',133,'https://blog.webdimension.jp/wp-content/uploads/2019/08/php_mysql.jpg',0,'attachment','image/jpeg',0),(135,1,'2019-08-12 18:57:42','2019-08-12 09:57:42','','Screen Shot 2019-08-12 at 18.57.00','','inherit','closed','closed','','screen-shot-2019-08-12-at-18-57-00','','','2019-08-12 18:57:42','2019-08-12 09:57:42','',133,'https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-12-at-18.57.00.png',0,'attachment','image/png',0),(136,1,'2019-08-12 18:59:41','0000-00-00 00:00:00',' ','','','draft','closed','closed','','','','','2019-08-12 18:59:41','0000-00-00 00:00:00','',0,'https://blog.webdimension.jp/?p=136',1,'nav_menu_item','',0),(137,1,'2019-08-13 06:02:33','2019-08-12 21:02:33',' ','','','publish','closed','closed','','137','','','2019-08-15 16:05:22','2019-08-15 07:05:22','',0,'https://blog.webdimension.jp/?p=137',8,'nav_menu_item','',0),(138,1,'2019-08-13 07:27:38','2019-08-12 22:27:38','<h2>WordPressをダウンロード</h2>\r\n<a href=\"https://ja.wordpress.org/\" target=\"_blank\" rel=\"noopener noreferrer\">WordPressダウンロード</a>\r\n解凍後に\r\n/workspace/centos76/http_doc/wordpress\r\nに配置。\r\nドメインは wp.centoos76.test とします。\r\nApacheにVirtualHostを追加します。\r\n<h2>ApacheにVirtualHost追加</h2>\r\nvim で httpd.confを開きます。\r\n<pre><code class=\"language-bash\">$ sudo vim /etc/httpd/conf/httpd.conf </code></pre>\r\n以下を追記\r\n<pre><code class=\"language-bash\">&lt;VirtualHost *:80&gt; \r\n  DocumentRoot /var/www/html/wordpress\r\n  ServerName wp.centos76.test\r\n   &lt;Directory \"/var/www/html/wordpress\"&gt; \r\n   Options Indexes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews \r\n   Require all granted \r\n   &lt;/Directory&gt; \r\n  &lt;/VirtualHost&gt;</code></pre>\r\nApache再起動\r\n<pre><code class=\"language-bash\">$ sudo systemctr restart httpd</code></pre>\r\n<h2>WordPress用のDatabaseを作成</h2>\r\nutf8mb4 絵文字対応の文字コードです。最近主流のようです。\r\n<pre><code class=\"language-bash\">$ mysql -uroot -p\r\n\r\nmysql&gt; CREATE DATABASE wordpress CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</code></pre>\r\n<h2>hostsファイル編集</h2>\r\nHostOS側 hostsファイル編集(Macの場合)\r\n<pre><code>vim /etc/hosts</code></pre>\r\n192.168.33.100 wp.centos76.test\r\nを追記。 ブラウザで http://wp.centos76.test/ にアクセス。\r\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-13-at-7.00.08.png\" alt=\"\" />\r\nインストーラーに従って進めます。\r\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-13-at-7.06.04.png\" alt=\"\" />\r\n無事インストールできました。\r\n<h3>- 次回 -</h3>\r\n<p class=\"next_description\">LAMP環境が動くようになりました。次回はVagrant LAMP環境にプラスアルファ施したほうが良さげな設定をします。</p>','VagrantにWordpressをインストール','VagrantにインストールしたApache,PHP,MySQL上でWordPressを動かします。','publish','closed','closed','','wordpress','','','2019-09-23 03:33:50','2019-09-22 18:33:50','## WordPressをダウンロード\r\n [WordPressダウンロード](https://ja.wordpress.org/)   \r\n 解凍後に    \r\n /workspace/centos76/http_doc/wordpress      \r\n に配置。    \r\n ドメインは wp.centoos76.test とします。   \r\n ApacheにVirtualHostを追加します。       \r\n \r\n## ApacheにVirtualHost追加 \r\n vim で httpd.confを開きます。\r\n```bash\r\n$ sudo vim /etc/httpd/conf/httpd.conf \r\n```\r\n以下を追記       \r\n```bash\r\n&lt;VirtualHost *:80&gt; \r\n  DocumentRoot /var/www/html/wordpress\r\n  ServerName wp.centos76.test\r\n   &lt;Directory &quot;/var/www/html/wordpress&quot;&gt; \r\n   Options Indexes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews \r\n   Require all granted \r\n   &lt;/Directory&gt; \r\n  &lt;/VirtualHost&gt;\r\n```\r\nApache再起動\r\n```bash\r\n$ sudo systemctr restart httpd\r\n```\r\n## WordPress用のDatabaseを作成\r\nutf8mb4 絵文字対応の文字コードです。最近主流のようです。\r\n```bash\r\n$ mysql -uroot -p\r\n\r\nmysql&gt; CREATE DATABASE wordpress CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\r\n```\r\n \r\n## hostsファイル編集 \r\nHostOS側 hostsファイル編集(Macの場合)\r\n```\r\nvim /etc/hosts\r\n```\r\n192.168.33.100 wp.centos76.test     \r\nを追記。 ブラウザで http://wp.centos76.test/ にアクセス。      \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-13-at-7.00.08.png)     \r\nインストーラーに従って進めます。        \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-13-at-7.06.04.png)      \r\n無事インストールできました。\r\n\r\n \r\n### - 次回 - 		\r\n\r\n<p class=\"next_description\">\r\nLAMP環境が動くようになりました。次回はVagrant LAMP環境にプラスアルファ施したほうが良さげな設定をします。\r\n</p>\r\n',0,'https://blog.webdimension.jp/?post_type=environment&#038;p=138',0,'environment','',0),(139,1,'2019-08-13 07:15:41','2019-08-12 22:15:41','','Screen Shot 2019-08-13 at 7.00.08','','inherit','closed','closed','','screen-shot-2019-08-13-at-7-00-08','','','2019-08-13 07:15:41','2019-08-12 22:15:41','',138,'https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-13-at-7.00.08.png',0,'attachment','image/png',0),(140,1,'2019-08-13 07:16:04','2019-08-12 22:16:04','','Screen Shot 2019-08-13 at 7.06.04','','inherit','closed','closed','','screen-shot-2019-08-13-at-7-06-04','','','2019-08-13 07:16:04','2019-08-12 22:16:04','',138,'https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-13-at-7.06.04.png',0,'attachment','image/png',0),(141,1,'2019-08-13 07:24:50','2019-08-12 22:24:50','','wp','','inherit','closed','closed','','wp','','','2019-08-13 07:24:50','2019-08-12 22:24:50','',138,'https://blog.webdimension.jp/wp-content/uploads/2019/08/wp.jpg',0,'attachment','image/jpeg',0),(143,1,'2019-08-15 16:04:20','2019-08-15 07:04:20','<h2>SSL通信 (https)</h2>\r\n<pre><code class=\"language-bash\"> ls /etc/pki/tls/private</code></pre>\r\n空です。秘密鍵はありません。\r\nSSL通信に必要なApacheのモジュールをインストール\r\n<pre><code class=\"language-bash\"> sudo yum -y install mod_ssl</code></pre>\r\n<pre><code class=\"language-bash\"> ls /etc/pki/tls/private\r\n localhost.key</code></pre>\r\nインストールできました。今回はlocalhost.keyは使わず鍵の生成から行います。\r\n開発環境なのでパスワードなしでつくります。　パスワード設定するとApacheの再起動時に要求されて面倒です。\r\n\'centos76\'は例です。なんでもいいです。\r\n<pre><code class=\"language-bash\">sudo openssl genrsa -out centos76.key 2048</code></pre>\r\nCSR と CRT を　/etc/pki/tls/certs　に配置します。\r\n<pre><code class=\"language-bash\">openssl req -new -key centos76.key -out /etc/pki/tls/certs/centos76.csr\r\nGenerating RSA private key, 2048 bit long modulus\r\n.........................................................................</code></pre>\r\nCommon Nameは正確に入力します。　それ以外は適当で大丈夫です。\r\n<pre><code class=\"language-bash\">Country Name (2 letter code) [XX]:JP\r\nState or Province Name (full name) []:Tokyo\r\nLocality Name (eg, city) [Default City]:ChiyodaKu\r\nOrganization Name (eg, company) [Default Company Ltd]:Vagrant\r\nOrganizational Unit Name (eg, section) []:None\r\nCommon Name (eg, your name or your server\'s hostname) []:*.centos76.test\r\nCountry Name (2 letter code) [XX]:JP\r\nState or Province Name (full name) []:Tokyo\r\nLocality Name (eg, city) [Default City]:ChiyodaKu\r\nOrganization Name (eg, company) [Default Company Ltd]:Vagrant\r\nOrganizational Unit Name (eg, section) []:None\r\nCommon Name (eg, your name or your server\'s hostname) []:*.centos76.test</code></pre>\r\nSubject Alernative Name(SAN) 対応の crt をつくる\r\nChrome は2017/5/8以降、\'SSL証明書のCommon Name(CN)は、Subject Alernative\r\nName(SAN) にしなければならない\' らしいです。\r\n<pre><code class=\"language-bash\"> sudo cp /etc/pki/tls/openssl.cnf centos76.opnssl.cnf\r\n sudo vim centos76.opnssl.cnf</code></pre>\r\n追記\r\n<pre><code class=\"language-bash\">[ SAN ]\r\nsubjectAltName = @alt_names\r\n\r\n[ alt_names ]\r\nDNS.1 = a.centos76.test\r\nDNS.2 = b.centos76.test \r\nDNS.3 = wp.centos76.test \r\n</code></pre>\r\ncrt作成\r\n<pre><code class=\"language-bash\">sudo openssl x509 -req -days 3650 -sha256 -in /etc/pki/tls/certs/centos76.csr -signkey centos76.key -extfile centos76.openssl.cnf -extensions SAN -out /etc/pki/tls/certs/centos76.crt sudo openssl x509 -req -in /etc/pki/tls/certs/centos76.csr -signkey centos76.key -out /etc/pki/tls/certs/centos76.crt -days 365</code></pre>\r\n無事作成できれば\r\n<pre><code class=\"language-bash\">ls /etc/pki/tls/certs\r\n\r\nMakefile  ca-bundle.crt  ca-bundle.trust.crt  centos76.crt  centos76.csr  localhost.crt  make-dummy-cert  renew-dummy-cert</code></pre>\r\nApacheに鍵の設定、VirtualHost設定 ssl.conf編集\r\n<pre><code class=\"language-bash\">sudo vim /etc/httpd/conf.d/ssl.conf\r\n\r\n# SSLCertificateFile /etc/pki/tls/certs/localhost.crt \r\nSSLCertificateFile /etc/pki/tls/certs/centos76.crt\r\n\r\n# SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\r\nSSLCertificateKeyFile /etc/pki/tls/private/centos76.key</code></pre>\r\nssl.con の最終あたりに追加\r\n<pre><code class=\"language-bash\">NameVirtualHost *:443\r\n&lt;VirtualHost *:443&gt; \r\n  DocumentRoot /var/www/html/a\r\n  ServerName a.centos76.test\r\nSSLEngine on\r\nSSLCertificateFile /etc/pki/tls/certs/centos76.crt\r\nSSLCertificateKeyFile /etc/pki/tls/private/centos76.key\r\n   &lt;Directory \"/var/www/html/a\"&gt; \r\n   Options Indexes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews \r\n   Require all granted \r\n   &lt;/Directory&gt; \r\n  &lt;/VirtualHost&gt;\r\n\r\n&lt;VirtualHost *:443&gt; \r\n  DocumentRoot /var/www/html/b\r\n  ServerName b.centos76.test\r\nSSLEngine on\r\nSSLCertificateFile /etc/pki/tls/certs/centos76.crt\r\nSSLCertificateKeyFile /etc/pki/tls/private/centos76.key\r\n   &lt;Directory \"/var/www/html/b\"&gt; \r\n   Options Indexes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews \r\n   Require all granted \r\n   &lt;/Directory&gt; \r\n  &lt;/VirtualHost&gt;\r\n\r\n&lt;VirtualHost *:443&gt; \r\n  DocumentRoot /var/www/html/wordpress\r\n  ServerName wp.centos76.test\r\nSSLEngine on\r\nSSLCertificateFile /etc/pki/tls/certs/centos76.crt\r\nSSLCertificateKeyFile /etc/pki/tls/private/centos76.key\r\n   &lt;Directory \"/var/www/html/wp\"&gt; \r\n   Options Indexes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews \r\n   Require all granted \r\n   &lt;/Directory&gt; \r\n  &lt;/VirtualHost&gt;</code></pre>\r\nApache 再起動\r\n<pre><code class=\"language-bash\">sudo systemctl restart httpd</code></pre>\r\n/etc/pki/tls/certs/centos76.crt を Mac側デスクトップなどにコピー\r\nKeychain Access を開き crt をドラッグ。\r\n\"常に信頼\"に変更\r\n<a href=\"https://www.task-notes.com/entry/20170131/1485831600\" target=\"_blank\" rel=\"noopener noreferrer\">参考サイト</a>\r\nhttps://a.centos76.test にアクセス。\r\n\r\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-15-at-12.46.32.png\" alt=\"\" />\r\n\r\n警告なしでSSL通信できました。\r\n<h2>MailCatcher</h2>\r\n開発環境でのメール送信は普通に Postfix\r\n(メール送信用のプログラム)をインストールして送信してもほぼほぼ迷惑メール扱い、Gmailだと受信すらしないといったことにもなるでしょう。\r\nまた、開発途中なので送信するべきでないメールアドレスに送信してしまったなども考えられます。冷や汗たらたらです。\r\nMailCatcher を紹介したいです。 簡易SMPTサーバーと言われるやつです。\r\nメールは送信するが外部へは送信せずMailcatcherに溜め込むという仕様です。　ネットに繋がっていなくてもメール送信テストできます。(ここが好き)\r\n送信したメールはブラウザーから確認できます。APIも用意されており開発環境には最適だと思います。\r\nただ、ruby製でgemでインストールしますので嫌いな方も多いです。\r\n\r\n開発関連ツールをインストール\r\n<pre><code class=\"language-bash\">sudo yum groupinstall \"Development Tools\"</code></pre>\r\n依存パッケージをインストールしてMailCatcherをインストール\r\n<pre><code class=\"language-bash\">sudo yum install sqlite-devel\r\ngem install mailcatcher</code></pre>\r\n起動します\r\n<pre><code class=\"language-bash\">mailcatcher --smtp-port 1025  --http-ip=192.168.33.100  --http-port 1080</code></pre>\r\nブラウザで\r\nhttp://192.168.33.100:1080/\r\nにアクセスします。\r\n\r\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-15-at-13.39.10.png\" alt=\"\" />\r\n\r\nまだメールを送信していないので空です。ここに送信されたメールがリストされます。右上にClear(削除),Quite(MailCatcherの終了)があります。\r\nそれではPHPからメールを送信してみます。PHPMailer\r\nというライブラリをComposerでインストールします。\r\n<a href=\"/php/php-composer/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\nComposerのインストール</a>完了のうえ\r\n<pre><code>cd /var/www/html/a\r\n\r\ncomposer require phpmailer/phpmailer</code></pre>\r\n/var/www/html/a に form.php　メールそ送信用のスクリプトを置いてみます。\r\n<pre><code class=\"language-php\">&lt;?php\r\nuse PHPMailer\\PHPMailer\\PHPMailer;\r\nuse PHPMailer\\PHPMailer\\Exception;\r\n\r\nrequire \'vendor/autoload.php\';\r\nmb_language(\"ja\");\r\nmb_internal_encoding(\"UTF-8\");\r\n//デフォルト値をセット\r\n$to = \"送信先アドレス\";\r\n$from = \"送信元アドレス\";\r\n$from_name = \"送信者名\";\r\n$smtp_ip = \"127.0.0.1\";\r\n$smtp_port = 1025;\r\n$smtp_auth = false;\r\n\r\nif ( !empty( $_POST[\'subject\'] ) ) {\r\n    $subject = $_POST[\'subject\'];\r\n}\r\nelse {\r\n    $send_flag += 1;\r\n}\r\n\r\nif ( !empty( $_POST[\'message\'] ) ) {\r\n    $message = $_POST[\'message\'];\r\n}\r\n\r\nif ( $send_flag == 0 ) {\r\n    //日本語メールを送る際に必要\r\n    mb_language(\"Japanese\");\r\n    mb_internal_encoding(\"UTF-8\");\r\n\r\n    $mail = new PHPMailer();\r\n    $mail-&gt;isSMTP();                \r\n    $mail-&gt;Encoding = \"base64\";\r\n    $mail-&gt;CharSet = \"UTF-8\";\r\n    $mail-&gt;SMTPAuth = $smtp_auth;\r\n    $mail-&gt;Host = $smtp_ip;        \r\n    $mail-&gt;Port = $smtp_port;       \r\n    $mail-&gt;CharSet = \'UTF-8\';\r\n    $mail-&gt;Encoding = \'base64\';\r\n    $mail-&gt;setFrom ($from,$from_name);\r\n    $mail-&gt;addAddress( $to );\r\n    $mail-&gt;addReplyTo( $from );\r\n    $mail-&gt;isHTML(false);\r\n    $mail-&gt;Subject = $subject;\r\n    $mail-&gt;Body  = $message; // メール本文\r\n\r\n    if(!$mail-&gt;send()) {\r\n        $result = \'送信エラー\';\r\n    } else {\r\n        $result = \'送信完了！\';\r\n    }\r\n\r\n}\r\n?&gt;\r\n &lt;html&gt;\r\n&lt;head&gt;\r\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"ja\"&gt;\r\n&lt;head&gt;\r\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\r\n&lt;meta http-equiv=\"Content-Language\" content=\"ja\" /&gt;\r\n&lt;title&gt;PHPMiler MailCatcher&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;form action=\"form.php\" method=\"post\"&gt;\r\n  件名：&lt;br /&gt;\r\n  &lt;input type=\"text\" name=\"subject\" size=\"100\" value=\"Subject\" placeholder=\"subject\"/&gt;&lt;br /&gt;\r\n  本文：&lt;br /&gt;\r\n  &lt;textarea name=\"message\" cols=\"80\" rows=\"10\"&gt;&lt;/textarea&gt;&lt;br /&gt;\r\n\r\n  &lt;br /&gt;\r\n  &lt;input type=\"submit\" value=\"Submit\" /&gt;\r\n&lt;/form&gt;\r\n&lt;pre&gt;\r\n&lt;?php echo $result; ?&gt;\r\n&lt;/pre&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\r\nhttps://a.centos76.test/form.php にアクセスしてメール送信\r\n確認は http://192.168.33.100:1080/\r\n\r\n外部ネットワークを使わずにメールの送信ができます。\r\n<h3>- Vagrant上でのLAMP環境構築を終えて -</h3>\r\n<p class=\"next_description\">コマンド、Vim は最初はとてもとっつきにくいです。\r\nですがこれからのWEB制作はFrontEndもちろんのことデザイナーレベルでも要求される時代が来るでしょう。\r\nVimと聞くとプログラマーと印象がありますがHTMLのコンテンツ編集にも威力を発揮すると思います。\r\n開発環境としては、ほぼほぼできたのではと思います。 開発環境と言えば他にも \'Docker\' があります。\r\n機会があれば Vagrant上でのDocker (ハイブリッド?) をやってみたいと思います。</p>','VagrantのLAMP環境にプラスアルファ  SSL (https) 、MailCatcher インストール','今は必須となっているSSL通信と開発環境ならではのSMTPサーバー \'MailCatcher\' の設定です。','publish','closed','closed','','ssl','','','2019-09-23 03:36:01','2019-09-22 18:36:01','<h2>SSL通信 (https)</h2>\n<pre><code class=\"language-bash\"> ls /etc/pki/tls/private</code></pre>\n空です。秘密鍵はありません。\nSSL通信に必要なApacheのモジュールをインストール\n<pre><code class=\"language-bash\"> sudo yum -y install mod_ssl</code></pre>\n<pre><code class=\"language-bash\"> ls /etc/pki/tls/private\n localhost.key</code></pre>\nインストールできました。今回はlocalhost.keyは使わず鍵の生成から行います。\n開発環境なのでパスワードなしでつくります。　パスワード設定するとApacheの再起動時に要求されて面倒です。\n\'centos76\'は例です。なんでもいいです。\n<pre><code class=\"language-bash\">sudo openssl genrsa -out centos76.key 2048</code></pre>\nCSR と CRT を　/etc/pki/tls/certs　に配置します。\n<pre><code class=\"language-bash\">openssl req -new -key centos76.key -out /etc/pki/tls/certs/centos76.csr\nGenerating RSA private key, 2048 bit long modulus\n.........................................................................</code></pre>\nCommon Nameは正確に入力します。　それ以外は適当で大丈夫です。\n<pre><code class=\"language-bash\">Country Name (2 letter code) [XX]:JP\nState or Province Name (full name) []:Tokyo\nLocality Name (eg, city) [Default City]:ChiyodaKu\nOrganization Name (eg, company) [Default Company Ltd]:Vagrant\nOrganizational Unit Name (eg, section) []:None\nCommon Name (eg, your name or your server\'s hostname) []:*.centos76.test\nCountry Name (2 letter code) [XX]:JP\nState or Province Name (full name) []:Tokyo\nLocality Name (eg, city) [Default City]:ChiyodaKu\nOrganization Name (eg, company) [Default Company Ltd]:Vagrant\nOrganizational Unit Name (eg, section) []:None\nCommon Name (eg, your name or your server\'s hostname) []:*.centos76.test</code></pre>\nSubject Alernative Name(SAN) 対応の crt をつくる\nChrome は2017/5/8以降、\'SSL証明書のCommon Name(CN)は、Subject Alernative\nName(SAN) にしなければならない\' らしいです。\n<pre><code class=\"language-bash\"> sudo cp /etc/pki/tls/openssl.cnf centos76.opnssl.cnf\n sudo vim centos76.opnssl.cnf</code></pre>\n追記\n<pre><code class=\"language-bash\">[ SAN ]\nsubjectAltName = @alt_names\n\n[ alt_names ]\nDNS.1 = a.centos76.test\nDNS.2 = b.centos76.test \nDNS.3 = wp.centos76.test \n</code></pre>\ncrt作成\n<pre><code class=\"language-bash\">sudo openssl x509 -req -days 3650 -sha256 -in /etc/pki/tls/certs/centos76.csr -signkey centos76.key -extfile centos76.openssl.cnf -extensions SAN -out /etc/pki/tls/certs/centos76.crt sudo openssl x509 -req -in /etc/pki/tls/certs/centos76.csr -signkey centos76.key -out /etc/pki/tls/certs/centos76.crt -days 365</code></pre>\n無事作成できれば\n<pre><code class=\"language-bash\">ls /etc/pki/tls/certs\n\nMakefile  ca-bundle.crt  ca-bundle.trust.crt  centos76.crt  centos76.csr  localhost.crt  make-dummy-cert  renew-dummy-cert</code></pre>\nApacheに鍵の設定、VirtualHost設定 ssl.conf編集\n<pre><code class=\"language-bash\">sudo vim /etc/httpd/conf.d/ssl.conf\n\n# SSLCertificateFile /etc/pki/tls/certs/localhost.crt \nSSLCertificateFile /etc/pki/tls/certs/centos76.crt\n\n# SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\nSSLCertificateKeyFile /etc/pki/tls/private/centos76.key</code></pre>\nssl.con の最終あたりに追加\n<pre><code class=\"language-bash\">NameVirtualHost *:443\n&lt;VirtualHost *:443&gt; \n  DocumentRoot /var/www/html/a\n  ServerName a.centos76.test\nSSLEngine on\nSSLCertificateFile /etc/pki/tls/certs/centos76.crt\nSSLCertificateKeyFile /etc/pki/tls/private/centos76.key\n   &lt;Directory \"/var/www/html/a\"&gt; \n   Options Indexes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews \n   Require all granted \n   &lt;/Directory&gt; \n  &lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt; \n  DocumentRoot /var/www/html/b\n  ServerName b.centos76.test\nSSLEngine on\nSSLCertificateFile /etc/pki/tls/certs/centos76.crt\nSSLCertificateKeyFile /etc/pki/tls/private/centos76.key\n   &lt;Directory \"/var/www/html/b\"&gt; \n   Options Indexes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews \n   Require all granted \n   &lt;/Directory&gt; \n  &lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt; \n  DocumentRoot /var/www/html/wordpress\n  ServerName wp.centos76.test\nSSLEngine on\nSSLCertificateFile /etc/pki/tls/certs/centos76.crt\nSSLCertificateKeyFile /etc/pki/tls/private/centos76.key\n   &lt;Directory \"/var/www/html/wp\"&gt; \n   Options Indexes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews \n   Require all granted \n   &lt;/Directory&gt; \n  &lt;/VirtualHost&gt;</code></pre>\nApache 再起動\n<pre><code class=\"language-bash\">sudo systemctl restart httpd</code></pre>\n/etc/pki/tls/certs/centos76.crt を Mac側デスクトップなどにコピー\nKeychain Access を開き crt をドラッグ。\n\"常に信頼\"に変更\n<a href=\"https://www.task-notes.com/entry/20170131/1485831600\" target=\"_blank\" rel=\"noopener noreferrer\">参考サイト</a>\nhttps://a.centos76.test にアクセス。\n\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-15-at-12.46.32.png\" alt=\"\" />\n\n警告なしでSSL通信できました。\n<h2>MailCatcher</h2>\n開発環境でのメール送信は普通に Postfix\n(メール送信用のプログラム)をインストールして送信してもほぼほぼ迷惑メール扱い、Gmailだと受信すらしないといったことにもなるでしょう。\nまた、開発途中なので送信するべきでないメールアドレスに送信してしまったなども考えられます。冷や汗たらたらです。\nMailCatcher を紹介したいです。 簡易SMPTサーバーと言われるやつです。\nメールは送信するが外部へは送信せずMailcatcherに溜め込むという仕様です。　ネットに繋がっていなくてもメール送信テストできます。(ここが好き)\n送信したメールはブラウザーから確認できます。APIも用意されており開発環境には最適だと思います。\nただ、ruby製でgemでインストールしますので嫌いな方も多いです。\n\n開発関連ツールをインストール\n<pre><code class=\"language-bash\">sudo yum groupinstall \"Development Tools\"</code></pre>\n依存パッケージをインストールしてMailCatcherをインストール\n<pre><code class=\"language-bash\">sudo yum install sqlite-devel\ngem install mailcatcher</code></pre>\n起動します\n<pre><code class=\"language-bash\">mailcatcher --smtp-port 1025  --http-ip=192.168.33.100  --http-port 1080</code></pre>\nブラウザで\nhttp://192.168.33.100:1080/\nにアクセスします。\n\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-15-at-13.39.10.png\" alt=\"\" />\n\nまだメールを送信していないので空です。ここに送信されたメールがリストされます。右上にClear(削除),Quite(MailCatcherの終了)があります。\nそれではPHPからメールを送信してみます。PHPMailer\nというライブラリをComposerでインストールします。\n<a href=\"/php/php-composer/\" target=\"_blank\" rel=\"noopener noreferrer\">\nComposerのインストール</a>完了のうえ\n<pre><code>cd /var/www/html/a\n\ncomposer require phpmailer/phpmailer</code></pre>\n/var/www/html/a に form.php　メールそ送信用のスクリプトを置いてみます。\n<pre><code class=\"language-php\">&lt;?php\nuse PHPMailer\\PHPMailer\\PHPMailer;\nuse PHPMailer\\PHPMailer\\Exception;\n\nrequire \'vendor/autoload.php\';\nmb_language(\"ja\");\nmb_internal_encoding(\"UTF-8\");\n//デフォルト値をセット\n$to = \"送信先アドレス\";\n$from = \"送信元アドレス\";\n$from_name = \"送信者名\";\n$smtp_ip = \"127.0.0.1\";\n$smtp_port = 1025;\n$smtp_auth = false;\n\nif ( !empty( $_POST[\'subject\'] ) ) {\n    $subject = $_POST[\'subject\'];\n}\nelse {\n    $send_flag += 1;\n}\n\nif ( !empty( $_POST[\'message\'] ) ) {\n    $message = $_POST[\'message\'];\n}\n\nif ( $send_flag == 0 ) {\n    //日本語メールを送る際に必要\n    mb_language(\"Japanese\");\n    mb_internal_encoding(\"UTF-8\");\n\n    $mail = new PHPMailer();\n    $mail-&gt;isSMTP();                \n    $mail-&gt;Encoding = \"base64\";\n    $mail-&gt;CharSet = \"UTF-8\";\n    $mail-&gt;SMTPAuth = $smtp_auth;\n    $mail-&gt;Host = $smtp_ip;        \n    $mail-&gt;Port = $smtp_port;       \n    $mail-&gt;CharSet = \'UTF-8\';\n    $mail-&gt;Encoding = \'base64\';\n    $mail-&gt;setFrom ($from,$from_name);\n    $mail-&gt;addAddress( $to );\n    $mail-&gt;addReplyTo( $from );\n    $mail-&gt;isHTML(false);\n    $mail-&gt;Subject = $subject;\n    $mail-&gt;Body  = $message; // メール本文\n\n    if(!$mail-&gt;send()) {\n        $result = \'送信エラー\';\n    } else {\n        $result = \'送信完了！\';\n    }\n\n}\n?&gt;\n &lt;html&gt;\n&lt;head&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"ja\"&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\n&lt;meta http-equiv=\"Content-Language\" content=\"ja\" /&gt;\n&lt;title&gt;PHPMiler MailCatcher&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;form action=\"form.php\" method=\"post\"&gt;\n  件名：&lt;br /&gt;\n  &lt;input type=\"text\" name=\"subject\" size=\"100\" value=\"Subject\" placeholder=\"subject\"/&gt;&lt;br /&gt;\n  本文：&lt;br /&gt;\n  &lt;textarea name=\"message\" cols=\"80\" rows=\"10\"&gt;&lt;/textarea&gt;&lt;br /&gt;\n\n  &lt;br /&gt;\n  &lt;input type=\"submit\" value=\"Submit\" /&gt;\n&lt;/form&gt;\n&lt;pre&gt;\n&lt;?php echo $result; ?&gt;\n&lt;/pre&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<a href=\"https://a.centos76.test/form.php\">https://a.centos76.test/form.php</a> にアクセスしてメール送信\n確認は <a href=\"http://192.168.33.100:1080/\">http://192.168.33.100:1080/</a>\n\n外部ネットワークを使わずにメールの送信ができます。\n<h3>- Vagrant上でのLAMP環境構築を終えて -</h3>\n<p class=\"next_description\">コマンド、Vim は最初はとてもとっつきにくいです。\nですがこれからのWEB制作はFrontEndもちろんのことデザイナーレベルでも要求される時代が来るでしょう。\nVimと聞くとプログラマーと印象がありますがHTMLのコンテンツ編集にも威力を発揮すると思います。\n開発環境としては、ほぼほぼできたのではと思います。 開発環境と言えば他にも \'Docker\' があります。\n機会があれば Vagrant上でのDocker (ハイブリッド?) をやってみたいと思います。</p>',0,'https://blog.webdimension.jp/?post_type=environment&#038;p=143',0,'environment','',0),(144,1,'2019-08-15 14:36:17','2019-08-15 05:36:17','','openssl_mailcatcher','','inherit','closed','closed','','openssl_mailcatcher','','','2019-08-15 14:36:17','2019-08-15 05:36:17','',143,'https://blog.webdimension.jp/wp-content/uploads/2019/08/openssl_mailcatcher.png',0,'attachment','image/png',0),(145,1,'2019-08-15 14:37:15','2019-08-15 05:37:15','','Screen Shot 2019-08-15 at 13.39.10','','inherit','closed','closed','','screen-shot-2019-08-15-at-13-39-10','','','2019-08-15 14:37:15','2019-08-15 05:37:15','',143,'https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-15-at-13.39.10.png',0,'attachment','image/png',0),(146,1,'2019-08-15 14:39:32','2019-08-15 05:39:32','','Screen Shot 2019-08-15 at 12.46.32','','inherit','closed','closed','','screen-shot-2019-08-15-at-12-46-32','','','2019-08-15 14:39:32','2019-08-15 05:39:32','',143,'https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-15-at-12.46.32.png',0,'attachment','image/png',0),(147,1,'2019-08-15 16:05:22','2019-08-15 07:05:22',' ','','','publish','closed','closed','','147','','','2019-08-15 16:05:22','2019-08-15 07:05:22','',0,'https://blog.webdimension.jp/?p=147',10,'nav_menu_item','',0),(148,1,'2019-08-15 16:05:22','2019-08-15 07:05:22','','VagrantにWordPressをインストール','','publish','closed','closed','','vagrant%e3%81%abwordpress%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab','','','2019-08-15 16:05:22','2019-08-15 07:05:22','',0,'https://blog.webdimension.jp/?p=148',9,'nav_menu_item','',0),(149,1,'2019-08-15 16:23:30','2019-08-15 07:23:30','<h2>Vagrantに SSH ログイン</h2>\n<p>Vagrantfileがある場所へ移動(centos76はBox名、インストール環境に合わせせてます)</p>\n<pre><code class=\"language-bash\">cd ~/vagrant/centos76\nvagrant ssh</code></pre>\n<p>ログイできれば     </p>\n<pre><code class=\"language-bash\">Last login: Sun Aug 11 01:27:56 2019 from 10.0.2.2\n[vagrant@localhost ~]$ </code></pre>\n<p>コマンドを打ってみよう     </p>\n<pre><code class=\"language-bash\">ls -la</code></pre>\n<p>HOMEディレクトリの不可視ファイルを含めたすべてが表示される。</p>\n<pre><code class=\"language-bash\">total 16\ndrwx------. 3 vagrant vagrant  95  6月  8 19:13 .\ndrwxr-xr-x. 3 root    root     21  2月 28 20:53 ..\n-rw-------. 1 vagrant vagrant 101  8月 11 01:29 .bash_history\n-rw-r--r--. 1 vagrant vagrant  18 10月 30  2018 .bash_logout\n-rw-r--r--. 1 vagrant vagrant 193 10月 30  2018 .bash_profile\n-rw-r--r--. 1 vagrant vagrant 231 10月 30  2018 .bashrc\ndrwx------. 2 vagrant vagrant  29  6月  8 18:56 .ssh\n[vagrant@localhost ~]$ </code></pre>\n<h2>bash_it をインストール</h2>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-11-at-10.34.59.png\" alt=\"\" /><br />\nこんな感じで白黒の画面だとなんとなくおもしろくないのでちょっとおしゃれで便利な bash_it\nをインストールしてみます。</p>\n<pre><code class=\"language-bash\">git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\n\n~/.bash_it/install.sh</code></pre>\n<p>しかし     </p>\n<pre><code class=\"language-bash\">-bash: git: command not found</code></pre>\n<p>git コマンドがないよ！　というエラーです。 では git をインストール。      </p>\n<h2>Gitをインストール</h2>\n<p>gitをインストールするための依存ライブラリーをインストール\n<a href=\"https://qiita.com/homines22/items/7572cdba2d60a00a3ffc\">参考サイト</a></p>\n<pre><code class=\"language-bash\">wget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz</code></pre>\n<p>git-2.9.5をインストール。       </p>\n<pre><code class=\"language-bash\">wget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz </code></pre>\n<p>が wget というコマンドがありません。       </p>\n<pre><code class=\"language-bash\">-bash: wget: command not found</code></pre>\n<h2>wget をインストール</h2>\n<pre><code class=\"language-bash\">sudo yum -y install wget</code></pre>\n<p>complete! で成功。</p>\n<pre><code class=\"language-bash\">Installed:\n  wget.x86_64 0:1.14-18.el7_6.1                                                                                                                                                                                                      \n\nComplete!</code></pre>\n<h2>もう一度 Git をダウンロード</h2>\n<pre><code class=\"language-bash\">wget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz </code></pre>\n<pre><code class=\"language-bash\">2019-08-11 01:55:29 (20.2 MB/s) - `git-2.9.5.tar.gz&#039; へ保存完了 [5928730/5928730]</code></pre>\n<p>git をダウンロードできたので インストールします。     </p>\n<pre><code class=\"language-bash\">tar vfx git-2.9.5.tar.gz\ncd git-2.9.5\nmake configure\n./configure --prefix=/usr/local\nmake all\nsudo make install</code></pre>\n<p>確認      </p>\n<pre><code class=\"language-bash\">git --version</code></pre>\n<p>OK</p>\n<pre><code class=\"language-bash\">git version 2.9.5</code></pre>\n<p>bash_it をダウンロード</p>\n<pre><code class=\"language-bash\">git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it</code></pre>\n<p>インストール      </p>\n<pre><code class=\"language-bash\"> ~/.bash_it/install.sh</code></pre>\n<pre><code class=\"language-bash\">Would you like to keep your .bashrc and append bash-it templates at the end? [y/N] y</code></pre>\n<p>と聞かれるので y インストールできたら exit でログアウト vagrant ssh\nで再ログイン。カラフルになり見えやすくなります。　また先ほど ls -la\nとして不可視ファイルを含めたすべてが表示をしましたが、     </p>\n<pre><code class=\"language-bash\">ll</code></pre>\n<p>と打つだけで同じことができます。他にも便利なエイリアスを用意してくれてます。<br />\n.bash_it/aliases/available/<br />\nのファイル群です。<br />\nまた、カラーテーマを変更するには ~/.bashrc 内の       </p>\n<pre><code class=\"language-bash\">export BASH_IT_THEME=&#039;bobby&#039;</code></pre>\n<p>body を他のthemeに変更します。\n<a href=\"https://github.com/Bash-it/bash-it/wiki/Themes\">テーマ一覧</a>\n/.bash_it/themes/<br />\nのファイル群です。</p>\n<p>このような見た目になります。\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-11-at-14.28.57.png\" alt=\"\" /></p>\n<p>Gitのインストールに使った　git-2.9.5  git-2.9.5.tar.gz　はインストール完了後削除します。</p>\n<pre><code class=\"language-bash\">rm -rf git-2.9.5\nrm git-2.9.5.tar.gz</code></pre>\n<h3>- 次回 -</h3>\n<p class=\"next_description\">\n次回はCentOSにVimをインストールします。\n</p>\n<p><a href=\"https://blog.webdimension.jp/environment/environment-contents/\">https://blog.webdimension.jp/environment/environment-contents/</a></p>','開発環境構築を前の事前準備','SSHでリモートログインでの作業をしやすいように、ちょっとおしゃれに、といった事前準備','inherit','closed','closed','','118-autosave-v1','','','2019-08-15 16:23:30','2019-08-15 07:23:30','## Vagrantに SSH ログイン\r\nVagrantfileがある場所へ移動(centos76はBox名、インストール環境に合わせせてます)\r\n```bash\r\ncd ~/vagrant/centos76\r\nvagrant ssh\r\n```\r\nログイできれば     \r\n```bash\r\nLast login: Sun Aug 11 01:27:56 2019 from 10.0.2.2\r\n[vagrant@localhost ~]$ \r\n```\r\nコマンドを打ってみよう     \r\n```bash\r\nls -la\r\n```\r\nHOMEディレクトリの不可視ファイルを含めたすべてが表示される。\r\n```bash\r\ntotal 16\r\ndrwx------. 3 vagrant vagrant  95  6月  8 19:13 .\r\ndrwxr-xr-x. 3 root    root     21  2月 28 20:53 ..\r\n-rw-------. 1 vagrant vagrant 101  8月 11 01:29 .bash_history\r\n-rw-r--r--. 1 vagrant vagrant  18 10月 30  2018 .bash_logout\r\n-rw-r--r--. 1 vagrant vagrant 193 10月 30  2018 .bash_profile\r\n-rw-r--r--. 1 vagrant vagrant 231 10月 30  2018 .bashrc\r\ndrwx------. 2 vagrant vagrant  29  6月  8 18:56 .ssh\r\n[vagrant@localhost ~]$ \r\n```\r\n## bash_it をインストール\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-11-at-10.34.59.png)         \r\nこんな感じで白黒の画面だとなんとなくおもしろくないのでちょっとおしゃれで便利な bash_it\r\nをインストールしてみます。\r\n```bash\r\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\r\n\r\n~/.bash_it/install.sh\r\n```\r\nしかし     \r\n```bash\r\n-bash: git: command not found\r\n```\r\ngit コマンドがないよ！　というエラーです。 では git をインストール。      \r\n## Gitをインストール\r\n\r\ngitをインストールするための依存ライブラリーをインストール\r\n[参考サイト](https://qiita.com/homines22/items/7572cdba2d60a00a3ffc)\r\n```bash\r\nwget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz\r\n```\r\ngit-2.9.5をインストール。       \r\n```bash\r\nwget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz \r\n```\r\nが wget というコマンドがありません。       \r\n\r\n```bash\r\n-bash: wget: command not found\r\n```\r\n## wget をインストール\r\n```bash\r\nsudo yum -y install wget\r\n```\r\ncomplete! で成功。\r\n```bash\r\nInstalled:\r\n  wget.x86_64 0:1.14-18.el7_6.1                                                                                                                                                                                                      \r\n\r\nComplete!\r\n```\r\n## もう一度 Git をダウンロード\r\n```bash\r\nwget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz \r\n```\r\n```bash\r\n2019-08-11 01:55:29 (20.2 MB/s) - &#x60;git-2.9.5.tar.gz&#039; へ保存完了 [5928730/5928730]\r\n```\r\ngit をダウンロードできたので インストールします。     \r\n```bash\r\ntar vfx git-2.9.5.tar.gz\r\ncd git-2.9.5\r\nmake configure\r\n./configure --prefix=/usr/local\r\nmake all\r\nsudo make install\r\n```\r\n確認      \r\n```bash\r\ngit --version\r\n```\r\nOK\r\n```bash\r\ngit version 2.9.5\r\n```\r\nbash_it をダウンロード\r\n```bash\r\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\r\n```\r\nインストール      \r\n```bash\r\n ~/.bash_it/install.sh\r\n```\r\n```bash\r\nWould you like to keep your .bashrc and append bash-it templates at the end? [y/N] y\r\n```\r\nと聞かれるので y インストールできたら exit でログアウト vagrant ssh\r\nで再ログイン。カラフルになり見えやすくなります。　また先ほど ls -la\r\nとして不可視ファイルを含めたすべてが表示をしましたが、     \r\n```bash\r\nll\r\n```\r\nと打つだけで同じことができます。他にも便利なエイリアスを用意してくれてます。      \r\n.bash_it/aliases/available/     \r\nのファイル群です。   \r\nまた、カラーテーマを変更するには ~/.bashrc 内の       \r\n```bash\r\nexport BASH_IT_THEME=&#039;bobby&#039;\r\n```\r\nbody を他のthemeに変更します。\r\n[テーマ一覧](https://github.com/Bash-it/bash-it/wiki/Themes)\r\n/.bash_it/themes/       \r\nのファイル群です。\r\n\r\nこのような見た目になります。\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-11-at-14.28.57.png)\r\n\r\nGitのインストールに使った　git-2.9.5  git-2.9.5.tar.gz　はインストール完了後削除します。\r\n```bash\r\nrm -rf git-2.9.5\r\nrm git-2.9.5.tar.gz\r\n```\r\n\r\n### - 次回 - 		\r\n\r\n<p class=\"next_description\">\r\n次回はCentOSにVimをインストールします。\r\n</p>\r\n\r\nhttps://blog.webdimension.jp/environment/environment-contents/\r\n\r\n\r\n',118,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/118-autosave-v1/',0,'revision','',0),(150,1,'2019-08-15 16:42:39','2019-08-15 07:42:39','<p>Vimには長い歴史がありとても奥が深いです。\nvimの全ての機能を習得することは大変ですがガチガチのViimの使い手にならなくても大丈夫です。\nサーバー上のファイルを編集するにはVimは必須といってもいいくらいです。\nネット上には数多くのVimの情報がありますので\nここでは参考サイトを載せるにとどめます。</p>\n<ul><li><a href=\"https://qiita.com/JpnLavender/items/fabcc79b4ab0d52e1f6d\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/JpnLavender/items/fabcc79b4ab0d52e1f6d</a></li>\n    <li><a href=\"https://qiita.com/34ro/items/6163f595785ae99a632a\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/34ro/items/6163f595785ae99a632a</a></li>\n    <li><a href=\"https://qiita.com/34ro/items/e20fa0831d78566981d3\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/34ro/items/e20fa0831d78566981d3</a></li>\n    <li><a href=\"https://qiita.com/doranekohc/items/3a1f4d13998dbe55cbbe\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/doranekohc/items/3a1f4d13998dbe55cbbe</a></li>\n</ul>\n<p>全てのコマンドを覚えなくても大丈夫です。LAMP環境構築しながら少しづつ慣れていきましょう。\nVimを上手に使うには知識も必要ですが実際に手を動かして慣れていくことのほうがもっと重要です。\n慣れない間は思い通りにならずイライラすると思います。\nゆっくりじっくり体に馴染ませましょう。\nここではターミナル上でのVimを前提としてますがVImいんなれるため<a href=\"https://github.com/splhack/macvim-kaoriya/releases/tag/20180324\" target>MacVim</a>のようなGUIアプリケーションを使うのもいいでしょう。\nサーバー上のファイルを編集るるような場合は</p>\n<ul><li>ターミナルを立ち上げる</li>\n    <li>sshでサーバーにログイン</li>\n    <li>Vim で目的のファイルを編集</li>\n</ul>\n<p>という流れになります。 この場合ターミナル上でVimを立ち上げるようになります。</p>\n<p>サーバーサイドでなくても通常使ってるツール　(Dreamweaver, Atom, Sublime Text,\nPhpStorm) などはVimPluginを用意しています。\n日頃のhtml,css,jsの編集もVimをつかうことができます。\nほぼほぼのことをキーボード操作のみ行います。マウスを使う機会が格段に減ることでしょう。\nこれらになれてくると作業スピードは飛躍的に上がります。\nVimなしでは仕事ができなくなるくらい中毒性があります。</p>\n<h2>便利なVimアクション</h2>\n<ul><li>ciw 単語削除して編集モード</li>\n    <li>diw 単語を削除</li>\n    <li>yi\" ダブルコーテーションの中をクリップボードへ</li>\n    <li>ci\" ダブルコーテーションの中を削除して挿入モード</li>\n    <li>f fキーの後に一文字なにか(例えばa)を押すと次にaが出現する場所へとカーソル移動\n;キーで次の出現箇所、 ,キーで前の出現箇所へ移動</li>\n</ul>\n<h3>- 次回 -</h3>\n<p class=\"next_description\">実際にSSHでリモートログインしてがっつり作業ができるための事前準備的なことをします。</p>','Vimをやってみよう','Vimにを覚えて遠隔操作に備える。','inherit','closed','closed','','113-autosave-v1','','','2019-08-15 16:42:39','2019-08-15 07:42:39','Vimには長い歴史がありとても奥が深いです。\nvimの全ての機能を習得することは大変ですがガチガチのViimの使い手にならなくても大丈夫です。\nサーバー上のファイルを編集するにはVimは必須といってもいいくらいです。\nネット上には数多くのVimの情報がありますので\nここでは参考サイトを載せるにとどめます。\n<ul>\n 	<li><a href=\"https://qiita.com/JpnLavender/items/fabcc79b4ab0d52e1f6d\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/JpnLavender/items/fabcc79b4ab0d52e1f6d</a></li>\n 	<li><a href=\"https://qiita.com/34ro/items/6163f595785ae99a632a\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/34ro/items/6163f595785ae99a632a</a></li>\n 	<li><a href=\"https://qiita.com/34ro/items/e20fa0831d78566981d3\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/34ro/items/e20fa0831d78566981d3</a></li>\n 	<li><a href=\"https://qiita.com/doranekohc/items/3a1f4d13998dbe55cbbe\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/doranekohc/items/3a1f4d13998dbe55cbbe</a></li>\n</ul>\n全てのコマンドを覚えなくても大丈夫です。LAMP環境構築しながら少しづつ慣れていきましょう。\nVimを上手に使うには知識も必要ですが実際に手を動かして慣れていくことのほうがもっと重要です。\n慣れない間は思い通りにならずイライラすると思います。\nゆっくりじっくり体に馴染ませましょう。\nここではターミナル上でのVimを前提としてますがVImいんなれるため<a href=\"https://github.com/splhack/macvim-kaoriya/releases/tag/20180324\" target>MacVim</a>のようなGUIアプリケーションを使うのもいいでしょう。\nサーバー上のファイルを編集るるような場合は\n<ul>\n 	<li>ターミナルを立ち上げる</li>\n 	<li>sshでサーバーにログイン</li>\n 	<li>Vim で目的のファイルを編集</li>\n</ul>\nという流れになります。 この場合ターミナル上でVimを立ち上げるようになります。\n\nサーバーサイドでなくても通常使ってるツール　(Dreamweaver, Atom, Sublime Text,\nPhpStorm) などはVimPluginを用意しています。\n日頃のhtml,css,jsの編集もVimをつかうことができます。\nほぼほぼのことをキーボード操作のみ行います。マウスを使う機会が格段に減ることでしょう。\nこれらになれてくると作業スピードは飛躍的に上がります。\nVimなしでは仕事ができなくなるくらい中毒性があります。\n<h2>便利なVimアクション</h2>\n<ul>\n 	<li>ciw 単語削除して編集モード</li>\n 	<li>diw 単語を削除</li>\n 	<li>yi\" ダブルコーテーションの中をクリップボードへ</li>\n 	<li>ci\" ダブルコーテーションの中を削除して挿入モード</li>\n 	<li>f fキーの後に一文字なにか(例えばa)を押すと次にaが出現する場所へとカーソル移動\n;キーで次の出現箇所、 ,キーで前の出現箇所へ移動</li>\n</ul>\n<h3>- 次回 -</h3>\n<p class=\"next_description\">実際にSSHでリモートログインしてがっつり作業ができるための事前準備的なことをします。</p>',113,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/113-autosave-v1/',0,'revision','',0),(151,1,'2019-08-15 19:58:26','2019-08-15 10:58:26','<h2>WordPressをダウンロード</h2>\n<p><a href=\"https://ja.wordpress.org/\" target=\"_blank\" rel=\"noopener noreferrer\">WordPressダウンロード</a><br />\n解凍後に<br />\n/workspace/centos76/http_doc/wordpress<br />\nに配置。<br />\nドメインは wp.centoos76.test とします。<br />\nApacheにVirtualHostを追加します。       </p>\n<h2>ApacheにVirtualHost追加</h2>\n<p>vim で httpd.confを開きます。</p>\n<pre><code class=\"language-bash\">$ sudo vim /etc/httpd/conf/httpd.conf </code></pre>\n<p>以下を追記       </p>\n<pre><code class=\"language-bash\">&lt;VirtualHost *:80&gt; \n  DocumentRoot /var/www/html/wordpress\n  ServerName wp.centos76.test\n   &lt;Directory \"/var/www/html/wordpress\"&gt; \n   Options Indexes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews \n   Require all granted \n   &lt;/Directory&gt; \n  &lt;/VirtualHost&gt;</code></pre>\n<p>Apache再起動</p>\n<pre><code class=\"language-bash\">$ sudo systemctr restart httpd</code></pre>\n<h2>WordPress用のDatabaseを作成</h2>\n<p>utf8mb4 絵文字対応の文字コードです。最近主流のようです。</p>\n<pre><code class=\"language-bash\">$ mysql -uroot -p\n\nmysql&gt; CREATE DATABASE wordpress CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</code></pre>\n<h2>hostsファイル編集</h2>\n<p>HostOS側 hostsファイル編集(Macの場合)</p>\n<pre><code>vim /etc/hosts</code></pre>\n<p>192.168.33.100 wp.centos76.test<br />\nを追記。 ブラウザで <a href=\"http://wp.centos76.test/\" target=\"_blank\" rel=\"noopener noreferrer\"><a href=\"http://wp.centos76.test/\">http://wp.centos76.test/</a></a> にアクセス。<br />\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-13-at-7.00.08.png\" alt=\"\" /><br />\nインストーラーに従って進めます。<br />\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-13-at-7.06.04.png\" alt=\"\" /><br />\n無事インストールできました。</p>\n<h3>- 次回 -</h3>\n<p class=\"next_description\">\nLAMP環境が動くようになりました。次回はVagrant LAMP環境にプラスアルファ施したほうが良さげな設定をします。\n</p>','VagrantにWordpressをインストール','VagrantにインストールしたApache,PHP,MySQL上でWordPressを動かします。','inherit','closed','closed','','138-autosave-v1','','','2019-08-15 19:58:26','2019-08-15 10:58:26','<h2>WordPressをダウンロード</h2>\n<p><a href=\"https://ja.wordpress.org/\" target=\"_blank\" rel=\"noopener noreferrer\">WordPressダウンロード</a><br />\n解凍後に<br />\n/workspace/centos76/http_doc/wordpress<br />\nに配置。<br />\nドメインは wp.centoos76.test とします。<br />\nApacheにVirtualHostを追加します。       </p>\n<h2>ApacheにVirtualHost追加</h2>\n<p>vim で httpd.confを開きます。</p>\n<pre><code class=\"language-bash\">$ sudo vim /etc/httpd/conf/httpd.conf </code></pre>\n<p>以下を追記       </p>\n<pre><code class=\"language-bash\">&lt;VirtualHost *:80&gt; \n  DocumentRoot /var/www/html/wordpress\n  ServerName wp.centos76.test\n   &lt;Directory &quot;/var/www/html/wordpress&quot;&gt; \n   Options Indexes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews \n   Require all granted \n   &lt;/Directory&gt; \n  &lt;/VirtualHost&gt;</code></pre>\n<p>Apache再起動</p>\n<pre><code class=\"language-bash\">$ sudo systemctr restart httpd</code></pre>\n<h2>WordPress用のDatabaseを作成</h2>\n<p>utf8mb4 絵文字対応の文字コードです。最近主流のようです。</p>\n<pre><code class=\"language-bash\">$ mysql -uroot -p\n\nmysql&gt; CREATE DATABASE wordpress CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</code></pre>\n<h2>hostsファイル編集</h2>\n<p>HostOS側 hostsファイル編集(Macの場合)</p>\n<pre><code>vim /etc/hosts</code></pre>\n<p>192.168.33.100 wp.centos76.test<br />\nを追記。 ブラウザで <a href=\"http://wp.centos76.test/\" target=\"_blank\" rel=\"noopener noreferrer\">http://wp.centos76.test/</a> にアクセス。<br />\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-13-at-7.00.08.png\" alt=\"\" /><br />\nインストーラーに従って進めます。<br />\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/08/Screen-Shot-2019-08-13-at-7.06.04.png\" alt=\"\" /><br />\n無事インストールできました。</p>\n<h3>- 次回 -</h3>\n<p class=\"next_description\">\nLAMP環境が動くようになりました。次回はVagrant LAMP環境にプラスアルファ施したほうが良さげな設定をします。\n</p>',138,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/138-autosave-v1/',0,'revision','',0),(154,1,'2019-09-15 12:05:21','2019-09-15 03:05:21','<h2>おれおれVagrantfile</h2>\n<p>といっても特別なにかすごいことやってるわけでなく汎用的なテンプレートです。<br />\nDockerのようなコンテナ型ではなくガチのCentOS上で何か実験したい、遊びたい時などなど用途です。<br />\n毎回一から構築するのは<span class=\"under_line\">めんどくさい</span>ので VagrantのProvisioningで自動化します。</p>\n<p>VirtualBOx,Vagrantはインストール済み前提です。\n<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>       </p>\n<p>provision/provision/settings_local.yaml         </p>\n<pre><code class=\"language-bash\">vm:\n # Box名 なんでも可 \n boxName: &quot;centos7&quot;\n # 元となるboxのURL\n boxURL: &quot;https://vagrantcloud.com/centos/boxes/7/versions/1905.1/providers/virtualbox.box&quot;\n # IPアドレスを指定\n localIP: &quot;192.168.33.100&quot;\nsync:\n # 同期するディレクトリを配列で指定\n  dir:\n    - localPath: &quot;../../workspace/http_doc&quot;\n      vmPath: &quot;/var/www/html&quot;\n    - localPath: &quot;../../workspace/mysql&quot;\n      vmPath: &quot;/var/lib/mysql&quot;\ncopyFiles:\n # Vagrantへコピーしたいファイル配列で指定\n # localPathで指定したファイルがVagrant上 /vagrant/に　fileNameに指定した名前でコピーされる。\n # command: に記述したコマンドを実行される。\n # 下記ではHost側のssh-keyをVagrantへコピー。sshやgit cloneなどHost側と同じ設定で行える\n # sshを多様する場合は ~/.ssh/config をコピーしてもよいかも。\n\n  - fileName: &quot;id_rsa.pub&quot;\n    localPath: &quot;~/.ssh/id_rsa.pub&quot;\n    command: &quot;cat /vagrant/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; rm /vagrant/id_rsa.pub&quot;\n  - fileName: &quot;id_rsa&quot;\n    localPath: &quot;~/.ssh/id_rsa&quot;\n    command: &quot;cp /vagrant/id_rsa ~/.ssh/id_rsa &amp;&amp; rm /vagrant/id_rsa&quot;\n  - fileName: &quot;.bash_aliases&quot;\n    localPath: &quot;~/.bash_aliases&quot;\n    command: &quot;cp /vagrant/.bash_aliases ~/.bash_aliases &amp;&amp; rm /vagrant/.bash_aliases&quot;</code></pre>\n<p>Vagrantfile         </p>\n<pre><code class=\"language-bash\"># provision/settings-local.yml を load する\nrequire &#039;yaml&#039;\nsettings = YAML.load_file &#039;provision/settings_local.yaml&#039;\n\n# provision/settings-local.yml 内 copyFiles: をHost側の ~/vagrant/box名/ にコピーする。\n# ここに置かれたファイルはVagrant 立ち上げ時Vagrant側 /vagrant/へコピーされる \nsettings[&#039;copyFiles&#039;].each do |i|\n  system(&#039;cp &#039; + i[&#039;localPath&#039;] + &#039; &#039; + Dir.home + &#039;/vagrant/&#039; + settings[&#039;vm&#039;][&#039;boxName&#039;]+ &#039;/&#039; + i[&#039;fileName&#039;])\nend\n\n# provision/settings-local.yml 内の sync: の共有ディレクトリをマウント\n# マウントタイプは デフォルトの virtualbox にしてますが Mac の場合は nfs もあり。\n# nfs は早いがパーミッションにちょっと難あり? Win なら SMB?\nsettings[&#039;sync&#039;][&#039;dir&#039;].each do |i|\n  #config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;nfs&quot;, nfs_export: true\n  config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;virtualbox&quot;\n  end\n\n# provision.sh では wget git をインストール しています。\n  config.vm.provision :shell, :path =&gt; &quot;provision/provision.sh&quot;\n\n# privileged: false はroot権限でなく一般ユーザー権限で実行\n# ここでは bash_id, vim (lua,python3....)をインストール \n  config.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/privileged.sh&quot;\n\n# provision/settings-local.yml 内 copyFiles: のコマンド実行\n# run: &quot;always&quot; は Vagrant立ち上げ時 vagrant up --provision としなくても vagrant up でも実行される。\nsettings[&#039;copyFiles&#039;].each do |i|\n        $script = i[&#039;command&#039;]\n        config.vm.provision :shell, run: &quot;always&quot;, privileged: false, inline: $script\n    end\n\n# Vagrant側のHost名を設定 \n $host_script = &quot;hostnamectl set-hostname &quot; + settings[&#039;vm&#039;][&#039;hostName&#039;].to_s\n   config.vm.provision :shell, run: &quot;always&quot;, inline: $host_script\n\n# この場合は~/.ssh/configに\n# host *\n# 10     StrictHostKeyChecking no \n# を追記。ssh接続の際の確認メッセージを無視する。\n# vimrcをレポジトリからダウンロード をしてます。\nconfig.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/custom_after.sh&quot;\n</code></pre>\n<p>~/vagrant/box_name に配置。        </p>\n<pre><code class=\"language-bash\">$ cd ~/vagrant/box_name/      \n$ vagrant up      </code></pre>\n<p>でインストール開始。初回起動時はboxを生成するため時間がかかります。<br />\n壊れても </p>\n<pre><code class=\"language-bash\">$ vagrant up --provision</code></pre>\n<p>すれば再生成されます。(時間かかるけど...)</p>','汎用的なVagrant( CentOS7 )',' \' vagrant up\' ワンコマンドで Git, Vimをインストール。ホスと側ssh-keyをコピー、.vimrcを git cloneする。\'すぐに使える\'がテーマ。\r\n設定ファイルを外部ファイル化し使い回しも楽。 ','publish','closed','open','','vagrant-template-centos7','','','2019-09-23 20:11:38','2019-09-23 11:11:38','## おれおれVagrantfile\r\nといっても特別なにかすごいことやってるわけでなく汎用的なテンプレートです。       \r\nDockerのようなコンテナ型ではなくガチのCentOS上で何か実験したい、遊びたい時などなど用途です。    \r\n毎回一から構築するのは<span class=\"under_line\">めんどくさい</span>ので VagrantのProvisioningで自動化します。\r\n\r\nVirtualBOx,Vagrantはインストール済み前提です。\r\n[Source](https://github.com/WEBDIMENSION/vagrant-centos7)       \r\n\r\n\r\nprovision/provision/settings_local.yaml         \r\n\r\n\r\n```bash\r\nvm:\r\n # Box名 なんでも可 \r\n boxName: &quot;centos7&quot;\r\n # 元となるboxのURL\r\n boxURL: &quot;https://vagrantcloud.com/centos/boxes/7/versions/1905.1/providers/virtualbox.box&quot;\r\n # IPアドレスを指定\r\n localIP: &quot;192.168.33.100&quot;\r\nsync:\r\n # 同期するディレクトリを配列で指定\r\n  dir:\r\n    - localPath: &quot;../../workspace/http_doc&quot;\r\n      vmPath: &quot;/var/www/html&quot;\r\n    - localPath: &quot;../../workspace/mysql&quot;\r\n      vmPath: &quot;/var/lib/mysql&quot;\r\ncopyFiles:\r\n # Vagrantへコピーしたいファイル配列で指定\r\n # localPathで指定したファイルがVagrant上 /vagrant/に　fileNameに指定した名前でコピーされる。\r\n # command: に記述したコマンドを実行される。\r\n # 下記ではHost側のssh-keyをVagrantへコピー。sshやgit cloneなどHost側と同じ設定で行える\r\n # sshを多様する場合は ~/.ssh/config をコピーしてもよいかも。\r\n \r\n  - fileName: &quot;id_rsa.pub&quot;\r\n    localPath: &quot;~/.ssh/id_rsa.pub&quot;\r\n    command: &quot;cat /vagrant/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; rm /vagrant/id_rsa.pub&quot;\r\n  - fileName: &quot;id_rsa&quot;\r\n    localPath: &quot;~/.ssh/id_rsa&quot;\r\n    command: &quot;cp /vagrant/id_rsa ~/.ssh/id_rsa &amp;&amp; rm /vagrant/id_rsa&quot;\r\n  - fileName: &quot;.bash_aliases&quot;\r\n    localPath: &quot;~/.bash_aliases&quot;\r\n    command: &quot;cp /vagrant/.bash_aliases ~/.bash_aliases &amp;&amp; rm /vagrant/.bash_aliases&quot;\r\n```\r\nVagrantfile         \r\n```bash\r\n# provision/settings-local.yml を load する\r\nrequire &#039;yaml&#039;\r\nsettings = YAML.load_file &#039;provision/settings_local.yaml&#039;\r\n\r\n# provision/settings-local.yml 内 copyFiles: をHost側の ~/vagrant/box名/ にコピーする。\r\n# ここに置かれたファイルはVagrant 立ち上げ時Vagrant側 /vagrant/へコピーされる \r\nsettings[&#039;copyFiles&#039;].each do |i|\r\n  system(&#039;cp &#039; + i[&#039;localPath&#039;] + &#039; &#039; + Dir.home + &#039;/vagrant/&#039; + settings[&#039;vm&#039;][&#039;boxName&#039;]+ &#039;/&#039; + i[&#039;fileName&#039;])\r\nend\r\n\r\n# provision/settings-local.yml 内の sync: の共有ディレクトリをマウント\r\n# マウントタイプは デフォルトの virtualbox にしてますが Mac の場合は nfs もあり。\r\n# nfs は早いがパーミッションにちょっと難あり? Win なら SMB?\r\nsettings[&#039;sync&#039;][&#039;dir&#039;].each do |i|\r\n  #config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;nfs&quot;, nfs_export: true\r\n  config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;virtualbox&quot;\r\n  end\r\n \r\n# provision.sh では wget git をインストール しています。\r\n  config.vm.provision :shell, :path =&gt; &quot;provision/provision.sh&quot;\r\n  \r\n# privileged: false はroot権限でなく一般ユーザー権限で実行\r\n# ここでは bash_id, vim (lua,python3....)をインストール \r\n  config.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/privileged.sh&quot;\r\n\r\n# provision/settings-local.yml 内 copyFiles: のコマンド実行\r\n# run: &quot;always&quot; は Vagrant立ち上げ時 vagrant up --provision としなくても vagrant up でも実行される。\r\nsettings[&#039;copyFiles&#039;].each do |i|\r\n        $script = i[&#039;command&#039;]\r\n        config.vm.provision :shell, run: &quot;always&quot;, privileged: false, inline: $script\r\n    end\r\n\r\n# Vagrant側のHost名を設定 \r\n $host_script = &quot;hostnamectl set-hostname &quot; + settings[&#039;vm&#039;][&#039;hostName&#039;].to_s\r\n   config.vm.provision :shell, run: &quot;always&quot;, inline: $host_script\r\n\r\n# この場合は~/.ssh/configに\r\n# host *\r\n# 10     StrictHostKeyChecking no \r\n# を追記。ssh接続の際の確認メッセージを無視する。\r\n# vimrcをレポジトリからダウンロード をしてます。\r\nconfig.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/custom_after.sh&quot;\r\n\r\n```\r\n\r\n~/vagrant/box_name に配置。        \r\n```bash\r\n$ cd ~/vagrant/box_name/      \r\n$ vagrant up      \r\n```\r\nでインストール開始。初回起動時はboxを生成するため時間がかかります。     \r\n壊れても \r\n```bash\r\n$ vagrant up --provision\r\n```\r\nすれば再生成されます。(時間かかるけど...)\r\n\r\n',0,'https://blog.webdimension.jp/?p=154',0,'post','',0),(155,1,'2019-09-15 11:33:56','2019-09-15 02:33:56','<h1>おれおれVagrant(CentOS7)テンプレート</h1>\n<p>といっても特別なにかすごいことやってるわけでなく汎用的なテンプレートです。<br />\nDockerのようなコンテナ型ではなくガチのCentOS上で何か実験したい、遊びたい時などなど用途です。<br />\nVirtualBOx,Vagrantはインストール済み前提です。\n<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>       </p>\n<p>provision/provision/settings_local.yaml         </p>\n<pre><code>vm:\n # Box名 なんでも可 \n boxName: &quot;centos7&quot;\n # 元となるboxのURL\n boxURL: &quot;https://vagrantcloud.com/centos/boxes/7/versions/1905.1/providers/virtualbox.box&quot;\n # IPアドレスを指定\n localIP: &quot;192.168.33.100&quot;\nsync:\n # 同期するディレクトリを配列で指定\n  dir:\n    - localPath: &quot;../../workspace/http_doc&quot;\n      vmPath: &quot;/var/www/html&quot;\n    - localPath: &quot;../../workspace/mysql&quot;\n      vmPath: &quot;/var/lib/mysql&quot;\ncopyFiles:\n # Vagrantへコピーしたいファイル配列で指定\n # localPathで指定したファイルがVagrant上 /vagrant/に　fileNameに指定した名前でコピーされる。\n # command: に記述したコマンドを実行される。\n # 下記ではHost側のssh-keyをVagrantへコピー。sshやgit cloneなどHost側と同じ設定で行える\n # sshを多様する場合は ~/.ssh/config をコピーしてもよいかも。\n\n  - fileName: &quot;id_rsa.pub&quot;\n    localPath: &quot;~/.ssh/id_rsa.pub&quot;\n    command: &quot;cat /vagrant/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; rm /vagrant/id_rsa.pub&quot;\n  - fileName: &quot;id_rsa&quot;\n    localPath: &quot;~/.ssh/id_rsa&quot;\n    command: &quot;cp /vagrant/id_rsa ~/.ssh/id_rsa &amp;&amp; rm /vagrant/id_rsa&quot;\n  - fileName: &quot;.bash_aliases&quot;\n    localPath: &quot;~/.bash_aliases&quot;\n    command: &quot;cp /vagrant/.bash_aliases ~/.bash_aliases &amp;&amp; rm /vagrant/.bash_aliases&quot;</code></pre>\n<p>Vagrantfile         </p>\n<pre><code># provision/settings-local.yml を load する\nrequire &#039;yaml&#039;\nsettings = YAML.load_file &#039;provision/settings_local.yaml&#039;\n\n# provision/settings-local.yml 内 copyFiles: をHost側の ~/vagrant/box名/ にコピーする。\n# ここに置かれたファイルはVagrant 立ち上げ時Vagrant側 /vagrant/へコピーされる \nsettings[&#039;copyFiles&#039;].each do |i|\n  system(&#039;cp &#039; + i[&#039;localPath&#039;] + &#039; &#039; + Dir.home + &#039;/vagrant/&#039; + settings[&#039;vm&#039;][&#039;boxName&#039;]+ &#039;/&#039; + i[&#039;fileName&#039;])\nend\n\n# provision/settings-local.yml 内の sync: の共有ディレクトリをマウント\n# マウントタイプは デフォルトの virtualbox にしてますが Mac の場合は nfs もあり。\n# nfs は早いがパーミッションにちょっと難あり? Win なら SMB?\nsettings[&#039;sync&#039;][&#039;dir&#039;].each do |i|\n  #config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;nfs&quot;, nfs_export: true\n  config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;virtualbox&quot;\n  end\n\n# provision.sh では wget git をインストール しています。\n  config.vm.provision :shell, :path =&gt; &quot;provision/provision.sh&quot;\n\n# privileged: false はroot権限でなく一般ユーザー権限で実行\n# ここでは bash_id, vim (lua,python3....)をインストール \n  config.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/privileged.sh&quot;\n\n# provision/settings-local.yml 内 copyFiles: のコマンド実行\n# run: &quot;always&quot; は Vagrant立ち上げ時 vagrant up --provision としなくても vagrant up でも実行される。\nsettings[&#039;copyFiles&#039;].each do |i|\n        $script = i[&#039;command&#039;]\n        config.vm.provision :shell, run: &quot;always&quot;, privileged: false, inline: $script\n    end\n\n# Vagrant側のHost名を設定 \n $host_script = &quot;hostnamectl set-hostname &quot; + settings[&#039;vm&#039;][&#039;hostName&#039;].to_s\n   config.vm.provision :shell, run: &quot;always&quot;, inline: $host_script\n\n# この場合は~/.ssh/configに\n# host *\n# 10     StrictHostKeyChecking no \n# を追記。ssh接続の際の確認メッセージを無視する。\n# vimrcをレポジトリからダウンロード をしてます。\nconfig.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/custom_after.sh&quot;\n</code></pre>\n<p>~/vagrant/box_name に配置。        </p>\n<pre><code>$ cd ~/vagrant/box_name/      \n$ vagrant up      </code></pre>\n<p>でインストール開始。初回起動時はboxを生成するため時間がかかります。<br />\n壊れても </p>\n<pre><code>$ vagrant up --provision</code></pre>\n<p>すれば再生成されます。(時間かかるけど...)</p>','汎用的なVagrant( CentOS7 )',' \' vagrant up\' ワンコマンドで Git, Vimをインストール。ホスと側ssh-keyをコピー、.vimrcを git cloneする。\'すぐに使える\'がテーマ。\r\n設定ファイルを外部ファイル化し使い回しも楽。 ','inherit','closed','closed','','154-revision-v1','','','2019-09-15 11:33:56','2019-09-15 02:33:56','# おれおれVagrant(CentOS7)テンプレート\r\nといっても特別なにかすごいことやってるわけでなく汎用的なテンプレートです。       \r\nDockerのようなコンテナ型ではなくガチのCentOS上で何か実験したい、遊びたい時などなど用途です。    \r\nVirtualBOx,Vagrantはインストール済み前提です。\r\n[Source](https://github.com/WEBDIMENSION/vagrant-centos7)       \r\n\r\n\r\nprovision/provision/settings_local.yaml         \r\n```\r\nvm:\r\n # Box名 なんでも可 \r\n boxName: &quot;centos7&quot;\r\n # 元となるboxのURL\r\n boxURL: &quot;https://vagrantcloud.com/centos/boxes/7/versions/1905.1/providers/virtualbox.box&quot;\r\n # IPアドレスを指定\r\n localIP: &quot;192.168.33.100&quot;\r\nsync:\r\n # 同期するディレクトリを配列で指定\r\n  dir:\r\n    - localPath: &quot;../../workspace/http_doc&quot;\r\n      vmPath: &quot;/var/www/html&quot;\r\n    - localPath: &quot;../../workspace/mysql&quot;\r\n      vmPath: &quot;/var/lib/mysql&quot;\r\ncopyFiles:\r\n # Vagrantへコピーしたいファイル配列で指定\r\n # localPathで指定したファイルがVagrant上 /vagrant/に　fileNameに指定した名前でコピーされる。\r\n # command: に記述したコマンドを実行される。\r\n # 下記ではHost側のssh-keyをVagrantへコピー。sshやgit cloneなどHost側と同じ設定で行える\r\n # sshを多様する場合は ~/.ssh/config をコピーしてもよいかも。\r\n \r\n  - fileName: &quot;id_rsa.pub&quot;\r\n    localPath: &quot;~/.ssh/id_rsa.pub&quot;\r\n    command: &quot;cat /vagrant/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; rm /vagrant/id_rsa.pub&quot;\r\n  - fileName: &quot;id_rsa&quot;\r\n    localPath: &quot;~/.ssh/id_rsa&quot;\r\n    command: &quot;cp /vagrant/id_rsa ~/.ssh/id_rsa &amp;&amp; rm /vagrant/id_rsa&quot;\r\n  - fileName: &quot;.bash_aliases&quot;\r\n    localPath: &quot;~/.bash_aliases&quot;\r\n    command: &quot;cp /vagrant/.bash_aliases ~/.bash_aliases &amp;&amp; rm /vagrant/.bash_aliases&quot;\r\n```\r\nVagrantfile         \r\n```\r\n# provision/settings-local.yml を load する\r\nrequire &#039;yaml&#039;\r\nsettings = YAML.load_file &#039;provision/settings_local.yaml&#039;\r\n\r\n# provision/settings-local.yml 内 copyFiles: をHost側の ~/vagrant/box名/ にコピーする。\r\n# ここに置かれたファイルはVagrant 立ち上げ時Vagrant側 /vagrant/へコピーされる \r\nsettings[&#039;copyFiles&#039;].each do |i|\r\n  system(&#039;cp &#039; + i[&#039;localPath&#039;] + &#039; &#039; + Dir.home + &#039;/vagrant/&#039; + settings[&#039;vm&#039;][&#039;boxName&#039;]+ &#039;/&#039; + i[&#039;fileName&#039;])\r\nend\r\n\r\n# provision/settings-local.yml 内の sync: の共有ディレクトリをマウント\r\n# マウントタイプは デフォルトの virtualbox にしてますが Mac の場合は nfs もあり。\r\n# nfs は早いがパーミッションにちょっと難あり? Win なら SMB?\r\nsettings[&#039;sync&#039;][&#039;dir&#039;].each do |i|\r\n  #config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;nfs&quot;, nfs_export: true\r\n  config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;virtualbox&quot;\r\n  end\r\n \r\n# provision.sh では wget git をインストール しています。\r\n  config.vm.provision :shell, :path =&gt; &quot;provision/provision.sh&quot;\r\n  \r\n# privileged: false はroot権限でなく一般ユーザー権限で実行\r\n# ここでは bash_id, vim (lua,python3....)をインストール \r\n  config.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/privileged.sh&quot;\r\n\r\n# provision/settings-local.yml 内 copyFiles: のコマンド実行\r\n# run: &quot;always&quot; は Vagrant立ち上げ時 vagrant up --provision としなくても vagrant up でも実行される。\r\nsettings[&#039;copyFiles&#039;].each do |i|\r\n        $script = i[&#039;command&#039;]\r\n        config.vm.provision :shell, run: &quot;always&quot;, privileged: false, inline: $script\r\n    end\r\n\r\n# Vagrant側のHost名を設定 \r\n $host_script = &quot;hostnamectl set-hostname &quot; + settings[&#039;vm&#039;][&#039;hostName&#039;].to_s\r\n   config.vm.provision :shell, run: &quot;always&quot;, inline: $host_script\r\n\r\n# この場合は~/.ssh/configに\r\n# host *\r\n# 10     StrictHostKeyChecking no \r\n# を追記。ssh接続の際の確認メッセージを無視する。\r\n# vimrcをレポジトリからダウンロード をしてます。\r\nconfig.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/custom_after.sh&quot;\r\n\r\n```\r\n\r\n~/vagrant/box_name に配置。        \r\n```\r\n$ cd ~/vagrant/box_name/      \r\n$ vagrant up      \r\n```\r\nでインストール開始。初回起動時はboxを生成するため時間がかかります。     \r\n壊れても \r\n```\r\n$ vagrant up --provision\r\n```\r\nすれば再生成されます。(時間かかるけど...)\r\n\r\n',154,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/154-revision-v1/',0,'revision','',0),(156,1,'2019-09-15 11:34:49','2019-09-15 02:34:49','<h2>おれおれVagrant(CentOS7)テンプレート</h2>\n<p>といっても特別なにかすごいことやってるわけでなく汎用的なテンプレートです。<br />\nDockerのようなコンテナ型ではなくガチのCentOS上で何か実験したい、遊びたい時などなど用途です。<br />\nVirtualBOx,Vagrantはインストール済み前提です。\n<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>       </p>\n<p>provision/provision/settings_local.yaml         </p>\n<pre><code>vm:\n # Box名 なんでも可 \n boxName: &quot;centos7&quot;\n # 元となるboxのURL\n boxURL: &quot;https://vagrantcloud.com/centos/boxes/7/versions/1905.1/providers/virtualbox.box&quot;\n # IPアドレスを指定\n localIP: &quot;192.168.33.100&quot;\nsync:\n # 同期するディレクトリを配列で指定\n  dir:\n    - localPath: &quot;../../workspace/http_doc&quot;\n      vmPath: &quot;/var/www/html&quot;\n    - localPath: &quot;../../workspace/mysql&quot;\n      vmPath: &quot;/var/lib/mysql&quot;\ncopyFiles:\n # Vagrantへコピーしたいファイル配列で指定\n # localPathで指定したファイルがVagrant上 /vagrant/に　fileNameに指定した名前でコピーされる。\n # command: に記述したコマンドを実行される。\n # 下記ではHost側のssh-keyをVagrantへコピー。sshやgit cloneなどHost側と同じ設定で行える\n # sshを多様する場合は ~/.ssh/config をコピーしてもよいかも。\n\n  - fileName: &quot;id_rsa.pub&quot;\n    localPath: &quot;~/.ssh/id_rsa.pub&quot;\n    command: &quot;cat /vagrant/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; rm /vagrant/id_rsa.pub&quot;\n  - fileName: &quot;id_rsa&quot;\n    localPath: &quot;~/.ssh/id_rsa&quot;\n    command: &quot;cp /vagrant/id_rsa ~/.ssh/id_rsa &amp;&amp; rm /vagrant/id_rsa&quot;\n  - fileName: &quot;.bash_aliases&quot;\n    localPath: &quot;~/.bash_aliases&quot;\n    command: &quot;cp /vagrant/.bash_aliases ~/.bash_aliases &amp;&amp; rm /vagrant/.bash_aliases&quot;</code></pre>\n<p>Vagrantfile         </p>\n<pre><code># provision/settings-local.yml を load する\nrequire &#039;yaml&#039;\nsettings = YAML.load_file &#039;provision/settings_local.yaml&#039;\n\n# provision/settings-local.yml 内 copyFiles: をHost側の ~/vagrant/box名/ にコピーする。\n# ここに置かれたファイルはVagrant 立ち上げ時Vagrant側 /vagrant/へコピーされる \nsettings[&#039;copyFiles&#039;].each do |i|\n  system(&#039;cp &#039; + i[&#039;localPath&#039;] + &#039; &#039; + Dir.home + &#039;/vagrant/&#039; + settings[&#039;vm&#039;][&#039;boxName&#039;]+ &#039;/&#039; + i[&#039;fileName&#039;])\nend\n\n# provision/settings-local.yml 内の sync: の共有ディレクトリをマウント\n# マウントタイプは デフォルトの virtualbox にしてますが Mac の場合は nfs もあり。\n# nfs は早いがパーミッションにちょっと難あり? Win なら SMB?\nsettings[&#039;sync&#039;][&#039;dir&#039;].each do |i|\n  #config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;nfs&quot;, nfs_export: true\n  config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;virtualbox&quot;\n  end\n\n# provision.sh では wget git をインストール しています。\n  config.vm.provision :shell, :path =&gt; &quot;provision/provision.sh&quot;\n\n# privileged: false はroot権限でなく一般ユーザー権限で実行\n# ここでは bash_id, vim (lua,python3....)をインストール \n  config.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/privileged.sh&quot;\n\n# provision/settings-local.yml 内 copyFiles: のコマンド実行\n# run: &quot;always&quot; は Vagrant立ち上げ時 vagrant up --provision としなくても vagrant up でも実行される。\nsettings[&#039;copyFiles&#039;].each do |i|\n        $script = i[&#039;command&#039;]\n        config.vm.provision :shell, run: &quot;always&quot;, privileged: false, inline: $script\n    end\n\n# Vagrant側のHost名を設定 \n $host_script = &quot;hostnamectl set-hostname &quot; + settings[&#039;vm&#039;][&#039;hostName&#039;].to_s\n   config.vm.provision :shell, run: &quot;always&quot;, inline: $host_script\n\n# この場合は~/.ssh/configに\n# host *\n# 10     StrictHostKeyChecking no \n# を追記。ssh接続の際の確認メッセージを無視する。\n# vimrcをレポジトリからダウンロード をしてます。\nconfig.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/custom_after.sh&quot;\n</code></pre>\n<p>~/vagrant/box_name に配置。        </p>\n<pre><code>$ cd ~/vagrant/box_name/      \n$ vagrant up      </code></pre>\n<p>でインストール開始。初回起動時はboxを生成するため時間がかかります。<br />\n壊れても </p>\n<pre><code>$ vagrant up --provision</code></pre>\n<p>すれば再生成されます。(時間かかるけど...)</p>','汎用的なVagrant( CentOS7 )',' \' vagrant up\' ワンコマンドで Git, Vimをインストール。ホスと側ssh-keyをコピー、.vimrcを git cloneする。\'すぐに使える\'がテーマ。\r\n設定ファイルを外部ファイル化し使い回しも楽。 ','inherit','closed','closed','','154-revision-v1','','','2019-09-15 11:34:49','2019-09-15 02:34:49','## おれおれVagrant(CentOS7)テンプレート\r\nといっても特別なにかすごいことやってるわけでなく汎用的なテンプレートです。       \r\nDockerのようなコンテナ型ではなくガチのCentOS上で何か実験したい、遊びたい時などなど用途です。    \r\nVirtualBOx,Vagrantはインストール済み前提です。\r\n[Source](https://github.com/WEBDIMENSION/vagrant-centos7)       \r\n\r\n\r\nprovision/provision/settings_local.yaml         \r\n```\r\nvm:\r\n # Box名 なんでも可 \r\n boxName: &quot;centos7&quot;\r\n # 元となるboxのURL\r\n boxURL: &quot;https://vagrantcloud.com/centos/boxes/7/versions/1905.1/providers/virtualbox.box&quot;\r\n # IPアドレスを指定\r\n localIP: &quot;192.168.33.100&quot;\r\nsync:\r\n # 同期するディレクトリを配列で指定\r\n  dir:\r\n    - localPath: &quot;../../workspace/http_doc&quot;\r\n      vmPath: &quot;/var/www/html&quot;\r\n    - localPath: &quot;../../workspace/mysql&quot;\r\n      vmPath: &quot;/var/lib/mysql&quot;\r\ncopyFiles:\r\n # Vagrantへコピーしたいファイル配列で指定\r\n # localPathで指定したファイルがVagrant上 /vagrant/に　fileNameに指定した名前でコピーされる。\r\n # command: に記述したコマンドを実行される。\r\n # 下記ではHost側のssh-keyをVagrantへコピー。sshやgit cloneなどHost側と同じ設定で行える\r\n # sshを多様する場合は ~/.ssh/config をコピーしてもよいかも。\r\n \r\n  - fileName: &quot;id_rsa.pub&quot;\r\n    localPath: &quot;~/.ssh/id_rsa.pub&quot;\r\n    command: &quot;cat /vagrant/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; rm /vagrant/id_rsa.pub&quot;\r\n  - fileName: &quot;id_rsa&quot;\r\n    localPath: &quot;~/.ssh/id_rsa&quot;\r\n    command: &quot;cp /vagrant/id_rsa ~/.ssh/id_rsa &amp;&amp; rm /vagrant/id_rsa&quot;\r\n  - fileName: &quot;.bash_aliases&quot;\r\n    localPath: &quot;~/.bash_aliases&quot;\r\n    command: &quot;cp /vagrant/.bash_aliases ~/.bash_aliases &amp;&amp; rm /vagrant/.bash_aliases&quot;\r\n```\r\nVagrantfile         \r\n```\r\n# provision/settings-local.yml を load する\r\nrequire &#039;yaml&#039;\r\nsettings = YAML.load_file &#039;provision/settings_local.yaml&#039;\r\n\r\n# provision/settings-local.yml 内 copyFiles: をHost側の ~/vagrant/box名/ にコピーする。\r\n# ここに置かれたファイルはVagrant 立ち上げ時Vagrant側 /vagrant/へコピーされる \r\nsettings[&#039;copyFiles&#039;].each do |i|\r\n  system(&#039;cp &#039; + i[&#039;localPath&#039;] + &#039; &#039; + Dir.home + &#039;/vagrant/&#039; + settings[&#039;vm&#039;][&#039;boxName&#039;]+ &#039;/&#039; + i[&#039;fileName&#039;])\r\nend\r\n\r\n# provision/settings-local.yml 内の sync: の共有ディレクトリをマウント\r\n# マウントタイプは デフォルトの virtualbox にしてますが Mac の場合は nfs もあり。\r\n# nfs は早いがパーミッションにちょっと難あり? Win なら SMB?\r\nsettings[&#039;sync&#039;][&#039;dir&#039;].each do |i|\r\n  #config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;nfs&quot;, nfs_export: true\r\n  config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;virtualbox&quot;\r\n  end\r\n \r\n# provision.sh では wget git をインストール しています。\r\n  config.vm.provision :shell, :path =&gt; &quot;provision/provision.sh&quot;\r\n  \r\n# privileged: false はroot権限でなく一般ユーザー権限で実行\r\n# ここでは bash_id, vim (lua,python3....)をインストール \r\n  config.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/privileged.sh&quot;\r\n\r\n# provision/settings-local.yml 内 copyFiles: のコマンド実行\r\n# run: &quot;always&quot; は Vagrant立ち上げ時 vagrant up --provision としなくても vagrant up でも実行される。\r\nsettings[&#039;copyFiles&#039;].each do |i|\r\n        $script = i[&#039;command&#039;]\r\n        config.vm.provision :shell, run: &quot;always&quot;, privileged: false, inline: $script\r\n    end\r\n\r\n# Vagrant側のHost名を設定 \r\n $host_script = &quot;hostnamectl set-hostname &quot; + settings[&#039;vm&#039;][&#039;hostName&#039;].to_s\r\n   config.vm.provision :shell, run: &quot;always&quot;, inline: $host_script\r\n\r\n# この場合は~/.ssh/configに\r\n# host *\r\n# 10     StrictHostKeyChecking no \r\n# を追記。ssh接続の際の確認メッセージを無視する。\r\n# vimrcをレポジトリからダウンロード をしてます。\r\nconfig.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/custom_after.sh&quot;\r\n\r\n```\r\n\r\n~/vagrant/box_name に配置。        \r\n```\r\n$ cd ~/vagrant/box_name/      \r\n$ vagrant up      \r\n```\r\nでインストール開始。初回起動時はboxを生成するため時間がかかります。     \r\n壊れても \r\n```\r\n$ vagrant up --provision\r\n```\r\nすれば再生成されます。(時間かかるけど...)\r\n\r\n',154,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/154-revision-v1/',0,'revision','',0),(157,1,'2019-09-15 11:36:06','2019-09-15 02:36:06','<h2>おれおれVagrant(CentOS7)テンプレート</h2>\n<p>といっても特別なにかすごいことやってるわけでなく汎用的なテンプレートです。<br />\nDockerのようなコンテナ型ではなくガチのCentOS上で何か実験したい、遊びたい時などなど用途です。<br />\nVirtualBOx,Vagrantはインストール済み前提です。\n<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>       </p>\n<p>provision/provision/settings_local.yaml         </p>\n<pre><code class=\"language-bash\">vm:\n # Box名 なんでも可 \n boxName: &quot;centos7&quot;\n # 元となるboxのURL\n boxURL: &quot;https://vagrantcloud.com/centos/boxes/7/versions/1905.1/providers/virtualbox.box&quot;\n # IPアドレスを指定\n localIP: &quot;192.168.33.100&quot;\nsync:\n # 同期するディレクトリを配列で指定\n  dir:\n    - localPath: &quot;../../workspace/http_doc&quot;\n      vmPath: &quot;/var/www/html&quot;\n    - localPath: &quot;../../workspace/mysql&quot;\n      vmPath: &quot;/var/lib/mysql&quot;\ncopyFiles:\n # Vagrantへコピーしたいファイル配列で指定\n # localPathで指定したファイルがVagrant上 /vagrant/に　fileNameに指定した名前でコピーされる。\n # command: に記述したコマンドを実行される。\n # 下記ではHost側のssh-keyをVagrantへコピー。sshやgit cloneなどHost側と同じ設定で行える\n # sshを多様する場合は ~/.ssh/config をコピーしてもよいかも。\n\n  - fileName: &quot;id_rsa.pub&quot;\n    localPath: &quot;~/.ssh/id_rsa.pub&quot;\n    command: &quot;cat /vagrant/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; rm /vagrant/id_rsa.pub&quot;\n  - fileName: &quot;id_rsa&quot;\n    localPath: &quot;~/.ssh/id_rsa&quot;\n    command: &quot;cp /vagrant/id_rsa ~/.ssh/id_rsa &amp;&amp; rm /vagrant/id_rsa&quot;\n  - fileName: &quot;.bash_aliases&quot;\n    localPath: &quot;~/.bash_aliases&quot;\n    command: &quot;cp /vagrant/.bash_aliases ~/.bash_aliases &amp;&amp; rm /vagrant/.bash_aliases&quot;</code></pre>\n<p>Vagrantfile         </p>\n<pre><code class=\"language-bash\"># provision/settings-local.yml を load する\nrequire &#039;yaml&#039;\nsettings = YAML.load_file &#039;provision/settings_local.yaml&#039;\n\n# provision/settings-local.yml 内 copyFiles: をHost側の ~/vagrant/box名/ にコピーする。\n# ここに置かれたファイルはVagrant 立ち上げ時Vagrant側 /vagrant/へコピーされる \nsettings[&#039;copyFiles&#039;].each do |i|\n  system(&#039;cp &#039; + i[&#039;localPath&#039;] + &#039; &#039; + Dir.home + &#039;/vagrant/&#039; + settings[&#039;vm&#039;][&#039;boxName&#039;]+ &#039;/&#039; + i[&#039;fileName&#039;])\nend\n\n# provision/settings-local.yml 内の sync: の共有ディレクトリをマウント\n# マウントタイプは デフォルトの virtualbox にしてますが Mac の場合は nfs もあり。\n# nfs は早いがパーミッションにちょっと難あり? Win なら SMB?\nsettings[&#039;sync&#039;][&#039;dir&#039;].each do |i|\n  #config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;nfs&quot;, nfs_export: true\n  config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;virtualbox&quot;\n  end\n\n# provision.sh では wget git をインストール しています。\n  config.vm.provision :shell, :path =&gt; &quot;provision/provision.sh&quot;\n\n# privileged: false はroot権限でなく一般ユーザー権限で実行\n# ここでは bash_id, vim (lua,python3....)をインストール \n  config.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/privileged.sh&quot;\n\n# provision/settings-local.yml 内 copyFiles: のコマンド実行\n# run: &quot;always&quot; は Vagrant立ち上げ時 vagrant up --provision としなくても vagrant up でも実行される。\nsettings[&#039;copyFiles&#039;].each do |i|\n        $script = i[&#039;command&#039;]\n        config.vm.provision :shell, run: &quot;always&quot;, privileged: false, inline: $script\n    end\n\n# Vagrant側のHost名を設定 \n $host_script = &quot;hostnamectl set-hostname &quot; + settings[&#039;vm&#039;][&#039;hostName&#039;].to_s\n   config.vm.provision :shell, run: &quot;always&quot;, inline: $host_script\n\n# この場合は~/.ssh/configに\n# host *\n# 10     StrictHostKeyChecking no \n# を追記。ssh接続の際の確認メッセージを無視する。\n# vimrcをレポジトリからダウンロード をしてます。\nconfig.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/custom_after.sh&quot;\n</code></pre>\n<p>~/vagrant/box_name に配置。        </p>\n<pre><code class=\"language-bash\">$ cd ~/vagrant/box_name/      \n$ vagrant up      </code></pre>\n<p>でインストール開始。初回起動時はboxを生成するため時間がかかります。<br />\n壊れても </p>\n<pre><code class=\"language-bash\">$ vagrant up --provision</code></pre>\n<p>すれば再生成されます。(時間かかるけど...)</p>','汎用的なVagrant( CentOS7 )',' \' vagrant up\' ワンコマンドで Git, Vimをインストール。ホスと側ssh-keyをコピー、.vimrcを git cloneする。\'すぐに使える\'がテーマ。\r\n設定ファイルを外部ファイル化し使い回しも楽。 ','inherit','closed','closed','','154-revision-v1','','','2019-09-15 11:36:06','2019-09-15 02:36:06','## おれおれVagrant(CentOS7)テンプレート\r\nといっても特別なにかすごいことやってるわけでなく汎用的なテンプレートです。       \r\nDockerのようなコンテナ型ではなくガチのCentOS上で何か実験したい、遊びたい時などなど用途です。    \r\nVirtualBOx,Vagrantはインストール済み前提です。\r\n[Source](https://github.com/WEBDIMENSION/vagrant-centos7)       \r\n\r\n\r\nprovision/provision/settings_local.yaml         \r\n\r\n\r\n```bash\r\nvm:\r\n # Box名 なんでも可 \r\n boxName: &quot;centos7&quot;\r\n # 元となるboxのURL\r\n boxURL: &quot;https://vagrantcloud.com/centos/boxes/7/versions/1905.1/providers/virtualbox.box&quot;\r\n # IPアドレスを指定\r\n localIP: &quot;192.168.33.100&quot;\r\nsync:\r\n # 同期するディレクトリを配列で指定\r\n  dir:\r\n    - localPath: &quot;../../workspace/http_doc&quot;\r\n      vmPath: &quot;/var/www/html&quot;\r\n    - localPath: &quot;../../workspace/mysql&quot;\r\n      vmPath: &quot;/var/lib/mysql&quot;\r\ncopyFiles:\r\n # Vagrantへコピーしたいファイル配列で指定\r\n # localPathで指定したファイルがVagrant上 /vagrant/に　fileNameに指定した名前でコピーされる。\r\n # command: に記述したコマンドを実行される。\r\n # 下記ではHost側のssh-keyをVagrantへコピー。sshやgit cloneなどHost側と同じ設定で行える\r\n # sshを多様する場合は ~/.ssh/config をコピーしてもよいかも。\r\n \r\n  - fileName: &quot;id_rsa.pub&quot;\r\n    localPath: &quot;~/.ssh/id_rsa.pub&quot;\r\n    command: &quot;cat /vagrant/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; rm /vagrant/id_rsa.pub&quot;\r\n  - fileName: &quot;id_rsa&quot;\r\n    localPath: &quot;~/.ssh/id_rsa&quot;\r\n    command: &quot;cp /vagrant/id_rsa ~/.ssh/id_rsa &amp;&amp; rm /vagrant/id_rsa&quot;\r\n  - fileName: &quot;.bash_aliases&quot;\r\n    localPath: &quot;~/.bash_aliases&quot;\r\n    command: &quot;cp /vagrant/.bash_aliases ~/.bash_aliases &amp;&amp; rm /vagrant/.bash_aliases&quot;\r\n```\r\nVagrantfile         \r\n```bash\r\n# provision/settings-local.yml を load する\r\nrequire &#039;yaml&#039;\r\nsettings = YAML.load_file &#039;provision/settings_local.yaml&#039;\r\n\r\n# provision/settings-local.yml 内 copyFiles: をHost側の ~/vagrant/box名/ にコピーする。\r\n# ここに置かれたファイルはVagrant 立ち上げ時Vagrant側 /vagrant/へコピーされる \r\nsettings[&#039;copyFiles&#039;].each do |i|\r\n  system(&#039;cp &#039; + i[&#039;localPath&#039;] + &#039; &#039; + Dir.home + &#039;/vagrant/&#039; + settings[&#039;vm&#039;][&#039;boxName&#039;]+ &#039;/&#039; + i[&#039;fileName&#039;])\r\nend\r\n\r\n# provision/settings-local.yml 内の sync: の共有ディレクトリをマウント\r\n# マウントタイプは デフォルトの virtualbox にしてますが Mac の場合は nfs もあり。\r\n# nfs は早いがパーミッションにちょっと難あり? Win なら SMB?\r\nsettings[&#039;sync&#039;][&#039;dir&#039;].each do |i|\r\n  #config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;nfs&quot;, nfs_export: true\r\n  config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;virtualbox&quot;\r\n  end\r\n \r\n# provision.sh では wget git をインストール しています。\r\n  config.vm.provision :shell, :path =&gt; &quot;provision/provision.sh&quot;\r\n  \r\n# privileged: false はroot権限でなく一般ユーザー権限で実行\r\n# ここでは bash_id, vim (lua,python3....)をインストール \r\n  config.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/privileged.sh&quot;\r\n\r\n# provision/settings-local.yml 内 copyFiles: のコマンド実行\r\n# run: &quot;always&quot; は Vagrant立ち上げ時 vagrant up --provision としなくても vagrant up でも実行される。\r\nsettings[&#039;copyFiles&#039;].each do |i|\r\n        $script = i[&#039;command&#039;]\r\n        config.vm.provision :shell, run: &quot;always&quot;, privileged: false, inline: $script\r\n    end\r\n\r\n# Vagrant側のHost名を設定 \r\n $host_script = &quot;hostnamectl set-hostname &quot; + settings[&#039;vm&#039;][&#039;hostName&#039;].to_s\r\n   config.vm.provision :shell, run: &quot;always&quot;, inline: $host_script\r\n\r\n# この場合は~/.ssh/configに\r\n# host *\r\n# 10     StrictHostKeyChecking no \r\n# を追記。ssh接続の際の確認メッセージを無視する。\r\n# vimrcをレポジトリからダウンロード をしてます。\r\nconfig.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/custom_after.sh&quot;\r\n\r\n```\r\n\r\n~/vagrant/box_name に配置。        \r\n```bash\r\n$ cd ~/vagrant/box_name/      \r\n$ vagrant up      \r\n```\r\nでインストール開始。初回起動時はboxを生成するため時間がかかります。     \r\n壊れても \r\n```bash\r\n$ vagrant up --provision\r\n```\r\nすれば再生成されます。(時間かかるけど...)\r\n\r\n',154,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/154-revision-v1/',0,'revision','',0),(158,1,'2019-09-15 11:50:27','2019-09-15 02:50:27','<h2>おれおれVagrantfile</h2>\n<p>といっても特別なにかすごいことやってるわけでなく汎用的なテンプレートです。<br />\nDockerのようなコンテナ型ではなくガチのCentOS上で何か実験したい、遊びたい時などなど用途です。<br />\nVirtualBOx,Vagrantはインストール済み前提です。\n<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>       </p>\n<p>provision/provision/settings_local.yaml         </p>\n<pre><code class=\"language-bash\">vm:\n # Box名 なんでも可 \n boxName: &quot;centos7&quot;\n # 元となるboxのURL\n boxURL: &quot;https://vagrantcloud.com/centos/boxes/7/versions/1905.1/providers/virtualbox.box&quot;\n # IPアドレスを指定\n localIP: &quot;192.168.33.100&quot;\nsync:\n # 同期するディレクトリを配列で指定\n  dir:\n    - localPath: &quot;../../workspace/http_doc&quot;\n      vmPath: &quot;/var/www/html&quot;\n    - localPath: &quot;../../workspace/mysql&quot;\n      vmPath: &quot;/var/lib/mysql&quot;\ncopyFiles:\n # Vagrantへコピーしたいファイル配列で指定\n # localPathで指定したファイルがVagrant上 /vagrant/に　fileNameに指定した名前でコピーされる。\n # command: に記述したコマンドを実行される。\n # 下記ではHost側のssh-keyをVagrantへコピー。sshやgit cloneなどHost側と同じ設定で行える\n # sshを多様する場合は ~/.ssh/config をコピーしてもよいかも。\n\n  - fileName: &quot;id_rsa.pub&quot;\n    localPath: &quot;~/.ssh/id_rsa.pub&quot;\n    command: &quot;cat /vagrant/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; rm /vagrant/id_rsa.pub&quot;\n  - fileName: &quot;id_rsa&quot;\n    localPath: &quot;~/.ssh/id_rsa&quot;\n    command: &quot;cp /vagrant/id_rsa ~/.ssh/id_rsa &amp;&amp; rm /vagrant/id_rsa&quot;\n  - fileName: &quot;.bash_aliases&quot;\n    localPath: &quot;~/.bash_aliases&quot;\n    command: &quot;cp /vagrant/.bash_aliases ~/.bash_aliases &amp;&amp; rm /vagrant/.bash_aliases&quot;</code></pre>\n<p>Vagrantfile         </p>\n<pre><code class=\"language-bash\"># provision/settings-local.yml を load する\nrequire &#039;yaml&#039;\nsettings = YAML.load_file &#039;provision/settings_local.yaml&#039;\n\n# provision/settings-local.yml 内 copyFiles: をHost側の ~/vagrant/box名/ にコピーする。\n# ここに置かれたファイルはVagrant 立ち上げ時Vagrant側 /vagrant/へコピーされる \nsettings[&#039;copyFiles&#039;].each do |i|\n  system(&#039;cp &#039; + i[&#039;localPath&#039;] + &#039; &#039; + Dir.home + &#039;/vagrant/&#039; + settings[&#039;vm&#039;][&#039;boxName&#039;]+ &#039;/&#039; + i[&#039;fileName&#039;])\nend\n\n# provision/settings-local.yml 内の sync: の共有ディレクトリをマウント\n# マウントタイプは デフォルトの virtualbox にしてますが Mac の場合は nfs もあり。\n# nfs は早いがパーミッションにちょっと難あり? Win なら SMB?\nsettings[&#039;sync&#039;][&#039;dir&#039;].each do |i|\n  #config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;nfs&quot;, nfs_export: true\n  config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;virtualbox&quot;\n  end\n\n# provision.sh では wget git をインストール しています。\n  config.vm.provision :shell, :path =&gt; &quot;provision/provision.sh&quot;\n\n# privileged: false はroot権限でなく一般ユーザー権限で実行\n# ここでは bash_id, vim (lua,python3....)をインストール \n  config.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/privileged.sh&quot;\n\n# provision/settings-local.yml 内 copyFiles: のコマンド実行\n# run: &quot;always&quot; は Vagrant立ち上げ時 vagrant up --provision としなくても vagrant up でも実行される。\nsettings[&#039;copyFiles&#039;].each do |i|\n        $script = i[&#039;command&#039;]\n        config.vm.provision :shell, run: &quot;always&quot;, privileged: false, inline: $script\n    end\n\n# Vagrant側のHost名を設定 \n $host_script = &quot;hostnamectl set-hostname &quot; + settings[&#039;vm&#039;][&#039;hostName&#039;].to_s\n   config.vm.provision :shell, run: &quot;always&quot;, inline: $host_script\n\n# この場合は~/.ssh/configに\n# host *\n# 10     StrictHostKeyChecking no \n# を追記。ssh接続の際の確認メッセージを無視する。\n# vimrcをレポジトリからダウンロード をしてます。\nconfig.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/custom_after.sh&quot;\n</code></pre>\n<p>~/vagrant/box_name に配置。        </p>\n<pre><code class=\"language-bash\">$ cd ~/vagrant/box_name/      \n$ vagrant up      </code></pre>\n<p>でインストール開始。初回起動時はboxを生成するため時間がかかります。<br />\n壊れても </p>\n<pre><code class=\"language-bash\">$ vagrant up --provision</code></pre>\n<p>すれば再生成されます。(時間かかるけど...)</p>','汎用的なVagrant( CentOS7 )',' \' vagrant up\' ワンコマンドで Git, Vimをインストール。ホスと側ssh-keyをコピー、.vimrcを git cloneする。\'すぐに使える\'がテーマ。\r\n設定ファイルを外部ファイル化し使い回しも楽。 ','inherit','closed','closed','','154-revision-v1','','','2019-09-15 11:50:27','2019-09-15 02:50:27','## おれおれVagrantfile\r\nといっても特別なにかすごいことやってるわけでなく汎用的なテンプレートです。       \r\nDockerのようなコンテナ型ではなくガチのCentOS上で何か実験したい、遊びたい時などなど用途です。    \r\nVirtualBOx,Vagrantはインストール済み前提です。\r\n[Source](https://github.com/WEBDIMENSION/vagrant-centos7)       \r\n\r\n\r\nprovision/provision/settings_local.yaml         \r\n\r\n\r\n```bash\r\nvm:\r\n # Box名 なんでも可 \r\n boxName: &quot;centos7&quot;\r\n # 元となるboxのURL\r\n boxURL: &quot;https://vagrantcloud.com/centos/boxes/7/versions/1905.1/providers/virtualbox.box&quot;\r\n # IPアドレスを指定\r\n localIP: &quot;192.168.33.100&quot;\r\nsync:\r\n # 同期するディレクトリを配列で指定\r\n  dir:\r\n    - localPath: &quot;../../workspace/http_doc&quot;\r\n      vmPath: &quot;/var/www/html&quot;\r\n    - localPath: &quot;../../workspace/mysql&quot;\r\n      vmPath: &quot;/var/lib/mysql&quot;\r\ncopyFiles:\r\n # Vagrantへコピーしたいファイル配列で指定\r\n # localPathで指定したファイルがVagrant上 /vagrant/に　fileNameに指定した名前でコピーされる。\r\n # command: に記述したコマンドを実行される。\r\n # 下記ではHost側のssh-keyをVagrantへコピー。sshやgit cloneなどHost側と同じ設定で行える\r\n # sshを多様する場合は ~/.ssh/config をコピーしてもよいかも。\r\n \r\n  - fileName: &quot;id_rsa.pub&quot;\r\n    localPath: &quot;~/.ssh/id_rsa.pub&quot;\r\n    command: &quot;cat /vagrant/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; rm /vagrant/id_rsa.pub&quot;\r\n  - fileName: &quot;id_rsa&quot;\r\n    localPath: &quot;~/.ssh/id_rsa&quot;\r\n    command: &quot;cp /vagrant/id_rsa ~/.ssh/id_rsa &amp;&amp; rm /vagrant/id_rsa&quot;\r\n  - fileName: &quot;.bash_aliases&quot;\r\n    localPath: &quot;~/.bash_aliases&quot;\r\n    command: &quot;cp /vagrant/.bash_aliases ~/.bash_aliases &amp;&amp; rm /vagrant/.bash_aliases&quot;\r\n```\r\nVagrantfile         \r\n```bash\r\n# provision/settings-local.yml を load する\r\nrequire &#039;yaml&#039;\r\nsettings = YAML.load_file &#039;provision/settings_local.yaml&#039;\r\n\r\n# provision/settings-local.yml 内 copyFiles: をHost側の ~/vagrant/box名/ にコピーする。\r\n# ここに置かれたファイルはVagrant 立ち上げ時Vagrant側 /vagrant/へコピーされる \r\nsettings[&#039;copyFiles&#039;].each do |i|\r\n  system(&#039;cp &#039; + i[&#039;localPath&#039;] + &#039; &#039; + Dir.home + &#039;/vagrant/&#039; + settings[&#039;vm&#039;][&#039;boxName&#039;]+ &#039;/&#039; + i[&#039;fileName&#039;])\r\nend\r\n\r\n# provision/settings-local.yml 内の sync: の共有ディレクトリをマウント\r\n# マウントタイプは デフォルトの virtualbox にしてますが Mac の場合は nfs もあり。\r\n# nfs は早いがパーミッションにちょっと難あり? Win なら SMB?\r\nsettings[&#039;sync&#039;][&#039;dir&#039;].each do |i|\r\n  #config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;nfs&quot;, nfs_export: true\r\n  config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;virtualbox&quot;\r\n  end\r\n \r\n# provision.sh では wget git をインストール しています。\r\n  config.vm.provision :shell, :path =&gt; &quot;provision/provision.sh&quot;\r\n  \r\n# privileged: false はroot権限でなく一般ユーザー権限で実行\r\n# ここでは bash_id, vim (lua,python3....)をインストール \r\n  config.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/privileged.sh&quot;\r\n\r\n# provision/settings-local.yml 内 copyFiles: のコマンド実行\r\n# run: &quot;always&quot; は Vagrant立ち上げ時 vagrant up --provision としなくても vagrant up でも実行される。\r\nsettings[&#039;copyFiles&#039;].each do |i|\r\n        $script = i[&#039;command&#039;]\r\n        config.vm.provision :shell, run: &quot;always&quot;, privileged: false, inline: $script\r\n    end\r\n\r\n# Vagrant側のHost名を設定 \r\n $host_script = &quot;hostnamectl set-hostname &quot; + settings[&#039;vm&#039;][&#039;hostName&#039;].to_s\r\n   config.vm.provision :shell, run: &quot;always&quot;, inline: $host_script\r\n\r\n# この場合は~/.ssh/configに\r\n# host *\r\n# 10     StrictHostKeyChecking no \r\n# を追記。ssh接続の際の確認メッセージを無視する。\r\n# vimrcをレポジトリからダウンロード をしてます。\r\nconfig.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/custom_after.sh&quot;\r\n\r\n```\r\n\r\n~/vagrant/box_name に配置。        \r\n```bash\r\n$ cd ~/vagrant/box_name/      \r\n$ vagrant up      \r\n```\r\nでインストール開始。初回起動時はboxを生成するため時間がかかります。     \r\n壊れても \r\n```bash\r\n$ vagrant up --provision\r\n```\r\nすれば再生成されます。(時間かかるけど...)\r\n\r\n',154,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/154-revision-v1/',0,'revision','',0),(164,1,'2019-09-15 20:21:08','2019-09-15 11:21:08','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。   </p>\n<p>ページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なしだし、.gitだのnode_modulesを除外するなど<span class=\"under_line\">めんどくさい</span>。     </p>\n<p>とてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。       </p>\n<p>とはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>でIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug     </p>\n<p><strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy       </p>\n<p><strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Servers      </p>\n<p>name : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nphpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code class=\"language-bash\">[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code class=\"language-bash\">nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong> 上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ大満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','publish','closed','open','','docke-on-vagrant','','','2019-09-23 20:00:59','2019-09-23 11:00:59','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\n\r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なしだし、.gitだのnode_modulesを除外するなど<span class=\"under_line\">めんどくさい</span>。     \r\n\r\n\r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\n\r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__でIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug     \r\n\r\n  __xdebugのportを9001に変更__  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n\r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\nIDEA設定        \r\nPreferences | Languages & Frameworks | PHP | Servers      \r\n\r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\nIDEA設定      \r\nphpdebug を ON     \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```bash\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```bash\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__ 上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ大満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',0,'https://blog.webdimension.jp/?p=164',0,'post','',0),(165,1,'2019-09-15 19:18:28','2019-09-15 10:18:28','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定      </p>\n<ul>\n<li>Preferences | Languages &amp; Frameworks | PHP | Debug<br />\n<strong>xdebugのportを9001に変更</strong><br />\nImage</li>\n<li>Preferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy<br />\n<strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP<br />\nImage</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Servers<br />\nname : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる<br />\nImage</p>\n<p>phpdebug を ON<br />\n適当にブレーkポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n</li>\n</ul>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong><br />\n&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11;2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\nImage\nそんな諦めかけた時に救世主現る！<br />\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う](<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。<br />\nImage<br />\nSuccess, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nPreferences | Languages &amp; Frameworks | PHP<br />\nImage       </p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録する<br />\nImaee<br />\nImage<br />\ncontainer</p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録<br />\nImage<br />\nunittestを実行してみる。<br />\nImage</p>\n<p>なんとかunittestが通りました。<br />\nこれで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong>　上にLAMP環境作って作業するのと体感的にはかわりません。       </p>','Docker on Vagrant ,wo','','inherit','closed','closed','','164-revision-v1','','','2019-09-15 19:18:28','2019-09-15 10:18:28','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\n- Preferences | Languages & Frameworks | PHP | Debug     \r\n  __xdebugのportを9001に変更__  \r\n  Image\r\n- Preferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  Image\r\n- Preferences | Languages & Frameworks | PHP | Servers      \r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  Image\r\n  \r\n  \r\n  phpdebug を ON     \r\n  適当にブレーkポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11;2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\nImage\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\nImage       \r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nPreferences | Languages & Frameworks | PHP      \r\nImage       \r\n\r\n\r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録する       \r\nImaee       \r\nImage       \r\ncontainer\r\n\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\nImage       \r\nunittestを実行してみる。         \r\nImage\r\n\r\n\r\nなんとかunittestが通りました。     \r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__　上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(166,1,'2019-09-15 19:21:41','2019-09-15 10:21:41','','Screen Shot 2019-09-15 at 16.06.42','','inherit','closed','closed','','screen-shot-2019-09-15-at-16-06-42','','','2019-09-15 19:21:41','2019-09-15 10:21:41','',164,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png',0,'attachment','image/png',0),(168,1,'2019-09-15 19:23:37','2019-09-15 10:23:37','','Screen Shot 2019-09-15 at 16.07.11','','inherit','closed','closed','','screen-shot-2019-09-15-at-16-07-11','','','2019-09-15 19:23:37','2019-09-15 10:23:37','',164,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png',0,'attachment','image/png',0),(169,1,'2019-09-15 19:32:13','2019-09-15 10:32:13','','Screen-Shot-2019-09-15-at-16.06.26','','inherit','closed','closed','','screen-shot-2019-09-15-at-16-06-26','','','2019-09-15 19:32:13','2019-09-15 10:32:13','',164,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png',0,'attachment','image/png',0),(170,1,'2019-09-15 19:35:25','2019-09-15 10:35:25','','Screen-Shot-2019-09-15-at-16.13.56','','inherit','closed','closed','','screen-shot-2019-09-15-at-16-13-56','','','2019-09-15 19:35:25','2019-09-15 10:35:25','',164,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png',0,'attachment','image/png',0),(171,1,'2019-09-15 19:38:28','2019-09-15 10:38:28','','Screen Shot 2019-09-15 at 19.37.54','','inherit','closed','closed','','screen-shot-2019-09-15-at-19-37-54','','','2019-09-15 19:38:28','2019-09-15 10:38:28','',164,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png',0,'attachment','image/png',0),(172,1,'2019-09-15 19:40:51','2019-09-15 10:40:51','','Screen Shot 2019-09-15 at 19.40.06','','inherit','closed','closed','','screen-shot-2019-09-15-at-19-40-06','','','2019-09-15 19:40:51','2019-09-15 10:40:51','',164,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png',0,'attachment','image/png',0),(173,1,'2019-09-15 19:44:28','2019-09-15 10:44:28','','Screen Shot 2019-09-15 at 19.05.13','','inherit','closed','closed','','screen-shot-2019-09-15-at-19-05-13','','','2019-09-15 19:44:28','2019-09-15 10:44:28','',164,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13.png',0,'attachment','image/png',0),(174,1,'2019-09-15 19:46:49','2019-09-15 10:46:49','','Screen Shot 2019-09-15 at 19.05.13','','inherit','closed','closed','','screen-shot-2019-09-15-at-19-05-13-2','','','2019-09-15 19:46:49','2019-09-15 10:46:49','',164,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png',0,'attachment','image/png',0),(176,1,'2019-09-15 19:53:43','2019-09-15 10:53:43','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定      </p>\n<ul>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug<br />\n<strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy<br />\n<strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Servers<br />\nname : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>phpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレーkポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n</li>\n</ul>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11;2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う](<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13.png\" alt=\"\" />       </p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nPreferences | Languages &amp; Frameworks | PHP<br />\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。</p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>Image<br />\ncontainer</p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録<br />\nImage<br />\nunittestを実行してみる。<br />\nImage</p>\n<p>なんとかunittestが通りました。<br />\nこれで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong>　上にLAMP環境作って作業するのと体感的にはかわりません。       </p>','Docker on Vagrant をがんばってみた','','inherit','closed','closed','','164-revision-v1','','','2019-09-15 19:53:43','2019-09-15 10:53:43','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\n- Preferences | Languages & Frameworks | PHP | Debug     \r\n  __xdebugのportを9001に変更__  \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Servers      \r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\n  \r\n  \r\n  \r\n  phpdebug を ON     \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレーkポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11;2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13.png)       \r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nPreferences | Languages & Frameworks | PHP      \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\n\r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\nImage       \r\ncontainer\r\n\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\nImage       \r\nunittestを実行してみる。         \r\nImage\r\n\r\n\r\nなんとかunittestが通りました。     \r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__　上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(179,1,'2019-09-15 20:00:40','2019-09-15 11:00:40','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定      </p>\n<ul>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug<br />\n<strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy<br />\n<strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Servers<br />\nname : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>phpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレーkポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n</li>\n</ul>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11;2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う](<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。<br />\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nPreferences | Languages &amp; Frameworks | PHP<br />\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。</p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>Image<br />\ncontainer</p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録<br />\nImage<br />\nunittestを実行してみる。<br />\nImage</p>\n<p>なんとかunittestが通りました。<br />\nこれで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong>　上にLAMP環境作って作業するのと体感的にはかわりません。       </p>','Docker on Vagrant をがんばってみた','','inherit','closed','closed','','164-revision-v1','','','2019-09-15 20:00:40','2019-09-15 11:00:40','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\n- Preferences | Languages & Frameworks | PHP | Debug     \r\n  __xdebugのportを9001に変更__  \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Servers      \r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\n  \r\n  \r\n  \r\n  phpdebug を ON     \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレーkポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11;2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nPreferences | Languages & Frameworks | PHP      \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\n\r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\nImage       \r\ncontainer\r\n\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\nImage       \r\nunittestを実行してみる。         \r\nImage\r\n\r\n\r\nなんとかunittestが通りました。     \r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__　上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(180,1,'2019-09-15 20:05:16','2019-09-15 11:05:16','','Screen Shot 2019-09-15 at 17.02.05','','inherit','closed','closed','','screen-shot-2019-09-15-at-17-02-05','','','2019-09-15 20:05:16','2019-09-15 11:05:16','',164,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png',0,'attachment','image/png',0),(181,1,'2019-09-15 20:06:07','2019-09-15 11:06:07','','Screen Shot 2019-09-15 at 18.40.17','','inherit','closed','closed','','screen-shot-2019-09-15-at-18-40-17','','','2019-09-15 20:06:07','2019-09-15 11:06:07','',164,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png',0,'attachment','image/png',0),(182,1,'2019-09-15 20:07:04','2019-09-15 11:07:04','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定      </p>\n<ul>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug<br />\n<strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy<br />\n<strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Servers<br />\nname : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>phpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレーkポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n</li>\n</ul>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11;2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う](<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。</p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong>　上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ満足。。。</p>','Docker on Vagrant をがんばってみた','','inherit','closed','closed','','164-revision-v1','','','2019-09-15 20:07:04','2019-09-15 11:07:04','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\n- Preferences | Languages & Frameworks | PHP | Debug     \r\n  __xdebugのportを9001に変更__  \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Servers      \r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\n  \r\n  \r\n  \r\n  phpdebug を ON     \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレーkポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11;2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\n\r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__　上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(183,1,'2019-09-15 20:18:00','2019-09-15 11:18:00','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定      </p>\n<ul>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug<br />\n<strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy<br />\n<strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Servers<br />\nname : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>phpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレーkポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n</li>\n</ul>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。</p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong>　上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ満足。。。</p>','Docker on Vagrant をがんばってみた','','inherit','closed','closed','','164-revision-v1','','','2019-09-15 20:18:00','2019-09-15 11:18:00','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\n- Preferences | Languages & Frameworks | PHP | Debug     \r\n  __xdebugのportを9001に変更__  \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Servers      \r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\n  \r\n  \r\n  \r\n  phpdebug を ON     \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレーkポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\n\r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__　上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(184,1,'2019-09-15 20:19:44','2019-09-15 11:19:44','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定      </p>\n<ul>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug<br />\n<strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy<br />\n<strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Servers<br />\nname : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>phpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレーkポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n</li>\n</ul>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。</p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong>　上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。RemoteDebug、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-15 20:19:44','2019-09-15 11:19:44','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\n- Preferences | Languages & Frameworks | PHP | Debug     \r\n  __xdebugのportを9001に変更__  \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Servers      \r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\n  \r\n  \r\n  \r\n  phpdebug を ON     \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレーkポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\n\r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__　上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(185,1,'2019-09-15 20:21:08','2019-09-15 11:21:08','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定      </p>\n<ul>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug<br />\n<strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy<br />\n<strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Servers<br />\nname : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>phpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレーkポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n</li>\n</ul>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。</p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong>　上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-15 20:21:08','2019-09-15 11:21:08','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\n- Preferences | Languages & Frameworks | PHP | Debug     \r\n  __xdebugのportを9001に変更__  \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Servers      \r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\n  \r\n  \r\n  \r\n  phpdebug を ON     \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレーkポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\n\r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__　上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(186,1,'2019-09-15 20:24:20','2019-09-15 11:24:20','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定      </p>\n<ul>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug<br />\n<strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy<br />\n<strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Servers<br />\nname : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>phpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレーkポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n</li>\n</ul>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。</p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong>　上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-15 20:24:20','2019-09-15 11:24:20','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\n- Preferences | Languages & Frameworks | PHP | Debug     \r\n  __xdebugのportを9001に変更__  \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Servers      \r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\n  \r\n  \r\n  \r\n  phpdebug を ON     \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレーkポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\n\r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__　上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(187,1,'2019-09-15 20:26:23','2019-09-15 11:26:23','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定      </p>\n<ul>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug<br />\n<strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy<br />\n<strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Servers<br />\nname : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>phpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n</li>\n</ul>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。</p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong>　上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-15 20:26:23','2019-09-15 11:26:23','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\n- Preferences | Languages & Frameworks | PHP | Debug     \r\n  __xdebugのportを9001に変更__  \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Servers      \r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\n  \r\n  \r\n  \r\n  phpdebug を ON     \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\n\r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__　上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(188,1,'2019-09-15 20:30:54','2019-09-15 11:30:54','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定      </p>\n<ul>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug<br />\n<strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy<br />\n<strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Servers<br />\nname : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>phpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n</li>\n</ul>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong>　上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-15 20:30:54','2019-09-15 11:30:54','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\n- Preferences | Languages & Frameworks | PHP | Debug     \r\n  __xdebugのportを9001に変更__  \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Servers      \r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\n  \r\n  \r\n  \r\n  phpdebug を ON     \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__　上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(189,1,'2019-09-15 20:33:19','2019-09-15 11:33:19','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定      </p>\n<ul>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug     </p>\n<p><strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy<br />\n<strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Servers<br />\nname : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>phpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n</li>\n</ul>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong>　上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-15 20:33:19','2019-09-15 11:33:19','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\n\r\n- Preferences | Languages & Frameworks | PHP | Debug     \r\n\r\n  __xdebugのportを9001に変更__  \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\n  \r\n- Preferences | Languages & Frameworks | PHP | Servers      \r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\n  \r\n  \r\n  \r\n  phpdebug を ON     \r\n  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__　上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(190,1,'2019-09-15 20:36:49','2019-09-15 11:36:49','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定      </p>\n<ul>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug     </p>\n<p><strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy       </p>\n<p><strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Preferences | Languages &amp; Frameworks | PHP | Servers      </p>\n<p>name : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>phpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n</li>\n</ul>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong>　上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-15 20:36:49','2019-09-15 11:36:49','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\n\r\n- Preferences | Languages & Frameworks | PHP | Debug     \r\n\r\n  __xdebugのportを9001に変更__  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\n- Preferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n\r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\n- Preferences | Languages & Frameworks | PHP | Servers      \r\n\r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\n-  phpdebug を ON     \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__　上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(191,1,'2019-09-15 20:37:43','2019-09-15 11:37:43','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug     </p>\n<p><strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy       </p>\n<p><strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Servers      </p>\n<p>name : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>phpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong>　上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-15 20:37:43','2019-09-15 11:37:43','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug     \r\n\r\n  __xdebugのportを9001に変更__  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\nPreferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n\r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\nPreferences | Languages & Frameworks | PHP | Servers      \r\n\r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\nphpdebug を ON     \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__　上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(192,1,'2019-09-15 20:38:42','2019-09-15 11:38:42','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug     </p>\n<p><strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy       </p>\n<p><strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Servers      </p>\n<p>name : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nphpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong>　上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-15 20:38:42','2019-09-15 11:38:42','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug     \r\n\r\n  __xdebugのportを9001に変更__  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n\r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\nIDEA設定        \r\nPreferences | Languages & Frameworks | PHP | Servers      \r\n\r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\nIDEA設定      \r\nphpdebug を ON     \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__　上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(193,1,'2019-09-15 20:41:08','2019-09-15 11:41:08','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug     </p>\n<p><strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy       </p>\n<p><strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Servers      </p>\n<p>name : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nphpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong> 上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-15 20:41:08','2019-09-15 11:41:08','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug     \r\n\r\n  __xdebugのportを9001に変更__  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n\r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\nIDEA設定        \r\nPreferences | Languages & Frameworks | PHP | Servers      \r\n\r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\nIDEA設定      \r\nphpdebug を ON     \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__ 上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(194,1,'2019-09-15 20:41:47','2019-09-15 11:41:47','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug     </p>\n<p><strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy       </p>\n<p><strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Servers      </p>\n<p>name : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nphpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong> 上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ大満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-15 20:41:47','2019-09-15 11:41:47','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug     \r\n\r\n  __xdebugのportを9001に変更__  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n\r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\nIDEA設定        \r\nPreferences | Languages & Frameworks | PHP | Servers      \r\n\r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\nIDEA設定      \r\nphpdebug を ON     \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.58.42.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__ 上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ大満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(196,1,'2019-09-15 21:06:35','2019-09-15 12:06:35','','Screen Shot 2019-09-15 at 16.55.01','','inherit','closed','closed','','screen-shot-2019-09-15-at-16-55-01','','','2019-09-15 21:06:35','2019-09-15 12:06:35','',164,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png',0,'attachment','image/png',0),(197,1,'2019-09-15 21:06:50','2019-09-15 12:06:50','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug     </p>\n<p><strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy       </p>\n<p><strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Servers      </p>\n<p>name : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nphpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong> 上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ大満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-15 21:06:50','2019-09-15 12:06:50','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug     \r\n\r\n  __xdebugのportを9001に変更__  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n\r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\nIDEA設定        \r\nPreferences | Languages & Frameworks | PHP | Servers      \r\n\r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\nIDEA設定      \r\nphpdebug を ON     \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__ 上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ大満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(198,1,'2019-09-15 21:10:21','2019-09-15 12:10:21','','Screen Shot 2019-09-15 at 18.02.31','','inherit','closed','closed','','screen-shot-2019-09-15-at-18-02-31-2','','','2019-09-15 21:10:21','2019-09-15 12:10:21','',164,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png',0,'attachment','image/png',0),(199,1,'2019-09-15 21:10:34','2019-09-15 12:10:34','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug     </p>\n<p><strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy       </p>\n<p><strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Servers      </p>\n<p>name : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nphpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code>[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong> 上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ大満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-15 21:10:34','2019-09-15 12:10:34','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug     \r\n\r\n  __xdebugのportを9001に変更__  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n\r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\nIDEA設定        \r\nPreferences | Languages & Frameworks | PHP | Servers      \r\n\r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\nIDEA設定      \r\nphpdebug を ON     \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__ 上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ大満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(200,1,'2019-09-15 22:07:49','2019-09-15 13:07:49','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug     </p>\n<p><strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy       </p>\n<p><strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Servers      </p>\n<p>name : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nphpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code class=\"language-bash\">[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code>nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong> 上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ大満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-15 22:07:49','2019-09-15 13:07:49','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug     \r\n\r\n  __xdebugのportを9001に変更__  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n\r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\nIDEA設定        \r\nPreferences | Languages & Frameworks | PHP | Servers      \r\n\r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\nIDEA設定      \r\nphpdebug を ON     \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```bash\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__ 上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ大満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(201,1,'2019-09-16 20:28:48','2019-09-16 11:28:48','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なし<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug     </p>\n<p><strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy       </p>\n<p><strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Servers      </p>\n<p>name : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nphpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code class=\"language-bash\">[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code class=\"language-bash\">nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong> 上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ大満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-16 20:28:48','2019-09-16 11:28:48','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なし     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug     \r\n\r\n  __xdebugのportを9001に変更__  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n\r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\nIDEA設定        \r\nPreferences | Languages & Frameworks | PHP | Servers      \r\n\r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\nIDEA設定      \r\nphpdebug を ON     \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```bash\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```bash\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__ 上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ大満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(202,1,'2019-09-21 23:08:49','2019-09-21 14:08:49','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nと<span class=\"under_line\">めんどくさい</span>ことになってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というのも<span class=\"under_line\">めんどくさい</span></p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nとなり、かなり<span class=\"under_line\">めんどくさい</span>なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるはめになる。ほんと<span class=\"under_line\">めんどくさい</span><br />\nGoogleなどは一度登録したパスワードは再生成できない。これがより記憶に混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>という当たり前の言葉だけでなくそんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターを買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。)</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>このままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\n待つのが<span class=\"under_line\">めんどくさい</span>ので現在接続中の端末に妨害電波でも送り接続を遮断させ、すぐに再接続しようとすると思うのでその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。\n法的にも<span class=\"under_line\">めんどくさい</span>ことなんでしょう。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を再考。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','publish','closed','open','','wifi-passwd','','','2019-11-08 11:34:43','2019-11-08 02:34:43','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nと<span class=\"under_line\">めんどくさい</span>ことになってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というのも<span class=\"under_line\">めんどくさい</span>\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nとなり、かなり<span class=\"under_line\">めんどくさい</span>なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるはめになる。ほんと<span class=\"under_line\">めんどくさい</span>        \r\nGoogleなどは一度登録したパスワードは再生成できない。これがより記憶に混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nという当たり前の言葉だけでなくそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターを買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。)\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nこのままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\n待つのが<span class=\"under_line\">めんどくさい</span>ので現在接続中の端末に妨害電波でも送り接続を遮断させ、すぐに再接続しようとすると思うのでその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n法的にも<span class=\"under_line\">めんどくさい</span>ことなんでしょう。\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',0,'https://blog.webdimension.jp/?p=202',0,'post','',0),(204,1,'2019-09-21 20:24:01','2019-09-21 11:24:01','','Screen Shot 2019-09-16 at 21.07.44','','inherit','closed','closed','','screen-shot-2019-09-16-at-21-07-44','','','2019-09-21 20:24:01','2019-09-21 11:24:01','',202,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png',0,'attachment','image/png',0),(205,1,'2019-09-21 20:24:14','2019-09-21 11:24:14','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるようになる。<br />\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。<br />\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>kk</p>','','','inherit','closed','closed','','202-revision-v1','','','2019-09-21 20:24:14','2019-09-21 11:24:14','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるようになる。        \r\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。        \r\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\nkk\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(206,1,'2019-09-21 20:32:24','2019-09-21 11:32:24','','Screen Shot 2019-09-16 at 21.08.34 のコピー','','inherit','closed','closed','','screen-shot-2019-09-16-at-21-08-34-%e3%81%ae%e3%82%b3%e3%83%92%e3%82%9a%e3%83%bc','','','2019-09-21 20:32:24','2019-09-21 11:32:24','',202,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png',0,'attachment','image/png',0),(207,1,'2019-09-21 20:42:53','2019-09-21 11:42:53','','wifi-usb','','inherit','closed','closed','','wifi-usb','','','2019-09-21 20:42:53','2019-09-21 11:42:53','',202,'https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg',0,'attachment','image/jpeg',0),(208,1,'2019-09-21 20:48:18','2019-09-21 11:48:18','','Screen Shot 2019-09-16 at 21.23.42','','inherit','closed','closed','','screen-shot-2019-09-16-at-21-23-42','','','2019-09-21 20:48:18','2019-09-21 11:48:18','',202,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png',0,'attachment','image/png',0),(209,1,'2019-09-21 20:48:42','2019-09-21 11:48:42','<pre><code>![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)## 大文字、小文字、数字、記号、何かと面倒なパスワード</code></pre>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるようになる。<br />\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。<br />\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続        </p>\n<p><img src=\"https://blog.webdimension.jp/wp-![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>','','','inherit','closed','closed','','202-revision-v1','','','2019-09-21 20:48:42','2019-09-21 11:48:42','	![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるようになる。        \r\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。        \r\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\n\r\n![](https://blog.webdimension.jp/wp-![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(214,1,'2019-09-21 21:41:56','2019-09-21 12:41:56','','airodump','','inherit','closed','closed','','airodump','','','2019-09-21 21:41:56','2019-09-21 12:41:56','',202,'https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump.jpg',0,'attachment','image/jpeg',0),(218,1,'2019-09-21 22:35:21','2019-09-21 13:35:21','','Screen Shot 2019-09-16 at 21.27.22','','inherit','closed','closed','','screen-shot-2019-09-16-at-21-27-22','','','2019-09-21 22:35:21','2019-09-21 13:35:21','',202,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png',0,'attachment','image/png',0),(219,1,'2019-09-21 22:41:24','2019-09-21 13:41:24','','Screen Shot 2019-09-16 at 21.28.22','','inherit','closed','closed','','screen-shot-2019-09-16-at-21-28-22','','','2019-09-21 22:41:24','2019-09-21 13:41:24','',202,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png',0,'attachment','image/png',0),(220,1,'2019-09-21 22:44:02','2019-09-21 13:44:02','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるようになる。<br />\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。<br />\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（操作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>','Passwordの重要性を考える。','','inherit','closed','closed','','202-revision-v1','','','2019-09-21 22:44:02','2019-09-21 13:44:02','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるようになる。        \r\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。        \r\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（操作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(221,1,'2019-09-21 22:49:11','2019-09-21 13:49:11','','airodump','','inherit','closed','closed','','airodump-2','','','2019-09-21 22:49:11','2019-09-21 13:49:11','',202,'https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg',0,'attachment','image/jpeg',0),(222,1,'2019-09-21 22:52:37','2019-09-21 13:52:37','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるようになる。<br />\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。<br />\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（操作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>デモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>','Passwordの重要性を考える。','','inherit','closed','closed','','202-revision-v1','','','2019-09-21 22:52:37','2019-09-21 13:52:37','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるようになる。        \r\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。        \r\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（操作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(223,1,'2019-09-21 22:57:02','2019-09-21 13:57:02','','Screen Shot 2019-09-17 at 0.38.20','','inherit','closed','closed','','screen-shot-2019-09-17-at-0-38-20','','','2019-09-21 22:57:02','2019-09-21 13:57:02','',202,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png',0,'attachment','image/png',0),(224,1,'2019-09-21 23:16:00','2019-09-21 14:16:00','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるようになる。<br />\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。<br />\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（操作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>ここままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーする。</p>','Passwordの重要性を考える。','','inherit','closed','closed','','202-revision-v1','','','2019-09-21 23:16:00','2019-09-21 14:16:00','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるようになる。        \r\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。        \r\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（操作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nここままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーする。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(225,1,'2019-09-21 23:23:10','2019-09-21 14:23:10','','handshake','','inherit','closed','closed','','handshake','','','2019-09-21 23:23:10','2019-09-21 14:23:10','',202,'https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg',0,'attachment','image/jpeg',0),(226,1,'2019-09-21 23:29:55','2019-09-21 14:29:55','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるようになる。<br />\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。<br />\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（操作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>ここままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>','Passwordの重要性を考える。','','inherit','closed','closed','','202-revision-v1','','','2019-09-21 23:29:55','2019-09-21 14:29:55','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるようになる。        \r\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。        \r\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（操作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nここままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(227,1,'2019-09-21 23:37:33','2019-09-21 14:37:33','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるようになる。<br />\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。<br />\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（操作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>ここままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>','Passwordの重要性を考える。','','inherit','closed','closed','','202-revision-v1','','','2019-09-21 23:37:33','2019-09-21 14:37:33','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるようになる。        \r\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。        \r\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（操作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nここままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(228,1,'2019-09-21 23:49:15','2019-09-21 14:49:15','','Screen Shot 2019-09-17 at 0.51.28','','inherit','closed','closed','','screen-shot-2019-09-17-at-0-51-28','','','2019-09-21 23:49:15','2019-09-21 14:49:15','',202,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png',0,'attachment','image/png',0),(229,1,'2019-09-22 00:05:53','2019-09-21 15:05:53','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるようになる。<br />\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。<br />\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>ここままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>','Passwordの重要性を考える。','','inherit','closed','closed','','202-revision-v1','','','2019-09-22 00:05:53','2019-09-21 15:05:53','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるようになる。        \r\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。        \r\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nここままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(230,1,'2019-09-22 00:39:53','2019-09-21 15:39:53','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるようになる。<br />\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。<br />\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>ここままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','','inherit','closed','closed','','202-revision-v1','','','2019-09-22 00:39:53','2019-09-21 15:39:53','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるようになる。        \r\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。        \r\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nここままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(231,1,'2019-09-22 00:43:00','2019-09-21 15:43:00','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるようになる。<br />\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。<br />\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>ここままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-09-22 00:43:00','2019-09-21 15:43:00','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるようになる。        \r\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信料があれば簡単にパスワードが判明してしまいます。        \r\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nここままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(232,1,'2019-09-22 00:44:34','2019-09-21 15:44:34','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるようになる。<br />\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>ここままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-09-22 00:44:34','2019-09-21 15:44:34','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるようになる。        \r\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信料によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nここままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(233,1,'2019-09-22 00:44:53','2019-09-21 15:44:53','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるようになる。<br />\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>ここままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-09-22 00:44:53','2019-09-21 15:44:53','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるようになる。        \r\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nここままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(234,1,'2019-09-22 00:46:46','2019-09-21 15:46:46','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるようになる。<br />\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>このままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-09-22 00:46:46','2019-09-21 15:46:46','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるようになる。        \r\nGoogleなどは一度登録したパスワードは生成できない。これがより混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nこのままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(235,1,'2019-09-22 00:59:04','2019-09-21 15:59:04','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるようになる。<br />\nGoogleなどは一度登録したパスワードは再生成できない。これが記憶をより混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>このままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-09-22 00:59:04','2019-09-21 15:59:04','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるようになる。        \r\nGoogleなどは一度登録したパスワードは再生成できない。これが記憶をより混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nこのままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(236,1,'2019-09-22 00:59:32','2019-09-21 15:59:32','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるようになる。<br />\nGoogleなどは一度登録したパスワードは再生成できない。これが記憶により混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>このままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-09-22 00:59:32','2019-09-21 15:59:32','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるようになる。        \r\nGoogleなどは一度登録したパスワードは再生成できない。これが記憶により混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nこのままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(237,1,'2019-09-22 01:09:51','2019-09-21 16:09:51','','wifi-password','','inherit','closed','closed','','wifi-password','','','2019-09-22 01:09:51','2019-09-21 16:09:51','',202,'https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-password.png',0,'attachment','image/png',0),(238,1,'2019-09-22 01:11:00','2019-09-21 16:11:00','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるはめになる。<br />\nGoogleなどは一度登録したパスワードは再生成できない。これが記憶により混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>そんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>このままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-09-22 01:11:00','2019-09-21 16:11:00','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるはめになる。        \r\nGoogleなどは一度登録したパスワードは再生成できない。これが記憶により混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nこのままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(239,1,'2019-09-22 01:13:01','2019-09-21 16:13:01','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるはめになる。<br />\nGoogleなどは一度登録したパスワードは再生成できない。これが記憶により混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>という当たり前の言葉だけでなくそんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>このままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-09-22 01:13:01','2019-09-21 16:13:01','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるはめになる。        \r\nGoogleなどは一度登録したパスワードは再生成できない。これが記憶により混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nという当たり前の言葉だけでなくそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nこのままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (240,1,'2019-09-22 01:16:25','2019-09-21 16:16:25','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるはめになる。<br />\nGoogleなどは一度登録したパスワードは再生成できない。これが記憶により混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>という当たり前の言葉だけでなくそんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>このままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass。txt | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-09-22 01:16:25','2019-09-21 16:16:25','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるはめになる。        \r\nGoogleなどは一度登録したパスワードは再生成できない。これが記憶により混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nという当たり前の言葉だけでなくそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nこのままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass。txt | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(241,1,'2019-09-22 01:57:27','2019-09-21 16:57:27','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるはめになる。<br />\nGoogleなどは一度登録したパスワードは再生成できない。これが記憶により混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>という当たり前の言葉だけでなくそんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>このままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-09-22 01:57:27','2019-09-21 16:57:27','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるはめになる。        \r\nGoogleなどは一度登録したパスワードは再生成できない。これが記憶により混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nという当たり前の言葉だけでなくそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nこのままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(242,1,'2019-09-22 02:00:09','2019-09-21 17:00:09','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるはめになる。<br />\nGoogleなどは一度登録したパスワードは再生成できない。これがより記憶に混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>という当たり前の言葉だけでなくそんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>このままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-09-22 02:00:09','2019-09-21 17:00:09','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるはめになる。        \r\nGoogleなどは一度登録したパスワードは再生成できない。これがより記憶に混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nという当たり前の言葉だけでなくそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nこのままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の電波に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(245,1,'2019-09-23 03:48:08','2019-09-22 18:48:08','<h2>VPNとは</h2>\n<p><strong>Virtual Private Network</strong></p>\n<ul>\n<li>通信を暗号化して盗聴を防ぐ</li>\n<li>IPアドレスの隠蔽(いい意味で)</li>\n<li>固定IPで通信</li>\n</ul>\n<p>などのメリットがあります。</p>\n<h3>外出先で・・・</h3>\n<ul>\n<li>外出先、打ち合わせ先でみてもらいたいデータがあるが手元にない。</li>\n<li>社にとりにもどるのも<span class=\"under_line\">めんどくさい</span>・・社に電話してわざわざメールなどで送ってもらうのも・・・</li>\n</ul>\n<p>VPNを設置すればいつでも社内ネットワークにセキュア(暗号化)に接続可能です。\n打ち合わせ等外出が多い方、営業マンの方にもおすすめです。</p>\n<h3>海外で・・・</h3>\n<ul>\n<li>国外で通常通りの作業をしようとするも「この国からはお繋ぎできません」と接続できない</li>\n</ul>\n<p>VPN通信はアクセス元IPアドレスがVPNサーバーのIPアドレスとすることができます。(いい意味での隠蔽)\nVPNを通せば世界中どこにいても日本国内からの通信ができます。\n海外渡航が多い方には重宝するでしょう。(特にネットの規制が厳しい国)</p>\n<h3>スマホなどのデザリング・・・</h3>\n<ul>\n<li>外出先などデザリングで機密データを送受信したいがセキュリティーが心配</li>\n<li>FreeWiFiを使うには抵抗がある</li>\n</ul>\n<p>FreeWiFIを利用してもVPNの接続を施していれば盗聴される心配はありません。\n盗聴されても暗号化されているので解読不能です。</p>\n<h3>固定IPアドレスにしてくださいと言われたが・・・</h3>\n<ul>\n<li>ネットショップの管理画面はIP制限されるため固定IPが必要だがプロバイダーへの依頼は高額</li>\n<li>子育てのため自宅作業したいがIP制限でつながらない</li>\n<li>引っ越しなどでIPが変わると全て再設定が<span class=\"under_line\">めんどくさい</span>。</li>\n</ul>\n<p>外部にVPNを所有していればIPアドレスは不変です。\n特にネットショップ運営、WEB開発の現場に導入すればメリット大です。</p>\n<h2>VPN を導入するには</h2>\n<h3>既存のサービスを申し込む</h3>\n<p><a href=\"https://www.interlink.or.jp/\">マイIP</a>というサービスがあります。当方も利用しておりました。\n月額1000くらいで問題なく利用できてました。\nネットでは 「速度が出ない」という評価もありますがそうは思いませんでした。\n手っ取り早く導入したい時に有力です。\nただ1アカウント1接続なのでアカウントの使い回しは無理です。\nスタッフ全員で利用したい場合は人数分契約する必要があります。</p>\n<h3>VPNサーバーを自前で準備</h3>\n<p>当方現在自前でVPNを構築してます。\n月額500円の VPS (virtual private server )に <strong>SoftEther VPN</strong> をインストールしてVPN環境を構築しました。\n初期構築費はさておき月額のランニングコストはマイIPの半分です。\nアカウント数も無制限です。\nスタッフ全員に固定IPが必要な場合はとても有力な選択肢です。</p>','VPN導入でいつでもどこでも固定IP','VPN,固定IPはメリットがいっぱい。','publish','closed','open','','vpn','','','2019-09-23 19:56:15','2019-09-23 10:56:15','## VPNとは\r\n**Virtual Private Network**\r\n\r\n- 通信を暗号化して盗聴を防ぐ\r\n- IPアドレスの隠蔽(いい意味で)\r\n- 固定IPで通信\r\n\r\nなどのメリットがあります。\r\n\r\n### 外出先で・・・\r\n- 外出先、打ち合わせ先でみてもらいたいデータがあるが手元にない。\r\n- 社にとりにもどるのも<span class=\"under_line\">めんどくさい</span>・・社に電話してわざわざメールなどで送ってもらうのも・・・\r\n\r\nVPNを設置すればいつでも社内ネットワークにセキュア(暗号化)に接続可能です。\r\n打ち合わせ等外出が多い方、営業マンの方にもおすすめです。\r\n\r\n### 海外で・・・\r\n- 国外で通常通りの作業をしようとするも「この国からはお繋ぎできません」と接続できない\r\n\r\nVPN通信はアクセス元IPアドレスがVPNサーバーのIPアドレスとすることができます。(いい意味での隠蔽)\r\nVPNを通せば世界中どこにいても日本国内からの通信ができます。\r\n海外渡航が多い方には重宝するでしょう。(特にネットの規制が厳しい国)\r\n\r\n### スマホなどのデザリング・・・\r\n- 外出先などデザリングで機密データを送受信したいがセキュリティーが心配\r\n- FreeWiFiを使うには抵抗がある\r\n\r\nFreeWiFIを利用してもVPNの接続を施していれば盗聴される心配はありません。\r\n盗聴されても暗号化されているので解読不能です。\r\n\r\n### 固定IPアドレスにしてくださいと言われたが・・・\r\n- ネットショップの管理画面はIP制限されるため固定IPが必要だがプロバイダーへの依頼は高額\r\n- 子育てのため自宅作業したいがIP制限でつながらない\r\n- 引っ越しなどでIPが変わると全て再設定が<span class=\"under_line\">めんどくさい</span>。\r\n\r\n外部にVPNを所有していればIPアドレスは不変です。\r\n特にネットショップ運営、WEB開発の現場に導入すればメリット大です。\r\n\r\n## VPN を導入するには\r\n\r\n### 既存のサービスを申し込む\r\n[マイIP](https://www.interlink.or.jp/)というサービスがあります。当方も利用しておりました。\r\n月額1000くらいで問題なく利用できてました。\r\nネットでは 「速度が出ない」という評価もありますがそうは思いませんでした。\r\n手っ取り早く導入したい時に有力です。\r\nただ1アカウント1接続なのでアカウントの使い回しは無理です。\r\nスタッフ全員で利用したい場合は人数分契約する必要があります。\r\n\r\n### VPNサーバーを自前で準備\r\n当方現在自前でVPNを構築してます。\r\n月額500円の VPS (virtual private server )に **SoftEther VPN** をインストールしてVPN環境を構築しました。\r\n初期構築費はさておき月額のランニングコストはマイIPの半分です。\r\nアカウント数も無制限です。\r\nスタッフ全員に固定IPが必要な場合はとても有力な選択肢です。\r\n\r\n',0,'https://blog.webdimension.jp/?p=245',0,'post','',0),(246,1,'2019-09-22 10:18:51','2019-09-22 01:18:51','','vpn','','inherit','closed','closed','','vpn-2','','','2019-09-22 10:18:51','2019-09-22 01:18:51','',245,'https://blog.webdimension.jp/wp-content/uploads/2019/09/vpn.png',0,'attachment','image/png',0),(247,1,'2019-09-22 10:19:08','2019-09-22 01:19:08','<h2>VPNとは</h2>\n<p><strong>Virtual Private Network</strong></p>\n<ul>\n<li>通信を暗号化して盗聴を防ぐ</li>\n<li>IPアドレスの隠蔽(いい意味で)</li>\n<li>固定IPで通信</li>\n</ul>\n<p>などのメリットがあります。</p>\n<h3>外出先で・・・</h3>\n<ul>\n<li>外出先、打ち合わせ先でみてもらいたいデータがあるが手元にない。</li>\n<li>社にとりにもどるのも・・社に電話してわざわざメールなどで送ってもらうのも・・・</li>\n</ul>\n<p>VPNを設置すればいつでも社内ネットワークにセキュア(暗号化)に接続可能です。\n打ち合わせ等外出が多い方、営業マンの方にもおすすめです。</p>\n<h3>海外で・・・</h3>\n<ul>\n<li>国外で通常通りの作業をしようとするも「この国からはお繋ぎできません」と接続できない</li>\n</ul>\n<p>VPN通信はアクセス元IPアドレスがVPNサーバーのIPアドレスとすることができます。(いい意味での隠蔽)\nVPNを通せば世界中どこにいても日本国内からの通信ができます。\n海外渡航が多い方には重宝するでしょう。(特にネットの規制が厳しい国)</p>\n<h3>スマホなどのデザリング・・・</h3>\n<ul>\n<li>外出先などデザリングで機密データを送受信したいがセキュリティーが心配</li>\n<li>FreeWiFiの仕様に抵抗がある</li>\n</ul>\n<p>FreeWiFIを利用してもVPNの接続を施していれば盗聴される心配はありません。\n盗聴されても暗号化されているので解読不能です。</p>\n<h3>固定IPアドレスにしてくださいと言われたが・・・</h3>\n<ul>\n<li>ネットショップの管理画面はIP制限されるため固定IPが必要だがプロバイダーへの依頼は高額</li>\n<li>子育てのため自宅作業したいがIP制限でつながらない</li>\n<li>引っ越しなどでIPが変わると全て再設定しないといけない。</li>\n</ul>\n<p>外部にVPNを所有していればIPアドレスは不変です。\n特にネットショップ運営、WEB開発の現場に導入すればメリット大です。</p>\n<h2>VPN を導入するには</h2>\n<h3>既存のサービスを申し込む</h3>\n<p><a href=\"https://www.interlink.or.jp/\">マイIP</a>というサービスがあります。当方も利用しておりました。\n月額1000くらいで問題なく利用できてました。\nネットでは 「速度が出ない」という評価もありますがそうは思いませんでした。\n手っ取り早く導入したい時に有力です。\nただ1アカウント1接続なのでアカウントの使い回しは無理です。\nスタッフ全員で利用したい場合は人数分契約する必要があります。</p>\n<h3>VPNサーバーを自前で準備</h3>\n<p>当方現在自前でVPNを構築してます。\n月額500円の VPS (virtual private server )に <strong>SoftEther VPN</strong> をインストールしてVPN環境を構築しました。\n初期構築費はさておき月額のランニングコストはマイIPの半分です。\nアカウント数も無制限です。\nスタッフ全員に固定IPが必要な場合はとても有力な選択肢です。</p>','VPN導入でいつでもどこでも固定IP','固定IPを導入しよう。','inherit','closed','closed','','245-revision-v1','','','2019-09-22 10:19:08','2019-09-22 01:19:08','## VPNとは\r\n**Virtual Private Network**\r\n\r\n- 通信を暗号化して盗聴を防ぐ\r\n- IPアドレスの隠蔽(いい意味で)\r\n- 固定IPで通信\r\n\r\nなどのメリットがあります。\r\n\r\n### 外出先で・・・\r\n- 外出先、打ち合わせ先でみてもらいたいデータがあるが手元にない。\r\n- 社にとりにもどるのも・・社に電話してわざわざメールなどで送ってもらうのも・・・\r\n\r\nVPNを設置すればいつでも社内ネットワークにセキュア(暗号化)に接続可能です。\r\n打ち合わせ等外出が多い方、営業マンの方にもおすすめです。\r\n\r\n### 海外で・・・\r\n- 国外で通常通りの作業をしようとするも「この国からはお繋ぎできません」と接続できない\r\n\r\nVPN通信はアクセス元IPアドレスがVPNサーバーのIPアドレスとすることができます。(いい意味での隠蔽)\r\nVPNを通せば世界中どこにいても日本国内からの通信ができます。\r\n海外渡航が多い方には重宝するでしょう。(特にネットの規制が厳しい国)\r\n\r\n### スマホなどのデザリング・・・\r\n- 外出先などデザリングで機密データを送受信したいがセキュリティーが心配\r\n- FreeWiFiの仕様に抵抗がある\r\n\r\nFreeWiFIを利用してもVPNの接続を施していれば盗聴される心配はありません。\r\n盗聴されても暗号化されているので解読不能です。\r\n\r\n### 固定IPアドレスにしてくださいと言われたが・・・\r\n- ネットショップの管理画面はIP制限されるため固定IPが必要だがプロバイダーへの依頼は高額\r\n- 子育てのため自宅作業したいがIP制限でつながらない\r\n- 引っ越しなどでIPが変わると全て再設定しないといけない。\r\n\r\n外部にVPNを所有していればIPアドレスは不変です。\r\n特にネットショップ運営、WEB開発の現場に導入すればメリット大です。\r\n\r\n## VPN を導入するには\r\n\r\n### 既存のサービスを申し込む\r\n[マイIP](https://www.interlink.or.jp/)というサービスがあります。当方も利用しておりました。\r\n月額1000くらいで問題なく利用できてました。\r\nネットでは 「速度が出ない」という評価もありますがそうは思いませんでした。\r\n手っ取り早く導入したい時に有力です。\r\nただ1アカウント1接続なのでアカウントの使い回しは無理です。\r\nスタッフ全員で利用したい場合は人数分契約する必要があります。\r\n\r\n### VPNサーバーを自前で準備\r\n当方現在自前でVPNを構築してます。\r\n月額500円の VPS (virtual private server )に **SoftEther VPN** をインストールしてVPN環境を構築しました。\r\n初期構築費はさておき月額のランニングコストはマイIPの半分です。\r\nアカウント数も無制限です。\r\nスタッフ全員に固定IPが必要な場合はとても有力な選択肢です。\r\n\r\n',245,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/245-revision-v1/',0,'revision','',0),(248,1,'2019-09-22 10:21:19','2019-09-22 01:21:19','<h2>VPNとは</h2>\n<p><strong>Virtual Private Network</strong></p>\n<ul>\n<li>通信を暗号化して盗聴を防ぐ</li>\n<li>IPアドレスの隠蔽(いい意味で)</li>\n<li>固定IPで通信</li>\n</ul>\n<p>などのメリットがあります。</p>\n<h3>外出先で・・・</h3>\n<ul>\n<li>外出先、打ち合わせ先でみてもらいたいデータがあるが手元にない。</li>\n<li>社にとりにもどるのも・・社に電話してわざわざメールなどで送ってもらうのも・・・</li>\n</ul>\n<p>VPNを設置すればいつでも社内ネットワークにセキュア(暗号化)に接続可能です。\n打ち合わせ等外出が多い方、営業マンの方にもおすすめです。</p>\n<h3>海外で・・・</h3>\n<ul>\n<li>国外で通常通りの作業をしようとするも「この国からはお繋ぎできません」と接続できない</li>\n</ul>\n<p>VPN通信はアクセス元IPアドレスがVPNサーバーのIPアドレスとすることができます。(いい意味での隠蔽)\nVPNを通せば世界中どこにいても日本国内からの通信ができます。\n海外渡航が多い方には重宝するでしょう。(特にネットの規制が厳しい国)</p>\n<h3>スマホなどのデザリング・・・</h3>\n<ul>\n<li>外出先などデザリングで機密データを送受信したいがセキュリティーが心配</li>\n<li>FreeWiFiを使うにはに抵抗がある</li>\n</ul>\n<p>FreeWiFIを利用してもVPNの接続を施していれば盗聴される心配はありません。\n盗聴されても暗号化されているので解読不能です。</p>\n<h3>固定IPアドレスにしてくださいと言われたが・・・</h3>\n<ul>\n<li>ネットショップの管理画面はIP制限されるため固定IPが必要だがプロバイダーへの依頼は高額</li>\n<li>子育てのため自宅作業したいがIP制限でつながらない</li>\n<li>引っ越しなどでIPが変わると全て再設定しないといけない。</li>\n</ul>\n<p>外部にVPNを所有していればIPアドレスは不変です。\n特にネットショップ運営、WEB開発の現場に導入すればメリット大です。</p>\n<h2>VPN を導入するには</h2>\n<h3>既存のサービスを申し込む</h3>\n<p><a href=\"https://www.interlink.or.jp/\">マイIP</a>というサービスがあります。当方も利用しておりました。\n月額1000くらいで問題なく利用できてました。\nネットでは 「速度が出ない」という評価もありますがそうは思いませんでした。\n手っ取り早く導入したい時に有力です。\nただ1アカウント1接続なのでアカウントの使い回しは無理です。\nスタッフ全員で利用したい場合は人数分契約する必要があります。</p>\n<h3>VPNサーバーを自前で準備</h3>\n<p>当方現在自前でVPNを構築してます。\n月額500円の VPS (virtual private server )に <strong>SoftEther VPN</strong> をインストールしてVPN環境を構築しました。\n初期構築費はさておき月額のランニングコストはマイIPの半分です。\nアカウント数も無制限です。\nスタッフ全員に固定IPが必要な場合はとても有力な選択肢です。</p>','VPN導入でいつでもどこでも固定IP','固定IPを導入しよう。','inherit','closed','closed','','245-revision-v1','','','2019-09-22 10:21:19','2019-09-22 01:21:19','## VPNとは\r\n**Virtual Private Network**\r\n\r\n- 通信を暗号化して盗聴を防ぐ\r\n- IPアドレスの隠蔽(いい意味で)\r\n- 固定IPで通信\r\n\r\nなどのメリットがあります。\r\n\r\n### 外出先で・・・\r\n- 外出先、打ち合わせ先でみてもらいたいデータがあるが手元にない。\r\n- 社にとりにもどるのも・・社に電話してわざわざメールなどで送ってもらうのも・・・\r\n\r\nVPNを設置すればいつでも社内ネットワークにセキュア(暗号化)に接続可能です。\r\n打ち合わせ等外出が多い方、営業マンの方にもおすすめです。\r\n\r\n### 海外で・・・\r\n- 国外で通常通りの作業をしようとするも「この国からはお繋ぎできません」と接続できない\r\n\r\nVPN通信はアクセス元IPアドレスがVPNサーバーのIPアドレスとすることができます。(いい意味での隠蔽)\r\nVPNを通せば世界中どこにいても日本国内からの通信ができます。\r\n海外渡航が多い方には重宝するでしょう。(特にネットの規制が厳しい国)\r\n\r\n### スマホなどのデザリング・・・\r\n- 外出先などデザリングで機密データを送受信したいがセキュリティーが心配\r\n- FreeWiFiを使うにはに抵抗がある\r\n\r\nFreeWiFIを利用してもVPNの接続を施していれば盗聴される心配はありません。\r\n盗聴されても暗号化されているので解読不能です。\r\n\r\n### 固定IPアドレスにしてくださいと言われたが・・・\r\n- ネットショップの管理画面はIP制限されるため固定IPが必要だがプロバイダーへの依頼は高額\r\n- 子育てのため自宅作業したいがIP制限でつながらない\r\n- 引っ越しなどでIPが変わると全て再設定しないといけない。\r\n\r\n外部にVPNを所有していればIPアドレスは不変です。\r\n特にネットショップ運営、WEB開発の現場に導入すればメリット大です。\r\n\r\n## VPN を導入するには\r\n\r\n### 既存のサービスを申し込む\r\n[マイIP](https://www.interlink.or.jp/)というサービスがあります。当方も利用しておりました。\r\n月額1000くらいで問題なく利用できてました。\r\nネットでは 「速度が出ない」という評価もありますがそうは思いませんでした。\r\n手っ取り早く導入したい時に有力です。\r\nただ1アカウント1接続なのでアカウントの使い回しは無理です。\r\nスタッフ全員で利用したい場合は人数分契約する必要があります。\r\n\r\n### VPNサーバーを自前で準備\r\n当方現在自前でVPNを構築してます。\r\n月額500円の VPS (virtual private server )に **SoftEther VPN** をインストールしてVPN環境を構築しました。\r\n初期構築費はさておき月額のランニングコストはマイIPの半分です。\r\nアカウント数も無制限です。\r\nスタッフ全員に固定IPが必要な場合はとても有力な選択肢です。\r\n\r\n',245,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/245-revision-v1/',0,'revision','',0),(249,1,'2019-09-23 14:39:16','2019-09-23 05:39:16','<h2>VImium が便利すぎ</h2>\n<p>ブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は<a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a>の出番です。</p>\n<ul>\n<li><kbd>k</kbd>　上スクロール </li>\n<li><kbd>j</kbd>　下スクロール</li>\n<li><kbd>h</kbd>　戻る</li>\n<li><kbd>l</kbd>　進む </li>\n<li><kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>&nbsp;+&nbsp;<kbd>f</kbd>だと新規タブで開く</li>\n<li><kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で <kbd>f</kbd> をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><kbd>g</kbd>&nbsp;<kbd>i</kbd> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p><kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ</p>\n<p>がとてもVimぽくて素敵です。</p>\n<p>マウスいらずで効率アップ！</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','publish','closed','open','','vimium','','','2019-09-23 20:44:51','2019-09-23 11:44:51','## VImium が便利すぎ\r\nブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\r\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)の出番です。\r\n\r\n- <kbd>k</kbd>　上スクロール \r\n- <kbd>j</kbd>　下スクロール\r\n- <kbd>h</kbd>　戻る\r\n- <kbd>l</kbd>　進む \r\n- <kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>&nbsp;+&nbsp;<kbd>f</kbd>だと新規タブで開く\r\n- <kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で <kbd>f</kbd> をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n<kbd>g</kbd>&nbsp;<kbd>i</kbd> とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\n<kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\r\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ\r\n\r\nがとてもVimぽくて素敵です。\r\n\r\nマウスいらずで効率アップ！',0,'https://blog.webdimension.jp/?p=249',0,'post','',0),(250,1,'2019-09-22 10:47:17','2019-09-22 01:47:17','','Screen Shot 2019-09-22 at 10.46.29','','inherit','closed','closed','','screen-shot-2019-09-22-at-10-46-29','','','2019-09-22 10:47:17','2019-09-22 01:47:17','',249,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png',0,'attachment','image/png',0),(251,1,'2019-09-22 10:48:11','2019-09-22 01:48:11','','Screen Shot 2019-09-22 at 10.46.43','','inherit','closed','closed','','screen-shot-2019-09-22-at-10-46-43','','','2019-09-22 10:48:11','2019-09-22 01:48:11','',249,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png',0,'attachment','image/png',0),(252,1,'2019-09-22 10:53:24','2019-09-22 01:53:24','','Screen Shot 2019-09-22 at 10.52.58','','inherit','closed','closed','','screen-shot-2019-09-22-at-10-52-58','','','2019-09-22 10:53:24','2019-09-22 01:53:24','',249,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png',0,'attachment','image/png',0),(254,1,'2019-09-22 11:02:51','2019-09-22 02:02:51','<h2>VImium が便利すぎ</h2>\n<p><a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a></p>\n<ul>\n<li>\'k\'　上スクロール </li>\n<li>\'j\'　下スクロール</li>\n<li>\'h\'　戻る</li>\n<li>\'l\'　進む </li>\n<li>\'f\'　リンクを開く、\'F\'だと新規タブで開く</li>\n<li>\'gi\' テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で <strong>\'f\'</strong> をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><strong>\'gi\'</strong> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p>がとてもVimぽくて素敵です。</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','inherit','closed','closed','','249-revision-v1','','','2019-09-22 11:02:51','2019-09-22 02:02:51','## VImium が便利すぎ\r\n\r\n[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)\r\n\r\n- \'k\'　上スクロール \r\n- \'j\'　下スクロール\r\n- \'h\'　戻る\r\n- \'l\'　進む \r\n- \'f\'　リンクを開く、\'F\'だと新規タブで開く\r\n- \'gi\' テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で __\'f\'__ をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n__\'gi\'__ とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\nがとてもVimぽくて素敵です。',249,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/249-revision-v1/',0,'revision','',0),(255,1,'2019-09-22 11:06:52','2019-09-22 02:06:52','<h2>VImium が便利すぎ</h2>\n<p><a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a></p>\n<ul>\n<li>\'k\'　上スクロール </li>\n<li>\'j\'　下スクロール</li>\n<li>\'h\'　戻る</li>\n<li>\'l\'　進む </li>\n<li>\'f\'　リンクを開く、\'F\'だと新規タブで開く</li>\n<li>\'gi\' テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で <strong>\'f\'</strong> をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><strong>\'gi\'</strong> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p>がとてもVimぽくて素敵です。</p>\n<p>マウスいらずで効率アップ！</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','inherit','closed','closed','','249-revision-v1','','','2019-09-22 11:06:52','2019-09-22 02:06:52','## VImium が便利すぎ\r\n\r\n[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)\r\n\r\n- \'k\'　上スクロール \r\n- \'j\'　下スクロール\r\n- \'h\'　戻る\r\n- \'l\'　進む \r\n- \'f\'　リンクを開く、\'F\'だと新規タブで開く\r\n- \'gi\' テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で __\'f\'__ をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n__\'gi\'__ とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\nがとてもVimぽくて素敵です。\r\n\r\nマウスいらずで効率アップ！',249,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/249-revision-v1/',0,'revision','',0),(256,1,'2019-09-22 11:38:41','2019-09-22 02:38:41','','dev-env','','inherit','closed','closed','','dev-env-2','','','2019-09-22 11:38:41','2019-09-22 02:38:41','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/09/dev-env.png',0,'attachment','image/png',0),(257,1,'2019-09-22 11:53:05','2019-09-22 02:53:05','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるはめになる。<br />\nGoogleなどは一度登録したパスワードは再生成できない。これがより記憶に混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>という当たり前の言葉だけでなくそんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>このままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の機器に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-09-22 11:53:05','2019-09-22 02:53:05','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるはめになる。        \r\nGoogleなどは一度登録したパスワードは再生成できない。これがより記憶に混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nという当たり前の言葉だけでなくそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nこのままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の機器に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(258,1,'2019-09-22 11:53:39','2019-09-22 02:53:39','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるはめになる。<br />\nGoogleなどは一度登録したパスワードは再生成できない。これがより記憶に混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>という当たり前の言葉だけでなくそんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>このままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の端末に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-09-22 11:53:39','2019-09-22 02:53:39','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるはめになる。        \r\nGoogleなどは一度登録したパスワードは再生成できない。これがより記憶に混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nという当たり前の言葉だけでなくそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターに買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nこのままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の端末に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(259,1,'2019-09-23 03:50:17','2019-09-22 18:50:17','<p>昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。<br />\n\'gulp\'や\'webpack\'などのツールを使うことが多いでしょう。<br />\n最近は \'webpack\' が主流のようです。\nBootstrapもVersion4よりSassが採用されました。<br />\n\'webpack\'はGit同様必須となりそうです。</p>\n<h2>Wordpressのテーマ UnderstrapのPackage.json</h2>\n<p>UnderstrapのSassで例えると、</p>\n<pre><code class=\"language-source\">{\n  &quot;name&quot;: &quot;understrap-child&quot;,\n  &quot;version&quot;: &quot;0.5.5&quot;,\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\n    &quot;watch&quot;: &quot;gulp watch&quot;,\n    &quot;sass&quot;: &quot;gulp sass&quot;\n  },\n...\n...\n...\n...\n...\n</code></pre>\n<p>この &quot;scripts&quot; の内容を実行するのですが、おっさんはすぐにターミナルを開き\n<strong>\'package.json\'</strong> のあるディレクトリまで移動し</p>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>などします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。<br />\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。<br />\nまた、エラー確認のためエディタとターミナルを行ったりきたり。<br />\nショートカット使ったとしても・・・めんどくさい。<br />\nなのでこの一連のアクションはIDEAでやることにしました。<br />\n<strong>結果</strong><br />\nやっぱり楽になりました。　</p>\n<h2>npm 設定手順</h2>\n<p><strong>環境</strong>      </p>\n<ul>\n<li>MAC       </li>\n<li>node.jsがインストール済み</li>\n<li>Intellij IDEA (Phpstorm,Webstormなど)</li>\n</ul>\n<hr />\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>\'cmd\' + \'f\' を押下しnpmを検索</li>\n<li>Preferences | Languages &amp; Frameworks | Node.js and NPM へ進む</li>\n<li>\'node\',\'npm\'のPathを設定</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png\" alt=\"\" /></p>\n<p>Projct tool window の \'package.json\' を右クリック。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png\" alt=\"\" /></p>\n<p>\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png\" alt=\"\" /></p>\n<p>ここには \'Package.json\' のScripts内のコマンドがリストされます。<br />\n実行したいScript名を右クリックして実行です。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png\" alt=\"\" /></p>\n<h2>Npm window を開くためのショートカット</h2>\n<p>マウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       </p>\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>Preferences | Keymap へ進む。</li>\n<li>\'npm\'で検索し ショートカットキーを割り当てる        </li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png\" alt=\"\" /> </p>\n<p>これでだいぶん楽になる。</p>\n<h2>IDEA 「なんでも検索」 を使う</h2>\n<p>それでも<span class=\"under_line\">めんどくさい</span>という場合、\n&quot;ただただ、\'npm run watch\' を走らせたいんだ&quot; という場合はIDEAの超便利機能\n「なんでも検索」の出番です。</p>\n<ol>\n<li>\'Shift\' x 2 （連打) で「なんでも検索」</li>\n<li>\'watch\' をタイプ、&quot;Run \'watch\' npm script&quot; が出てくるのでEnter。</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png\" alt=\"\" />       </p>\n<p>実行後はこんな感じです。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png\" alt=\"\" /></p>\n<p>IDEAの「なんでも検索」はほんとすごい。快適です。</p>','Intellij idea から npm を操作','\'npm run watch\'などはターミナルを開いて実行してましたが地味に<span class=\"under_line\">めんどくさい</span>のでIDEA側で操作するようにした。','publish','closed','open','','idea-npm','','','2019-09-23 20:15:00','2019-09-23 11:15:00','昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。      \r\n\'gulp\'や\'webpack\'などのツールを使うことが多いでしょう。      \r\n最近は \'webpack\' が主流のようです。\r\nBootstrapもVersion4よりSassが採用されました。       \r\n\'webpack\'はGit同様必須となりそうです。\r\n\r\n## Wordpressのテーマ UnderstrapのPackage.json\r\nUnderstrapのSassで例えると、\r\n```source\r\n{\r\n  &quot;name&quot;: &quot;understrap-child&quot;,\r\n  &quot;version&quot;: &quot;0.5.5&quot;,\r\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\r\n  &quot;main&quot;: &quot;index.js&quot;,\r\n  &quot;scripts&quot;: {\r\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\r\n    &quot;watch&quot;: &quot;gulp watch&quot;,\r\n    &quot;sass&quot;: &quot;gulp sass&quot;\r\n  },\r\n...\r\n...\r\n...\r\n...\r\n...\r\n\r\n```\r\nこの \"scripts\" の内容を実行するのですが、おっさんはすぐにターミナルを開き\r\n__\'package.json\'__ のあるディレクトリまで移動し\r\n\r\n```bash\r\nnpm run watch\r\n```\r\n\r\nなどします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。      \r\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。     \r\nまた、エラー確認のためエディタとターミナルを行ったりきたり。     \r\nショートカット使ったとしても・・・めんどくさい。        \r\nなのでこの一連のアクションはIDEAでやることにしました。       \r\n__結果__      \r\nやっぱり楽になりました。　\r\n\r\n## npm 設定手順\r\n__環境__      \r\n- MAC       \r\n- node.jsがインストール済み\r\n- Intellij IDEA (Phpstorm,Webstormなど)\r\n\r\n--------\r\n\r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. \'cmd\' + \'f\' を押下しnpmを検索\r\n3. Preferences | Languages & Frameworks | Node.js and NPM へ進む\r\n4. \'node\',\'npm\'のPathを設定\r\n \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png)\r\n\r\nProjct tool window の \'package.json\' を右クリック。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png)\r\n\r\n\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png)\r\n\r\nここには \'Package.json\' のScripts内のコマンドがリストされます。     \r\n実行したいScript名を右クリックして実行です。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png)\r\n\r\n## Npm window を開くためのショートカット\r\nマウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       \r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. Preferences | Keymap へ進む。\r\n3. \'npm\'で検索し ショートカットキーを割り当てる        \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png) \r\n\r\n\r\nこれでだいぶん楽になる。\r\n\r\n\r\n## IDEA 「なんでも検索」 を使う\r\nそれでも<span class=\"under_line\">めんどくさい</span>という場合、\r\n\"ただただ、\'npm run watch\' を走らせたいんだ\" という場合はIDEAの超便利機能\r\n「なんでも検索」の出番です。\r\n\r\n1. \'Shift\' x 2 （連打) で「なんでも検索」\r\n2. \'watch\' をタイプ、\"Run \'watch\' npm script\" が出てくるのでEnter。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png)       \r\n\r\n\r\n実行後はこんな感じです。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png)\r\n\r\nIDEAの「なんでも検索」はほんとすごい。快適です。\r\n\r\n\r\n',0,'https://blog.webdimension.jp/?p=259',0,'post','',0),(260,1,'2019-09-22 16:29:42','2019-09-22 07:29:42','','Screen Shot 2019-09-22 at 15.59.10','','inherit','closed','closed','','screen-shot-2019-09-22-at-15-59-10','','','2019-09-22 16:29:42','2019-09-22 07:29:42','',259,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png',0,'attachment','image/png',0),(261,1,'2019-09-22 16:30:20','2019-09-22 07:30:20','','Screen Shot 2019-09-22 at 16.02.55','','inherit','closed','closed','','screen-shot-2019-09-22-at-16-02-55','','','2019-09-22 16:30:20','2019-09-22 07:30:20','',259,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png',0,'attachment','image/png',0),(263,1,'2019-09-22 16:33:13','2019-09-22 07:33:13','','Screen Shot 2019-09-22 at 16.04.14','','inherit','closed','closed','','screen-shot-2019-09-22-at-16-04-14','','','2019-09-22 16:33:13','2019-09-22 07:33:13','',259,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png',0,'attachment','image/png',0),(264,1,'2019-09-22 16:34:55','2019-09-22 07:34:55','','Screen Shot 2019-09-22 at 16.07.39','','inherit','closed','closed','','screen-shot-2019-09-22-at-16-07-39','','','2019-09-22 16:34:55','2019-09-22 07:34:55','',259,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png',0,'attachment','image/png',0),(265,1,'2019-09-22 16:35:33','2019-09-22 07:35:33','','Screen Shot 2019-09-22 at 16.12.21','','inherit','closed','closed','','screen-shot-2019-09-22-at-16-12-21','','','2019-09-22 16:35:33','2019-09-22 07:35:33','',259,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png',0,'attachment','image/png',0),(266,1,'2019-09-22 16:36:14','2019-09-22 07:36:14','','Screen Shot 2019-09-22 at 16.23.03','','inherit','closed','closed','','screen-shot-2019-09-22-at-16-23-03','','','2019-09-22 16:36:14','2019-09-22 07:36:14','',259,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png',0,'attachment','image/png',0),(267,1,'2019-09-22 16:38:52','2019-09-22 07:38:52','','Screen Shot 2019-09-22 at 16.37.22','','inherit','closed','closed','','screen-shot-2019-09-22-at-16-37-22','','','2019-09-22 16:38:52','2019-09-22 07:38:52','',259,'https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png',0,'attachment','image/png',0),(269,1,'2019-09-22 16:49:02','2019-09-22 07:49:02','<p>昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。<br />\n\'gulp\' や　\'webpack\' などのツールを使うことが多いでしょう。<br />\n最近は \'webpack\' が主流のようです。\nBootstrapもVersion4よりSassが採用せれました。<br />\n\'webpack\' はGit同様必須となりそうです。</p>\n<h2>Wordpressのテーマ UnderstrapのPackage.json</h2>\n<p>UnderstrapのSassで例えると、</p>\n<pre><code class=\"language-source\">{\n  &quot;name&quot;: &quot;understrap-child&quot;,\n  &quot;version&quot;: &quot;0.5.5&quot;,\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\n    &quot;watch&quot;: &quot;gulp watch&quot;,\n    &quot;sass&quot;: &quot;gulp sass&quot;\n  },\n...\n...\n...\n...\n...\n</code></pre>\n<p>この &quot;scripts&quot; の内容を実行するのですが、おっさんはすぐにターミナルを開き\n<strong>\'package.json\'</strong> のあるディレクトリまで移動し</p>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>などします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。<br />\nそれに \'watch\'　にするとBackgroundで動くためターミナルのタブ一枚占領します。<br />\nまた、エラー確認のためエディタとターミナルを行ったりきたり。<br />\nショートカット使ったとしても・・・めんどくさい。<br />\nなのでこの一連のアクションはIDEAでやることにしました。<br />\n<strong>結果</strong><br />\nやっぱり楽になりました。　</p>\n<h2>npm 設定手順</h2>\n<p><strong>環境</strong>      </p>\n<ul>\n<li>MAC       </li>\n<li>node.jsがインストール済み</li>\n<li>Intellij IDEA (Phpstorm,Webstormなど)</li>\n</ul>\n<hr />\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>\'cmd\' + \'f\' を押下しnpmを検索</li>\n<li>Preferences | Languages &amp; Frameworks | Node.js and NPM へ進む</li>\n<li>\'node\',\'npm\'のPathを設定</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png\" alt=\"\" /></p>\n<p>Projct tool window の \'package.json\' を右クリック。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png\" alt=\"\" /></p>\n<p>\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png\" alt=\"\" /></p>\n<p>ここには \'Package.json\' のScripts内のコマンドがリストされます。<br />\n実行したいScript名を右クリックして実行です。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png\" alt=\"\" /></p>\n<h2>Npm window を開くためのショートカット</h2>\n<p>マウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       </p>\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>Preferences | Keymap へ進む。</li>\n<li>\'npm\'で検索し ショートカットキーを割り当てる        </li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png\" alt=\"\" /> </p>\n<p>これでだいぶん楽になる。</p>\n<h2>それでもめんどくさいという場合</h2>\n<p>&quot;ただただ、\'npm run watch\' を走らせたいんだ&quot; という場合はIDEAの超便利機能\n「なんでも検索」の出番です。</p>\n<ol>\n<li>\'Shift\' x 2 （連打) で「なんでも検索」</li>\n<li>\'watch\' をタイプ、&quot;Run \'watch\' npm script&quot; が出てくるのでEnter。</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png\" alt=\"\" />       </p>\n<p>実行後はこんな感じです。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png\" alt=\"\" /></p>\n<p>「なんでも検索」はほんとすごい。快適です。</p>','Intellij idea から npm を操作','\'npm run watch\'　などはターミナルを開いて実行してましたが地味にめんどくさいのでIDEA側で移行するようにした。','inherit','closed','closed','','259-revision-v1','','','2019-09-22 16:49:02','2019-09-22 07:49:02','昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。      \r\n\'gulp\' や　\'webpack\' などのツールを使うことが多いでしょう。      \r\n最近は \'webpack\' が主流のようです。\r\nBootstrapもVersion4よりSassが採用せれました。       \r\n\'webpack\' はGit同様必須となりそうです。\r\n\r\n## Wordpressのテーマ UnderstrapのPackage.json\r\nUnderstrapのSassで例えると、\r\n```source\r\n{\r\n  &quot;name&quot;: &quot;understrap-child&quot;,\r\n  &quot;version&quot;: &quot;0.5.5&quot;,\r\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\r\n  &quot;main&quot;: &quot;index.js&quot;,\r\n  &quot;scripts&quot;: {\r\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\r\n    &quot;watch&quot;: &quot;gulp watch&quot;,\r\n    &quot;sass&quot;: &quot;gulp sass&quot;\r\n  },\r\n...\r\n...\r\n...\r\n...\r\n...\r\n\r\n```\r\nこの \"scripts\" の内容を実行するのですが、おっさんはすぐにターミナルを開き\r\n__\'package.json\'__ のあるディレクトリまで移動し\r\n\r\n```bash\r\nnpm run watch\r\n```\r\n\r\nなどします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。      \r\nそれに \'watch\'　にするとBackgroundで動くためターミナルのタブ一枚占領します。     \r\nまた、エラー確認のためエディタとターミナルを行ったりきたり。     \r\nショートカット使ったとしても・・・めんどくさい。        \r\nなのでこの一連のアクションはIDEAでやることにしました。       \r\n__結果__      \r\nやっぱり楽になりました。　\r\n\r\n## npm 設定手順\r\n__環境__      \r\n- MAC       \r\n- node.jsがインストール済み\r\n- Intellij IDEA (Phpstorm,Webstormなど)\r\n\r\n--------\r\n\r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. \'cmd\' + \'f\' を押下しnpmを検索\r\n3. Preferences | Languages & Frameworks | Node.js and NPM へ進む\r\n4. \'node\',\'npm\'のPathを設定\r\n \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png)\r\n\r\nProjct tool window の \'package.json\' を右クリック。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png)\r\n\r\n\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png)\r\n\r\nここには \'Package.json\' のScripts内のコマンドがリストされます。     \r\n実行したいScript名を右クリックして実行です。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png)\r\n\r\n## Npm window を開くためのショートカット\r\nマウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       \r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. Preferences | Keymap へ進む。\r\n3. \'npm\'で検索し ショートカットキーを割り当てる        \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png) \r\n\r\n\r\nこれでだいぶん楽になる。\r\n\r\n\r\n## それでもめんどくさいという場合\r\n\"ただただ、\'npm run watch\' を走らせたいんだ\" という場合はIDEAの超便利機能\r\n「なんでも検索」の出番です。\r\n\r\n1. \'Shift\' x 2 （連打) で「なんでも検索」\r\n2. \'watch\' をタイプ、\"Run \'watch\' npm script\" が出てくるのでEnter。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png)       \r\n\r\n実行後はこんな感じです。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png)\r\n\r\n「なんでも検索」はほんとすごい。快適です。\r\n\r\n\r\n',259,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/259-revision-v1/',0,'revision','',0),(270,1,'2019-09-22 16:49:58','2019-09-22 07:49:58','<p>昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。<br />\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。<br />\n最近は \'webpack\' が主流のようです。\nBootstrapもVersion4よりSassが採用されました。<br />\n\'webpack\'はGit同様必須となりそうです。</p>\n<h2>Wordpressのテーマ UnderstrapのPackage.json</h2>\n<p>UnderstrapのSassで例えると、</p>\n<pre><code class=\"language-source\">{\n  &quot;name&quot;: &quot;understrap-child&quot;,\n  &quot;version&quot;: &quot;0.5.5&quot;,\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\n    &quot;watch&quot;: &quot;gulp watch&quot;,\n    &quot;sass&quot;: &quot;gulp sass&quot;\n  },\n...\n...\n...\n...\n...\n</code></pre>\n<p>この &quot;scripts&quot; の内容を実行するのですが、おっさんはすぐにターミナルを開き\n<strong>\'package.json\'</strong> のあるディレクトリまで移動し</p>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>などします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。<br />\nそれに \'watch\'　にするとBackgroundで動くためターミナルのタブ一枚占領します。<br />\nまた、エラー確認のためエディタとターミナルを行ったりきたり。<br />\nショートカット使ったとしても・・・めんどくさい。<br />\nなのでこの一連のアクションはIDEAでやることにしました。<br />\n<strong>結果</strong><br />\nやっぱり楽になりました。　</p>\n<h2>npm 設定手順</h2>\n<p><strong>環境</strong>      </p>\n<ul>\n<li>MAC       </li>\n<li>node.jsがインストール済み</li>\n<li>Intellij IDEA (Phpstorm,Webstormなど)</li>\n</ul>\n<hr />\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>\'cmd\' + \'f\' を押下しnpmを検索</li>\n<li>Preferences | Languages &amp; Frameworks | Node.js and NPM へ進む</li>\n<li>\'node\',\'npm\'のPathを設定</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png\" alt=\"\" /></p>\n<p>Projct tool window の \'package.json\' を右クリック。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png\" alt=\"\" /></p>\n<p>\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png\" alt=\"\" /></p>\n<p>ここには \'Package.json\' のScripts内のコマンドがリストされます。<br />\n実行したいScript名を右クリックして実行です。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png\" alt=\"\" /></p>\n<h2>Npm window を開くためのショートカット</h2>\n<p>マウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       </p>\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>Preferences | Keymap へ進む。</li>\n<li>\'npm\'で検索し ショートカットキーを割り当てる        </li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png\" alt=\"\" /> </p>\n<p>これでだいぶん楽になる。</p>\n<h2>それでもめんどくさいという場合</h2>\n<p>&quot;ただただ、\'npm run watch\' を走らせたいんだ&quot; という場合はIDEAの超便利機能\n「なんでも検索」の出番です。</p>\n<ol>\n<li>\'Shift\' x 2 （連打) で「なんでも検索」</li>\n<li>\'watch\' をタイプ、&quot;Run \'watch\' npm script&quot; が出てくるのでEnter。</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png\" alt=\"\" />       </p>\n<p>実行後はこんな感じです。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png\" alt=\"\" /></p>\n<p>「なんでも検索」はほんとすごい。快適です。</p>','Intellij idea から npm を操作','\'npm run watch\'　などはターミナルを開いて実行してましたが地味にめんどくさいのでIDEA側で移行するようにした。','inherit','closed','closed','','259-revision-v1','','','2019-09-22 16:49:58','2019-09-22 07:49:58','昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。      \r\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。      \r\n最近は \'webpack\' が主流のようです。\r\nBootstrapもVersion4よりSassが採用されました。       \r\n\'webpack\'はGit同様必須となりそうです。\r\n\r\n## Wordpressのテーマ UnderstrapのPackage.json\r\nUnderstrapのSassで例えると、\r\n```source\r\n{\r\n  &quot;name&quot;: &quot;understrap-child&quot;,\r\n  &quot;version&quot;: &quot;0.5.5&quot;,\r\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\r\n  &quot;main&quot;: &quot;index.js&quot;,\r\n  &quot;scripts&quot;: {\r\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\r\n    &quot;watch&quot;: &quot;gulp watch&quot;,\r\n    &quot;sass&quot;: &quot;gulp sass&quot;\r\n  },\r\n...\r\n...\r\n...\r\n...\r\n...\r\n\r\n```\r\nこの \"scripts\" の内容を実行するのですが、おっさんはすぐにターミナルを開き\r\n__\'package.json\'__ のあるディレクトリまで移動し\r\n\r\n```bash\r\nnpm run watch\r\n```\r\n\r\nなどします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。      \r\nそれに \'watch\'　にするとBackgroundで動くためターミナルのタブ一枚占領します。     \r\nまた、エラー確認のためエディタとターミナルを行ったりきたり。     \r\nショートカット使ったとしても・・・めんどくさい。        \r\nなのでこの一連のアクションはIDEAでやることにしました。       \r\n__結果__      \r\nやっぱり楽になりました。　\r\n\r\n## npm 設定手順\r\n__環境__      \r\n- MAC       \r\n- node.jsがインストール済み\r\n- Intellij IDEA (Phpstorm,Webstormなど)\r\n\r\n--------\r\n\r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. \'cmd\' + \'f\' を押下しnpmを検索\r\n3. Preferences | Languages & Frameworks | Node.js and NPM へ進む\r\n4. \'node\',\'npm\'のPathを設定\r\n \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png)\r\n\r\nProjct tool window の \'package.json\' を右クリック。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png)\r\n\r\n\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png)\r\n\r\nここには \'Package.json\' のScripts内のコマンドがリストされます。     \r\n実行したいScript名を右クリックして実行です。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png)\r\n\r\n## Npm window を開くためのショートカット\r\nマウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       \r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. Preferences | Keymap へ進む。\r\n3. \'npm\'で検索し ショートカットキーを割り当てる        \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png) \r\n\r\n\r\nこれでだいぶん楽になる。\r\n\r\n\r\n## それでもめんどくさいという場合\r\n\"ただただ、\'npm run watch\' を走らせたいんだ\" という場合はIDEAの超便利機能\r\n「なんでも検索」の出番です。\r\n\r\n1. \'Shift\' x 2 （連打) で「なんでも検索」\r\n2. \'watch\' をタイプ、\"Run \'watch\' npm script\" が出てくるのでEnter。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png)       \r\n\r\n実行後はこんな感じです。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png)\r\n\r\n「なんでも検索」はほんとすごい。快適です。\r\n\r\n\r\n',259,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/259-revision-v1/',0,'revision','',0),(271,1,'2019-09-22 16:52:46','2019-09-22 07:52:46','<p>昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。<br />\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。<br />\n最近は \'webpack\' が主流のようです。\nBootstrapもVersion4よりSassが採用されました。<br />\n\'webpack\'はGit同様必須となりそうです。</p>\n<h2>Wordpressのテーマ UnderstrapのPackage.json</h2>\n<p>UnderstrapのSassで例えると、</p>\n<pre><code class=\"language-source\">{\n  &quot;name&quot;: &quot;understrap-child&quot;,\n  &quot;version&quot;: &quot;0.5.5&quot;,\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\n    &quot;watch&quot;: &quot;gulp watch&quot;,\n    &quot;sass&quot;: &quot;gulp sass&quot;\n  },\n...\n...\n...\n...\n...\n</code></pre>\n<p>この &quot;scripts&quot; の内容を実行するのですが、おっさんはすぐにターミナルを開き\n<strong>\'package.json\'</strong> のあるディレクトリまで移動し</p>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>などします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。<br />\nそれに \'watch\'　にするとBackgroundで動くためターミナルのタブ一枚占領します。<br />\nまた、エラー確認のためエディタとターミナルを行ったりきたり。<br />\nショートカット使ったとしても・・・めんどくさい。<br />\nなのでこの一連のアクションはIDEAでやることにしました。<br />\n<strong>結果</strong><br />\nやっぱり楽になりました。　</p>\n<h2>npm 設定手順</h2>\n<p><strong>環境</strong>      </p>\n<ul>\n<li>MAC       </li>\n<li>node.jsがインストール済み</li>\n<li>Intellij IDEA (Phpstorm,Webstormなど)</li>\n</ul>\n<hr />\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>\'cmd\' + \'f\' を押下しnpmを検索</li>\n<li>Preferences | Languages &amp; Frameworks | Node.js and NPM へ進む</li>\n<li>\'node\',\'npm\'のPathを設定</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png\" alt=\"\" /></p>\n<p>Projct tool window の \'package.json\' を右クリック。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png\" alt=\"\" /></p>\n<p>\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png\" alt=\"\" /></p>\n<p>ここには \'Package.json\' のScripts内のコマンドがリストされます。<br />\n実行したいScript名を右クリックして実行です。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png\" alt=\"\" /></p>\n<h2>Npm window を開くためのショートカット</h2>\n<p>マウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       </p>\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>Preferences | Keymap へ進む。</li>\n<li>\'npm\'で検索し ショートカットキーを割り当てる        </li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png\" alt=\"\" /> </p>\n<p>これでだいぶん楽になる。</p>\n<h2>それでもめんどくさいという場合</h2>\n<p>&quot;ただただ、\'npm run watch\' を走らせたいんだ&quot; という場合はIDEAの超便利機能\n「なんでも検索」の出番です。</p>\n<ol>\n<li>\'Shift\' x 2 （連打) で「なんでも検索」</li>\n<li>\'watch\' をタイプ、&quot;Run \'watch\' npm script&quot; が出てくるのでEnter。</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png\" alt=\"\" />       </p>\n<p>実行後はこんな感じです。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png\" alt=\"\" /></p>\n<p>「なんでも検索」はほんとすごい。快適です。</p>','Intellij idea から npm を操作','\'npm run watch\'　などはターミナルを開いて実行してましたが地味にめんどくさいのでIDEA側で操作するようにした。','inherit','closed','closed','','259-revision-v1','','','2019-09-22 16:52:46','2019-09-22 07:52:46','昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。      \r\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。      \r\n最近は \'webpack\' が主流のようです。\r\nBootstrapもVersion4よりSassが採用されました。       \r\n\'webpack\'はGit同様必須となりそうです。\r\n\r\n## Wordpressのテーマ UnderstrapのPackage.json\r\nUnderstrapのSassで例えると、\r\n```source\r\n{\r\n  &quot;name&quot;: &quot;understrap-child&quot;,\r\n  &quot;version&quot;: &quot;0.5.5&quot;,\r\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\r\n  &quot;main&quot;: &quot;index.js&quot;,\r\n  &quot;scripts&quot;: {\r\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\r\n    &quot;watch&quot;: &quot;gulp watch&quot;,\r\n    &quot;sass&quot;: &quot;gulp sass&quot;\r\n  },\r\n...\r\n...\r\n...\r\n...\r\n...\r\n\r\n```\r\nこの \"scripts\" の内容を実行するのですが、おっさんはすぐにターミナルを開き\r\n__\'package.json\'__ のあるディレクトリまで移動し\r\n\r\n```bash\r\nnpm run watch\r\n```\r\n\r\nなどします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。      \r\nそれに \'watch\'　にするとBackgroundで動くためターミナルのタブ一枚占領します。     \r\nまた、エラー確認のためエディタとターミナルを行ったりきたり。     \r\nショートカット使ったとしても・・・めんどくさい。        \r\nなのでこの一連のアクションはIDEAでやることにしました。       \r\n__結果__      \r\nやっぱり楽になりました。　\r\n\r\n## npm 設定手順\r\n__環境__      \r\n- MAC       \r\n- node.jsがインストール済み\r\n- Intellij IDEA (Phpstorm,Webstormなど)\r\n\r\n--------\r\n\r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. \'cmd\' + \'f\' を押下しnpmを検索\r\n3. Preferences | Languages & Frameworks | Node.js and NPM へ進む\r\n4. \'node\',\'npm\'のPathを設定\r\n \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png)\r\n\r\nProjct tool window の \'package.json\' を右クリック。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png)\r\n\r\n\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png)\r\n\r\nここには \'Package.json\' のScripts内のコマンドがリストされます。     \r\n実行したいScript名を右クリックして実行です。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png)\r\n\r\n## Npm window を開くためのショートカット\r\nマウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       \r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. Preferences | Keymap へ進む。\r\n3. \'npm\'で検索し ショートカットキーを割り当てる        \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png) \r\n\r\n\r\nこれでだいぶん楽になる。\r\n\r\n\r\n## それでもめんどくさいという場合\r\n\"ただただ、\'npm run watch\' を走らせたいんだ\" という場合はIDEAの超便利機能\r\n「なんでも検索」の出番です。\r\n\r\n1. \'Shift\' x 2 （連打) で「なんでも検索」\r\n2. \'watch\' をタイプ、\"Run \'watch\' npm script\" が出てくるのでEnter。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png)       \r\n\r\n実行後はこんな感じです。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png)\r\n\r\n「なんでも検索」はほんとすごい。快適です。\r\n\r\n\r\n',259,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/259-revision-v1/',0,'revision','',0),(273,1,'2019-09-23 14:41:36','2019-09-23 05:41:36','<p>MySQL5.7からは以前のバージョンに比べて<span class=\"under_line\">めんどくさい</span>ことになってます。</p>\n<h2>MySQL5.7インストール後の初回ログインは <strong>必ず手順を忘れる</strong> ので備忘録。</h2>\n<p>初期ログインアカウントはroot<br />\n初期パスワードはインストール時にログに吐き出されている。   </p>\n<pre><code class=\"language-bash\">$ sudo cat /var/log/mysqld.log\nor\n$ sudo cat /var/log/mysqld.log | grep password</code></pre>\n<p>この行。      </p>\n<pre><code class=\"language-bash\">temporary password is generated for root@localhost: 0h7ku9hSGM(4</code></pre>\n<p>初期パスワードでログイン後に新たにパスワードを設定。       </p>\n<pre><code class=\"language-bash\">mysql_secure_installation</code></pre>\n<p>初期パスワードを入力しあらためてパスワードを設定。<br />\n大文字、小文字、数字、記号含む。<br />\n以前のバージョンのようにパスワードを空でログインする場合は</p>\n<pre><code class=\"language-bash\">sudo vi /etc/my.cnf</code></pre>\n<p>skip-grant-tables<br />\nを追記します。\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      </p>\n<pre><code class=\"language-bash\">mysql -uroot -p</code></pre>\n<p>パスワード入力してログイン後      </p>\n<pre><code class=\"language-bash\">mysql&gt; SET GLOBAL validate_password_length=4; \nmysql&gt; SET GLOBAL validate_password_policy=LOW; </code></pre>\n<p>いろいろと<span class=\"under_line\">めんどくさい</span>のでレベルはLOW、4桁以上のパスワードを設定可能にします。</p>\n<pre><code class=\"language-bash\">mysql&gt; set password for root@localhost=password(&#039;root&#039;);</code></pre>\n<p>備考<br />\nLOW : 桁数<br />\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字<br />\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      </p>\n<p>今まで root パスなしだったのもどうなのよと思うこのごろです。</p>','MySQL5.7インストール後の初回ログイン','MySQL5.7から初期アカウントが　root パスなし　ではなくなり一手間必要。','publish','closed','open','','mysql57_first-login','','','2019-09-23 19:42:19','2019-09-23 10:42:19','MySQL5.7からは以前のバージョンに比べて<span class=\"under_line\">めんどくさい</span>ことになってます。\r\n\r\n## MySQL5.7インストール後の初回ログインは __必ず手順を忘れる__ ので備忘録。\r\n\r\n初期ログインアカウントはroot      \r\n初期パスワードはインストール時にログに吐き出されている。   \r\n\r\n```bash\r\n$ sudo cat /var/log/mysqld.log\r\nor\r\n$ sudo cat /var/log/mysqld.log | grep password\r\n```\r\nこの行。      \r\n```bash\r\ntemporary password is generated for root@localhost: 0h7ku9hSGM(4\r\n```\r\n初期パスワードでログイン後に新たにパスワードを設定。       \r\n```bash\r\nmysql_secure_installation\r\n```\r\n初期パスワードを入力しあらためてパスワードを設定。        \r\n大文字、小文字、数字、記号含む。      \r\n以前のバージョンのようにパスワードを空でログインする場合は\r\n```bash\r\nsudo vi /etc/my.cnf\r\n```\r\nskip-grant-tables       \r\nを追記します。\r\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      \r\n```bash\r\nmysql -uroot -p\r\n```\r\nパスワード入力してログイン後      \r\n```bash\r\nmysql&gt; SET GLOBAL validate_password_length=4; \r\nmysql&gt; SET GLOBAL validate_password_policy=LOW; \r\n```\r\nいろいろと<span class=\"under_line\">めんどくさい</span>のでレベルはLOW、4桁以上のパスワードを設定可能にします。\r\n\r\n```bash\r\nmysql&gt; set password for root@localhost=password(&#039;root&#039;);\r\n```\r\n備考      \r\nLOW : 桁数        \r\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字     \r\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      \r\n\r\n今まで root パスなしだったのもどうなのよと思うこのごろです。',0,'https://blog.webdimension.jp/?p=273',0,'post','',0),(274,1,'2019-09-22 17:12:57','2019-09-22 08:12:57','<p>MySQL5.7からは以前のバージョンに比べて面倒になってます。</p>\n<h2>MySQL5.7インストール時は必ず手順を忘れるので備忘録。</h2>\n<p>初期ログインアカウントはroot<br />\n初期パスワードはインストール時にログに吐き出されている。   </p>\n<pre><code class=\"language-bash\">$ sudo cat /var/log/mysqld.log\nor\n$ sudo cat /var/log/mysqld.log | grep password</code></pre>\n<p>この行。      </p>\n<pre><code class=\"language-bash\">temporary password is generated for root@localhost: 0h7ku9hSGM(4</code></pre>\n<p>初期パスワードでログイン後に新たにパスワードを設定。       </p>\n<pre><code class=\"language-bash\">mysql_secure_installation</code></pre>\n<p>初期パスワードを入力しあらためてパスワードを設定。<br />\n大文字、小文字、数字、記号含む。<br />\n以前のバージョンのようにパスワードを空でログインする場合は</p>\n<pre><code class=\"language-bash\">sudo vi /etc/my.cnf</code></pre>\n<p>skip-grant-tables<br />\nを追記します。\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      </p>\n<pre><code class=\"language-bash\">mysql -uroot -p</code></pre>\n<p>パスワード入力してログイン後      </p>\n<pre><code class=\"language-bash\">mysql&gt; SET GLOBAL validate_password_length=4; \nmysql&gt; SET GLOBAL validate_password_policy=LOW; </code></pre>\n<p>レベルはLOW、4桁以上のパスワードを設定可能。</p>\n<pre><code class=\"language-bash\">mysql&gt; set password for root@localhost=password(&#039;root&#039;);</code></pre>\n<p>備考<br />\nLOW : 桁数<br />\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字<br />\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      </p>','MySQL5.7インストール後の初回ログイン','','inherit','closed','closed','','273-revision-v1','','','2019-09-22 17:12:57','2019-09-22 08:12:57','MySQL5.7からは以前のバージョンに比べて面倒になってます。\r\n\r\n## MySQL5.7インストール時は必ず手順を忘れるので備忘録。\r\n\r\n初期ログインアカウントはroot      \r\n初期パスワードはインストール時にログに吐き出されている。   \r\n\r\n```bash\r\n$ sudo cat /var/log/mysqld.log\r\nor\r\n$ sudo cat /var/log/mysqld.log | grep password\r\n```\r\nこの行。      \r\n```bash\r\ntemporary password is generated for root@localhost: 0h7ku9hSGM(4\r\n```\r\n初期パスワードでログイン後に新たにパスワードを設定。       \r\n```bash\r\nmysql_secure_installation\r\n```\r\n初期パスワードを入力しあらためてパスワードを設定。        \r\n大文字、小文字、数字、記号含む。      \r\n以前のバージョンのようにパスワードを空でログインする場合は\r\n```bash\r\nsudo vi /etc/my.cnf\r\n```\r\nskip-grant-tables       \r\nを追記します。\r\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      \r\n```bash\r\nmysql -uroot -p\r\n```\r\nパスワード入力してログイン後      \r\n```bash\r\nmysql&gt; SET GLOBAL validate_password_length=4; \r\nmysql&gt; SET GLOBAL validate_password_policy=LOW; \r\n```\r\nレベルはLOW、4桁以上のパスワードを設定可能。\r\n```bash\r\nmysql&gt; set password for root@localhost=password(&#039;root&#039;);\r\n```\r\n備考      \r\nLOW : 桁数        \r\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字     \r\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      \r\n',273,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/273-revision-v1/',0,'revision','',0),(276,1,'2019-09-22 17:18:20','2019-09-22 08:18:20','<p>MySQL5.7からは以前のバージョンに比べて面倒になってます。</p>\n<h2>MySQL5.7インストール時は <strong>必ず手順を忘れる</strong> ので備忘録。</h2>\n<p>初期ログインアカウントはroot<br />\n初期パスワードはインストール時にログに吐き出されている。   </p>\n<pre><code class=\"language-bash\">$ sudo cat /var/log/mysqld.log\nor\n$ sudo cat /var/log/mysqld.log | grep password</code></pre>\n<p>この行。      </p>\n<pre><code class=\"language-bash\">temporary password is generated for root@localhost: 0h7ku9hSGM(4</code></pre>\n<p>初期パスワードでログイン後に新たにパスワードを設定。       </p>\n<pre><code class=\"language-bash\">mysql_secure_installation</code></pre>\n<p>初期パスワードを入力しあらためてパスワードを設定。<br />\n大文字、小文字、数字、記号含む。<br />\n以前のバージョンのようにパスワードを空でログインする場合は</p>\n<pre><code class=\"language-bash\">sudo vi /etc/my.cnf</code></pre>\n<p>skip-grant-tables<br />\nを追記します。\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      </p>\n<pre><code class=\"language-bash\">mysql -uroot -p</code></pre>\n<p>パスワード入力してログイン後      </p>\n<pre><code class=\"language-bash\">mysql&gt; SET GLOBAL validate_password_length=4; \nmysql&gt; SET GLOBAL validate_password_policy=LOW; </code></pre>\n<p>レベルはLOW、4桁以上のパスワードを設定可能。</p>\n<pre><code class=\"language-bash\">mysql&gt; set password for root@localhost=password(&#039;root&#039;);</code></pre>\n<p>備考<br />\nLOW : 桁数<br />\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字<br />\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      </p>','MySQL5.7インストール後の初回ログイン','','inherit','closed','closed','','273-revision-v1','','','2019-09-22 17:18:20','2019-09-22 08:18:20','MySQL5.7からは以前のバージョンに比べて面倒になってます。\r\n\r\n## MySQL5.7インストール時は __必ず手順を忘れる__ ので備忘録。\r\n\r\n初期ログインアカウントはroot      \r\n初期パスワードはインストール時にログに吐き出されている。   \r\n\r\n```bash\r\n$ sudo cat /var/log/mysqld.log\r\nor\r\n$ sudo cat /var/log/mysqld.log | grep password\r\n```\r\nこの行。      \r\n```bash\r\ntemporary password is generated for root@localhost: 0h7ku9hSGM(4\r\n```\r\n初期パスワードでログイン後に新たにパスワードを設定。       \r\n```bash\r\nmysql_secure_installation\r\n```\r\n初期パスワードを入力しあらためてパスワードを設定。        \r\n大文字、小文字、数字、記号含む。      \r\n以前のバージョンのようにパスワードを空でログインする場合は\r\n```bash\r\nsudo vi /etc/my.cnf\r\n```\r\nskip-grant-tables       \r\nを追記します。\r\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      \r\n```bash\r\nmysql -uroot -p\r\n```\r\nパスワード入力してログイン後      \r\n```bash\r\nmysql&gt; SET GLOBAL validate_password_length=4; \r\nmysql&gt; SET GLOBAL validate_password_policy=LOW; \r\n```\r\nレベルはLOW、4桁以上のパスワードを設定可能。\r\n```bash\r\nmysql&gt; set password for root@localhost=password(&#039;root&#039;);\r\n```\r\n備考      \r\nLOW : 桁数        \r\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字     \r\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      \r\n',273,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/273-revision-v1/',0,'revision','',0),(277,1,'2019-09-22 17:20:38','2019-09-22 08:20:38','<p>MySQL5.7からは以前のバージョンに比べて面倒になってます。</p>\n<h2>MySQL5.7インストール時は <strong>必ず手順を忘れる</strong> ので備忘録。</h2>\n<p>初期ログインアカウントはroot<br />\n初期パスワードはインストール時にログに吐き出されている。   </p>\n<pre><code class=\"language-bash\">$ sudo cat /var/log/mysqld.log\nor\n$ sudo cat /var/log/mysqld.log | grep password</code></pre>\n<p>この行。      </p>\n<pre><code class=\"language-bash\">temporary password is generated for root@localhost: 0h7ku9hSGM(4</code></pre>\n<p>初期パスワードでログイン後に新たにパスワードを設定。       </p>\n<pre><code class=\"language-bash\">mysql_secure_installation</code></pre>\n<p>初期パスワードを入力しあらためてパスワードを設定。<br />\n大文字、小文字、数字、記号含む。<br />\n以前のバージョンのようにパスワードを空でログインする場合は</p>\n<pre><code class=\"language-bash\">sudo vi /etc/my.cnf</code></pre>\n<p>skip-grant-tables<br />\nを追記します。\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      </p>\n<pre><code class=\"language-bash\">mysql -uroot -p</code></pre>\n<p>パスワード入力してログイン後      </p>\n<pre><code class=\"language-bash\">mysql&gt; SET GLOBAL validate_password_length=4; \nmysql&gt; SET GLOBAL validate_password_policy=LOW; </code></pre>\n<p>レベルはLOW、4桁以上のパスワードを設定可能。</p>\n<pre><code class=\"language-bash\">mysql&gt; set password for root@localhost=password(&#039;root&#039;);</code></pre>\n<p>備考<br />\nLOW : 桁数<br />\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字<br />\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      </p>','MySQL5.7インストール後の初回ログイン','MySQL5.7から初期アカウントが　root パスなし　ではなくなり一手間必要。','inherit','closed','closed','','273-revision-v1','','','2019-09-22 17:20:38','2019-09-22 08:20:38','MySQL5.7からは以前のバージョンに比べて面倒になってます。\r\n\r\n## MySQL5.7インストール時は __必ず手順を忘れる__ ので備忘録。\r\n\r\n初期ログインアカウントはroot      \r\n初期パスワードはインストール時にログに吐き出されている。   \r\n\r\n```bash\r\n$ sudo cat /var/log/mysqld.log\r\nor\r\n$ sudo cat /var/log/mysqld.log | grep password\r\n```\r\nこの行。      \r\n```bash\r\ntemporary password is generated for root@localhost: 0h7ku9hSGM(4\r\n```\r\n初期パスワードでログイン後に新たにパスワードを設定。       \r\n```bash\r\nmysql_secure_installation\r\n```\r\n初期パスワードを入力しあらためてパスワードを設定。        \r\n大文字、小文字、数字、記号含む。      \r\n以前のバージョンのようにパスワードを空でログインする場合は\r\n```bash\r\nsudo vi /etc/my.cnf\r\n```\r\nskip-grant-tables       \r\nを追記します。\r\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      \r\n```bash\r\nmysql -uroot -p\r\n```\r\nパスワード入力してログイン後      \r\n```bash\r\nmysql&gt; SET GLOBAL validate_password_length=4; \r\nmysql&gt; SET GLOBAL validate_password_policy=LOW; \r\n```\r\nレベルはLOW、4桁以上のパスワードを設定可能。\r\n```bash\r\nmysql&gt; set password for root@localhost=password(&#039;root&#039;);\r\n```\r\n備考      \r\nLOW : 桁数        \r\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字     \r\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      \r\n',273,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/273-revision-v1/',0,'revision','',0),(278,1,'2019-09-22 17:21:27','2019-09-22 08:21:27','<p>MySQL5.7からは以前のバージョンに比べて面倒になってます。</p>\n<h2>MySQL5.7インストール時の初回ログインは <strong>必ず手順を忘れる</strong> ので備忘録。</h2>\n<p>初期ログインアカウントはroot<br />\n初期パスワードはインストール時にログに吐き出されている。   </p>\n<pre><code class=\"language-bash\">$ sudo cat /var/log/mysqld.log\nor\n$ sudo cat /var/log/mysqld.log | grep password</code></pre>\n<p>この行。      </p>\n<pre><code class=\"language-bash\">temporary password is generated for root@localhost: 0h7ku9hSGM(4</code></pre>\n<p>初期パスワードでログイン後に新たにパスワードを設定。       </p>\n<pre><code class=\"language-bash\">mysql_secure_installation</code></pre>\n<p>初期パスワードを入力しあらためてパスワードを設定。<br />\n大文字、小文字、数字、記号含む。<br />\n以前のバージョンのようにパスワードを空でログインする場合は</p>\n<pre><code class=\"language-bash\">sudo vi /etc/my.cnf</code></pre>\n<p>skip-grant-tables<br />\nを追記します。\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      </p>\n<pre><code class=\"language-bash\">mysql -uroot -p</code></pre>\n<p>パスワード入力してログイン後      </p>\n<pre><code class=\"language-bash\">mysql&gt; SET GLOBAL validate_password_length=4; \nmysql&gt; SET GLOBAL validate_password_policy=LOW; </code></pre>\n<p>レベルはLOW、4桁以上のパスワードを設定可能。</p>\n<pre><code class=\"language-bash\">mysql&gt; set password for root@localhost=password(&#039;root&#039;);</code></pre>\n<p>備考<br />\nLOW : 桁数<br />\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字<br />\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      </p>','MySQL5.7インストール後の初回ログイン','MySQL5.7から初期アカウントが　root パスなし　ではなくなり一手間必要。','inherit','closed','closed','','273-revision-v1','','','2019-09-22 17:21:27','2019-09-22 08:21:27','MySQL5.7からは以前のバージョンに比べて面倒になってます。\r\n\r\n## MySQL5.7インストール時の初回ログインは __必ず手順を忘れる__ ので備忘録。\r\n\r\n初期ログインアカウントはroot      \r\n初期パスワードはインストール時にログに吐き出されている。   \r\n\r\n```bash\r\n$ sudo cat /var/log/mysqld.log\r\nor\r\n$ sudo cat /var/log/mysqld.log | grep password\r\n```\r\nこの行。      \r\n```bash\r\ntemporary password is generated for root@localhost: 0h7ku9hSGM(4\r\n```\r\n初期パスワードでログイン後に新たにパスワードを設定。       \r\n```bash\r\nmysql_secure_installation\r\n```\r\n初期パスワードを入力しあらためてパスワードを設定。        \r\n大文字、小文字、数字、記号含む。      \r\n以前のバージョンのようにパスワードを空でログインする場合は\r\n```bash\r\nsudo vi /etc/my.cnf\r\n```\r\nskip-grant-tables       \r\nを追記します。\r\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      \r\n```bash\r\nmysql -uroot -p\r\n```\r\nパスワード入力してログイン後      \r\n```bash\r\nmysql&gt; SET GLOBAL validate_password_length=4; \r\nmysql&gt; SET GLOBAL validate_password_policy=LOW; \r\n```\r\nレベルはLOW、4桁以上のパスワードを設定可能。\r\n```bash\r\nmysql&gt; set password for root@localhost=password(&#039;root&#039;);\r\n```\r\n備考      \r\nLOW : 桁数        \r\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字     \r\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      \r\n',273,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/273-revision-v1/',0,'revision','',0),(279,1,'2019-09-22 17:21:47','2019-09-22 08:21:47','<p>MySQL5.7からは以前のバージョンに比べて面倒になってます。</p>\n<h2>MySQL5.7インストール後の初回ログインは <strong>必ず手順を忘れる</strong> ので備忘録。</h2>\n<p>初期ログインアカウントはroot<br />\n初期パスワードはインストール時にログに吐き出されている。   </p>\n<pre><code class=\"language-bash\">$ sudo cat /var/log/mysqld.log\nor\n$ sudo cat /var/log/mysqld.log | grep password</code></pre>\n<p>この行。      </p>\n<pre><code class=\"language-bash\">temporary password is generated for root@localhost: 0h7ku9hSGM(4</code></pre>\n<p>初期パスワードでログイン後に新たにパスワードを設定。       </p>\n<pre><code class=\"language-bash\">mysql_secure_installation</code></pre>\n<p>初期パスワードを入力しあらためてパスワードを設定。<br />\n大文字、小文字、数字、記号含む。<br />\n以前のバージョンのようにパスワードを空でログインする場合は</p>\n<pre><code class=\"language-bash\">sudo vi /etc/my.cnf</code></pre>\n<p>skip-grant-tables<br />\nを追記します。\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      </p>\n<pre><code class=\"language-bash\">mysql -uroot -p</code></pre>\n<p>パスワード入力してログイン後      </p>\n<pre><code class=\"language-bash\">mysql&gt; SET GLOBAL validate_password_length=4; \nmysql&gt; SET GLOBAL validate_password_policy=LOW; </code></pre>\n<p>レベルはLOW、4桁以上のパスワードを設定可能。</p>\n<pre><code class=\"language-bash\">mysql&gt; set password for root@localhost=password(&#039;root&#039;);</code></pre>\n<p>備考<br />\nLOW : 桁数<br />\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字<br />\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      </p>','MySQL5.7インストール後の初回ログイン','MySQL5.7から初期アカウントが　root パスなし　ではなくなり一手間必要。','inherit','closed','closed','','273-revision-v1','','','2019-09-22 17:21:47','2019-09-22 08:21:47','MySQL5.7からは以前のバージョンに比べて面倒になってます。\r\n\r\n## MySQL5.7インストール後の初回ログインは __必ず手順を忘れる__ ので備忘録。\r\n\r\n初期ログインアカウントはroot      \r\n初期パスワードはインストール時にログに吐き出されている。   \r\n\r\n```bash\r\n$ sudo cat /var/log/mysqld.log\r\nor\r\n$ sudo cat /var/log/mysqld.log | grep password\r\n```\r\nこの行。      \r\n```bash\r\ntemporary password is generated for root@localhost: 0h7ku9hSGM(4\r\n```\r\n初期パスワードでログイン後に新たにパスワードを設定。       \r\n```bash\r\nmysql_secure_installation\r\n```\r\n初期パスワードを入力しあらためてパスワードを設定。        \r\n大文字、小文字、数字、記号含む。      \r\n以前のバージョンのようにパスワードを空でログインする場合は\r\n```bash\r\nsudo vi /etc/my.cnf\r\n```\r\nskip-grant-tables       \r\nを追記します。\r\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      \r\n```bash\r\nmysql -uroot -p\r\n```\r\nパスワード入力してログイン後      \r\n```bash\r\nmysql&gt; SET GLOBAL validate_password_length=4; \r\nmysql&gt; SET GLOBAL validate_password_policy=LOW; \r\n```\r\nレベルはLOW、4桁以上のパスワードを設定可能。\r\n```bash\r\nmysql&gt; set password for root@localhost=password(&#039;root&#039;);\r\n```\r\n備考      \r\nLOW : 桁数        \r\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字     \r\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      \r\n',273,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/273-revision-v1/',0,'revision','',0),(280,1,'2019-09-22 17:23:10','2019-09-22 08:23:10','<p>MySQL5.7からは以前のバージョンに比べて面倒になってます。</p>\n<h2>MySQL5.7インストール後の初回ログインは <strong>必ず手順を忘れる</strong> ので備忘録。</h2>\n<p>初期ログインアカウントはroot<br />\n初期パスワードはインストール時にログに吐き出されている。   </p>\n<pre><code class=\"language-bash\">$ sudo cat /var/log/mysqld.log\nor\n$ sudo cat /var/log/mysqld.log | grep password</code></pre>\n<p>この行。      </p>\n<pre><code class=\"language-bash\">temporary password is generated for root@localhost: 0h7ku9hSGM(4</code></pre>\n<p>初期パスワードでログイン後に新たにパスワードを設定。       </p>\n<pre><code class=\"language-bash\">mysql_secure_installation</code></pre>\n<p>初期パスワードを入力しあらためてパスワードを設定。<br />\n大文字、小文字、数字、記号含む。<br />\n以前のバージョンのようにパスワードを空でログインする場合は</p>\n<pre><code class=\"language-bash\">sudo vi /etc/my.cnf</code></pre>\n<p>skip-grant-tables<br />\nを追記します。\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      </p>\n<pre><code class=\"language-bash\">mysql -uroot -p</code></pre>\n<p>パスワード入力してログイン後      </p>\n<pre><code class=\"language-bash\">mysql&gt; SET GLOBAL validate_password_length=4; \nmysql&gt; SET GLOBAL validate_password_policy=LOW; </code></pre>\n<p>レベルはLOW、4桁以上のパスワードを設定可能。</p>\n<pre><code class=\"language-bash\">mysql&gt; set password for root@localhost=password(&#039;root&#039;);</code></pre>\n<p>備考<br />\nLOW : 桁数<br />\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字<br />\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      </p>\n<p>今まで root パスなしだったのもどうなのよと思うこのごろです。</p>','MySQL5.7インストール後の初回ログイン','MySQL5.7から初期アカウントが　root パスなし　ではなくなり一手間必要。','inherit','closed','closed','','273-revision-v1','','','2019-09-22 17:23:10','2019-09-22 08:23:10','MySQL5.7からは以前のバージョンに比べて面倒になってます。\r\n\r\n## MySQL5.7インストール後の初回ログインは __必ず手順を忘れる__ ので備忘録。\r\n\r\n初期ログインアカウントはroot      \r\n初期パスワードはインストール時にログに吐き出されている。   \r\n\r\n```bash\r\n$ sudo cat /var/log/mysqld.log\r\nor\r\n$ sudo cat /var/log/mysqld.log | grep password\r\n```\r\nこの行。      \r\n```bash\r\ntemporary password is generated for root@localhost: 0h7ku9hSGM(4\r\n```\r\n初期パスワードでログイン後に新たにパスワードを設定。       \r\n```bash\r\nmysql_secure_installation\r\n```\r\n初期パスワードを入力しあらためてパスワードを設定。        \r\n大文字、小文字、数字、記号含む。      \r\n以前のバージョンのようにパスワードを空でログインする場合は\r\n```bash\r\nsudo vi /etc/my.cnf\r\n```\r\nskip-grant-tables       \r\nを追記します。\r\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      \r\n```bash\r\nmysql -uroot -p\r\n```\r\nパスワード入力してログイン後      \r\n```bash\r\nmysql&gt; SET GLOBAL validate_password_length=4; \r\nmysql&gt; SET GLOBAL validate_password_policy=LOW; \r\n```\r\nレベルはLOW、4桁以上のパスワードを設定可能。\r\n```bash\r\nmysql&gt; set password for root@localhost=password(&#039;root&#039;);\r\n```\r\n備考      \r\nLOW : 桁数        \r\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字     \r\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      \r\n\r\n今まで root パスなしだったのもどうなのよと思うこのごろです。',273,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/273-revision-v1/',0,'revision','',0),(282,1,'2019-09-23 04:13:28','2019-09-22 19:13:28','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nというのが当たり前になってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というものありがち。</p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nと、なにかと面倒なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるはめになる。<br />\nGoogleなどは一度登録したパスワードは再生成できない。これがより記憶に混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>という当たり前の言葉だけでなくそんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターを買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。)</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>このままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\nであるならば、現在接続中の端末に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\nその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-09-23 04:13:28','2019-09-22 19:13:28','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nというのが当たり前になってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というものありがち。\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nと、なにかと面倒なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるはめになる。        \r\nGoogleなどは一度登録したパスワードは再生成できない。これがより記憶に混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nという当たり前の言葉だけでなくそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターを買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。)\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nこのままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\nであるならば、現在接続中の端末に妨害電波でも送り接続を遮断させることができればその端末はすぐに再接続を試みる。\r\nその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(283,1,'2019-09-23 04:28:44','2019-09-22 19:28:44','<h2>VPNとは</h2>\n<p><strong>Virtual Private Network</strong></p>\n<ul>\n<li>通信を暗号化して盗聴を防ぐ</li>\n<li>IPアドレスの隠蔽(いい意味で)</li>\n<li>固定IPで通信</li>\n</ul>\n<p>などのメリットがあります。</p>\n<h3>外出先で・・・</h3>\n<ul>\n<li>外出先、打ち合わせ先でみてもらいたいデータがあるが手元にない。</li>\n<li>社にとりにもどるのも・・社に電話してわざわざメールなどで送ってもらうのも・・・</li>\n</ul>\n<p>VPNを設置すればいつでも社内ネットワークにセキュア(暗号化)に接続可能です。\n打ち合わせ等外出が多い方、営業マンの方にもおすすめです。</p>\n<h3>海外で・・・</h3>\n<ul>\n<li>国外で通常通りの作業をしようとするも「この国からはお繋ぎできません」と接続できない</li>\n</ul>\n<p>VPN通信はアクセス元IPアドレスがVPNサーバーのIPアドレスとすることができます。(いい意味での隠蔽)\nVPNを通せば世界中どこにいても日本国内からの通信ができます。\n海外渡航が多い方には重宝するでしょう。(特にネットの規制が厳しい国)</p>\n<h3>スマホなどのデザリング・・・</h3>\n<ul>\n<li>外出先などデザリングで機密データを送受信したいがセキュリティーが心配</li>\n<li>FreeWiFiを使うには抵抗がある</li>\n</ul>\n<p>FreeWiFIを利用してもVPNの接続を施していれば盗聴される心配はありません。\n盗聴されても暗号化されているので解読不能です。</p>\n<h3>固定IPアドレスにしてくださいと言われたが・・・</h3>\n<ul>\n<li>ネットショップの管理画面はIP制限されるため固定IPが必要だがプロバイダーへの依頼は高額</li>\n<li>子育てのため自宅作業したいがIP制限でつながらない</li>\n<li>引っ越しなどでIPが変わると全て再設定しないといけない。</li>\n</ul>\n<p>外部にVPNを所有していればIPアドレスは不変です。\n特にネットショップ運営、WEB開発の現場に導入すればメリット大です。</p>\n<h2>VPN を導入するには</h2>\n<h3>既存のサービスを申し込む</h3>\n<p><a href=\"https://www.interlink.or.jp/\">マイIP</a>というサービスがあります。当方も利用しておりました。\n月額1000くらいで問題なく利用できてました。\nネットでは 「速度が出ない」という評価もありますがそうは思いませんでした。\n手っ取り早く導入したい時に有力です。\nただ1アカウント1接続なのでアカウントの使い回しは無理です。\nスタッフ全員で利用したい場合は人数分契約する必要があります。</p>\n<h3>VPNサーバーを自前で準備</h3>\n<p>当方現在自前でVPNを構築してます。\n月額500円の VPS (virtual private server )に <strong>SoftEther VPN</strong> をインストールしてVPN環境を構築しました。\n初期構築費はさておき月額のランニングコストはマイIPの半分です。\nアカウント数も無制限です。\nスタッフ全員に固定IPが必要な場合はとても有力な選択肢です。</p>','VPN導入でいつでもどこでも固定IP','固定IPを導入しよう。','inherit','closed','closed','','245-revision-v1','','','2019-09-23 04:28:44','2019-09-22 19:28:44','## VPNとは\r\n**Virtual Private Network**\r\n\r\n- 通信を暗号化して盗聴を防ぐ\r\n- IPアドレスの隠蔽(いい意味で)\r\n- 固定IPで通信\r\n\r\nなどのメリットがあります。\r\n\r\n### 外出先で・・・\r\n- 外出先、打ち合わせ先でみてもらいたいデータがあるが手元にない。\r\n- 社にとりにもどるのも・・社に電話してわざわざメールなどで送ってもらうのも・・・\r\n\r\nVPNを設置すればいつでも社内ネットワークにセキュア(暗号化)に接続可能です。\r\n打ち合わせ等外出が多い方、営業マンの方にもおすすめです。\r\n\r\n### 海外で・・・\r\n- 国外で通常通りの作業をしようとするも「この国からはお繋ぎできません」と接続できない\r\n\r\nVPN通信はアクセス元IPアドレスがVPNサーバーのIPアドレスとすることができます。(いい意味での隠蔽)\r\nVPNを通せば世界中どこにいても日本国内からの通信ができます。\r\n海外渡航が多い方には重宝するでしょう。(特にネットの規制が厳しい国)\r\n\r\n### スマホなどのデザリング・・・\r\n- 外出先などデザリングで機密データを送受信したいがセキュリティーが心配\r\n- FreeWiFiを使うには抵抗がある\r\n\r\nFreeWiFIを利用してもVPNの接続を施していれば盗聴される心配はありません。\r\n盗聴されても暗号化されているので解読不能です。\r\n\r\n### 固定IPアドレスにしてくださいと言われたが・・・\r\n- ネットショップの管理画面はIP制限されるため固定IPが必要だがプロバイダーへの依頼は高額\r\n- 子育てのため自宅作業したいがIP制限でつながらない\r\n- 引っ越しなどでIPが変わると全て再設定しないといけない。\r\n\r\n外部にVPNを所有していればIPアドレスは不変です。\r\n特にネットショップ運営、WEB開発の現場に導入すればメリット大です。\r\n\r\n## VPN を導入するには\r\n\r\n### 既存のサービスを申し込む\r\n[マイIP](https://www.interlink.or.jp/)というサービスがあります。当方も利用しておりました。\r\n月額1000くらいで問題なく利用できてました。\r\nネットでは 「速度が出ない」という評価もありますがそうは思いませんでした。\r\n手っ取り早く導入したい時に有力です。\r\nただ1アカウント1接続なのでアカウントの使い回しは無理です。\r\nスタッフ全員で利用したい場合は人数分契約する必要があります。\r\n\r\n### VPNサーバーを自前で準備\r\n当方現在自前でVPNを構築してます。\r\n月額500円の VPS (virtual private server )に **SoftEther VPN** をインストールしてVPN環境を構築しました。\r\n初期構築費はさておき月額のランニングコストはマイIPの半分です。\r\nアカウント数も無制限です。\r\nスタッフ全員に固定IPが必要な場合はとても有力な選択肢です。\r\n\r\n',245,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/245-revision-v1/',0,'revision','',0),(284,1,'2019-09-23 04:32:23','2019-09-22 19:32:23','<p>昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。<br />\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。<br />\n最近は \'webpack\' が主流のようです。\nBootstrapもVersion4よりSassが採用されました。<br />\n\'webpack\'はGit同様必須となりそうです。</p>\n<h2>Wordpressのテーマ UnderstrapのPackage.json</h2>\n<p>UnderstrapのSassで例えると、</p>\n<pre><code class=\"language-source\">{\n  &quot;name&quot;: &quot;understrap-child&quot;,\n  &quot;version&quot;: &quot;0.5.5&quot;,\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\n    &quot;watch&quot;: &quot;gulp watch&quot;,\n    &quot;sass&quot;: &quot;gulp sass&quot;\n  },\n...\n...\n...\n...\n...\n</code></pre>\n<p>この &quot;scripts&quot; の内容を実行するのですが、おっさんはすぐにターミナルを開き\n<strong>\'package.json\'</strong> のあるディレクトリまで移動し</p>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>などします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。<br />\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。<br />\nまた、エラー確認のためエディタとターミナルを行ったりきたり。<br />\nショートカット使ったとしても・・・めんどくさい。<br />\nなのでこの一連のアクションはIDEAでやることにしました。<br />\n<strong>結果</strong><br />\nやっぱり楽になりました。　</p>\n<h2>npm 設定手順</h2>\n<p><strong>環境</strong>      </p>\n<ul>\n<li>MAC       </li>\n<li>node.jsがインストール済み</li>\n<li>Intellij IDEA (Phpstorm,Webstormなど)</li>\n</ul>\n<hr />\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>\'cmd\' + \'f\' を押下しnpmを検索</li>\n<li>Preferences | Languages &amp; Frameworks | Node.js and NPM へ進む</li>\n<li>\'node\',\'npm\'のPathを設定</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png\" alt=\"\" /></p>\n<p>Projct tool window の \'package.json\' を右クリック。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png\" alt=\"\" /></p>\n<p>\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png\" alt=\"\" /></p>\n<p>ここには \'Package.json\' のScripts内のコマンドがリストされます。<br />\n実行したいScript名を右クリックして実行です。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png\" alt=\"\" /></p>\n<h2>Npm window を開くためのショートカット</h2>\n<p>マウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       </p>\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>Preferences | Keymap へ進む。</li>\n<li>\'npm\'で検索し ショートカットキーを割り当てる        </li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png\" alt=\"\" /> </p>\n<p>これでだいぶん楽になる。</p>\n<h2>それでもめんどくさいという場合</h2>\n<p>&quot;ただただ、\'npm run watch\' を走らせたいんだ&quot; という場合はIDEAの超便利機能\n「なんでも検索」の出番です。</p>\n<ol>\n<li>\'Shift\' x 2 （連打) で「なんでも検索」</li>\n<li>\'watch\' をタイプ、&quot;Run \'watch\' npm script&quot; が出てくるのでEnter。</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png\" alt=\"\" />       </p>\n<p>実行後はこんな感じです。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png\" alt=\"\" /></p>\n<p>「なんでも検索」はほんとすごい。快適です。</p>','Intellij idea から npm を操作','\'npm run watch\'　などはターミナルを開いて実行してましたが地味にめんどくさいのでIDEA側で操作するようにした。','inherit','closed','closed','','259-revision-v1','','','2019-09-23 04:32:23','2019-09-22 19:32:23','昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。      \r\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。      \r\n最近は \'webpack\' が主流のようです。\r\nBootstrapもVersion4よりSassが採用されました。       \r\n\'webpack\'はGit同様必須となりそうです。\r\n\r\n## Wordpressのテーマ UnderstrapのPackage.json\r\nUnderstrapのSassで例えると、\r\n```source\r\n{\r\n  &quot;name&quot;: &quot;understrap-child&quot;,\r\n  &quot;version&quot;: &quot;0.5.5&quot;,\r\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\r\n  &quot;main&quot;: &quot;index.js&quot;,\r\n  &quot;scripts&quot;: {\r\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\r\n    &quot;watch&quot;: &quot;gulp watch&quot;,\r\n    &quot;sass&quot;: &quot;gulp sass&quot;\r\n  },\r\n...\r\n...\r\n...\r\n...\r\n...\r\n\r\n```\r\nこの \"scripts\" の内容を実行するのですが、おっさんはすぐにターミナルを開き\r\n__\'package.json\'__ のあるディレクトリまで移動し\r\n\r\n```bash\r\nnpm run watch\r\n```\r\n\r\nなどします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。      \r\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。     \r\nまた、エラー確認のためエディタとターミナルを行ったりきたり。     \r\nショートカット使ったとしても・・・めんどくさい。        \r\nなのでこの一連のアクションはIDEAでやることにしました。       \r\n__結果__      \r\nやっぱり楽になりました。　\r\n\r\n## npm 設定手順\r\n__環境__      \r\n- MAC       \r\n- node.jsがインストール済み\r\n- Intellij IDEA (Phpstorm,Webstormなど)\r\n\r\n--------\r\n\r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. \'cmd\' + \'f\' を押下しnpmを検索\r\n3. Preferences | Languages & Frameworks | Node.js and NPM へ進む\r\n4. \'node\',\'npm\'のPathを設定\r\n \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png)\r\n\r\nProjct tool window の \'package.json\' を右クリック。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png)\r\n\r\n\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png)\r\n\r\nここには \'Package.json\' のScripts内のコマンドがリストされます。     \r\n実行したいScript名を右クリックして実行です。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png)\r\n\r\n## Npm window を開くためのショートカット\r\nマウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       \r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. Preferences | Keymap へ進む。\r\n3. \'npm\'で検索し ショートカットキーを割り当てる        \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png) \r\n\r\n\r\nこれでだいぶん楽になる。\r\n\r\n\r\n## それでもめんどくさいという場合\r\n\"ただただ、\'npm run watch\' を走らせたいんだ\" という場合はIDEAの超便利機能\r\n「なんでも検索」の出番です。\r\n\r\n1. \'Shift\' x 2 （連打) で「なんでも検索」\r\n2. \'watch\' をタイプ、\"Run \'watch\' npm script\" が出てくるのでEnter。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png)       \r\n\r\n実行後はこんな感じです。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png)\r\n\r\n「なんでも検索」はほんとすごい。快適です。\r\n\r\n\r\n',259,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/259-revision-v1/',0,'revision','',0),(285,1,'2019-09-23 04:34:49','2019-09-22 19:34:49','<p>昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。<br />\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。<br />\n最近は \'webpack\' が主流のようです。\nBootstrapもVersion4よりSassが採用されました。<br />\n\'webpack\'はGit同様必須となりそうです。</p>\n<h2>Wordpressのテーマ UnderstrapのPackage.json</h2>\n<p>UnderstrapのSassで例えると、</p>\n<pre><code class=\"language-source\">{\n  &quot;name&quot;: &quot;understrap-child&quot;,\n  &quot;version&quot;: &quot;0.5.5&quot;,\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\n    &quot;watch&quot;: &quot;gulp watch&quot;,\n    &quot;sass&quot;: &quot;gulp sass&quot;\n  },\n...\n...\n...\n...\n...\n</code></pre>\n<p>この &quot;scripts&quot; の内容を実行するのですが、おっさんはすぐにターミナルを開き\n<strong>\'package.json\'</strong> のあるディレクトリまで移動し</p>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>などします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。<br />\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。<br />\nまた、エラー確認のためエディタとターミナルを行ったりきたり。<br />\nショートカット使ったとしても・・・めんどくさい。<br />\nなのでこの一連のアクションはIDEAでやることにしました。<br />\n<strong>結果</strong><br />\nやっぱり楽になりました。　</p>\n<h2>npm 設定手順</h2>\n<p><strong>環境</strong>      </p>\n<ul>\n<li>MAC       </li>\n<li>node.jsがインストール済み</li>\n<li>Intellij IDEA (Phpstorm,Webstormなど)</li>\n</ul>\n<hr />\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>\'cmd\' + \'f\' を押下しnpmを検索</li>\n<li>Preferences | Languages &amp; Frameworks | Node.js and NPM へ進む</li>\n<li>\'node\',\'npm\'のPathを設定</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png\" alt=\"\" /></p>\n<p>Projct tool window の \'package.json\' を右クリック。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png\" alt=\"\" /></p>\n<p>\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png\" alt=\"\" /></p>\n<p>ここには \'Package.json\' のScripts内のコマンドがリストされます。<br />\n実行したいScript名を右クリックして実行です。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png\" alt=\"\" /></p>\n<h2>Npm window を開くためのショートカット</h2>\n<p>マウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       </p>\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>Preferences | Keymap へ進む。</li>\n<li>\'npm\'で検索し ショートカットキーを割り当てる        </li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png\" alt=\"\" /> </p>\n<p>これでだいぶん楽になる。</p>\n<h2>それでもめんどくさいという場合</h2>\n<p>&quot;ただただ、\'npm run watch\' を走らせたいんだ&quot; という場合はIDEAの超便利機能\n「なんでも検索」の出番です。</p>\n<ol>\n<li>\'Shift\' x 2 （連打) で「なんでも検索」</li>\n<li>\'watch\' をタイプ、&quot;Run \'watch\' npm script&quot; が出てくるのでEnter。</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png\" alt=\"\" />       </p>\n<p>実行後はこんな感じです。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png\" alt=\"\" /></p>\n<p>IDEAの「なんでも検索」はほんとすごい。快適です。</p>','Intellij idea から npm を操作','\'npm run watch\'　などはターミナルを開いて実行してましたが地味にめんどくさいのでIDEA側で操作するようにした。','inherit','closed','closed','','259-revision-v1','','','2019-09-23 04:34:49','2019-09-22 19:34:49','昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。      \r\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。      \r\n最近は \'webpack\' が主流のようです。\r\nBootstrapもVersion4よりSassが採用されました。       \r\n\'webpack\'はGit同様必須となりそうです。\r\n\r\n## Wordpressのテーマ UnderstrapのPackage.json\r\nUnderstrapのSassで例えると、\r\n```source\r\n{\r\n  &quot;name&quot;: &quot;understrap-child&quot;,\r\n  &quot;version&quot;: &quot;0.5.5&quot;,\r\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\r\n  &quot;main&quot;: &quot;index.js&quot;,\r\n  &quot;scripts&quot;: {\r\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\r\n    &quot;watch&quot;: &quot;gulp watch&quot;,\r\n    &quot;sass&quot;: &quot;gulp sass&quot;\r\n  },\r\n...\r\n...\r\n...\r\n...\r\n...\r\n\r\n```\r\nこの \"scripts\" の内容を実行するのですが、おっさんはすぐにターミナルを開き\r\n__\'package.json\'__ のあるディレクトリまで移動し\r\n\r\n```bash\r\nnpm run watch\r\n```\r\n\r\nなどします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。      \r\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。     \r\nまた、エラー確認のためエディタとターミナルを行ったりきたり。     \r\nショートカット使ったとしても・・・めんどくさい。        \r\nなのでこの一連のアクションはIDEAでやることにしました。       \r\n__結果__      \r\nやっぱり楽になりました。　\r\n\r\n## npm 設定手順\r\n__環境__      \r\n- MAC       \r\n- node.jsがインストール済み\r\n- Intellij IDEA (Phpstorm,Webstormなど)\r\n\r\n--------\r\n\r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. \'cmd\' + \'f\' を押下しnpmを検索\r\n3. Preferences | Languages & Frameworks | Node.js and NPM へ進む\r\n4. \'node\',\'npm\'のPathを設定\r\n \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png)\r\n\r\nProjct tool window の \'package.json\' を右クリック。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png)\r\n\r\n\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png)\r\n\r\nここには \'Package.json\' のScripts内のコマンドがリストされます。     \r\n実行したいScript名を右クリックして実行です。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png)\r\n\r\n## Npm window を開くためのショートカット\r\nマウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       \r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. Preferences | Keymap へ進む。\r\n3. \'npm\'で検索し ショートカットキーを割り当てる        \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png) \r\n\r\n\r\nこれでだいぶん楽になる。\r\n\r\n\r\n## それでもめんどくさいという場合\r\n\"ただただ、\'npm run watch\' を走らせたいんだ\" という場合はIDEAの超便利機能\r\n「なんでも検索」の出番です。\r\n\r\n1. \'Shift\' x 2 （連打) で「なんでも検索」\r\n2. \'watch\' をタイプ、\"Run \'watch\' npm script\" が出てくるのでEnter。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png)       \r\n\r\n実行後はこんな感じです。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png)\r\n\r\nIDEAの「なんでも検索」はほんとすごい。快適です。\r\n\r\n\r\n',259,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/259-revision-v1/',0,'revision','',0),(286,1,'2019-09-23 12:28:56','2019-09-23 03:28:56','','idea-npm','','inherit','closed','closed','','idea-npm-2','','','2019-09-23 12:28:56','2019-09-23 03:28:56','',259,'https://blog.webdimension.jp/wp-content/uploads/2019/09/idea-npm-1.png',0,'attachment','image/png',0),(287,1,'2019-09-23 12:29:35','2019-09-23 03:29:35','<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/idea-npm-1.png\" alt=\"\" />昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。<br />\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。<br />\n最近は \'webpack\' が主流のようです。\nBootstrapもVersion4よりSassが採用されました。<br />\n\'webpack\'はGit同様必須となりそうです。</p>\n<h2>Wordpressのテーマ UnderstrapのPackage.json</h2>\n<p>UnderstrapのSassで例えると、</p>\n<pre><code class=\"language-source\">{\n  &quot;name&quot;: &quot;understrap-child&quot;,\n  &quot;version&quot;: &quot;0.5.5&quot;,\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\n    &quot;watch&quot;: &quot;gulp watch&quot;,\n    &quot;sass&quot;: &quot;gulp sass&quot;\n  },\n...\n...\n...\n...\n...\n</code></pre>\n<p>この &quot;scripts&quot; の内容を実行するのですが、おっさんはすぐにターミナルを開き\n<strong>\'package.json\'</strong> のあるディレクトリまで移動し</p>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>などします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。<br />\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。<br />\nまた、エラー確認のためエディタとターミナルを行ったりきたり。<br />\nショートカット使ったとしても・・・めんどくさい。<br />\nなのでこの一連のアクションはIDEAでやることにしました。<br />\n<strong>結果</strong><br />\nやっぱり楽になりました。　</p>\n<h2>npm 設定手順</h2>\n<p><strong>環境</strong>      </p>\n<ul>\n<li>MAC       </li>\n<li>node.jsがインストール済み</li>\n<li>Intellij IDEA (Phpstorm,Webstormなど)</li>\n</ul>\n<hr />\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>\'cmd\' + \'f\' を押下しnpmを検索</li>\n<li>Preferences | Languages &amp; Frameworks | Node.js and NPM へ進む</li>\n<li>\'node\',\'npm\'のPathを設定</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png\" alt=\"\" /></p>\n<p>Projct tool window の \'package.json\' を右クリック。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png\" alt=\"\" /></p>\n<p>\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png\" alt=\"\" /></p>\n<p>ここには \'Package.json\' のScripts内のコマンドがリストされます。<br />\n実行したいScript名を右クリックして実行です。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png\" alt=\"\" /></p>\n<h2>Npm window を開くためのショートカット</h2>\n<p>マウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       </p>\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>Preferences | Keymap へ進む。</li>\n<li>\'npm\'で検索し ショートカットキーを割り当てる        </li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png\" alt=\"\" /> </p>\n<p>これでだいぶん楽になる。</p>\n<h2>それでもめんどくさいという場合</h2>\n<p>&quot;ただただ、\'npm run watch\' を走らせたいんだ&quot; という場合はIDEAの超便利機能\n「なんでも検索」の出番です。</p>\n<ol>\n<li>\'Shift\' x 2 （連打) で「なんでも検索」</li>\n<li>\'watch\' をタイプ、&quot;Run \'watch\' npm script&quot; が出てくるのでEnter。</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png\" alt=\"\" />       </p>\n<p>実行後はこんな感じです。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png\" alt=\"\" /></p>\n<p>IDEAの「なんでも検索」はほんとすごい。快適です。</p>','Intellij idea から npm を操作','\'npm run watch\'　などはターミナルを開いて実行してましたが地味にめんどくさいのでIDEA側で操作するようにした。','inherit','closed','closed','','259-revision-v1','','','2019-09-23 12:29:35','2019-09-23 03:29:35','![](https://blog.webdimension.jp/wp-content/uploads/2019/09/idea-npm-1.png)昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。      \r\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。      \r\n最近は \'webpack\' が主流のようです。\r\nBootstrapもVersion4よりSassが採用されました。       \r\n\'webpack\'はGit同様必須となりそうです。\r\n\r\n## Wordpressのテーマ UnderstrapのPackage.json\r\nUnderstrapのSassで例えると、\r\n```source\r\n{\r\n  &quot;name&quot;: &quot;understrap-child&quot;,\r\n  &quot;version&quot;: &quot;0.5.5&quot;,\r\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\r\n  &quot;main&quot;: &quot;index.js&quot;,\r\n  &quot;scripts&quot;: {\r\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\r\n    &quot;watch&quot;: &quot;gulp watch&quot;,\r\n    &quot;sass&quot;: &quot;gulp sass&quot;\r\n  },\r\n...\r\n...\r\n...\r\n...\r\n...\r\n\r\n```\r\nこの \"scripts\" の内容を実行するのですが、おっさんはすぐにターミナルを開き\r\n__\'package.json\'__ のあるディレクトリまで移動し\r\n\r\n```bash\r\nnpm run watch\r\n```\r\n\r\nなどします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。      \r\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。     \r\nまた、エラー確認のためエディタとターミナルを行ったりきたり。     \r\nショートカット使ったとしても・・・めんどくさい。        \r\nなのでこの一連のアクションはIDEAでやることにしました。       \r\n__結果__      \r\nやっぱり楽になりました。　\r\n\r\n## npm 設定手順\r\n__環境__      \r\n- MAC       \r\n- node.jsがインストール済み\r\n- Intellij IDEA (Phpstorm,Webstormなど)\r\n\r\n--------\r\n\r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. \'cmd\' + \'f\' を押下しnpmを検索\r\n3. Preferences | Languages & Frameworks | Node.js and NPM へ進む\r\n4. \'node\',\'npm\'のPathを設定\r\n \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png)\r\n\r\nProjct tool window の \'package.json\' を右クリック。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png)\r\n\r\n\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png)\r\n\r\nここには \'Package.json\' のScripts内のコマンドがリストされます。     \r\n実行したいScript名を右クリックして実行です。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png)\r\n\r\n## Npm window を開くためのショートカット\r\nマウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       \r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. Preferences | Keymap へ進む。\r\n3. \'npm\'で検索し ショートカットキーを割り当てる        \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png) \r\n\r\n\r\nこれでだいぶん楽になる。\r\n\r\n\r\n## それでもめんどくさいという場合\r\n\"ただただ、\'npm run watch\' を走らせたいんだ\" という場合はIDEAの超便利機能\r\n「なんでも検索」の出番です。\r\n\r\n1. \'Shift\' x 2 （連打) で「なんでも検索」\r\n2. \'watch\' をタイプ、\"Run \'watch\' npm script\" が出てくるのでEnter。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png)       \r\n\r\n実行後はこんな感じです。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png)\r\n\r\nIDEAの「なんでも検索」はほんとすごい。快適です。\r\n\r\n\r\n',259,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/259-revision-v1/',0,'revision','',0),(288,1,'2019-09-23 13:15:27','2019-09-23 04:15:27','<p>昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。<br />\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。<br />\n最近は \'webpack\' が主流のようです。\nBootstrapもVersion4よりSassが採用されました。<br />\n\'webpack\'はGit同様必須となりそうです。</p>\n<h2>Wordpressのテーマ UnderstrapのPackage.json</h2>\n<p>UnderstrapのSassで例えると、</p>\n<pre><code class=\"language-source\">{\n  &quot;name&quot;: &quot;understrap-child&quot;,\n  &quot;version&quot;: &quot;0.5.5&quot;,\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\n    &quot;watch&quot;: &quot;gulp watch&quot;,\n    &quot;sass&quot;: &quot;gulp sass&quot;\n  },\n...\n...\n...\n...\n...\n</code></pre>\n<p>この &quot;scripts&quot; の内容を実行するのですが、おっさんはすぐにターミナルを開き\n<strong>\'package.json\'</strong> のあるディレクトリまで移動し</p>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>などします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。<br />\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。<br />\nまた、エラー確認のためエディタとターミナルを行ったりきたり。<br />\nショートカット使ったとしても・・・めんどくさい。<br />\nなのでこの一連のアクションはIDEAでやることにしました。<br />\n<strong>結果</strong><br />\nやっぱり楽になりました。　</p>\n<h2>npm 設定手順</h2>\n<p><strong>環境</strong>      </p>\n<ul>\n<li>MAC       </li>\n<li>node.jsがインストール済み</li>\n<li>Intellij IDEA (Phpstorm,Webstormなど)</li>\n</ul>\n<hr />\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>\'cmd\' + \'f\' を押下しnpmを検索</li>\n<li>Preferences | Languages &amp; Frameworks | Node.js and NPM へ進む</li>\n<li>\'node\',\'npm\'のPathを設定</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png\" alt=\"\" /></p>\n<p>Projct tool window の \'package.json\' を右クリック。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png\" alt=\"\" /></p>\n<p>\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png\" alt=\"\" /></p>\n<p>ここには \'Package.json\' のScripts内のコマンドがリストされます。<br />\n実行したいScript名を右クリックして実行です。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png\" alt=\"\" /></p>\n<h2>Npm window を開くためのショートカット</h2>\n<p>マウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       </p>\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>Preferences | Keymap へ進む。</li>\n<li>\'npm\'で検索し ショートカットキーを割り当てる        </li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png\" alt=\"\" /> </p>\n<p>これでだいぶん楽になる。</p>\n<h2>それでもめんどくさいという場合</h2>\n<p>&quot;ただただ、\'npm run watch\' を走らせたいんだ&quot; という場合はIDEAの超便利機能\n「なんでも検索」の出番です。</p>\n<ol>\n<li>\'Shift\' x 2 （連打) で「なんでも検索」</li>\n<li>\'watch\' をタイプ、&quot;Run \'watch\' npm script&quot; が出てくるのでEnter。</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png\" alt=\"\" />       </p>\n<p>実行後はこんな感じです。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png\" alt=\"\" /></p>\n<p>IDEAの「なんでも検索」はほんとすごい。快適です。</p>','Intellij idea から npm を操作','\'npm run watch\'　などはターミナルを開いて実行してましたが地味にめんどくさいのでIDEA側で操作するようにした。','inherit','closed','closed','','259-revision-v1','','','2019-09-23 13:15:27','2019-09-23 04:15:27','昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。      \r\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。      \r\n最近は \'webpack\' が主流のようです。\r\nBootstrapもVersion4よりSassが採用されました。       \r\n\'webpack\'はGit同様必須となりそうです。\r\n\r\n## Wordpressのテーマ UnderstrapのPackage.json\r\nUnderstrapのSassで例えると、\r\n```source\r\n{\r\n  &quot;name&quot;: &quot;understrap-child&quot;,\r\n  &quot;version&quot;: &quot;0.5.5&quot;,\r\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\r\n  &quot;main&quot;: &quot;index.js&quot;,\r\n  &quot;scripts&quot;: {\r\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\r\n    &quot;watch&quot;: &quot;gulp watch&quot;,\r\n    &quot;sass&quot;: &quot;gulp sass&quot;\r\n  },\r\n...\r\n...\r\n...\r\n...\r\n...\r\n\r\n```\r\nこの \"scripts\" の内容を実行するのですが、おっさんはすぐにターミナルを開き\r\n__\'package.json\'__ のあるディレクトリまで移動し\r\n\r\n```bash\r\nnpm run watch\r\n```\r\n\r\nなどします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。      \r\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。     \r\nまた、エラー確認のためエディタとターミナルを行ったりきたり。     \r\nショートカット使ったとしても・・・めんどくさい。        \r\nなのでこの一連のアクションはIDEAでやることにしました。       \r\n__結果__      \r\nやっぱり楽になりました。　\r\n\r\n## npm 設定手順\r\n__環境__      \r\n- MAC       \r\n- node.jsがインストール済み\r\n- Intellij IDEA (Phpstorm,Webstormなど)\r\n\r\n--------\r\n\r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. \'cmd\' + \'f\' を押下しnpmを検索\r\n3. Preferences | Languages & Frameworks | Node.js and NPM へ進む\r\n4. \'node\',\'npm\'のPathを設定\r\n \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png)\r\n\r\nProjct tool window の \'package.json\' を右クリック。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png)\r\n\r\n\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png)\r\n\r\nここには \'Package.json\' のScripts内のコマンドがリストされます。     \r\n実行したいScript名を右クリックして実行です。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png)\r\n\r\n## Npm window を開くためのショートカット\r\nマウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       \r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. Preferences | Keymap へ進む。\r\n3. \'npm\'で検索し ショートカットキーを割り当てる        \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png) \r\n\r\n\r\nこれでだいぶん楽になる。\r\n\r\n\r\n## それでもめんどくさいという場合\r\n\"ただただ、\'npm run watch\' を走らせたいんだ\" という場合はIDEAの超便利機能\r\n「なんでも検索」の出番です。\r\n\r\n1. \'Shift\' x 2 （連打) で「なんでも検索」\r\n2. \'watch\' をタイプ、\"Run \'watch\' npm script\" が出てくるのでEnter。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png)       \r\n\r\n実行後はこんな感じです。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png)\r\n\r\nIDEAの「なんでも検索」はほんとすごい。快適です。\r\n\r\n\r\n',259,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/259-revision-v1/',0,'revision','',0),(294,1,'2019-09-23 17:29:23','2019-09-23 08:29:23','<p>ここでの<strong>Git</strong>の使い方はあくまで&quot;1人_Git&quot;、&quot;オレオレGit&quot;なのでチームでのGitの使い方には参考にはなりません。     </p>\n<p>GitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの <strong>\nDBをローカルへ同期</strong> するスクリプトを組んでみます。        </p>\n<h2>よくあるWebhookによる自動デプロイ</h2>\n<h3>GitLabのWebhookをトリガーに&quot;Git pull&quot;し、Slackへ通知するスクリプト配置</h3>\n<p>サーバー上の任意の場所へ設置。</p>\n<pre><code class=\"language-php\">&lt;?php\n//Git deploy\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\n$slack_urls = array(\n    // Slack URL\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\n);\n\n$json_string = file_get_contents(&#039;php://input&#039;);\n$json = json_decode($json_string, true);\n$header = getallheaders();\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\n// echo &#039;exit&#039;;\n////    if(false) {\n// exit();\n//}\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\nexec($command, $out, $return_ver);\n\nif (sizeof($slack_urls) &gt; 0) {\n $result_mess = &#039;&#039;;\n if ($return_ver === 0) {\n    //Deploy Success\n    $emoji = &quot;:smile:&quot;;\n    $color = &#039;good&#039;;\n    $result_test = &quot;Deploy Sucess&quot;;\n } else {\n    //Deploy Failed\n    $emoji = &quot;:scream:&quot;;\n    $color = &#039;danger&#039;;\n    $result_test = &quot;Deploy Failed&quot;;\n    $result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\n    foreach ($out as $key =&gt; $value) {\n     $result_mess .= $value . &quot;\\n&quot;;\n    }\n }\n $payload = &#039;\n {\n &quot;username&quot;: &quot;&quot;,\n   &quot;attachments&quot;:[\n      {\n         &quot;fallback&quot;:&quot;Deploy&quot;,\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\n         &quot;fields&quot;:[\n            {\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\n            }\n         ]\n      }\n   ]\n} &#039;;\n\n foreach ($slack_urls as $slack_url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $slack_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n    $res = curl_exec($ch);\n//  var_dump($res);\n    curl_close($ch);\n }\n}</code></pre>\n<h3>GitLabのインテグレーション設定</h3>\n<p>GitLab-&gt;設定-&gt;インテグレーション</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png\" alt=\"\" /></p>\n<p>&quot;Git push&quot;する度に自動デプロイされる。</p>\n<h2>リモートのMYSQLをローカルへ同期</h2>\n<h3>リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置</h3>\n<p>Gitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\n実行権限も忘れずに。<br />\nmysql-sync.sh (仮)</p>\n<pre><code class=\"language-bash\">#!/usr/local/bin/bash\nSQLHOST= ホスト名\nSQLUSER= ユーザー名\nSQLPASSWORD= パスワード \nSQLTARGETDB= DB名\n\n// ファイル名\nSQL_FILE_NAME=db.sql  \n// 圧縮後のファイル名 \nSQL_ZIP_FILE_NAME=data/db.zip\n// Zipパスワード  \nSQL_ZIP_PASS= パスワード\n\n// mysqldump のPath\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\n\n// MySQLログインのためのテンポラリー my.cnf\nMYCNF=${HOME}/.my.cnf\nMYCNFCREATE() {\ncat &lt;&lt; _EOL_ | tee ${MYCNF}\n[client]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=&quot;${SQLPASSWORD}&quot;\n[mysqldump]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=&quot;${SQLPASSWORD}&quot;\n_EOL_\n}\n\nif [ ! -f ${MYCNF} ];\nthen\n MYCNFCREATE\nelse\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n MYCNFCREATE\nfi\n\n// バックアップ\n$MYSQLDUMP_PATH $SQLTARGETDB &gt; $SQL_FILE_NAME \n// テンポラリー my.cnf 削除\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n\n// パスワード付きでZip圧縮\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \n// sqlファイルは削除\nrm -rf $SQL_FILE_NAME\n\n// Git pushまで\ncd ../../\ngit add -A\ngit commit -m &#039;Sync From Deploy&#039;\ngit push origin master</code></pre>\n<h3>MySQL同期スクリプトをローカルに設置</h3>\n<p>SSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力が<span class=\"under_line\">めんどくさい</span>)</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# host別設定ファイル読み込み\nsource mysql.sync\n    # sshにてlogin してmysqldumpを実行\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\n\n   git pull origin master\n    # パスワード付きzipファイル解凍\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\n\n    # local MySQLログイン用ファイル読み込み\n    LOGIN_FILE=./local_mysql_login.cnf\n    # local mysqlログイン及びdumpファイル実行\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME &lt; $AFTER_ARCIVE_FILENAME\n    # local設定を反映させるSQL実行\n    mysql --defaults-extra-file=$LOGIN_FILE &lt; $CHANGE_LOCAL_SQL_FILENAME\n\n    rm $AFTER_ARCIVE_FILENAME\n    rm $CHANGE_LOCAL_SQL_FILENAME\n</code></pre>\n<p>読み込んでいる mysql.sync</p>\n<pre><code class=\"language-bash\">\n# SSH ログイン情報\nREMOTE_HOST= ホスト名\nREMOTE_USER　ユーザー名\nREMOTE_SSH_PORT= ポート番号\n\n# Root ディレクトリ\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\n# Remote backup path\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\n# サーバー上に設定したスクリプトファイル名\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\n# バックアップコマンド実行 \nREMOTE_BACKUP_COMMAND=&quot;cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE&quot;\n\n# ローカル ディレウトリ\nLOCAL_PATH=&quot;/var/www/html/xxx/xxx&quot;\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\nARCIVE_PASS= Zipパスワード\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\n\n# local db name\nLOCAL_DB_NAME= DB名\n\n# 置換項目定数\n## Domain\nBEFORE_DOMAIN1=&quot;Before domain&quot;\nAFTER_DOMAIN1=&quot;After domain&quot;\n\n## Path\nBEFORE_PATH=&quot;Before Path&quot;\nAFTER_PATH=&quot;After Path&quot;\nTABLE_PREFIX=&quot;wp_&quot;\n\n## Update用のSQL生成\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\ntouch $CHANGE_LOCAL_SQL_FILENAME\ncat &lt;&lt;EOF&gt; $CHANGE_LOCAL_SQL_FILENAME\nSET NAMES utf8;\nuse ${LOCAL_DB_NAME}\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere option_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\npost_content = REPLACE(post_content,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere post_content like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\npost_content_filtered = REPLACE(post_content_filtered,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere post_content_filtered like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\nguid = REPLACE(guid,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere guid like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value, &#039;${BEFORE_PATH}&#039;,&#039;${AFTER_PATH}&#039;)\nwhere option_value like &quot;%${BEFORE_PATH}%&quot;;\n\nupdate ${TABLE_PREFIX}postmeta set\nmeta_value = REPLACE(meta_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere meta_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\nEOF</code></pre>\n<p>読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf </p>\n<pre><code class=\"language-bash\">[client]\nuser = root\npassword = &#039;&#039;\nhost = localhost</code></pre>\n<p>振る舞いとしては        </p>\n<ol>\n<li>ローカルからSSHでサーバーへログイン</li>\n<li>サーバ側でMySQLバックアップ、&quot;Git push&quot;</li>\n<li>ローカルで&quot;Git pull&quot;</li>\n<li>Zip(sqlファイル、パスワード付き)を解凍</li>\n<li>ローカルMySQLへインポート</li>\n<li>変更必要箇所(ドメイン、Path) をUpdate処理</li>\n</ol>\n<p>リモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。<br />\nまた手作業のためミスも起こる可能性も。<br />\nこのスクリプトでわずか数秒になりました。        </p>\n<p>数分の<span class=\"under_line\">めんどくさい</span>を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。<br />\n自分のアイデアを形にすることはいい勉強にはなりますわね。 </p>','WordPressでGitを使ったWebhookデプロイとリモートDB同期','リモートのDBをローカルへ同期するめんどくさい作業をスクリプト化','publish','closed','open','','wordpress-sync','','','2019-09-23 19:40:32','2019-09-23 10:40:32','ここでの__Git__の使い方はあくまで\"1人_Git\"、\"オレオレGit\"なのでチームでのGitの使い方には参考にはなりません。     \r\n\r\nGitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの __\r\nDBをローカルへ同期__ するスクリプトを組んでみます。        \r\n\r\n##  よくあるWebhookによる自動デプロイ\r\n### GitLabのWebhookをトリガーに\"Git pull\"し、Slackへ通知するスクリプト配置        \r\nサーバー上の任意の場所へ設置。\r\n```php\r\n&lt;?php\r\n//Git deploy\r\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\r\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\r\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\r\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\r\n$slack_urls = array(\r\n	// Slack URL\r\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\r\n);\r\n\r\n$json_string = file_get_contents(&#039;php://input&#039;);\r\n$json = json_decode($json_string, true);\r\n$header = getallheaders();\r\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\r\n// echo &#039;exit&#039;;\r\n////	if(false) {\r\n// exit();\r\n//}\r\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\r\nexec($command, $out, $return_ver);\r\n\r\nif (sizeof($slack_urls) &gt; 0) {\r\n $result_mess = &#039;&#039;;\r\n if ($return_ver === 0) {\r\n	//Deploy Success\r\n	$emoji = &quot;:smile:&quot;;\r\n	$color = &#039;good&#039;;\r\n	$result_test = &quot;Deploy Sucess&quot;;\r\n } else {\r\n	//Deploy Failed\r\n	$emoji = &quot;:scream:&quot;;\r\n	$color = &#039;danger&#039;;\r\n	$result_test = &quot;Deploy Failed&quot;;\r\n	$result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\r\n	foreach ($out as $key =&gt; $value) {\r\n	 $result_mess .= $value . &quot;\\n&quot;;\r\n	}\r\n }\r\n $payload = &#039;\r\n {\r\n &quot;username&quot;: &quot;&quot;,\r\n   &quot;attachments&quot;:[\r\n      {\r\n         &quot;fallback&quot;:&quot;Deploy&quot;,\r\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\r\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\r\n         &quot;fields&quot;:[\r\n            {\r\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\r\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\r\n            }\r\n         ]\r\n      }\r\n   ]\r\n} &#039;;\r\n\r\n foreach ($slack_urls as $slack_url) {\r\n	$ch = curl_init();\r\n	curl_setopt($ch, CURLOPT_URL, $slack_url);\r\n	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\r\n	curl_setopt($ch, CURLOPT_POST, true);\r\n	curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\r\n	$res = curl_exec($ch);\r\n//	var_dump($res);\r\n	curl_close($ch);\r\n }\r\n}\r\n```\r\n###  GitLabのインテグレーション設定           \r\nGitLab->設定->インテグレーション\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\r\n\r\n\"Git push\"する度に自動デプロイされる。\r\n\r\n## リモートのMYSQLをローカルへ同期   \r\n### リモートにMySQLをバックアップし\"git commit\",\"git push\"するスクリプトを設置     \r\nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\r\n実行権限も忘れずに。      \r\nmysql-sync.sh (仮)\r\n```bash\r\n#!/usr/local/bin/bash\r\nSQLHOST= ホスト名\r\nSQLUSER= ユーザー名\r\nSQLPASSWORD= パスワード \r\nSQLTARGETDB= DB名\r\n\r\n// ファイル名\r\nSQL_FILE_NAME=db.sql  \r\n// 圧縮後のファイル名 \r\nSQL_ZIP_FILE_NAME=data/db.zip\r\n// Zipパスワード  \r\nSQL_ZIP_PASS= パスワード\r\n\r\n// mysqldump のPath\r\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\r\n\r\n// MySQLログインのためのテンポラリー my.cnf\r\nMYCNF=${HOME}/.my.cnf\r\nMYCNFCREATE() {\r\ncat &lt;&lt; _EOL_ | tee ${MYCNF}\r\n[client]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=&quot;${SQLPASSWORD}&quot;\r\n[mysqldump]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=&quot;${SQLPASSWORD}&quot;\r\n_EOL_\r\n}\r\n\r\nif [ ! -f ${MYCNF} ];\r\nthen\r\n MYCNFCREATE\r\nelse\r\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n MYCNFCREATE\r\nfi\r\n\r\n// バックアップ\r\n$MYSQLDUMP_PATH $SQLTARGETDB &gt; $SQL_FILE_NAME \r\n// テンポラリー my.cnf 削除\r\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n\r\n// パスワード付きでZip圧縮\r\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \r\n// sqlファイルは削除\r\nrm -rf $SQL_FILE_NAME\r\n\r\n// Git pushまで\r\ncd ../../\r\ngit add -A\r\ngit commit -m &#039;Sync From Deploy&#039;\r\ngit push origin master\r\n```\r\n\r\n### MySQL同期スクリプトをローカルに設置\r\nSSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力が<span class=\"under_line\">めんどくさい</span>)\r\n```bash\r\n#!/bin/bash\r\n# host別設定ファイル読み込み\r\nsource mysql.sync\r\n    # sshにてlogin してmysqldumpを実行\r\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\r\n\r\n   git pull origin master\r\n    # パスワード付きzipファイル解凍\r\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\r\n \r\n    # local MySQLログイン用ファイル読み込み\r\n    LOGIN_FILE=./local_mysql_login.cnf\r\n    # local mysqlログイン及びdumpファイル実行\r\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME &lt; $AFTER_ARCIVE_FILENAME\r\n    # local設定を反映させるSQL実行\r\n    mysql --defaults-extra-file=$LOGIN_FILE &lt; $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n    rm $AFTER_ARCIVE_FILENAME\r\n    rm $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n```\r\n読み込んでいる mysql.sync\r\n```bash\r\n\r\n# SSH ログイン情報\r\nREMOTE_HOST= ホスト名\r\nREMOTE_USER　ユーザー名\r\nREMOTE_SSH_PORT= ポート番号\r\n\r\n# Root ディレクトリ\r\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\r\n# Remote backup path\r\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\r\n# サーバー上に設定したスクリプトファイル名\r\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\r\n# バックアップコマンド実行 \r\nREMOTE_BACKUP_COMMAND=&quot;cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE&quot;\r\n\r\n# ローカル ディレウトリ\r\nLOCAL_PATH=&quot;/var/www/html/xxx/xxx&quot;\r\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\r\nARCIVE_PASS= Zipパスワード\r\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\r\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\r\n\r\n# local db name\r\nLOCAL_DB_NAME= DB名\r\n\r\n# 置換項目定数\r\n## Domain\r\nBEFORE_DOMAIN1=&quot;Before domain&quot;\r\nAFTER_DOMAIN1=&quot;After domain&quot;\r\n\r\n## Path\r\nBEFORE_PATH=&quot;Before Path&quot;\r\nAFTER_PATH=&quot;After Path&quot;\r\nTABLE_PREFIX=&quot;wp_&quot;\r\n\r\n## Update用のSQL生成\r\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\r\ntouch $CHANGE_LOCAL_SQL_FILENAME\r\ncat &lt;&lt;EOF&gt; $CHANGE_LOCAL_SQL_FILENAME\r\nSET NAMES utf8;\r\nuse ${LOCAL_DB_NAME}\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere option_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content = REPLACE(post_content,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere post_content like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content_filtered = REPLACE(post_content_filtered,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere post_content_filtered like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\nguid = REPLACE(guid,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere guid like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value, &#039;${BEFORE_PATH}&#039;,&#039;${AFTER_PATH}&#039;)\r\nwhere option_value like &quot;%${BEFORE_PATH}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}postmeta set\r\nmeta_value = REPLACE(meta_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere meta_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\nEOF\r\n```\r\n\r\n\r\n読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf \r\n```bash\r\n[client]\r\nuser = root\r\npassword = &#039;&#039;\r\nhost = localhost\r\n```\r\n\r\n\r\n振る舞いとしては        \r\n1. ローカルからSSHでサーバーへログイン\r\n2. サーバ側でMySQLバックアップ、\"Git push\"\r\n3. ローカルで\"Git pull\"\r\n4. Zip(sqlファイル、パスワード付き)を解凍\r\n5. ローカルMySQLへインポート\r\n6. 変更必要箇所(ドメイン、Path) をUpdate処理\r\n\r\nリモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。      \r\nまた手作業のためミスも起こる可能性も。     \r\nこのスクリプトでわずか数秒になりました。        \r\n\r\n数分の<span class=\"under_line\">めんどくさい</span>を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。     \r\n自分のアイデアを形にすることはいい勉強にはなりますわね。 \r\n\r\n\r\n\r\n\r\n\r\n',0,'https://blog.webdimension.jp/?p=294',0,'post','',0),(295,1,'2019-09-23 14:47:19','2019-09-23 05:47:19','<!-- wp:paragraph -->\n<p># test</p>\n<!-- /wp:paragraph -->','test','','inherit','closed','closed','','294-revision-v1','','','2019-09-23 14:47:19','2019-09-23 05:47:19','',294,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/294-revision-v1/',0,'revision','',0),(297,1,'2019-09-23 16:44:59','2019-09-23 07:44:59','','gitlab-webhook','','inherit','closed','closed','','gitlab-webhook','','','2019-09-23 16:44:59','2019-09-23 07:44:59','',294,'https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png',0,'attachment','image/png',0),(298,1,'2019-09-23 16:45:34','2019-09-23 07:45:34','<p>ここでの <strong>Git</strong> での使い方はあくまで&quot;1人_Git&quot;、&quot;オレオレ\nGit&quot;なのでチームでのGitの使い方には参考にはなりません。     </p>\n<p>GitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの <strong>\nDBをローカルへ同期</strong> するスクリプトを組んでみます。        </p>\n<h2>よくあるWebhookによる自動デプロイ</h2>\n<h3>GitLubのWebhookをトリガーに&quot;Git pull&quot;し、Slackへ通知するスクリプト配置</h3>\n<p>サーバー上の任意の場所へ設置。</p>\n<pre><code class=\"language-php\">&lt;?php\n//Git deploy\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\n$slack_urls = array(\n    // Slack URL\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\n);\n\n$json_string = file_get_contents(&#039;php://input&#039;);\n$json = json_decode($json_string, true);\n$header = getallheaders();\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\n// echo &#039;exit&#039;;\n////    if(false) {\n// exit();\n//}\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\nexec($command, $out, $return_ver);\n\nif (sizeof($slack_urls) &gt; 0) {\n $result_mess = &#039;&#039;;\n if ($return_ver === 0) {\n    //Deploy Success\n    $emoji = &quot;:smile:&quot;;\n    $color = &#039;good&#039;;\n    $result_test = &quot;Deploy Sucess&quot;;\n } else {\n    //Deploy Failed\n    $emoji = &quot;:scream:&quot;;\n    $color = &#039;danger&#039;;\n    $result_test = &quot;Deploy Failed&quot;;\n    $result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\n    foreach ($out as $key =&gt; $value) {\n     $result_mess .= $value . &quot;\\n&quot;;\n    }\n }\n $payload = &#039;\n {\n &quot;username&quot;: &quot;&quot;,\n   &quot;attachments&quot;:[\n      {\n         &quot;fallback&quot;:&quot;Deploy&quot;,\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\n         &quot;fields&quot;:[\n            {\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\n            }\n         ]\n      }\n   ]\n} &#039;;\n\n foreach ($slack_urls as $slack_url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $slack_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n    $res = curl_exec($ch);\n//  var_dump($res);\n    curl_close($ch);\n }\n}\n   ```\n###  GitLabのインテグレーション設定           \n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\n\n&quot;Git push&quot;する度に自動デプロイされる。\n\n## リモートのMYSQLをローカルへ同期   \n### リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置     \nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\n実行権限も忘れずに。      \nmysql-sync.sh (仮)\n```bash\n#!/usr/local/bin/bash\nSQLHOST= ホスト名\nSQLUSER= ユーザー名\nSQLPASSWORD= パスワード \nSQLTARGETDB= DB名\n\n// ファイル名\nSQL_FILE_NAME=db.sql  \n// 圧縮後のファイル名 \nSQL_ZIP_FILE_NAME=data/db.zip\n// Zipパスワード  \nSQL_ZIP_PASS= パスワード\n\n// mysqldump のPath\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\n\n// MySQLログインのためのテンポラリー my.cnf\nMYCNF=${HOME}/.my.cnf\nMYCNFCREATE() {\ncat << _EOL_ | tee ${MYCNF}\n[client]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=\"${SQLPASSWORD}\"\n[mysqldump]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=\"${SQLPASSWORD}\"\n_EOL_\n}\n\nif [ ! -f ${MYCNF} ];\nthen\n MYCNFCREATE\nelse\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n MYCNFCREATE\nfi\n\n// バックアップ\n$MYSQLDUMP_PATH $SQLTARGETDB > $SQL_FILE_NAME \n// テンポラリー my.cnf 削除\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n\n// パスワード付きでZip圧縮\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \n// sqlファイルは削除\nrm -rf $SQL_FILE_NAME\n\n// Git pushまで\ncd ../../\ngit add -A\ngit commit -m \'Sync From Deploy\'\ngit push origin master</code></pre>\n<h3>MySQL同期スクリプトをローカルに設置</h3>\n<p>SSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# host別設定ファイル読み込み\nsource mysql.sync\n    # sshにてlogin してmysqldumpを実行\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\n\n   git pull origin master\n    # パスワード付きzipファイル解凍\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\n\n    # local MySQLログイン用ファイル読み込み\n    LOGIN_FILE=./local_mysql_login.cnf\n    # local mysqlログイン及びdumpファイル実行\n    echo $AFTER_ARCIVE_FILENAME\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME < $AFTER_ARCIVE_FILENAME\n    # local設定を反映させるSQL実行\n    mysql --defaults-extra-file=$LOGIN_FILE < $CHANGE_LOCAL_SQL_FILENAME\n\n    rm $AFTER_ARCIVE_FILENAME\n    rm $CHANGE_LOCAL_SQL_FILENAME\n</code></pre>\n<p>読み込んでいる mysql.sync</p>\n<pre><code class=\"language-bash\">\n# SSH ログイン情報\nREMOTE_HOST= ホスト名\nREMOTE_USER　ユーザー名\nREMOTE_SSH_PORT= ポート番号\n\n# Root ディレクトリ\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\n# Remote backup path\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\n# サーバー上に設定したスクリプトファイル名\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\n# バックアップコマンド実行 \nREMOTE_BACKUP_COMMAND=\"cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE\"\n\n# ローカル ディレウトリ\nLOCAL_PATH=\"/var/www/html/xxx/xxx\"\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\nARCIVE_PASS= Zipパスワード\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\n\n# local db name\nLOCAL_DB_NAME= DB名\n\n# 置換項目定数\n## Domain\nBEFORE_DOMAIN1=\"Before domain\"\nAFTER_DOMAIN1=\"After domain\"\n\n## Path\nBEFORE_PATH=\"Before Path\"\nAFTER_PATH=\"After Path\"\nTABLE_PREFIX=\"wp_\"\n\n## Update用のSQL生成\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\ntouch $CHANGE_LOCAL_SQL_FILENAME\ncat <<EOF> $CHANGE_LOCAL_SQL_FILENAME\nSET NAMES utf8;\nuse ${LOCAL_DB_NAME}\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere option_value like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}posts set\npost_content = REPLACE(post_content,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere post_content like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}posts set\npost_content_filtered = REPLACE(post_content_filtered,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere post_content_filtered like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}posts set\nguid = REPLACE(guid,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere guid like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value, \'${BEFORE_PATH}\',\'${AFTER_PATH}\')\nwhere option_value like \"%${BEFORE_PATH}%\";\n\nupdate ${TABLE_PREFIX}postmeta set\nmeta_value = REPLACE(meta_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere meta_value like \"%${BEFORE_DOMAIN1}%\";\nEOF</code></pre>\n<p>読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf </p>\n<pre><code class=\"language-bash\">[client]\nuser = root\npassword = \'\'\nhost = localhost</code></pre>\n<p>振る舞いとしては        </p>\n<ol>\n<li>ローカルからSSHでサーバーへログイン</li>\n<li>サーバ側でMySQLバックアップ、&quot;Git push&quot;</li>\n<li>ローカルで&quot;Git pull&quot;</li>\n<li>Zip(sqlファイル、パスワード付き)を解凍</li>\n<li>ローカルMySQLへインポート</li>\n<li>変更必要箇所(ドメイン、Path) をUpdate処理</li>\n</ol>\n<p>リモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。<br />\nまた手作業のためミスも起こる可能性も。<br />\nこのスクリプトでわずか数秒になりました。        </p>\n<p>数分の&quot;めんどくさい&quot;を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じてる。<br />\n自分のアイデアを形にすることはいい勉強にはなりますわね。 </p>','test','','inherit','closed','closed','','294-revision-v1','','','2019-09-23 16:45:34','2019-09-23 07:45:34','ここでの __Git__ での使い方はあくまで\"1人_Git\"、\"オレオレ\r\nGit\"なのでチームでのGitの使い方には参考にはなりません。     \r\n\r\nGitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの __\r\nDBをローカルへ同期__ するスクリプトを組んでみます。        \r\n\r\n##  よくあるWebhookによる自動デプロイ\r\n### GitLubのWebhookをトリガーに\"Git pull\"し、Slackへ通知するスクリプト配置        \r\nサーバー上の任意の場所へ設置。\r\n```php\r\n&lt;?php\r\n//Git deploy\r\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\r\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\r\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\r\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\r\n$slack_urls = array(\r\n	// Slack URL\r\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\r\n);\r\n\r\n$json_string = file_get_contents(&#039;php://input&#039;);\r\n$json = json_decode($json_string, true);\r\n$header = getallheaders();\r\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\r\n// echo &#039;exit&#039;;\r\n////	if(false) {\r\n// exit();\r\n//}\r\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\r\nexec($command, $out, $return_ver);\r\n\r\nif (sizeof($slack_urls) &gt; 0) {\r\n $result_mess = &#039;&#039;;\r\n if ($return_ver === 0) {\r\n	//Deploy Success\r\n	$emoji = &quot;:smile:&quot;;\r\n	$color = &#039;good&#039;;\r\n	$result_test = &quot;Deploy Sucess&quot;;\r\n } else {\r\n	//Deploy Failed\r\n	$emoji = &quot;:scream:&quot;;\r\n	$color = &#039;danger&#039;;\r\n	$result_test = &quot;Deploy Failed&quot;;\r\n	$result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\r\n	foreach ($out as $key =&gt; $value) {\r\n	 $result_mess .= $value . &quot;\\n&quot;;\r\n	}\r\n }\r\n $payload = &#039;\r\n {\r\n &quot;username&quot;: &quot;&quot;,\r\n   &quot;attachments&quot;:[\r\n      {\r\n         &quot;fallback&quot;:&quot;Deploy&quot;,\r\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\r\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\r\n         &quot;fields&quot;:[\r\n            {\r\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\r\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\r\n            }\r\n         ]\r\n      }\r\n   ]\r\n} &#039;;\r\n\r\n foreach ($slack_urls as $slack_url) {\r\n	$ch = curl_init();\r\n	curl_setopt($ch, CURLOPT_URL, $slack_url);\r\n	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\r\n	curl_setopt($ch, CURLOPT_POST, true);\r\n	curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\r\n	$res = curl_exec($ch);\r\n//	var_dump($res);\r\n	curl_close($ch);\r\n }\r\n}\r\n   &#x60;&#x60;&#x60;\r\n###  GitLabのインテグレーション設定           \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\r\n\r\n&quot;Git push&quot;する度に自動デプロイされる。\r\n\r\n## リモートのMYSQLをローカルへ同期   \r\n### リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置     \r\nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\r\n実行権限も忘れずに。      \r\nmysql-sync.sh (仮)\r\n```bash\r\n#!/usr/local/bin/bash\r\nSQLHOST= ホスト名\r\nSQLUSER= ユーザー名\r\nSQLPASSWORD= パスワード \r\nSQLTARGETDB= DB名\r\n\r\n// ファイル名\r\nSQL_FILE_NAME=db.sql  \r\n// 圧縮後のファイル名 \r\nSQL_ZIP_FILE_NAME=data/db.zip\r\n// Zipパスワード  \r\nSQL_ZIP_PASS= パスワード\r\n\r\n// mysqldump のPath\r\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\r\n\r\n// MySQLログインのためのテンポラリー my.cnf\r\nMYCNF=${HOME}/.my.cnf\r\nMYCNFCREATE() {\r\ncat << _EOL_ | tee ${MYCNF}\r\n[client]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=\"${SQLPASSWORD}\"\r\n[mysqldump]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=\"${SQLPASSWORD}\"\r\n_EOL_\r\n}\r\n\r\nif [ ! -f ${MYCNF} ];\r\nthen\r\n MYCNFCREATE\r\nelse\r\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n MYCNFCREATE\r\nfi\r\n\r\n// バックアップ\r\n$MYSQLDUMP_PATH $SQLTARGETDB > $SQL_FILE_NAME \r\n// テンポラリー my.cnf 削除\r\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n\r\n// パスワード付きでZip圧縮\r\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \r\n// sqlファイルは削除\r\nrm -rf $SQL_FILE_NAME\r\n\r\n// Git pushまで\r\ncd ../../\r\ngit add -A\r\ngit commit -m \'Sync From Deploy\'\r\ngit push origin master\r\n```\r\n\r\n### MySQL同期スクリプトをローカルに設置\r\nSSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)\r\n```bash\r\n#!/bin/bash\r\n# host別設定ファイル読み込み\r\nsource mysql.sync\r\n    # sshにてlogin してmysqldumpを実行\r\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\r\n\r\n   git pull origin master\r\n    # パスワード付きzipファイル解凍\r\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\r\n \r\n    # local MySQLログイン用ファイル読み込み\r\n    LOGIN_FILE=./local_mysql_login.cnf\r\n    # local mysqlログイン及びdumpファイル実行\r\n    echo $AFTER_ARCIVE_FILENAME\r\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME < $AFTER_ARCIVE_FILENAME\r\n    # local設定を反映させるSQL実行\r\n    mysql --defaults-extra-file=$LOGIN_FILE < $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n    rm $AFTER_ARCIVE_FILENAME\r\n    rm $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n```\r\n読み込んでいる mysql.sync\r\n```bash\r\n\r\n# SSH ログイン情報\r\nREMOTE_HOST= ホスト名\r\nREMOTE_USER　ユーザー名\r\nREMOTE_SSH_PORT= ポート番号\r\n\r\n# Root ディレクトリ\r\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\r\n# Remote backup path\r\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\r\n# サーバー上に設定したスクリプトファイル名\r\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\r\n# バックアップコマンド実行 \r\nREMOTE_BACKUP_COMMAND=\"cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE\"\r\n\r\n# ローカル ディレウトリ\r\nLOCAL_PATH=\"/var/www/html/xxx/xxx\"\r\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\r\nARCIVE_PASS= Zipパスワード\r\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\r\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\r\n\r\n# local db name\r\nLOCAL_DB_NAME= DB名\r\n\r\n# 置換項目定数\r\n## Domain\r\nBEFORE_DOMAIN1=\"Before domain\"\r\nAFTER_DOMAIN1=\"After domain\"\r\n\r\n## Path\r\nBEFORE_PATH=\"Before Path\"\r\nAFTER_PATH=\"After Path\"\r\nTABLE_PREFIX=\"wp_\"\r\n\r\n## Update用のSQL生成\r\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\r\ntouch $CHANGE_LOCAL_SQL_FILENAME\r\ncat <<EOF> $CHANGE_LOCAL_SQL_FILENAME\r\nSET NAMES utf8;\r\nuse ${LOCAL_DB_NAME}\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere option_value like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content = REPLACE(post_content,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere post_content like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content_filtered = REPLACE(post_content_filtered,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere post_content_filtered like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\nguid = REPLACE(guid,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere guid like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value, \'${BEFORE_PATH}\',\'${AFTER_PATH}\')\r\nwhere option_value like \"%${BEFORE_PATH}%\";\r\n\r\nupdate ${TABLE_PREFIX}postmeta set\r\nmeta_value = REPLACE(meta_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere meta_value like \"%${BEFORE_DOMAIN1}%\";\r\nEOF\r\n```\r\n\r\n\r\n読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf \r\n```bash\r\n[client]\r\nuser = root\r\npassword = \'\'\r\nhost = localhost\r\n```\r\n\r\n\r\n振る舞いとしては        \r\n1. ローカルからSSHでサーバーへログイン\r\n2. サーバ側でMySQLバックアップ、\"Git push\"\r\n3. ローカルで\"Git pull\"\r\n4. Zip(sqlファイル、パスワード付き)を解凍\r\n5. ローカルMySQLへインポート\r\n6. 変更必要箇所(ドメイン、Path) をUpdate処理\r\n\r\nリモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。      \r\nまた手作業のためミスも起こる可能性も。     \r\nこのスクリプトでわずか数秒になりました。        \r\n\r\n数分の\"めんどくさい\"を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じてる。     \r\n自分のアイデアを形にすることはいい勉強にはなりますわね。 \r\n\r\n\r\n\r\n\r\n\r\n',294,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/294-revision-v1/',0,'revision','',0),(299,1,'2019-09-23 16:48:11','2019-09-23 07:48:11','<p>ここでの <strong>Git</strong> での使い方はあくまで&quot;1人_Git&quot;、&quot;オレオレ\nGit&quot;なのでチームでのGitの使い方には参考にはなりません。     </p>\n<p>GitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの <strong>\nDBをローカルへ同期</strong> するスクリプトを組んでみます。        </p>\n<h2>よくあるWebhookによる自動デプロイ</h2>\n<h3>GitLubのWebhookをトリガーに&quot;Git pull&quot;し、Slackへ通知するスクリプト配置</h3>\n<p>サーバー上の任意の場所へ設置。</p>\n<pre><code class=\"language-php\">&lt;?php\n//Git deploy\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\n$slack_urls = array(\n    // Slack URL\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\n);\n\n$json_string = file_get_contents(&#039;php://input&#039;);\n$json = json_decode($json_string, true);\n$header = getallheaders();\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\n// echo &#039;exit&#039;;\n////    if(false) {\n// exit();\n//}\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\nexec($command, $out, $return_ver);\n\nif (sizeof($slack_urls) &gt; 0) {\n $result_mess = &#039;&#039;;\n if ($return_ver === 0) {\n    //Deploy Success\n    $emoji = &quot;:smile:&quot;;\n    $color = &#039;good&#039;;\n    $result_test = &quot;Deploy Sucess&quot;;\n } else {\n    //Deploy Failed\n    $emoji = &quot;:scream:&quot;;\n    $color = &#039;danger&#039;;\n    $result_test = &quot;Deploy Failed&quot;;\n    $result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\n    foreach ($out as $key =&gt; $value) {\n     $result_mess .= $value . &quot;\\n&quot;;\n    }\n }\n $payload = &#039;\n {\n &quot;username&quot;: &quot;&quot;,\n   &quot;attachments&quot;:[\n      {\n         &quot;fallback&quot;:&quot;Deploy&quot;,\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\n         &quot;fields&quot;:[\n            {\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\n            }\n         ]\n      }\n   ]\n} &#039;;\n\n foreach ($slack_urls as $slack_url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $slack_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n    $res = curl_exec($ch);\n//  var_dump($res);\n    curl_close($ch);\n }\n}\n   ```\n###  GitLabのインテグレーション設定           \n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\n\n&quot;Git push&quot;する度に自動デプロイされる。\n\n## リモートのMYSQLをローカルへ同期   \n### リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置     \nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\n実行権限も忘れずに。      \nmysql-sync.sh (仮)\n```bash\n#!/usr/local/bin/bash\nSQLHOST= ホスト名\nSQLUSER= ユーザー名\nSQLPASSWORD= パスワード \nSQLTARGETDB= DB名\n\n// ファイル名\nSQL_FILE_NAME=db.sql  \n// 圧縮後のファイル名 \nSQL_ZIP_FILE_NAME=data/db.zip\n// Zipパスワード  \nSQL_ZIP_PASS= パスワード\n\n// mysqldump のPath\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\n\n// MySQLログインのためのテンポラリー my.cnf\nMYCNF=${HOME}/.my.cnf\nMYCNFCREATE() {\ncat << _EOL_ | tee ${MYCNF}\n[client]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=\"${SQLPASSWORD}\"\n[mysqldump]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=\"${SQLPASSWORD}\"\n_EOL_\n}\n\nif [ ! -f ${MYCNF} ];\nthen\n MYCNFCREATE\nelse\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n MYCNFCREATE\nfi\n\n// バックアップ\n$MYSQLDUMP_PATH $SQLTARGETDB > $SQL_FILE_NAME \n// テンポラリー my.cnf 削除\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n\n// パスワード付きでZip圧縮\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \n// sqlファイルは削除\nrm -rf $SQL_FILE_NAME\n\n// Git pushまで\ncd ../../\ngit add -A\ngit commit -m \'Sync From Deploy\'\ngit push origin master</code></pre>\n<h3>MySQL同期スクリプトをローカルに設置</h3>\n<p>SSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# host別設定ファイル読み込み\nsource mysql.sync\n    # sshにてlogin してmysqldumpを実行\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\n\n   git pull origin master\n    # パスワード付きzipファイル解凍\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\n\n    # local MySQLログイン用ファイル読み込み\n    LOGIN_FILE=./local_mysql_login.cnf\n    # local mysqlログイン及びdumpファイル実行\n    echo $AFTER_ARCIVE_FILENAME\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME < $AFTER_ARCIVE_FILENAME\n    # local設定を反映させるSQL実行\n    mysql --defaults-extra-file=$LOGIN_FILE < $CHANGE_LOCAL_SQL_FILENAME\n\n    rm $AFTER_ARCIVE_FILENAME\n    rm $CHANGE_LOCAL_SQL_FILENAME\n</code></pre>\n<p>読み込んでいる mysql.sync</p>\n<pre><code class=\"language-bash\">\n# SSH ログイン情報\nREMOTE_HOST= ホスト名\nREMOTE_USER　ユーザー名\nREMOTE_SSH_PORT= ポート番号\n\n# Root ディレクトリ\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\n# Remote backup path\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\n# サーバー上に設定したスクリプトファイル名\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\n# バックアップコマンド実行 \nREMOTE_BACKUP_COMMAND=\"cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE\"\n\n# ローカル ディレウトリ\nLOCAL_PATH=\"/var/www/html/xxx/xxx\"\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\nARCIVE_PASS= Zipパスワード\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\n\n# local db name\nLOCAL_DB_NAME= DB名\n\n# 置換項目定数\n## Domain\nBEFORE_DOMAIN1=\"Before domain\"\nAFTER_DOMAIN1=\"After domain\"\n\n## Path\nBEFORE_PATH=\"Before Path\"\nAFTER_PATH=\"After Path\"\nTABLE_PREFIX=\"wp_\"\n\n## Update用のSQL生成\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\ntouch $CHANGE_LOCAL_SQL_FILENAME\ncat <<EOF> $CHANGE_LOCAL_SQL_FILENAME\nSET NAMES utf8;\nuse ${LOCAL_DB_NAME}\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere option_value like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}posts set\npost_content = REPLACE(post_content,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere post_content like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}posts set\npost_content_filtered = REPLACE(post_content_filtered,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere post_content_filtered like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}posts set\nguid = REPLACE(guid,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere guid like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value, \'${BEFORE_PATH}\',\'${AFTER_PATH}\')\nwhere option_value like \"%${BEFORE_PATH}%\";\n\nupdate ${TABLE_PREFIX}postmeta set\nmeta_value = REPLACE(meta_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere meta_value like \"%${BEFORE_DOMAIN1}%\";\nEOF</code></pre>\n<p>読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf </p>\n<pre><code class=\"language-bash\">[client]\nuser = root\npassword = \'\'\nhost = localhost</code></pre>\n<p>振る舞いとしては        </p>\n<ol>\n<li>ローカルからSSHでサーバーへログイン</li>\n<li>サーバ側でMySQLバックアップ、&quot;Git push&quot;</li>\n<li>ローカルで&quot;Git pull&quot;</li>\n<li>Zip(sqlファイル、パスワード付き)を解凍</li>\n<li>ローカルMySQLへインポート</li>\n<li>変更必要箇所(ドメイン、Path) をUpdate処理</li>\n</ol>\n<p>リモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。<br />\nまた手作業のためミスも起こる可能性も。<br />\nこのスクリプトでわずか数秒になりました。        </p>\n<p>数分の&quot;めんどくさい&quot;を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じてる。<br />\n自分のアイデアを形にすることはいい勉強にはなりますわね。 </p>','WordPressでGitを使ったWebhookデプロイとリモートDB同期','リモートのDBをローカルへ同期するめんどくさい作業をスクリプト化','inherit','closed','closed','','294-revision-v1','','','2019-09-23 16:48:11','2019-09-23 07:48:11','ここでの __Git__ での使い方はあくまで\"1人_Git\"、\"オレオレ\r\nGit\"なのでチームでのGitの使い方には参考にはなりません。     \r\n\r\nGitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの __\r\nDBをローカルへ同期__ するスクリプトを組んでみます。        \r\n\r\n##  よくあるWebhookによる自動デプロイ\r\n### GitLubのWebhookをトリガーに\"Git pull\"し、Slackへ通知するスクリプト配置        \r\nサーバー上の任意の場所へ設置。\r\n```php\r\n&lt;?php\r\n//Git deploy\r\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\r\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\r\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\r\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\r\n$slack_urls = array(\r\n	// Slack URL\r\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\r\n);\r\n\r\n$json_string = file_get_contents(&#039;php://input&#039;);\r\n$json = json_decode($json_string, true);\r\n$header = getallheaders();\r\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\r\n// echo &#039;exit&#039;;\r\n////	if(false) {\r\n// exit();\r\n//}\r\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\r\nexec($command, $out, $return_ver);\r\n\r\nif (sizeof($slack_urls) &gt; 0) {\r\n $result_mess = &#039;&#039;;\r\n if ($return_ver === 0) {\r\n	//Deploy Success\r\n	$emoji = &quot;:smile:&quot;;\r\n	$color = &#039;good&#039;;\r\n	$result_test = &quot;Deploy Sucess&quot;;\r\n } else {\r\n	//Deploy Failed\r\n	$emoji = &quot;:scream:&quot;;\r\n	$color = &#039;danger&#039;;\r\n	$result_test = &quot;Deploy Failed&quot;;\r\n	$result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\r\n	foreach ($out as $key =&gt; $value) {\r\n	 $result_mess .= $value . &quot;\\n&quot;;\r\n	}\r\n }\r\n $payload = &#039;\r\n {\r\n &quot;username&quot;: &quot;&quot;,\r\n   &quot;attachments&quot;:[\r\n      {\r\n         &quot;fallback&quot;:&quot;Deploy&quot;,\r\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\r\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\r\n         &quot;fields&quot;:[\r\n            {\r\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\r\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\r\n            }\r\n         ]\r\n      }\r\n   ]\r\n} &#039;;\r\n\r\n foreach ($slack_urls as $slack_url) {\r\n	$ch = curl_init();\r\n	curl_setopt($ch, CURLOPT_URL, $slack_url);\r\n	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\r\n	curl_setopt($ch, CURLOPT_POST, true);\r\n	curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\r\n	$res = curl_exec($ch);\r\n//	var_dump($res);\r\n	curl_close($ch);\r\n }\r\n}\r\n   &#x60;&#x60;&#x60;\r\n###  GitLabのインテグレーション設定           \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\r\n\r\n&quot;Git push&quot;する度に自動デプロイされる。\r\n\r\n## リモートのMYSQLをローカルへ同期   \r\n### リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置     \r\nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\r\n実行権限も忘れずに。      \r\nmysql-sync.sh (仮)\r\n```bash\r\n#!/usr/local/bin/bash\r\nSQLHOST= ホスト名\r\nSQLUSER= ユーザー名\r\nSQLPASSWORD= パスワード \r\nSQLTARGETDB= DB名\r\n\r\n// ファイル名\r\nSQL_FILE_NAME=db.sql  \r\n// 圧縮後のファイル名 \r\nSQL_ZIP_FILE_NAME=data/db.zip\r\n// Zipパスワード  \r\nSQL_ZIP_PASS= パスワード\r\n\r\n// mysqldump のPath\r\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\r\n\r\n// MySQLログインのためのテンポラリー my.cnf\r\nMYCNF=${HOME}/.my.cnf\r\nMYCNFCREATE() {\r\ncat << _EOL_ | tee ${MYCNF}\r\n[client]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=\"${SQLPASSWORD}\"\r\n[mysqldump]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=\"${SQLPASSWORD}\"\r\n_EOL_\r\n}\r\n\r\nif [ ! -f ${MYCNF} ];\r\nthen\r\n MYCNFCREATE\r\nelse\r\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n MYCNFCREATE\r\nfi\r\n\r\n// バックアップ\r\n$MYSQLDUMP_PATH $SQLTARGETDB > $SQL_FILE_NAME \r\n// テンポラリー my.cnf 削除\r\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n\r\n// パスワード付きでZip圧縮\r\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \r\n// sqlファイルは削除\r\nrm -rf $SQL_FILE_NAME\r\n\r\n// Git pushまで\r\ncd ../../\r\ngit add -A\r\ngit commit -m \'Sync From Deploy\'\r\ngit push origin master\r\n```\r\n\r\n### MySQL同期スクリプトをローカルに設置\r\nSSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)\r\n```bash\r\n#!/bin/bash\r\n# host別設定ファイル読み込み\r\nsource mysql.sync\r\n    # sshにてlogin してmysqldumpを実行\r\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\r\n\r\n   git pull origin master\r\n    # パスワード付きzipファイル解凍\r\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\r\n \r\n    # local MySQLログイン用ファイル読み込み\r\n    LOGIN_FILE=./local_mysql_login.cnf\r\n    # local mysqlログイン及びdumpファイル実行\r\n    echo $AFTER_ARCIVE_FILENAME\r\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME < $AFTER_ARCIVE_FILENAME\r\n    # local設定を反映させるSQL実行\r\n    mysql --defaults-extra-file=$LOGIN_FILE < $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n    rm $AFTER_ARCIVE_FILENAME\r\n    rm $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n```\r\n読み込んでいる mysql.sync\r\n```bash\r\n\r\n# SSH ログイン情報\r\nREMOTE_HOST= ホスト名\r\nREMOTE_USER　ユーザー名\r\nREMOTE_SSH_PORT= ポート番号\r\n\r\n# Root ディレクトリ\r\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\r\n# Remote backup path\r\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\r\n# サーバー上に設定したスクリプトファイル名\r\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\r\n# バックアップコマンド実行 \r\nREMOTE_BACKUP_COMMAND=\"cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE\"\r\n\r\n# ローカル ディレウトリ\r\nLOCAL_PATH=\"/var/www/html/xxx/xxx\"\r\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\r\nARCIVE_PASS= Zipパスワード\r\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\r\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\r\n\r\n# local db name\r\nLOCAL_DB_NAME= DB名\r\n\r\n# 置換項目定数\r\n## Domain\r\nBEFORE_DOMAIN1=\"Before domain\"\r\nAFTER_DOMAIN1=\"After domain\"\r\n\r\n## Path\r\nBEFORE_PATH=\"Before Path\"\r\nAFTER_PATH=\"After Path\"\r\nTABLE_PREFIX=\"wp_\"\r\n\r\n## Update用のSQL生成\r\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\r\ntouch $CHANGE_LOCAL_SQL_FILENAME\r\ncat <<EOF> $CHANGE_LOCAL_SQL_FILENAME\r\nSET NAMES utf8;\r\nuse ${LOCAL_DB_NAME}\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere option_value like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content = REPLACE(post_content,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere post_content like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content_filtered = REPLACE(post_content_filtered,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere post_content_filtered like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\nguid = REPLACE(guid,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere guid like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value, \'${BEFORE_PATH}\',\'${AFTER_PATH}\')\r\nwhere option_value like \"%${BEFORE_PATH}%\";\r\n\r\nupdate ${TABLE_PREFIX}postmeta set\r\nmeta_value = REPLACE(meta_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere meta_value like \"%${BEFORE_DOMAIN1}%\";\r\nEOF\r\n```\r\n\r\n\r\n読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf \r\n```bash\r\n[client]\r\nuser = root\r\npassword = \'\'\r\nhost = localhost\r\n```\r\n\r\n\r\n振る舞いとしては        \r\n1. ローカルからSSHでサーバーへログイン\r\n2. サーバ側でMySQLバックアップ、\"Git push\"\r\n3. ローカルで\"Git pull\"\r\n4. Zip(sqlファイル、パスワード付き)を解凍\r\n5. ローカルMySQLへインポート\r\n6. 変更必要箇所(ドメイン、Path) をUpdate処理\r\n\r\nリモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。      \r\nまた手作業のためミスも起こる可能性も。     \r\nこのスクリプトでわずか数秒になりました。        \r\n\r\n数分の\"めんどくさい\"を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じてる。     \r\n自分のアイデアを形にすることはいい勉強にはなりますわね。 \r\n\r\n\r\n\r\n\r\n\r\n',294,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/294-revision-v1/',0,'revision','',0),(300,1,'2019-09-23 16:52:06','2019-09-23 07:52:06','<p>ここでの <strong>Git</strong> での使い方はあくまで&quot;1人_Git&quot;、&quot;オレオレ\nGit&quot;なのでチームでのGitの使い方には参考にはなりません。     </p>\n<p>GitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの <strong>\nDBをローカルへ同期</strong> するスクリプトを組んでみます。        </p>\n<h2>よくあるWebhookによる自動デプロイ</h2>\n<h3>GitLubのWebhookをトリガーに&quot;Git pull&quot;し、Slackへ通知するスクリプト配置</h3>\n<p>サーバー上の任意の場所へ設置。</p>\n<pre><code class=\"language-php\">&lt;?php\n//Git deploy\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\n$slack_urls = array(\n    // Slack URL\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\n);\n\n$json_string = file_get_contents(&#039;php://input&#039;);\n$json = json_decode($json_string, true);\n$header = getallheaders();\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\n// echo &#039;exit&#039;;\n////    if(false) {\n// exit();\n//}\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\nexec($command, $out, $return_ver);\n\nif (sizeof($slack_urls) &gt; 0) {\n $result_mess = &#039;&#039;;\n if ($return_ver === 0) {\n    //Deploy Success\n    $emoji = &quot;:smile:&quot;;\n    $color = &#039;good&#039;;\n    $result_test = &quot;Deploy Sucess&quot;;\n } else {\n    //Deploy Failed\n    $emoji = &quot;:scream:&quot;;\n    $color = &#039;danger&#039;;\n    $result_test = &quot;Deploy Failed&quot;;\n    $result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\n    foreach ($out as $key =&gt; $value) {\n     $result_mess .= $value . &quot;\\n&quot;;\n    }\n }\n $payload = &#039;\n {\n &quot;username&quot;: &quot;&quot;,\n   &quot;attachments&quot;:[\n      {\n         &quot;fallback&quot;:&quot;Deploy&quot;,\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\n         &quot;fields&quot;:[\n            {\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\n            }\n         ]\n      }\n   ]\n} &#039;;\n\n foreach ($slack_urls as $slack_url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $slack_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n    $res = curl_exec($ch);\n//  var_dump($res);\n    curl_close($ch);\n }\n}\n   ```\n###  GitLabのインテグレーション設定           \n\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\n\n&quot;Git push&quot;する度に自動デプロイされる。\n\n## リモートのMYSQLをローカルへ同期   \n### リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置     \nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\n実行権限も忘れずに。      \nmysql-sync.sh (仮)\n```bash\n#!/usr/local/bin/bash\nSQLHOST= ホスト名\nSQLUSER= ユーザー名\nSQLPASSWORD= パスワード \nSQLTARGETDB= DB名\n\n// ファイル名\nSQL_FILE_NAME=db.sql  \n// 圧縮後のファイル名 \nSQL_ZIP_FILE_NAME=data/db.zip\n// Zipパスワード  \nSQL_ZIP_PASS= パスワード\n\n// mysqldump のPath\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\n\n// MySQLログインのためのテンポラリー my.cnf\nMYCNF=${HOME}/.my.cnf\nMYCNFCREATE() {\ncat << _EOL_ | tee ${MYCNF}\n[client]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=\"${SQLPASSWORD}\"\n[mysqldump]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=\"${SQLPASSWORD}\"\n_EOL_\n}\n\nif [ ! -f ${MYCNF} ];\nthen\n MYCNFCREATE\nelse\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n MYCNFCREATE\nfi\n\n// バックアップ\n$MYSQLDUMP_PATH $SQLTARGETDB > $SQL_FILE_NAME \n// テンポラリー my.cnf 削除\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n\n// パスワード付きでZip圧縮\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \n// sqlファイルは削除\nrm -rf $SQL_FILE_NAME\n\n// Git pushまで\ncd ../../\ngit add -A\ngit commit -m \'Sync From Deploy\'\ngit push origin master</code></pre>\n<h3>MySQL同期スクリプトをローカルに設置</h3>\n<p>SSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# host別設定ファイル読み込み\nsource mysql.sync\n    # sshにてlogin してmysqldumpを実行\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\n\n   git pull origin master\n    # パスワード付きzipファイル解凍\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\n\n    # local MySQLログイン用ファイル読み込み\n    LOGIN_FILE=./local_mysql_login.cnf\n    # local mysqlログイン及びdumpファイル実行\n    echo $AFTER_ARCIVE_FILENAME\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME < $AFTER_ARCIVE_FILENAME\n    # local設定を反映させるSQL実行\n    mysql --defaults-extra-file=$LOGIN_FILE < $CHANGE_LOCAL_SQL_FILENAME\n\n    rm $AFTER_ARCIVE_FILENAME\n    rm $CHANGE_LOCAL_SQL_FILENAME\n</code></pre>\n<p>読み込んでいる mysql.sync</p>\n<pre><code class=\"language-bash\">\n# SSH ログイン情報\nREMOTE_HOST= ホスト名\nREMOTE_USER　ユーザー名\nREMOTE_SSH_PORT= ポート番号\n\n# Root ディレクトリ\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\n# Remote backup path\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\n# サーバー上に設定したスクリプトファイル名\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\n# バックアップコマンド実行 \nREMOTE_BACKUP_COMMAND=\"cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE\"\n\n# ローカル ディレウトリ\nLOCAL_PATH=\"/var/www/html/xxx/xxx\"\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\nARCIVE_PASS= Zipパスワード\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\n\n# local db name\nLOCAL_DB_NAME= DB名\n\n# 置換項目定数\n## Domain\nBEFORE_DOMAIN1=\"Before domain\"\nAFTER_DOMAIN1=\"After domain\"\n\n## Path\nBEFORE_PATH=\"Before Path\"\nAFTER_PATH=\"After Path\"\nTABLE_PREFIX=\"wp_\"\n\n## Update用のSQL生成\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\ntouch $CHANGE_LOCAL_SQL_FILENAME\ncat <<EOF> $CHANGE_LOCAL_SQL_FILENAME\nSET NAMES utf8;\nuse ${LOCAL_DB_NAME}\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere option_value like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}posts set\npost_content = REPLACE(post_content,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere post_content like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}posts set\npost_content_filtered = REPLACE(post_content_filtered,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere post_content_filtered like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}posts set\nguid = REPLACE(guid,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere guid like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value, \'${BEFORE_PATH}\',\'${AFTER_PATH}\')\nwhere option_value like \"%${BEFORE_PATH}%\";\n\nupdate ${TABLE_PREFIX}postmeta set\nmeta_value = REPLACE(meta_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere meta_value like \"%${BEFORE_DOMAIN1}%\";\nEOF</code></pre>\n<p>読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf </p>\n<pre><code class=\"language-bash\">[client]\nuser = root\npassword = \'\'\nhost = localhost</code></pre>\n<p>振る舞いとしては        </p>\n<ol>\n<li>ローカルからSSHでサーバーへログイン</li>\n<li>サーバ側でMySQLバックアップ、&quot;Git push&quot;</li>\n<li>ローカルで&quot;Git pull&quot;</li>\n<li>Zip(sqlファイル、パスワード付き)を解凍</li>\n<li>ローカルMySQLへインポート</li>\n<li>変更必要箇所(ドメイン、Path) をUpdate処理</li>\n</ol>\n<p>リモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。<br />\nまた手作業のためミスも起こる可能性も。<br />\nこのスクリプトでわずか数秒になりました。        </p>\n<p>数分の&quot;めんどくさい&quot;を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。<br />\n自分のアイデアを形にすることはいい勉強にはなりますわね。 </p>','WordPressでGitを使ったWebhookデプロイとリモートDB同期','リモートのDBをローカルへ同期するめんどくさい作業をスクリプト化','inherit','closed','closed','','294-revision-v1','','','2019-09-23 16:52:06','2019-09-23 07:52:06','ここでの __Git__ での使い方はあくまで\"1人_Git\"、\"オレオレ\r\nGit\"なのでチームでのGitの使い方には参考にはなりません。     \r\n\r\nGitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの __\r\nDBをローカルへ同期__ するスクリプトを組んでみます。        \r\n\r\n##  よくあるWebhookによる自動デプロイ\r\n### GitLubのWebhookをトリガーに\"Git pull\"し、Slackへ通知するスクリプト配置        \r\nサーバー上の任意の場所へ設置。\r\n```php\r\n&lt;?php\r\n//Git deploy\r\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\r\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\r\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\r\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\r\n$slack_urls = array(\r\n	// Slack URL\r\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\r\n);\r\n\r\n$json_string = file_get_contents(&#039;php://input&#039;);\r\n$json = json_decode($json_string, true);\r\n$header = getallheaders();\r\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\r\n// echo &#039;exit&#039;;\r\n////	if(false) {\r\n// exit();\r\n//}\r\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\r\nexec($command, $out, $return_ver);\r\n\r\nif (sizeof($slack_urls) &gt; 0) {\r\n $result_mess = &#039;&#039;;\r\n if ($return_ver === 0) {\r\n	//Deploy Success\r\n	$emoji = &quot;:smile:&quot;;\r\n	$color = &#039;good&#039;;\r\n	$result_test = &quot;Deploy Sucess&quot;;\r\n } else {\r\n	//Deploy Failed\r\n	$emoji = &quot;:scream:&quot;;\r\n	$color = &#039;danger&#039;;\r\n	$result_test = &quot;Deploy Failed&quot;;\r\n	$result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\r\n	foreach ($out as $key =&gt; $value) {\r\n	 $result_mess .= $value . &quot;\\n&quot;;\r\n	}\r\n }\r\n $payload = &#039;\r\n {\r\n &quot;username&quot;: &quot;&quot;,\r\n   &quot;attachments&quot;:[\r\n      {\r\n         &quot;fallback&quot;:&quot;Deploy&quot;,\r\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\r\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\r\n         &quot;fields&quot;:[\r\n            {\r\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\r\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\r\n            }\r\n         ]\r\n      }\r\n   ]\r\n} &#039;;\r\n\r\n foreach ($slack_urls as $slack_url) {\r\n	$ch = curl_init();\r\n	curl_setopt($ch, CURLOPT_URL, $slack_url);\r\n	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\r\n	curl_setopt($ch, CURLOPT_POST, true);\r\n	curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\r\n	$res = curl_exec($ch);\r\n//	var_dump($res);\r\n	curl_close($ch);\r\n }\r\n}\r\n   &#x60;&#x60;&#x60;\r\n###  GitLabのインテグレーション設定           \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\r\n\r\n&quot;Git push&quot;する度に自動デプロイされる。\r\n\r\n## リモートのMYSQLをローカルへ同期   \r\n### リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置     \r\nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\r\n実行権限も忘れずに。      \r\nmysql-sync.sh (仮)\r\n```bash\r\n#!/usr/local/bin/bash\r\nSQLHOST= ホスト名\r\nSQLUSER= ユーザー名\r\nSQLPASSWORD= パスワード \r\nSQLTARGETDB= DB名\r\n\r\n// ファイル名\r\nSQL_FILE_NAME=db.sql  \r\n// 圧縮後のファイル名 \r\nSQL_ZIP_FILE_NAME=data/db.zip\r\n// Zipパスワード  \r\nSQL_ZIP_PASS= パスワード\r\n\r\n// mysqldump のPath\r\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\r\n\r\n// MySQLログインのためのテンポラリー my.cnf\r\nMYCNF=${HOME}/.my.cnf\r\nMYCNFCREATE() {\r\ncat << _EOL_ | tee ${MYCNF}\r\n[client]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=\"${SQLPASSWORD}\"\r\n[mysqldump]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=\"${SQLPASSWORD}\"\r\n_EOL_\r\n}\r\n\r\nif [ ! -f ${MYCNF} ];\r\nthen\r\n MYCNFCREATE\r\nelse\r\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n MYCNFCREATE\r\nfi\r\n\r\n// バックアップ\r\n$MYSQLDUMP_PATH $SQLTARGETDB > $SQL_FILE_NAME \r\n// テンポラリー my.cnf 削除\r\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n\r\n// パスワード付きでZip圧縮\r\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \r\n// sqlファイルは削除\r\nrm -rf $SQL_FILE_NAME\r\n\r\n// Git pushまで\r\ncd ../../\r\ngit add -A\r\ngit commit -m \'Sync From Deploy\'\r\ngit push origin master\r\n```\r\n\r\n### MySQL同期スクリプトをローカルに設置\r\nSSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)\r\n```bash\r\n#!/bin/bash\r\n# host別設定ファイル読み込み\r\nsource mysql.sync\r\n    # sshにてlogin してmysqldumpを実行\r\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\r\n\r\n   git pull origin master\r\n    # パスワード付きzipファイル解凍\r\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\r\n \r\n    # local MySQLログイン用ファイル読み込み\r\n    LOGIN_FILE=./local_mysql_login.cnf\r\n    # local mysqlログイン及びdumpファイル実行\r\n    echo $AFTER_ARCIVE_FILENAME\r\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME < $AFTER_ARCIVE_FILENAME\r\n    # local設定を反映させるSQL実行\r\n    mysql --defaults-extra-file=$LOGIN_FILE < $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n    rm $AFTER_ARCIVE_FILENAME\r\n    rm $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n```\r\n読み込んでいる mysql.sync\r\n```bash\r\n\r\n# SSH ログイン情報\r\nREMOTE_HOST= ホスト名\r\nREMOTE_USER　ユーザー名\r\nREMOTE_SSH_PORT= ポート番号\r\n\r\n# Root ディレクトリ\r\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\r\n# Remote backup path\r\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\r\n# サーバー上に設定したスクリプトファイル名\r\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\r\n# バックアップコマンド実行 \r\nREMOTE_BACKUP_COMMAND=\"cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE\"\r\n\r\n# ローカル ディレウトリ\r\nLOCAL_PATH=\"/var/www/html/xxx/xxx\"\r\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\r\nARCIVE_PASS= Zipパスワード\r\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\r\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\r\n\r\n# local db name\r\nLOCAL_DB_NAME= DB名\r\n\r\n# 置換項目定数\r\n## Domain\r\nBEFORE_DOMAIN1=\"Before domain\"\r\nAFTER_DOMAIN1=\"After domain\"\r\n\r\n## Path\r\nBEFORE_PATH=\"Before Path\"\r\nAFTER_PATH=\"After Path\"\r\nTABLE_PREFIX=\"wp_\"\r\n\r\n## Update用のSQL生成\r\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\r\ntouch $CHANGE_LOCAL_SQL_FILENAME\r\ncat <<EOF> $CHANGE_LOCAL_SQL_FILENAME\r\nSET NAMES utf8;\r\nuse ${LOCAL_DB_NAME}\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere option_value like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content = REPLACE(post_content,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere post_content like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content_filtered = REPLACE(post_content_filtered,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere post_content_filtered like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\nguid = REPLACE(guid,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere guid like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value, \'${BEFORE_PATH}\',\'${AFTER_PATH}\')\r\nwhere option_value like \"%${BEFORE_PATH}%\";\r\n\r\nupdate ${TABLE_PREFIX}postmeta set\r\nmeta_value = REPLACE(meta_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere meta_value like \"%${BEFORE_DOMAIN1}%\";\r\nEOF\r\n```\r\n\r\n\r\n読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf \r\n```bash\r\n[client]\r\nuser = root\r\npassword = \'\'\r\nhost = localhost\r\n```\r\n\r\n\r\n振る舞いとしては        \r\n1. ローカルからSSHでサーバーへログイン\r\n2. サーバ側でMySQLバックアップ、\"Git push\"\r\n3. ローカルで\"Git pull\"\r\n4. Zip(sqlファイル、パスワード付き)を解凍\r\n5. ローカルMySQLへインポート\r\n6. 変更必要箇所(ドメイン、Path) をUpdate処理\r\n\r\nリモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。      \r\nまた手作業のためミスも起こる可能性も。     \r\nこのスクリプトでわずか数秒になりました。        \r\n\r\n数分の\"めんどくさい\"を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。     \r\n自分のアイデアを形にすることはいい勉強にはなりますわね。 \r\n\r\n\r\n\r\n\r\n\r\n',294,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/294-revision-v1/',0,'revision','',0),(301,1,'2019-09-23 16:54:23','2019-09-23 07:54:23','<p>ここでの<strong>Git</strong>の使い方はあくまで&quot;1人_Git&quot;、&quot;オレオレ\nGit&quot;なのでチームでのGitの使い方には参考にはなりません。     </p>\n<p>GitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの <strong>\nDBをローカルへ同期</strong> するスクリプトを組んでみます。        </p>\n<h2>よくあるWebhookによる自動デプロイ</h2>\n<h3>GitLubのWebhookをトリガーに&quot;Git pull&quot;し、Slackへ通知するスクリプト配置</h3>\n<p>サーバー上の任意の場所へ設置。</p>\n<pre><code class=\"language-php\">&lt;?php\n//Git deploy\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\n$slack_urls = array(\n    // Slack URL\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\n);\n\n$json_string = file_get_contents(&#039;php://input&#039;);\n$json = json_decode($json_string, true);\n$header = getallheaders();\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\n// echo &#039;exit&#039;;\n////    if(false) {\n// exit();\n//}\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\nexec($command, $out, $return_ver);\n\nif (sizeof($slack_urls) &gt; 0) {\n $result_mess = &#039;&#039;;\n if ($return_ver === 0) {\n    //Deploy Success\n    $emoji = &quot;:smile:&quot;;\n    $color = &#039;good&#039;;\n    $result_test = &quot;Deploy Sucess&quot;;\n } else {\n    //Deploy Failed\n    $emoji = &quot;:scream:&quot;;\n    $color = &#039;danger&#039;;\n    $result_test = &quot;Deploy Failed&quot;;\n    $result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\n    foreach ($out as $key =&gt; $value) {\n     $result_mess .= $value . &quot;\\n&quot;;\n    }\n }\n $payload = &#039;\n {\n &quot;username&quot;: &quot;&quot;,\n   &quot;attachments&quot;:[\n      {\n         &quot;fallback&quot;:&quot;Deploy&quot;,\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\n         &quot;fields&quot;:[\n            {\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\n            }\n         ]\n      }\n   ]\n} &#039;;\n\n foreach ($slack_urls as $slack_url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $slack_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n    $res = curl_exec($ch);\n//  var_dump($res);\n    curl_close($ch);\n }\n}\n   ```\n###  GitLabのインテグレーション設定           \nGitLab-&gt;設定-&gt;インテグレーション\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\n\n&quot;Git push&quot;する度に自動デプロイされる。\n\n## リモートのMYSQLをローカルへ同期   \n### リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置     \nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\n実行権限も忘れずに。      \nmysql-sync.sh (仮)\n```bash\n#!/usr/local/bin/bash\nSQLHOST= ホスト名\nSQLUSER= ユーザー名\nSQLPASSWORD= パスワード \nSQLTARGETDB= DB名\n\n// ファイル名\nSQL_FILE_NAME=db.sql  \n// 圧縮後のファイル名 \nSQL_ZIP_FILE_NAME=data/db.zip\n// Zipパスワード  \nSQL_ZIP_PASS= パスワード\n\n// mysqldump のPath\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\n\n// MySQLログインのためのテンポラリー my.cnf\nMYCNF=${HOME}/.my.cnf\nMYCNFCREATE() {\ncat << _EOL_ | tee ${MYCNF}\n[client]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=\"${SQLPASSWORD}\"\n[mysqldump]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=\"${SQLPASSWORD}\"\n_EOL_\n}\n\nif [ ! -f ${MYCNF} ];\nthen\n MYCNFCREATE\nelse\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n MYCNFCREATE\nfi\n\n// バックアップ\n$MYSQLDUMP_PATH $SQLTARGETDB > $SQL_FILE_NAME \n// テンポラリー my.cnf 削除\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n\n// パスワード付きでZip圧縮\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \n// sqlファイルは削除\nrm -rf $SQL_FILE_NAME\n\n// Git pushまで\ncd ../../\ngit add -A\ngit commit -m \'Sync From Deploy\'\ngit push origin master</code></pre>\n<h3>MySQL同期スクリプトをローカルに設置</h3>\n<p>SSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# host別設定ファイル読み込み\nsource mysql.sync\n    # sshにてlogin してmysqldumpを実行\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\n\n   git pull origin master\n    # パスワード付きzipファイル解凍\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\n\n    # local MySQLログイン用ファイル読み込み\n    LOGIN_FILE=./local_mysql_login.cnf\n    # local mysqlログイン及びdumpファイル実行\n    echo $AFTER_ARCIVE_FILENAME\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME < $AFTER_ARCIVE_FILENAME\n    # local設定を反映させるSQL実行\n    mysql --defaults-extra-file=$LOGIN_FILE < $CHANGE_LOCAL_SQL_FILENAME\n\n    rm $AFTER_ARCIVE_FILENAME\n    rm $CHANGE_LOCAL_SQL_FILENAME\n</code></pre>\n<p>読み込んでいる mysql.sync</p>\n<pre><code class=\"language-bash\">\n# SSH ログイン情報\nREMOTE_HOST= ホスト名\nREMOTE_USER　ユーザー名\nREMOTE_SSH_PORT= ポート番号\n\n# Root ディレクトリ\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\n# Remote backup path\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\n# サーバー上に設定したスクリプトファイル名\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\n# バックアップコマンド実行 \nREMOTE_BACKUP_COMMAND=\"cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE\"\n\n# ローカル ディレウトリ\nLOCAL_PATH=\"/var/www/html/xxx/xxx\"\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\nARCIVE_PASS= Zipパスワード\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\n\n# local db name\nLOCAL_DB_NAME= DB名\n\n# 置換項目定数\n## Domain\nBEFORE_DOMAIN1=\"Before domain\"\nAFTER_DOMAIN1=\"After domain\"\n\n## Path\nBEFORE_PATH=\"Before Path\"\nAFTER_PATH=\"After Path\"\nTABLE_PREFIX=\"wp_\"\n\n## Update用のSQL生成\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\ntouch $CHANGE_LOCAL_SQL_FILENAME\ncat <<EOF> $CHANGE_LOCAL_SQL_FILENAME\nSET NAMES utf8;\nuse ${LOCAL_DB_NAME}\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere option_value like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}posts set\npost_content = REPLACE(post_content,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere post_content like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}posts set\npost_content_filtered = REPLACE(post_content_filtered,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere post_content_filtered like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}posts set\nguid = REPLACE(guid,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere guid like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value, \'${BEFORE_PATH}\',\'${AFTER_PATH}\')\nwhere option_value like \"%${BEFORE_PATH}%\";\n\nupdate ${TABLE_PREFIX}postmeta set\nmeta_value = REPLACE(meta_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere meta_value like \"%${BEFORE_DOMAIN1}%\";\nEOF</code></pre>\n<p>読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf </p>\n<pre><code class=\"language-bash\">[client]\nuser = root\npassword = \'\'\nhost = localhost</code></pre>\n<p>振る舞いとしては        </p>\n<ol>\n<li>ローカルからSSHでサーバーへログイン</li>\n<li>サーバ側でMySQLバックアップ、&quot;Git push&quot;</li>\n<li>ローカルで&quot;Git pull&quot;</li>\n<li>Zip(sqlファイル、パスワード付き)を解凍</li>\n<li>ローカルMySQLへインポート</li>\n<li>変更必要箇所(ドメイン、Path) をUpdate処理</li>\n</ol>\n<p>リモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。<br />\nまた手作業のためミスも起こる可能性も。<br />\nこのスクリプトでわずか数秒になりました。        </p>\n<p>数分の&quot;めんどくさい&quot;を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。<br />\n自分のアイデアを形にすることはいい勉強にはなりますわね。 </p>','WordPressでGitを使ったWebhookデプロイとリモートDB同期','リモートのDBをローカルへ同期するめんどくさい作業をスクリプト化','inherit','closed','closed','','294-revision-v1','','','2019-09-23 16:54:23','2019-09-23 07:54:23','ここでの__Git__の使い方はあくまで\"1人_Git\"、\"オレオレ\r\nGit\"なのでチームでのGitの使い方には参考にはなりません。     \r\n\r\nGitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの __\r\nDBをローカルへ同期__ するスクリプトを組んでみます。        \r\n\r\n##  よくあるWebhookによる自動デプロイ\r\n### GitLubのWebhookをトリガーに\"Git pull\"し、Slackへ通知するスクリプト配置        \r\nサーバー上の任意の場所へ設置。\r\n```php\r\n&lt;?php\r\n//Git deploy\r\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\r\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\r\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\r\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\r\n$slack_urls = array(\r\n	// Slack URL\r\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\r\n);\r\n\r\n$json_string = file_get_contents(&#039;php://input&#039;);\r\n$json = json_decode($json_string, true);\r\n$header = getallheaders();\r\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\r\n// echo &#039;exit&#039;;\r\n////	if(false) {\r\n// exit();\r\n//}\r\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\r\nexec($command, $out, $return_ver);\r\n\r\nif (sizeof($slack_urls) &gt; 0) {\r\n $result_mess = &#039;&#039;;\r\n if ($return_ver === 0) {\r\n	//Deploy Success\r\n	$emoji = &quot;:smile:&quot;;\r\n	$color = &#039;good&#039;;\r\n	$result_test = &quot;Deploy Sucess&quot;;\r\n } else {\r\n	//Deploy Failed\r\n	$emoji = &quot;:scream:&quot;;\r\n	$color = &#039;danger&#039;;\r\n	$result_test = &quot;Deploy Failed&quot;;\r\n	$result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\r\n	foreach ($out as $key =&gt; $value) {\r\n	 $result_mess .= $value . &quot;\\n&quot;;\r\n	}\r\n }\r\n $payload = &#039;\r\n {\r\n &quot;username&quot;: &quot;&quot;,\r\n   &quot;attachments&quot;:[\r\n      {\r\n         &quot;fallback&quot;:&quot;Deploy&quot;,\r\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\r\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\r\n         &quot;fields&quot;:[\r\n            {\r\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\r\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\r\n            }\r\n         ]\r\n      }\r\n   ]\r\n} &#039;;\r\n\r\n foreach ($slack_urls as $slack_url) {\r\n	$ch = curl_init();\r\n	curl_setopt($ch, CURLOPT_URL, $slack_url);\r\n	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\r\n	curl_setopt($ch, CURLOPT_POST, true);\r\n	curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\r\n	$res = curl_exec($ch);\r\n//	var_dump($res);\r\n	curl_close($ch);\r\n }\r\n}\r\n   &#x60;&#x60;&#x60;\r\n###  GitLabのインテグレーション設定           \r\nGitLab-&gt;設定-&gt;インテグレーション\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\r\n\r\n&quot;Git push&quot;する度に自動デプロイされる。\r\n\r\n## リモートのMYSQLをローカルへ同期   \r\n### リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置     \r\nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\r\n実行権限も忘れずに。      \r\nmysql-sync.sh (仮)\r\n```bash\r\n#!/usr/local/bin/bash\r\nSQLHOST= ホスト名\r\nSQLUSER= ユーザー名\r\nSQLPASSWORD= パスワード \r\nSQLTARGETDB= DB名\r\n\r\n// ファイル名\r\nSQL_FILE_NAME=db.sql  \r\n// 圧縮後のファイル名 \r\nSQL_ZIP_FILE_NAME=data/db.zip\r\n// Zipパスワード  \r\nSQL_ZIP_PASS= パスワード\r\n\r\n// mysqldump のPath\r\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\r\n\r\n// MySQLログインのためのテンポラリー my.cnf\r\nMYCNF=${HOME}/.my.cnf\r\nMYCNFCREATE() {\r\ncat << _EOL_ | tee ${MYCNF}\r\n[client]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=\"${SQLPASSWORD}\"\r\n[mysqldump]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=\"${SQLPASSWORD}\"\r\n_EOL_\r\n}\r\n\r\nif [ ! -f ${MYCNF} ];\r\nthen\r\n MYCNFCREATE\r\nelse\r\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n MYCNFCREATE\r\nfi\r\n\r\n// バックアップ\r\n$MYSQLDUMP_PATH $SQLTARGETDB > $SQL_FILE_NAME \r\n// テンポラリー my.cnf 削除\r\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n\r\n// パスワード付きでZip圧縮\r\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \r\n// sqlファイルは削除\r\nrm -rf $SQL_FILE_NAME\r\n\r\n// Git pushまで\r\ncd ../../\r\ngit add -A\r\ngit commit -m \'Sync From Deploy\'\r\ngit push origin master\r\n```\r\n\r\n### MySQL同期スクリプトをローカルに設置\r\nSSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)\r\n```bash\r\n#!/bin/bash\r\n# host別設定ファイル読み込み\r\nsource mysql.sync\r\n    # sshにてlogin してmysqldumpを実行\r\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\r\n\r\n   git pull origin master\r\n    # パスワード付きzipファイル解凍\r\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\r\n \r\n    # local MySQLログイン用ファイル読み込み\r\n    LOGIN_FILE=./local_mysql_login.cnf\r\n    # local mysqlログイン及びdumpファイル実行\r\n    echo $AFTER_ARCIVE_FILENAME\r\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME < $AFTER_ARCIVE_FILENAME\r\n    # local設定を反映させるSQL実行\r\n    mysql --defaults-extra-file=$LOGIN_FILE < $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n    rm $AFTER_ARCIVE_FILENAME\r\n    rm $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n```\r\n読み込んでいる mysql.sync\r\n```bash\r\n\r\n# SSH ログイン情報\r\nREMOTE_HOST= ホスト名\r\nREMOTE_USER　ユーザー名\r\nREMOTE_SSH_PORT= ポート番号\r\n\r\n# Root ディレクトリ\r\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\r\n# Remote backup path\r\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\r\n# サーバー上に設定したスクリプトファイル名\r\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\r\n# バックアップコマンド実行 \r\nREMOTE_BACKUP_COMMAND=\"cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE\"\r\n\r\n# ローカル ディレウトリ\r\nLOCAL_PATH=\"/var/www/html/xxx/xxx\"\r\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\r\nARCIVE_PASS= Zipパスワード\r\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\r\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\r\n\r\n# local db name\r\nLOCAL_DB_NAME= DB名\r\n\r\n# 置換項目定数\r\n## Domain\r\nBEFORE_DOMAIN1=\"Before domain\"\r\nAFTER_DOMAIN1=\"After domain\"\r\n\r\n## Path\r\nBEFORE_PATH=\"Before Path\"\r\nAFTER_PATH=\"After Path\"\r\nTABLE_PREFIX=\"wp_\"\r\n\r\n## Update用のSQL生成\r\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\r\ntouch $CHANGE_LOCAL_SQL_FILENAME\r\ncat <<EOF> $CHANGE_LOCAL_SQL_FILENAME\r\nSET NAMES utf8;\r\nuse ${LOCAL_DB_NAME}\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere option_value like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content = REPLACE(post_content,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere post_content like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content_filtered = REPLACE(post_content_filtered,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere post_content_filtered like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\nguid = REPLACE(guid,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere guid like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value, \'${BEFORE_PATH}\',\'${AFTER_PATH}\')\r\nwhere option_value like \"%${BEFORE_PATH}%\";\r\n\r\nupdate ${TABLE_PREFIX}postmeta set\r\nmeta_value = REPLACE(meta_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere meta_value like \"%${BEFORE_DOMAIN1}%\";\r\nEOF\r\n```\r\n\r\n\r\n読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf \r\n```bash\r\n[client]\r\nuser = root\r\npassword = \'\'\r\nhost = localhost\r\n```\r\n\r\n\r\n振る舞いとしては        \r\n1. ローカルからSSHでサーバーへログイン\r\n2. サーバ側でMySQLバックアップ、\"Git push\"\r\n3. ローカルで\"Git pull\"\r\n4. Zip(sqlファイル、パスワード付き)を解凍\r\n5. ローカルMySQLへインポート\r\n6. 変更必要箇所(ドメイン、Path) をUpdate処理\r\n\r\nリモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。      \r\nまた手作業のためミスも起こる可能性も。     \r\nこのスクリプトでわずか数秒になりました。        \r\n\r\n数分の\"めんどくさい\"を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。     \r\n自分のアイデアを形にすることはいい勉強にはなりますわね。 \r\n\r\n\r\n\r\n\r\n\r\n',294,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/294-revision-v1/',0,'revision','',0),(302,1,'2019-09-23 16:55:30','2019-09-23 07:55:30','<p>ここでの<strong>Git</strong>の使い方はあくまで&quot;1人_Git&quot;、&quot;オレオレ\nGit&quot;なのでチームでのGitの使い方には参考にはなりません。     </p>\n<p>GitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの <strong>\nDBをローカルへ同期</strong> するスクリプトを組んでみます。        </p>\n<h2>よくあるWebhookによる自動デプロイ</h2>\n<h3>GitLabのWebhookをトリガーに&quot;Git pull&quot;し、Slackへ通知するスクリプト配置</h3>\n<p>サーバー上の任意の場所へ設置。</p>\n<pre><code class=\"language-php\">&lt;?php\n//Git deploy\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\n$slack_urls = array(\n    // Slack URL\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\n);\n\n$json_string = file_get_contents(&#039;php://input&#039;);\n$json = json_decode($json_string, true);\n$header = getallheaders();\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\n// echo &#039;exit&#039;;\n////    if(false) {\n// exit();\n//}\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\nexec($command, $out, $return_ver);\n\nif (sizeof($slack_urls) &gt; 0) {\n $result_mess = &#039;&#039;;\n if ($return_ver === 0) {\n    //Deploy Success\n    $emoji = &quot;:smile:&quot;;\n    $color = &#039;good&#039;;\n    $result_test = &quot;Deploy Sucess&quot;;\n } else {\n    //Deploy Failed\n    $emoji = &quot;:scream:&quot;;\n    $color = &#039;danger&#039;;\n    $result_test = &quot;Deploy Failed&quot;;\n    $result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\n    foreach ($out as $key =&gt; $value) {\n     $result_mess .= $value . &quot;\\n&quot;;\n    }\n }\n $payload = &#039;\n {\n &quot;username&quot;: &quot;&quot;,\n   &quot;attachments&quot;:[\n      {\n         &quot;fallback&quot;:&quot;Deploy&quot;,\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\n         &quot;fields&quot;:[\n            {\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\n            }\n         ]\n      }\n   ]\n} &#039;;\n\n foreach ($slack_urls as $slack_url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $slack_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n    $res = curl_exec($ch);\n//  var_dump($res);\n    curl_close($ch);\n }\n}\n   ```\n###  GitLabのインテグレーション設定           \nGitLab-&gt;設定-&gt;インテグレーション\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\n\n&quot;Git push&quot;する度に自動デプロイされる。\n\n## リモートのMYSQLをローカルへ同期   \n### リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置     \nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\n実行権限も忘れずに。      \nmysql-sync.sh (仮)\n```bash\n#!/usr/local/bin/bash\nSQLHOST= ホスト名\nSQLUSER= ユーザー名\nSQLPASSWORD= パスワード \nSQLTARGETDB= DB名\n\n// ファイル名\nSQL_FILE_NAME=db.sql  \n// 圧縮後のファイル名 \nSQL_ZIP_FILE_NAME=data/db.zip\n// Zipパスワード  \nSQL_ZIP_PASS= パスワード\n\n// mysqldump のPath\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\n\n// MySQLログインのためのテンポラリー my.cnf\nMYCNF=${HOME}/.my.cnf\nMYCNFCREATE() {\ncat << _EOL_ | tee ${MYCNF}\n[client]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=\"${SQLPASSWORD}\"\n[mysqldump]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=\"${SQLPASSWORD}\"\n_EOL_\n}\n\nif [ ! -f ${MYCNF} ];\nthen\n MYCNFCREATE\nelse\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n MYCNFCREATE\nfi\n\n// バックアップ\n$MYSQLDUMP_PATH $SQLTARGETDB > $SQL_FILE_NAME \n// テンポラリー my.cnf 削除\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n\n// パスワード付きでZip圧縮\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \n// sqlファイルは削除\nrm -rf $SQL_FILE_NAME\n\n// Git pushまで\ncd ../../\ngit add -A\ngit commit -m \'Sync From Deploy\'\ngit push origin master</code></pre>\n<h3>MySQL同期スクリプトをローカルに設置</h3>\n<p>SSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# host別設定ファイル読み込み\nsource mysql.sync\n    # sshにてlogin してmysqldumpを実行\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\n\n   git pull origin master\n    # パスワード付きzipファイル解凍\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\n\n    # local MySQLログイン用ファイル読み込み\n    LOGIN_FILE=./local_mysql_login.cnf\n    # local mysqlログイン及びdumpファイル実行\n    echo $AFTER_ARCIVE_FILENAME\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME < $AFTER_ARCIVE_FILENAME\n    # local設定を反映させるSQL実行\n    mysql --defaults-extra-file=$LOGIN_FILE < $CHANGE_LOCAL_SQL_FILENAME\n\n    rm $AFTER_ARCIVE_FILENAME\n    rm $CHANGE_LOCAL_SQL_FILENAME\n</code></pre>\n<p>読み込んでいる mysql.sync</p>\n<pre><code class=\"language-bash\">\n# SSH ログイン情報\nREMOTE_HOST= ホスト名\nREMOTE_USER　ユーザー名\nREMOTE_SSH_PORT= ポート番号\n\n# Root ディレクトリ\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\n# Remote backup path\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\n# サーバー上に設定したスクリプトファイル名\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\n# バックアップコマンド実行 \nREMOTE_BACKUP_COMMAND=\"cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE\"\n\n# ローカル ディレウトリ\nLOCAL_PATH=\"/var/www/html/xxx/xxx\"\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\nARCIVE_PASS= Zipパスワード\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\n\n# local db name\nLOCAL_DB_NAME= DB名\n\n# 置換項目定数\n## Domain\nBEFORE_DOMAIN1=\"Before domain\"\nAFTER_DOMAIN1=\"After domain\"\n\n## Path\nBEFORE_PATH=\"Before Path\"\nAFTER_PATH=\"After Path\"\nTABLE_PREFIX=\"wp_\"\n\n## Update用のSQL生成\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\ntouch $CHANGE_LOCAL_SQL_FILENAME\ncat <<EOF> $CHANGE_LOCAL_SQL_FILENAME\nSET NAMES utf8;\nuse ${LOCAL_DB_NAME}\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere option_value like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}posts set\npost_content = REPLACE(post_content,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere post_content like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}posts set\npost_content_filtered = REPLACE(post_content_filtered,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere post_content_filtered like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}posts set\nguid = REPLACE(guid,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere guid like \"%${BEFORE_DOMAIN1}%\";\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value, \'${BEFORE_PATH}\',\'${AFTER_PATH}\')\nwhere option_value like \"%${BEFORE_PATH}%\";\n\nupdate ${TABLE_PREFIX}postmeta set\nmeta_value = REPLACE(meta_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\nwhere meta_value like \"%${BEFORE_DOMAIN1}%\";\nEOF</code></pre>\n<p>読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf </p>\n<pre><code class=\"language-bash\">[client]\nuser = root\npassword = \'\'\nhost = localhost</code></pre>\n<p>振る舞いとしては        </p>\n<ol>\n<li>ローカルからSSHでサーバーへログイン</li>\n<li>サーバ側でMySQLバックアップ、&quot;Git push&quot;</li>\n<li>ローカルで&quot;Git pull&quot;</li>\n<li>Zip(sqlファイル、パスワード付き)を解凍</li>\n<li>ローカルMySQLへインポート</li>\n<li>変更必要箇所(ドメイン、Path) をUpdate処理</li>\n</ol>\n<p>リモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。<br />\nまた手作業のためミスも起こる可能性も。<br />\nこのスクリプトでわずか数秒になりました。        </p>\n<p>数分の&quot;めんどくさい&quot;を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。<br />\n自分のアイデアを形にすることはいい勉強にはなりますわね。 </p>','WordPressでGitを使ったWebhookデプロイとリモートDB同期','リモートのDBをローカルへ同期するめんどくさい作業をスクリプト化','inherit','closed','closed','','294-revision-v1','','','2019-09-23 16:55:30','2019-09-23 07:55:30','ここでの__Git__の使い方はあくまで\"1人_Git\"、\"オレオレ\r\nGit\"なのでチームでのGitの使い方には参考にはなりません。     \r\n\r\nGitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの __\r\nDBをローカルへ同期__ するスクリプトを組んでみます。        \r\n\r\n##  よくあるWebhookによる自動デプロイ\r\n### GitLabのWebhookをトリガーに\"Git pull\"し、Slackへ通知するスクリプト配置        \r\nサーバー上の任意の場所へ設置。\r\n```php\r\n&lt;?php\r\n//Git deploy\r\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\r\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\r\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\r\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\r\n$slack_urls = array(\r\n	// Slack URL\r\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\r\n);\r\n\r\n$json_string = file_get_contents(&#039;php://input&#039;);\r\n$json = json_decode($json_string, true);\r\n$header = getallheaders();\r\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\r\n// echo &#039;exit&#039;;\r\n////	if(false) {\r\n// exit();\r\n//}\r\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\r\nexec($command, $out, $return_ver);\r\n\r\nif (sizeof($slack_urls) &gt; 0) {\r\n $result_mess = &#039;&#039;;\r\n if ($return_ver === 0) {\r\n	//Deploy Success\r\n	$emoji = &quot;:smile:&quot;;\r\n	$color = &#039;good&#039;;\r\n	$result_test = &quot;Deploy Sucess&quot;;\r\n } else {\r\n	//Deploy Failed\r\n	$emoji = &quot;:scream:&quot;;\r\n	$color = &#039;danger&#039;;\r\n	$result_test = &quot;Deploy Failed&quot;;\r\n	$result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\r\n	foreach ($out as $key =&gt; $value) {\r\n	 $result_mess .= $value . &quot;\\n&quot;;\r\n	}\r\n }\r\n $payload = &#039;\r\n {\r\n &quot;username&quot;: &quot;&quot;,\r\n   &quot;attachments&quot;:[\r\n      {\r\n         &quot;fallback&quot;:&quot;Deploy&quot;,\r\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\r\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\r\n         &quot;fields&quot;:[\r\n            {\r\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\r\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\r\n            }\r\n         ]\r\n      }\r\n   ]\r\n} &#039;;\r\n\r\n foreach ($slack_urls as $slack_url) {\r\n	$ch = curl_init();\r\n	curl_setopt($ch, CURLOPT_URL, $slack_url);\r\n	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\r\n	curl_setopt($ch, CURLOPT_POST, true);\r\n	curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\r\n	$res = curl_exec($ch);\r\n//	var_dump($res);\r\n	curl_close($ch);\r\n }\r\n}\r\n   &#x60;&#x60;&#x60;\r\n###  GitLabのインテグレーション設定           \r\nGitLab-&gt;設定-&gt;インテグレーション\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\r\n\r\n&quot;Git push&quot;する度に自動デプロイされる。\r\n\r\n## リモートのMYSQLをローカルへ同期   \r\n### リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置     \r\nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\r\n実行権限も忘れずに。      \r\nmysql-sync.sh (仮)\r\n```bash\r\n#!/usr/local/bin/bash\r\nSQLHOST= ホスト名\r\nSQLUSER= ユーザー名\r\nSQLPASSWORD= パスワード \r\nSQLTARGETDB= DB名\r\n\r\n// ファイル名\r\nSQL_FILE_NAME=db.sql  \r\n// 圧縮後のファイル名 \r\nSQL_ZIP_FILE_NAME=data/db.zip\r\n// Zipパスワード  \r\nSQL_ZIP_PASS= パスワード\r\n\r\n// mysqldump のPath\r\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\r\n\r\n// MySQLログインのためのテンポラリー my.cnf\r\nMYCNF=${HOME}/.my.cnf\r\nMYCNFCREATE() {\r\ncat << _EOL_ | tee ${MYCNF}\r\n[client]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=\"${SQLPASSWORD}\"\r\n[mysqldump]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=\"${SQLPASSWORD}\"\r\n_EOL_\r\n}\r\n\r\nif [ ! -f ${MYCNF} ];\r\nthen\r\n MYCNFCREATE\r\nelse\r\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n MYCNFCREATE\r\nfi\r\n\r\n// バックアップ\r\n$MYSQLDUMP_PATH $SQLTARGETDB > $SQL_FILE_NAME \r\n// テンポラリー my.cnf 削除\r\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n\r\n// パスワード付きでZip圧縮\r\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \r\n// sqlファイルは削除\r\nrm -rf $SQL_FILE_NAME\r\n\r\n// Git pushまで\r\ncd ../../\r\ngit add -A\r\ngit commit -m \'Sync From Deploy\'\r\ngit push origin master\r\n```\r\n\r\n### MySQL同期スクリプトをローカルに設置\r\nSSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)\r\n```bash\r\n#!/bin/bash\r\n# host別設定ファイル読み込み\r\nsource mysql.sync\r\n    # sshにてlogin してmysqldumpを実行\r\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\r\n\r\n   git pull origin master\r\n    # パスワード付きzipファイル解凍\r\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\r\n \r\n    # local MySQLログイン用ファイル読み込み\r\n    LOGIN_FILE=./local_mysql_login.cnf\r\n    # local mysqlログイン及びdumpファイル実行\r\n    echo $AFTER_ARCIVE_FILENAME\r\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME < $AFTER_ARCIVE_FILENAME\r\n    # local設定を反映させるSQL実行\r\n    mysql --defaults-extra-file=$LOGIN_FILE < $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n    rm $AFTER_ARCIVE_FILENAME\r\n    rm $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n```\r\n読み込んでいる mysql.sync\r\n```bash\r\n\r\n# SSH ログイン情報\r\nREMOTE_HOST= ホスト名\r\nREMOTE_USER　ユーザー名\r\nREMOTE_SSH_PORT= ポート番号\r\n\r\n# Root ディレクトリ\r\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\r\n# Remote backup path\r\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\r\n# サーバー上に設定したスクリプトファイル名\r\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\r\n# バックアップコマンド実行 \r\nREMOTE_BACKUP_COMMAND=\"cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE\"\r\n\r\n# ローカル ディレウトリ\r\nLOCAL_PATH=\"/var/www/html/xxx/xxx\"\r\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\r\nARCIVE_PASS= Zipパスワード\r\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\r\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\r\n\r\n# local db name\r\nLOCAL_DB_NAME= DB名\r\n\r\n# 置換項目定数\r\n## Domain\r\nBEFORE_DOMAIN1=\"Before domain\"\r\nAFTER_DOMAIN1=\"After domain\"\r\n\r\n## Path\r\nBEFORE_PATH=\"Before Path\"\r\nAFTER_PATH=\"After Path\"\r\nTABLE_PREFIX=\"wp_\"\r\n\r\n## Update用のSQL生成\r\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\r\ntouch $CHANGE_LOCAL_SQL_FILENAME\r\ncat <<EOF> $CHANGE_LOCAL_SQL_FILENAME\r\nSET NAMES utf8;\r\nuse ${LOCAL_DB_NAME}\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere option_value like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content = REPLACE(post_content,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere post_content like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content_filtered = REPLACE(post_content_filtered,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere post_content_filtered like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\nguid = REPLACE(guid,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere guid like \"%${BEFORE_DOMAIN1}%\";\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value, \'${BEFORE_PATH}\',\'${AFTER_PATH}\')\r\nwhere option_value like \"%${BEFORE_PATH}%\";\r\n\r\nupdate ${TABLE_PREFIX}postmeta set\r\nmeta_value = REPLACE(meta_value,\'${BEFORE_DOMAIN1}\',\'${AFTER_DOMAIN1}\')\r\nwhere meta_value like \"%${BEFORE_DOMAIN1}%\";\r\nEOF\r\n```\r\n\r\n\r\n読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf \r\n```bash\r\n[client]\r\nuser = root\r\npassword = \'\'\r\nhost = localhost\r\n```\r\n\r\n\r\n振る舞いとしては        \r\n1. ローカルからSSHでサーバーへログイン\r\n2. サーバ側でMySQLバックアップ、\"Git push\"\r\n3. ローカルで\"Git pull\"\r\n4. Zip(sqlファイル、パスワード付き)を解凍\r\n5. ローカルMySQLへインポート\r\n6. 変更必要箇所(ドメイン、Path) をUpdate処理\r\n\r\nリモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。      \r\nまた手作業のためミスも起こる可能性も。     \r\nこのスクリプトでわずか数秒になりました。        \r\n\r\n数分の\"めんどくさい\"を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。     \r\n自分のアイデアを形にすることはいい勉強にはなりますわね。 \r\n\r\n\r\n\r\n\r\n\r\n',294,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/294-revision-v1/',0,'revision','',0),(303,1,'2019-09-23 16:57:18','2019-09-23 07:57:18','<p>ここでの<strong>Git</strong>の使い方はあくまで&quot;1人_Git&quot;、&quot;オレオレ\nGit&quot;なのでチームでのGitの使い方には参考にはなりません。     </p>\n<p>GitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの <strong>\nDBをローカルへ同期</strong> するスクリプトを組んでみます。        </p>\n<h2>よくあるWebhookによる自動デプロイ</h2>\n<h3>GitLabのWebhookをトリガーに&quot;Git pull&quot;し、Slackへ通知するスクリプト配置</h3>\n<p>サーバー上の任意の場所へ設置。</p>\n<pre><code class=\"language-php\">&lt;?php\n//Git deploy\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\n$slack_urls = array(\n    // Slack URL\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\n);\n\n$json_string = file_get_contents(&#039;php://input&#039;);\n$json = json_decode($json_string, true);\n$header = getallheaders();\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\n// echo &#039;exit&#039;;\n////    if(false) {\n// exit();\n//}\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\nexec($command, $out, $return_ver);\n\nif (sizeof($slack_urls) &gt; 0) {\n $result_mess = &#039;&#039;;\n if ($return_ver === 0) {\n    //Deploy Success\n    $emoji = &quot;:smile:&quot;;\n    $color = &#039;good&#039;;\n    $result_test = &quot;Deploy Sucess&quot;;\n } else {\n    //Deploy Failed\n    $emoji = &quot;:scream:&quot;;\n    $color = &#039;danger&#039;;\n    $result_test = &quot;Deploy Failed&quot;;\n    $result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\n    foreach ($out as $key =&gt; $value) {\n     $result_mess .= $value . &quot;\\n&quot;;\n    }\n }\n $payload = &#039;\n {\n &quot;username&quot;: &quot;&quot;,\n   &quot;attachments&quot;:[\n      {\n         &quot;fallback&quot;:&quot;Deploy&quot;,\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\n         &quot;fields&quot;:[\n            {\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\n            }\n         ]\n      }\n   ]\n} &#039;;\n\n foreach ($slack_urls as $slack_url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $slack_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n    $res = curl_exec($ch);\n//  var_dump($res);\n    curl_close($ch);\n }\n}</code></pre>\n<h3>GitLabのインテグレーション設定</h3>\n<p>GitLab-&gt;設定-&gt;インテグレーション\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png\" alt=\"\" /></p>\n<p>&quot;Git push&quot;する度に自動デプロイされる。</p>\n<h2>リモートのMYSQLをローカルへ同期</h2>\n<h3>リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置</h3>\n<p>Gitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\n実行権限も忘れずに。<br />\nmysql-sync.sh (仮)</p>\n<pre><code class=\"language-bash\">#!/usr/local/bin/bash\nSQLHOST= ホスト名\nSQLUSER= ユーザー名\nSQLPASSWORD= パスワード \nSQLTARGETDB= DB名\n\n// ファイル名\nSQL_FILE_NAME=db.sql  \n// 圧縮後のファイル名 \nSQL_ZIP_FILE_NAME=data/db.zip\n// Zipパスワード  \nSQL_ZIP_PASS= パスワード\n\n// mysqldump のPath\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\n\n// MySQLログインのためのテンポラリー my.cnf\nMYCNF=${HOME}/.my.cnf\nMYCNFCREATE() {\ncat &lt;&lt; _EOL_ | tee ${MYCNF}\n[client]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=&quot;${SQLPASSWORD}&quot;\n[mysqldump]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=&quot;${SQLPASSWORD}&quot;\n_EOL_\n}\n\nif [ ! -f ${MYCNF} ];\nthen\n MYCNFCREATE\nelse\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n MYCNFCREATE\nfi\n\n// バックアップ\n$MYSQLDUMP_PATH $SQLTARGETDB &gt; $SQL_FILE_NAME \n// テンポラリー my.cnf 削除\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n\n// パスワード付きでZip圧縮\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \n// sqlファイルは削除\nrm -rf $SQL_FILE_NAME\n\n// Git pushまで\ncd ../../\ngit add -A\ngit commit -m &#039;Sync From Deploy&#039;\ngit push origin master</code></pre>\n<h3>MySQL同期スクリプトをローカルに設置</h3>\n<p>SSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# host別設定ファイル読み込み\nsource mysql.sync\n    # sshにてlogin してmysqldumpを実行\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\n\n   git pull origin master\n    # パスワード付きzipファイル解凍\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\n\n    # local MySQLログイン用ファイル読み込み\n    LOGIN_FILE=./local_mysql_login.cnf\n    # local mysqlログイン及びdumpファイル実行\n    echo $AFTER_ARCIVE_FILENAME\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME &lt; $AFTER_ARCIVE_FILENAME\n    # local設定を反映させるSQL実行\n    mysql --defaults-extra-file=$LOGIN_FILE &lt; $CHANGE_LOCAL_SQL_FILENAME\n\n    rm $AFTER_ARCIVE_FILENAME\n    rm $CHANGE_LOCAL_SQL_FILENAME\n</code></pre>\n<p>読み込んでいる mysql.sync</p>\n<pre><code class=\"language-bash\">\n# SSH ログイン情報\nREMOTE_HOST= ホスト名\nREMOTE_USER　ユーザー名\nREMOTE_SSH_PORT= ポート番号\n\n# Root ディレクトリ\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\n# Remote backup path\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\n# サーバー上に設定したスクリプトファイル名\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\n# バックアップコマンド実行 \nREMOTE_BACKUP_COMMAND=&quot;cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE&quot;\n\n# ローカル ディレウトリ\nLOCAL_PATH=&quot;/var/www/html/xxx/xxx&quot;\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\nARCIVE_PASS= Zipパスワード\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\n\n# local db name\nLOCAL_DB_NAME= DB名\n\n# 置換項目定数\n## Domain\nBEFORE_DOMAIN1=&quot;Before domain&quot;\nAFTER_DOMAIN1=&quot;After domain&quot;\n\n## Path\nBEFORE_PATH=&quot;Before Path&quot;\nAFTER_PATH=&quot;After Path&quot;\nTABLE_PREFIX=&quot;wp_&quot;\n\n## Update用のSQL生成\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\ntouch $CHANGE_LOCAL_SQL_FILENAME\ncat &lt;&lt;EOF&gt; $CHANGE_LOCAL_SQL_FILENAME\nSET NAMES utf8;\nuse ${LOCAL_DB_NAME}\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere option_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\npost_content = REPLACE(post_content,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere post_content like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\npost_content_filtered = REPLACE(post_content_filtered,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere post_content_filtered like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\nguid = REPLACE(guid,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere guid like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value, &#039;${BEFORE_PATH}&#039;,&#039;${AFTER_PATH}&#039;)\nwhere option_value like &quot;%${BEFORE_PATH}%&quot;;\n\nupdate ${TABLE_PREFIX}postmeta set\nmeta_value = REPLACE(meta_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere meta_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\nEOF</code></pre>\n<p>読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf </p>\n<pre><code class=\"language-bash\">[client]\nuser = root\npassword = &#039;&#039;\nhost = localhost</code></pre>\n<p>振る舞いとしては        </p>\n<ol>\n<li>ローカルからSSHでサーバーへログイン</li>\n<li>サーバ側でMySQLバックアップ、&quot;Git push&quot;</li>\n<li>ローカルで&quot;Git pull&quot;</li>\n<li>Zip(sqlファイル、パスワード付き)を解凍</li>\n<li>ローカルMySQLへインポート</li>\n<li>変更必要箇所(ドメイン、Path) をUpdate処理</li>\n</ol>\n<p>リモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。<br />\nまた手作業のためミスも起こる可能性も。<br />\nこのスクリプトでわずか数秒になりました。        </p>\n<p>数分の&quot;めんどくさい&quot;を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。<br />\n自分のアイデアを形にすることはいい勉強にはなりますわね。 </p>','WordPressでGitを使ったWebhookデプロイとリモートDB同期','リモートのDBをローカルへ同期するめんどくさい作業をスクリプト化','inherit','closed','closed','','294-revision-v1','','','2019-09-23 16:57:18','2019-09-23 07:57:18','ここでの__Git__の使い方はあくまで\"1人_Git\"、\"オレオレ\r\nGit\"なのでチームでのGitの使い方には参考にはなりません。     \r\n\r\nGitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの __\r\nDBをローカルへ同期__ するスクリプトを組んでみます。        \r\n\r\n##  よくあるWebhookによる自動デプロイ\r\n### GitLabのWebhookをトリガーに\"Git pull\"し、Slackへ通知するスクリプト配置        \r\nサーバー上の任意の場所へ設置。\r\n```php\r\n&lt;?php\r\n//Git deploy\r\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\r\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\r\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\r\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\r\n$slack_urls = array(\r\n	// Slack URL\r\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\r\n);\r\n\r\n$json_string = file_get_contents(&#039;php://input&#039;);\r\n$json = json_decode($json_string, true);\r\n$header = getallheaders();\r\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\r\n// echo &#039;exit&#039;;\r\n////	if(false) {\r\n// exit();\r\n//}\r\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\r\nexec($command, $out, $return_ver);\r\n\r\nif (sizeof($slack_urls) &gt; 0) {\r\n $result_mess = &#039;&#039;;\r\n if ($return_ver === 0) {\r\n	//Deploy Success\r\n	$emoji = &quot;:smile:&quot;;\r\n	$color = &#039;good&#039;;\r\n	$result_test = &quot;Deploy Sucess&quot;;\r\n } else {\r\n	//Deploy Failed\r\n	$emoji = &quot;:scream:&quot;;\r\n	$color = &#039;danger&#039;;\r\n	$result_test = &quot;Deploy Failed&quot;;\r\n	$result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\r\n	foreach ($out as $key =&gt; $value) {\r\n	 $result_mess .= $value . &quot;\\n&quot;;\r\n	}\r\n }\r\n $payload = &#039;\r\n {\r\n &quot;username&quot;: &quot;&quot;,\r\n   &quot;attachments&quot;:[\r\n      {\r\n         &quot;fallback&quot;:&quot;Deploy&quot;,\r\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\r\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\r\n         &quot;fields&quot;:[\r\n            {\r\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\r\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\r\n            }\r\n         ]\r\n      }\r\n   ]\r\n} &#039;;\r\n\r\n foreach ($slack_urls as $slack_url) {\r\n	$ch = curl_init();\r\n	curl_setopt($ch, CURLOPT_URL, $slack_url);\r\n	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\r\n	curl_setopt($ch, CURLOPT_POST, true);\r\n	curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\r\n	$res = curl_exec($ch);\r\n//	var_dump($res);\r\n	curl_close($ch);\r\n }\r\n}\r\n```\r\n###  GitLabのインテグレーション設定           \r\nGitLab->設定->インテグレーション\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\r\n\r\n\"Git push\"する度に自動デプロイされる。\r\n\r\n## リモートのMYSQLをローカルへ同期   \r\n### リモートにMySQLをバックアップし\"git commit\",\"git push\"するスクリプトを設置     \r\nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\r\n実行権限も忘れずに。      \r\nmysql-sync.sh (仮)\r\n```bash\r\n#!/usr/local/bin/bash\r\nSQLHOST= ホスト名\r\nSQLUSER= ユーザー名\r\nSQLPASSWORD= パスワード \r\nSQLTARGETDB= DB名\r\n\r\n// ファイル名\r\nSQL_FILE_NAME=db.sql  \r\n// 圧縮後のファイル名 \r\nSQL_ZIP_FILE_NAME=data/db.zip\r\n// Zipパスワード  \r\nSQL_ZIP_PASS= パスワード\r\n\r\n// mysqldump のPath\r\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\r\n\r\n// MySQLログインのためのテンポラリー my.cnf\r\nMYCNF=${HOME}/.my.cnf\r\nMYCNFCREATE() {\r\ncat &lt;&lt; _EOL_ | tee ${MYCNF}\r\n[client]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=&quot;${SQLPASSWORD}&quot;\r\n[mysqldump]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=&quot;${SQLPASSWORD}&quot;\r\n_EOL_\r\n}\r\n\r\nif [ ! -f ${MYCNF} ];\r\nthen\r\n MYCNFCREATE\r\nelse\r\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n MYCNFCREATE\r\nfi\r\n\r\n// バックアップ\r\n$MYSQLDUMP_PATH $SQLTARGETDB &gt; $SQL_FILE_NAME \r\n// テンポラリー my.cnf 削除\r\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n\r\n// パスワード付きでZip圧縮\r\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \r\n// sqlファイルは削除\r\nrm -rf $SQL_FILE_NAME\r\n\r\n// Git pushまで\r\ncd ../../\r\ngit add -A\r\ngit commit -m &#039;Sync From Deploy&#039;\r\ngit push origin master\r\n```\r\n\r\n### MySQL同期スクリプトをローカルに設置\r\nSSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)\r\n```bash\r\n#!/bin/bash\r\n# host別設定ファイル読み込み\r\nsource mysql.sync\r\n    # sshにてlogin してmysqldumpを実行\r\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\r\n\r\n   git pull origin master\r\n    # パスワード付きzipファイル解凍\r\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\r\n \r\n    # local MySQLログイン用ファイル読み込み\r\n    LOGIN_FILE=./local_mysql_login.cnf\r\n    # local mysqlログイン及びdumpファイル実行\r\n    echo $AFTER_ARCIVE_FILENAME\r\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME &lt; $AFTER_ARCIVE_FILENAME\r\n    # local設定を反映させるSQL実行\r\n    mysql --defaults-extra-file=$LOGIN_FILE &lt; $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n    rm $AFTER_ARCIVE_FILENAME\r\n    rm $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n```\r\n読み込んでいる mysql.sync\r\n```bash\r\n\r\n# SSH ログイン情報\r\nREMOTE_HOST= ホスト名\r\nREMOTE_USER　ユーザー名\r\nREMOTE_SSH_PORT= ポート番号\r\n\r\n# Root ディレクトリ\r\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\r\n# Remote backup path\r\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\r\n# サーバー上に設定したスクリプトファイル名\r\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\r\n# バックアップコマンド実行 \r\nREMOTE_BACKUP_COMMAND=&quot;cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE&quot;\r\n\r\n# ローカル ディレウトリ\r\nLOCAL_PATH=&quot;/var/www/html/xxx/xxx&quot;\r\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\r\nARCIVE_PASS= Zipパスワード\r\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\r\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\r\n\r\n# local db name\r\nLOCAL_DB_NAME= DB名\r\n\r\n# 置換項目定数\r\n## Domain\r\nBEFORE_DOMAIN1=&quot;Before domain&quot;\r\nAFTER_DOMAIN1=&quot;After domain&quot;\r\n\r\n## Path\r\nBEFORE_PATH=&quot;Before Path&quot;\r\nAFTER_PATH=&quot;After Path&quot;\r\nTABLE_PREFIX=&quot;wp_&quot;\r\n\r\n## Update用のSQL生成\r\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\r\ntouch $CHANGE_LOCAL_SQL_FILENAME\r\ncat &lt;&lt;EOF&gt; $CHANGE_LOCAL_SQL_FILENAME\r\nSET NAMES utf8;\r\nuse ${LOCAL_DB_NAME}\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere option_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content = REPLACE(post_content,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere post_content like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content_filtered = REPLACE(post_content_filtered,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere post_content_filtered like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\nguid = REPLACE(guid,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere guid like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value, &#039;${BEFORE_PATH}&#039;,&#039;${AFTER_PATH}&#039;)\r\nwhere option_value like &quot;%${BEFORE_PATH}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}postmeta set\r\nmeta_value = REPLACE(meta_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere meta_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\nEOF\r\n```\r\n\r\n\r\n読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf \r\n```bash\r\n[client]\r\nuser = root\r\npassword = &#039;&#039;\r\nhost = localhost\r\n```\r\n\r\n\r\n振る舞いとしては        \r\n1. ローカルからSSHでサーバーへログイン\r\n2. サーバ側でMySQLバックアップ、\"Git push\"\r\n3. ローカルで\"Git pull\"\r\n4. Zip(sqlファイル、パスワード付き)を解凍\r\n5. ローカルMySQLへインポート\r\n6. 変更必要箇所(ドメイン、Path) をUpdate処理\r\n\r\nリモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。      \r\nまた手作業のためミスも起こる可能性も。     \r\nこのスクリプトでわずか数秒になりました。        \r\n\r\n数分の\"めんどくさい\"を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。     \r\n自分のアイデアを形にすることはいい勉強にはなりますわね。 \r\n\r\n\r\n\r\n\r\n\r\n',294,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/294-revision-v1/',0,'revision','',0),(304,1,'2019-09-23 16:57:38','2019-09-23 07:57:38','<p>ここでの<strong>Git</strong>の使い方はあくまで&quot;1人_Git&quot;、&quot;オレオレ\nGit&quot;なのでチームでのGitの使い方には参考にはなりません。     </p>\n<p>GitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの <strong>\nDBをローカルへ同期</strong> するスクリプトを組んでみます。        </p>\n<h2>よくあるWebhookによる自動デプロイ</h2>\n<h3>GitLabのWebhookをトリガーに&quot;Git pull&quot;し、Slackへ通知するスクリプト配置</h3>\n<p>サーバー上の任意の場所へ設置。</p>\n<pre><code class=\"language-php\">&lt;?php\n//Git deploy\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\n$slack_urls = array(\n    // Slack URL\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\n);\n\n$json_string = file_get_contents(&#039;php://input&#039;);\n$json = json_decode($json_string, true);\n$header = getallheaders();\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\n// echo &#039;exit&#039;;\n////    if(false) {\n// exit();\n//}\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\nexec($command, $out, $return_ver);\n\nif (sizeof($slack_urls) &gt; 0) {\n $result_mess = &#039;&#039;;\n if ($return_ver === 0) {\n    //Deploy Success\n    $emoji = &quot;:smile:&quot;;\n    $color = &#039;good&#039;;\n    $result_test = &quot;Deploy Sucess&quot;;\n } else {\n    //Deploy Failed\n    $emoji = &quot;:scream:&quot;;\n    $color = &#039;danger&#039;;\n    $result_test = &quot;Deploy Failed&quot;;\n    $result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\n    foreach ($out as $key =&gt; $value) {\n     $result_mess .= $value . &quot;\\n&quot;;\n    }\n }\n $payload = &#039;\n {\n &quot;username&quot;: &quot;&quot;,\n   &quot;attachments&quot;:[\n      {\n         &quot;fallback&quot;:&quot;Deploy&quot;,\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\n         &quot;fields&quot;:[\n            {\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\n            }\n         ]\n      }\n   ]\n} &#039;;\n\n foreach ($slack_urls as $slack_url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $slack_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n    $res = curl_exec($ch);\n//  var_dump($res);\n    curl_close($ch);\n }\n}</code></pre>\n<h3>GitLabのインテグレーション設定</h3>\n<p>GitLab-&gt;設定-&gt;インテグレーション</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png\" alt=\"\" /></p>\n<p>&quot;Git push&quot;する度に自動デプロイされる。</p>\n<h2>リモートのMYSQLをローカルへ同期</h2>\n<h3>リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置</h3>\n<p>Gitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\n実行権限も忘れずに。<br />\nmysql-sync.sh (仮)</p>\n<pre><code class=\"language-bash\">#!/usr/local/bin/bash\nSQLHOST= ホスト名\nSQLUSER= ユーザー名\nSQLPASSWORD= パスワード \nSQLTARGETDB= DB名\n\n// ファイル名\nSQL_FILE_NAME=db.sql  \n// 圧縮後のファイル名 \nSQL_ZIP_FILE_NAME=data/db.zip\n// Zipパスワード  \nSQL_ZIP_PASS= パスワード\n\n// mysqldump のPath\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\n\n// MySQLログインのためのテンポラリー my.cnf\nMYCNF=${HOME}/.my.cnf\nMYCNFCREATE() {\ncat &lt;&lt; _EOL_ | tee ${MYCNF}\n[client]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=&quot;${SQLPASSWORD}&quot;\n[mysqldump]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=&quot;${SQLPASSWORD}&quot;\n_EOL_\n}\n\nif [ ! -f ${MYCNF} ];\nthen\n MYCNFCREATE\nelse\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n MYCNFCREATE\nfi\n\n// バックアップ\n$MYSQLDUMP_PATH $SQLTARGETDB &gt; $SQL_FILE_NAME \n// テンポラリー my.cnf 削除\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n\n// パスワード付きでZip圧縮\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \n// sqlファイルは削除\nrm -rf $SQL_FILE_NAME\n\n// Git pushまで\ncd ../../\ngit add -A\ngit commit -m &#039;Sync From Deploy&#039;\ngit push origin master</code></pre>\n<h3>MySQL同期スクリプトをローカルに設置</h3>\n<p>SSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# host別設定ファイル読み込み\nsource mysql.sync\n    # sshにてlogin してmysqldumpを実行\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\n\n   git pull origin master\n    # パスワード付きzipファイル解凍\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\n\n    # local MySQLログイン用ファイル読み込み\n    LOGIN_FILE=./local_mysql_login.cnf\n    # local mysqlログイン及びdumpファイル実行\n    echo $AFTER_ARCIVE_FILENAME\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME &lt; $AFTER_ARCIVE_FILENAME\n    # local設定を反映させるSQL実行\n    mysql --defaults-extra-file=$LOGIN_FILE &lt; $CHANGE_LOCAL_SQL_FILENAME\n\n    rm $AFTER_ARCIVE_FILENAME\n    rm $CHANGE_LOCAL_SQL_FILENAME\n</code></pre>\n<p>読み込んでいる mysql.sync</p>\n<pre><code class=\"language-bash\">\n# SSH ログイン情報\nREMOTE_HOST= ホスト名\nREMOTE_USER　ユーザー名\nREMOTE_SSH_PORT= ポート番号\n\n# Root ディレクトリ\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\n# Remote backup path\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\n# サーバー上に設定したスクリプトファイル名\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\n# バックアップコマンド実行 \nREMOTE_BACKUP_COMMAND=&quot;cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE&quot;\n\n# ローカル ディレウトリ\nLOCAL_PATH=&quot;/var/www/html/xxx/xxx&quot;\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\nARCIVE_PASS= Zipパスワード\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\n\n# local db name\nLOCAL_DB_NAME= DB名\n\n# 置換項目定数\n## Domain\nBEFORE_DOMAIN1=&quot;Before domain&quot;\nAFTER_DOMAIN1=&quot;After domain&quot;\n\n## Path\nBEFORE_PATH=&quot;Before Path&quot;\nAFTER_PATH=&quot;After Path&quot;\nTABLE_PREFIX=&quot;wp_&quot;\n\n## Update用のSQL生成\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\ntouch $CHANGE_LOCAL_SQL_FILENAME\ncat &lt;&lt;EOF&gt; $CHANGE_LOCAL_SQL_FILENAME\nSET NAMES utf8;\nuse ${LOCAL_DB_NAME}\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere option_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\npost_content = REPLACE(post_content,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere post_content like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\npost_content_filtered = REPLACE(post_content_filtered,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere post_content_filtered like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\nguid = REPLACE(guid,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere guid like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value, &#039;${BEFORE_PATH}&#039;,&#039;${AFTER_PATH}&#039;)\nwhere option_value like &quot;%${BEFORE_PATH}%&quot;;\n\nupdate ${TABLE_PREFIX}postmeta set\nmeta_value = REPLACE(meta_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere meta_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\nEOF</code></pre>\n<p>読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf </p>\n<pre><code class=\"language-bash\">[client]\nuser = root\npassword = &#039;&#039;\nhost = localhost</code></pre>\n<p>振る舞いとしては        </p>\n<ol>\n<li>ローカルからSSHでサーバーへログイン</li>\n<li>サーバ側でMySQLバックアップ、&quot;Git push&quot;</li>\n<li>ローカルで&quot;Git pull&quot;</li>\n<li>Zip(sqlファイル、パスワード付き)を解凍</li>\n<li>ローカルMySQLへインポート</li>\n<li>変更必要箇所(ドメイン、Path) をUpdate処理</li>\n</ol>\n<p>リモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。<br />\nまた手作業のためミスも起こる可能性も。<br />\nこのスクリプトでわずか数秒になりました。        </p>\n<p>数分の&quot;めんどくさい&quot;を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。<br />\n自分のアイデアを形にすることはいい勉強にはなりますわね。 </p>','WordPressでGitを使ったWebhookデプロイとリモートDB同期','リモートのDBをローカルへ同期するめんどくさい作業をスクリプト化','inherit','closed','closed','','294-revision-v1','','','2019-09-23 16:57:38','2019-09-23 07:57:38','ここでの__Git__の使い方はあくまで\"1人_Git\"、\"オレオレ\r\nGit\"なのでチームでのGitの使い方には参考にはなりません。     \r\n\r\nGitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの __\r\nDBをローカルへ同期__ するスクリプトを組んでみます。        \r\n\r\n##  よくあるWebhookによる自動デプロイ\r\n### GitLabのWebhookをトリガーに\"Git pull\"し、Slackへ通知するスクリプト配置        \r\nサーバー上の任意の場所へ設置。\r\n```php\r\n&lt;?php\r\n//Git deploy\r\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\r\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\r\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\r\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\r\n$slack_urls = array(\r\n	// Slack URL\r\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\r\n);\r\n\r\n$json_string = file_get_contents(&#039;php://input&#039;);\r\n$json = json_decode($json_string, true);\r\n$header = getallheaders();\r\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\r\n// echo &#039;exit&#039;;\r\n////	if(false) {\r\n// exit();\r\n//}\r\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\r\nexec($command, $out, $return_ver);\r\n\r\nif (sizeof($slack_urls) &gt; 0) {\r\n $result_mess = &#039;&#039;;\r\n if ($return_ver === 0) {\r\n	//Deploy Success\r\n	$emoji = &quot;:smile:&quot;;\r\n	$color = &#039;good&#039;;\r\n	$result_test = &quot;Deploy Sucess&quot;;\r\n } else {\r\n	//Deploy Failed\r\n	$emoji = &quot;:scream:&quot;;\r\n	$color = &#039;danger&#039;;\r\n	$result_test = &quot;Deploy Failed&quot;;\r\n	$result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\r\n	foreach ($out as $key =&gt; $value) {\r\n	 $result_mess .= $value . &quot;\\n&quot;;\r\n	}\r\n }\r\n $payload = &#039;\r\n {\r\n &quot;username&quot;: &quot;&quot;,\r\n   &quot;attachments&quot;:[\r\n      {\r\n         &quot;fallback&quot;:&quot;Deploy&quot;,\r\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\r\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\r\n         &quot;fields&quot;:[\r\n            {\r\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\r\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\r\n            }\r\n         ]\r\n      }\r\n   ]\r\n} &#039;;\r\n\r\n foreach ($slack_urls as $slack_url) {\r\n	$ch = curl_init();\r\n	curl_setopt($ch, CURLOPT_URL, $slack_url);\r\n	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\r\n	curl_setopt($ch, CURLOPT_POST, true);\r\n	curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\r\n	$res = curl_exec($ch);\r\n//	var_dump($res);\r\n	curl_close($ch);\r\n }\r\n}\r\n```\r\n###  GitLabのインテグレーション設定           \r\nGitLab->設定->インテグレーション\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\r\n\r\n\"Git push\"する度に自動デプロイされる。\r\n\r\n## リモートのMYSQLをローカルへ同期   \r\n### リモートにMySQLをバックアップし\"git commit\",\"git push\"するスクリプトを設置     \r\nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\r\n実行権限も忘れずに。      \r\nmysql-sync.sh (仮)\r\n```bash\r\n#!/usr/local/bin/bash\r\nSQLHOST= ホスト名\r\nSQLUSER= ユーザー名\r\nSQLPASSWORD= パスワード \r\nSQLTARGETDB= DB名\r\n\r\n// ファイル名\r\nSQL_FILE_NAME=db.sql  \r\n// 圧縮後のファイル名 \r\nSQL_ZIP_FILE_NAME=data/db.zip\r\n// Zipパスワード  \r\nSQL_ZIP_PASS= パスワード\r\n\r\n// mysqldump のPath\r\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\r\n\r\n// MySQLログインのためのテンポラリー my.cnf\r\nMYCNF=${HOME}/.my.cnf\r\nMYCNFCREATE() {\r\ncat &lt;&lt; _EOL_ | tee ${MYCNF}\r\n[client]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=&quot;${SQLPASSWORD}&quot;\r\n[mysqldump]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=&quot;${SQLPASSWORD}&quot;\r\n_EOL_\r\n}\r\n\r\nif [ ! -f ${MYCNF} ];\r\nthen\r\n MYCNFCREATE\r\nelse\r\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n MYCNFCREATE\r\nfi\r\n\r\n// バックアップ\r\n$MYSQLDUMP_PATH $SQLTARGETDB &gt; $SQL_FILE_NAME \r\n// テンポラリー my.cnf 削除\r\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n\r\n// パスワード付きでZip圧縮\r\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \r\n// sqlファイルは削除\r\nrm -rf $SQL_FILE_NAME\r\n\r\n// Git pushまで\r\ncd ../../\r\ngit add -A\r\ngit commit -m &#039;Sync From Deploy&#039;\r\ngit push origin master\r\n```\r\n\r\n### MySQL同期スクリプトをローカルに設置\r\nSSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)\r\n```bash\r\n#!/bin/bash\r\n# host別設定ファイル読み込み\r\nsource mysql.sync\r\n    # sshにてlogin してmysqldumpを実行\r\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\r\n\r\n   git pull origin master\r\n    # パスワード付きzipファイル解凍\r\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\r\n \r\n    # local MySQLログイン用ファイル読み込み\r\n    LOGIN_FILE=./local_mysql_login.cnf\r\n    # local mysqlログイン及びdumpファイル実行\r\n    echo $AFTER_ARCIVE_FILENAME\r\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME &lt; $AFTER_ARCIVE_FILENAME\r\n    # local設定を反映させるSQL実行\r\n    mysql --defaults-extra-file=$LOGIN_FILE &lt; $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n    rm $AFTER_ARCIVE_FILENAME\r\n    rm $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n```\r\n読み込んでいる mysql.sync\r\n```bash\r\n\r\n# SSH ログイン情報\r\nREMOTE_HOST= ホスト名\r\nREMOTE_USER　ユーザー名\r\nREMOTE_SSH_PORT= ポート番号\r\n\r\n# Root ディレクトリ\r\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\r\n# Remote backup path\r\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\r\n# サーバー上に設定したスクリプトファイル名\r\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\r\n# バックアップコマンド実行 \r\nREMOTE_BACKUP_COMMAND=&quot;cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE&quot;\r\n\r\n# ローカル ディレウトリ\r\nLOCAL_PATH=&quot;/var/www/html/xxx/xxx&quot;\r\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\r\nARCIVE_PASS= Zipパスワード\r\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\r\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\r\n\r\n# local db name\r\nLOCAL_DB_NAME= DB名\r\n\r\n# 置換項目定数\r\n## Domain\r\nBEFORE_DOMAIN1=&quot;Before domain&quot;\r\nAFTER_DOMAIN1=&quot;After domain&quot;\r\n\r\n## Path\r\nBEFORE_PATH=&quot;Before Path&quot;\r\nAFTER_PATH=&quot;After Path&quot;\r\nTABLE_PREFIX=&quot;wp_&quot;\r\n\r\n## Update用のSQL生成\r\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\r\ntouch $CHANGE_LOCAL_SQL_FILENAME\r\ncat &lt;&lt;EOF&gt; $CHANGE_LOCAL_SQL_FILENAME\r\nSET NAMES utf8;\r\nuse ${LOCAL_DB_NAME}\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere option_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content = REPLACE(post_content,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere post_content like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content_filtered = REPLACE(post_content_filtered,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere post_content_filtered like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\nguid = REPLACE(guid,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere guid like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value, &#039;${BEFORE_PATH}&#039;,&#039;${AFTER_PATH}&#039;)\r\nwhere option_value like &quot;%${BEFORE_PATH}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}postmeta set\r\nmeta_value = REPLACE(meta_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere meta_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\nEOF\r\n```\r\n\r\n\r\n読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf \r\n```bash\r\n[client]\r\nuser = root\r\npassword = &#039;&#039;\r\nhost = localhost\r\n```\r\n\r\n\r\n振る舞いとしては        \r\n1. ローカルからSSHでサーバーへログイン\r\n2. サーバ側でMySQLバックアップ、\"Git push\"\r\n3. ローカルで\"Git pull\"\r\n4. Zip(sqlファイル、パスワード付き)を解凍\r\n5. ローカルMySQLへインポート\r\n6. 変更必要箇所(ドメイン、Path) をUpdate処理\r\n\r\nリモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。      \r\nまた手作業のためミスも起こる可能性も。     \r\nこのスクリプトでわずか数秒になりました。        \r\n\r\n数分の\"めんどくさい\"を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。     \r\n自分のアイデアを形にすることはいい勉強にはなりますわね。 \r\n\r\n\r\n\r\n\r\n\r\n',294,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/294-revision-v1/',0,'revision','',0),(305,1,'2019-09-23 17:00:10','2019-09-23 08:00:10','<p>ここでの<strong>Git</strong>の使い方はあくまで&quot;1人_Git&quot;、&quot;オレオレ\nGit&quot;なのでチームでのGitの使い方には参考にはなりません。     </p>\n<p>GitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの <strong>\nDBをローカルへ同期</strong> するスクリプトを組んでみます。        </p>\n<h2>よくあるWebhookによる自動デプロイ</h2>\n<h3>GitLabのWebhookをトリガーに&quot;Git pull&quot;し、Slackへ通知するスクリプト配置</h3>\n<p>サーバー上の任意の場所へ設置。</p>\n<pre><code class=\"language-php\">&lt;?php\n//Git deploy\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\n$slack_urls = array(\n    // Slack URL\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\n);\n\n$json_string = file_get_contents(&#039;php://input&#039;);\n$json = json_decode($json_string, true);\n$header = getallheaders();\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\n// echo &#039;exit&#039;;\n////    if(false) {\n// exit();\n//}\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\nexec($command, $out, $return_ver);\n\nif (sizeof($slack_urls) &gt; 0) {\n $result_mess = &#039;&#039;;\n if ($return_ver === 0) {\n    //Deploy Success\n    $emoji = &quot;:smile:&quot;;\n    $color = &#039;good&#039;;\n    $result_test = &quot;Deploy Sucess&quot;;\n } else {\n    //Deploy Failed\n    $emoji = &quot;:scream:&quot;;\n    $color = &#039;danger&#039;;\n    $result_test = &quot;Deploy Failed&quot;;\n    $result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\n    foreach ($out as $key =&gt; $value) {\n     $result_mess .= $value . &quot;\\n&quot;;\n    }\n }\n $payload = &#039;\n {\n &quot;username&quot;: &quot;&quot;,\n   &quot;attachments&quot;:[\n      {\n         &quot;fallback&quot;:&quot;Deploy&quot;,\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\n         &quot;fields&quot;:[\n            {\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\n            }\n         ]\n      }\n   ]\n} &#039;;\n\n foreach ($slack_urls as $slack_url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $slack_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n    $res = curl_exec($ch);\n//  var_dump($res);\n    curl_close($ch);\n }\n}</code></pre>\n<h3>GitLabのインテグレーション設定</h3>\n<p>GitLab-&gt;設定-&gt;インテグレーション</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png\" alt=\"\" /></p>\n<p>&quot;Git push&quot;する度に自動デプロイされる。</p>\n<h2>リモートのMYSQLをローカルへ同期</h2>\n<h3>リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置</h3>\n<p>Gitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\n実行権限も忘れずに。<br />\nmysql-sync.sh (仮)</p>\n<pre><code class=\"language-bash\">#!/usr/local/bin/bash\nSQLHOST= ホスト名\nSQLUSER= ユーザー名\nSQLPASSWORD= パスワード \nSQLTARGETDB= DB名\n\n// ファイル名\nSQL_FILE_NAME=db.sql  \n// 圧縮後のファイル名 \nSQL_ZIP_FILE_NAME=data/db.zip\n// Zipパスワード  \nSQL_ZIP_PASS= パスワード\n\n// mysqldump のPath\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\n\n// MySQLログインのためのテンポラリー my.cnf\nMYCNF=${HOME}/.my.cnf\nMYCNFCREATE() {\ncat &lt;&lt; _EOL_ | tee ${MYCNF}\n[client]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=&quot;${SQLPASSWORD}&quot;\n[mysqldump]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=&quot;${SQLPASSWORD}&quot;\n_EOL_\n}\n\nif [ ! -f ${MYCNF} ];\nthen\n MYCNFCREATE\nelse\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n MYCNFCREATE\nfi\n\n// バックアップ\n$MYSQLDUMP_PATH $SQLTARGETDB &gt; $SQL_FILE_NAME \n// テンポラリー my.cnf 削除\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n\n// パスワード付きでZip圧縮\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \n// sqlファイルは削除\nrm -rf $SQL_FILE_NAME\n\n// Git pushまで\ncd ../../\ngit add -A\ngit commit -m &#039;Sync From Deploy&#039;\ngit push origin master</code></pre>\n<h3>MySQL同期スクリプトをローカルに設置</h3>\n<p>SSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# host別設定ファイル読み込み\nsource mysql.sync\n    # sshにてlogin してmysqldumpを実行\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\n\n   git pull origin master\n    # パスワード付きzipファイル解凍\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\n\n    # local MySQLログイン用ファイル読み込み\n    LOGIN_FILE=./local_mysql_login.cnf\n    # local mysqlログイン及びdumpファイル実行\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME &lt; $AFTER_ARCIVE_FILENAME\n    # local設定を反映させるSQL実行\n    mysql --defaults-extra-file=$LOGIN_FILE &lt; $CHANGE_LOCAL_SQL_FILENAME\n\n    rm $AFTER_ARCIVE_FILENAME\n    rm $CHANGE_LOCAL_SQL_FILENAME\n</code></pre>\n<p>読み込んでいる mysql.sync</p>\n<pre><code class=\"language-bash\">\n# SSH ログイン情報\nREMOTE_HOST= ホスト名\nREMOTE_USER　ユーザー名\nREMOTE_SSH_PORT= ポート番号\n\n# Root ディレクトリ\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\n# Remote backup path\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\n# サーバー上に設定したスクリプトファイル名\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\n# バックアップコマンド実行 \nREMOTE_BACKUP_COMMAND=&quot;cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE&quot;\n\n# ローカル ディレウトリ\nLOCAL_PATH=&quot;/var/www/html/xxx/xxx&quot;\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\nARCIVE_PASS= Zipパスワード\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\n\n# local db name\nLOCAL_DB_NAME= DB名\n\n# 置換項目定数\n## Domain\nBEFORE_DOMAIN1=&quot;Before domain&quot;\nAFTER_DOMAIN1=&quot;After domain&quot;\n\n## Path\nBEFORE_PATH=&quot;Before Path&quot;\nAFTER_PATH=&quot;After Path&quot;\nTABLE_PREFIX=&quot;wp_&quot;\n\n## Update用のSQL生成\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\ntouch $CHANGE_LOCAL_SQL_FILENAME\ncat &lt;&lt;EOF&gt; $CHANGE_LOCAL_SQL_FILENAME\nSET NAMES utf8;\nuse ${LOCAL_DB_NAME}\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere option_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\npost_content = REPLACE(post_content,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere post_content like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\npost_content_filtered = REPLACE(post_content_filtered,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere post_content_filtered like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\nguid = REPLACE(guid,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere guid like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value, &#039;${BEFORE_PATH}&#039;,&#039;${AFTER_PATH}&#039;)\nwhere option_value like &quot;%${BEFORE_PATH}%&quot;;\n\nupdate ${TABLE_PREFIX}postmeta set\nmeta_value = REPLACE(meta_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere meta_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\nEOF</code></pre>\n<p>読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf </p>\n<pre><code class=\"language-bash\">[client]\nuser = root\npassword = &#039;&#039;\nhost = localhost</code></pre>\n<p>振る舞いとしては        </p>\n<ol>\n<li>ローカルからSSHでサーバーへログイン</li>\n<li>サーバ側でMySQLバックアップ、&quot;Git push&quot;</li>\n<li>ローカルで&quot;Git pull&quot;</li>\n<li>Zip(sqlファイル、パスワード付き)を解凍</li>\n<li>ローカルMySQLへインポート</li>\n<li>変更必要箇所(ドメイン、Path) をUpdate処理</li>\n</ol>\n<p>リモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。<br />\nまた手作業のためミスも起こる可能性も。<br />\nこのスクリプトでわずか数秒になりました。        </p>\n<p>数分の&quot;めんどくさい&quot;を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。<br />\n自分のアイデアを形にすることはいい勉強にはなりますわね。 </p>','WordPressでGitを使ったWebhookデプロイとリモートDB同期','リモートのDBをローカルへ同期するめんどくさい作業をスクリプト化','inherit','closed','closed','','294-revision-v1','','','2019-09-23 17:00:10','2019-09-23 08:00:10','ここでの__Git__の使い方はあくまで\"1人_Git\"、\"オレオレ\r\nGit\"なのでチームでのGitの使い方には参考にはなりません。     \r\n\r\nGitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの __\r\nDBをローカルへ同期__ するスクリプトを組んでみます。        \r\n\r\n##  よくあるWebhookによる自動デプロイ\r\n### GitLabのWebhookをトリガーに\"Git pull\"し、Slackへ通知するスクリプト配置        \r\nサーバー上の任意の場所へ設置。\r\n```php\r\n&lt;?php\r\n//Git deploy\r\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\r\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\r\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\r\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\r\n$slack_urls = array(\r\n	// Slack URL\r\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\r\n);\r\n\r\n$json_string = file_get_contents(&#039;php://input&#039;);\r\n$json = json_decode($json_string, true);\r\n$header = getallheaders();\r\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\r\n// echo &#039;exit&#039;;\r\n////	if(false) {\r\n// exit();\r\n//}\r\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\r\nexec($command, $out, $return_ver);\r\n\r\nif (sizeof($slack_urls) &gt; 0) {\r\n $result_mess = &#039;&#039;;\r\n if ($return_ver === 0) {\r\n	//Deploy Success\r\n	$emoji = &quot;:smile:&quot;;\r\n	$color = &#039;good&#039;;\r\n	$result_test = &quot;Deploy Sucess&quot;;\r\n } else {\r\n	//Deploy Failed\r\n	$emoji = &quot;:scream:&quot;;\r\n	$color = &#039;danger&#039;;\r\n	$result_test = &quot;Deploy Failed&quot;;\r\n	$result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\r\n	foreach ($out as $key =&gt; $value) {\r\n	 $result_mess .= $value . &quot;\\n&quot;;\r\n	}\r\n }\r\n $payload = &#039;\r\n {\r\n &quot;username&quot;: &quot;&quot;,\r\n   &quot;attachments&quot;:[\r\n      {\r\n         &quot;fallback&quot;:&quot;Deploy&quot;,\r\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\r\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\r\n         &quot;fields&quot;:[\r\n            {\r\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\r\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\r\n            }\r\n         ]\r\n      }\r\n   ]\r\n} &#039;;\r\n\r\n foreach ($slack_urls as $slack_url) {\r\n	$ch = curl_init();\r\n	curl_setopt($ch, CURLOPT_URL, $slack_url);\r\n	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\r\n	curl_setopt($ch, CURLOPT_POST, true);\r\n	curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\r\n	$res = curl_exec($ch);\r\n//	var_dump($res);\r\n	curl_close($ch);\r\n }\r\n}\r\n```\r\n###  GitLabのインテグレーション設定           \r\nGitLab->設定->インテグレーション\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\r\n\r\n\"Git push\"する度に自動デプロイされる。\r\n\r\n## リモートのMYSQLをローカルへ同期   \r\n### リモートにMySQLをバックアップし\"git commit\",\"git push\"するスクリプトを設置     \r\nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\r\n実行権限も忘れずに。      \r\nmysql-sync.sh (仮)\r\n```bash\r\n#!/usr/local/bin/bash\r\nSQLHOST= ホスト名\r\nSQLUSER= ユーザー名\r\nSQLPASSWORD= パスワード \r\nSQLTARGETDB= DB名\r\n\r\n// ファイル名\r\nSQL_FILE_NAME=db.sql  \r\n// 圧縮後のファイル名 \r\nSQL_ZIP_FILE_NAME=data/db.zip\r\n// Zipパスワード  \r\nSQL_ZIP_PASS= パスワード\r\n\r\n// mysqldump のPath\r\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\r\n\r\n// MySQLログインのためのテンポラリー my.cnf\r\nMYCNF=${HOME}/.my.cnf\r\nMYCNFCREATE() {\r\ncat &lt;&lt; _EOL_ | tee ${MYCNF}\r\n[client]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=&quot;${SQLPASSWORD}&quot;\r\n[mysqldump]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=&quot;${SQLPASSWORD}&quot;\r\n_EOL_\r\n}\r\n\r\nif [ ! -f ${MYCNF} ];\r\nthen\r\n MYCNFCREATE\r\nelse\r\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n MYCNFCREATE\r\nfi\r\n\r\n// バックアップ\r\n$MYSQLDUMP_PATH $SQLTARGETDB &gt; $SQL_FILE_NAME \r\n// テンポラリー my.cnf 削除\r\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n\r\n// パスワード付きでZip圧縮\r\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \r\n// sqlファイルは削除\r\nrm -rf $SQL_FILE_NAME\r\n\r\n// Git pushまで\r\ncd ../../\r\ngit add -A\r\ngit commit -m &#039;Sync From Deploy&#039;\r\ngit push origin master\r\n```\r\n\r\n### MySQL同期スクリプトをローカルに設置\r\nSSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)\r\n```bash\r\n#!/bin/bash\r\n# host別設定ファイル読み込み\r\nsource mysql.sync\r\n    # sshにてlogin してmysqldumpを実行\r\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\r\n\r\n   git pull origin master\r\n    # パスワード付きzipファイル解凍\r\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\r\n \r\n    # local MySQLログイン用ファイル読み込み\r\n    LOGIN_FILE=./local_mysql_login.cnf\r\n    # local mysqlログイン及びdumpファイル実行\r\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME &lt; $AFTER_ARCIVE_FILENAME\r\n    # local設定を反映させるSQL実行\r\n    mysql --defaults-extra-file=$LOGIN_FILE &lt; $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n    rm $AFTER_ARCIVE_FILENAME\r\n    rm $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n```\r\n読み込んでいる mysql.sync\r\n```bash\r\n\r\n# SSH ログイン情報\r\nREMOTE_HOST= ホスト名\r\nREMOTE_USER　ユーザー名\r\nREMOTE_SSH_PORT= ポート番号\r\n\r\n# Root ディレクトリ\r\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\r\n# Remote backup path\r\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\r\n# サーバー上に設定したスクリプトファイル名\r\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\r\n# バックアップコマンド実行 \r\nREMOTE_BACKUP_COMMAND=&quot;cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE&quot;\r\n\r\n# ローカル ディレウトリ\r\nLOCAL_PATH=&quot;/var/www/html/xxx/xxx&quot;\r\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\r\nARCIVE_PASS= Zipパスワード\r\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\r\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\r\n\r\n# local db name\r\nLOCAL_DB_NAME= DB名\r\n\r\n# 置換項目定数\r\n## Domain\r\nBEFORE_DOMAIN1=&quot;Before domain&quot;\r\nAFTER_DOMAIN1=&quot;After domain&quot;\r\n\r\n## Path\r\nBEFORE_PATH=&quot;Before Path&quot;\r\nAFTER_PATH=&quot;After Path&quot;\r\nTABLE_PREFIX=&quot;wp_&quot;\r\n\r\n## Update用のSQL生成\r\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\r\ntouch $CHANGE_LOCAL_SQL_FILENAME\r\ncat &lt;&lt;EOF&gt; $CHANGE_LOCAL_SQL_FILENAME\r\nSET NAMES utf8;\r\nuse ${LOCAL_DB_NAME}\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere option_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content = REPLACE(post_content,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere post_content like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content_filtered = REPLACE(post_content_filtered,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere post_content_filtered like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\nguid = REPLACE(guid,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere guid like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value, &#039;${BEFORE_PATH}&#039;,&#039;${AFTER_PATH}&#039;)\r\nwhere option_value like &quot;%${BEFORE_PATH}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}postmeta set\r\nmeta_value = REPLACE(meta_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere meta_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\nEOF\r\n```\r\n\r\n\r\n読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf \r\n```bash\r\n[client]\r\nuser = root\r\npassword = &#039;&#039;\r\nhost = localhost\r\n```\r\n\r\n\r\n振る舞いとしては        \r\n1. ローカルからSSHでサーバーへログイン\r\n2. サーバ側でMySQLバックアップ、\"Git push\"\r\n3. ローカルで\"Git pull\"\r\n4. Zip(sqlファイル、パスワード付き)を解凍\r\n5. ローカルMySQLへインポート\r\n6. 変更必要箇所(ドメイン、Path) をUpdate処理\r\n\r\nリモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。      \r\nまた手作業のためミスも起こる可能性も。     \r\nこのスクリプトでわずか数秒になりました。        \r\n\r\n数分の\"めんどくさい\"を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。     \r\n自分のアイデアを形にすることはいい勉強にはなりますわね。 \r\n\r\n\r\n\r\n\r\n\r\n',294,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/294-revision-v1/',0,'revision','',0),(307,1,'2019-09-23 17:19:05','2019-09-23 08:19:05','','wodpress-sync','','inherit','closed','closed','','wodpress-sync','','','2019-09-23 17:19:05','2019-09-23 08:19:05','',294,'https://blog.webdimension.jp/wp-content/uploads/2019/09/wodpress-sync.png',0,'attachment','image/png',0),(308,1,'2019-09-23 17:24:07','2019-09-23 08:24:07','<p>ここでの<strong>Git</strong>の使い方はあくまで&quot;1人_Git&quot;、&quot;オレオレGit&quot;なのでチームでのGitの使い方には参考にはなりません。     </p>\n<p>GitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの <strong>\nDBをローカルへ同期</strong> するスクリプトを組んでみます。        </p>\n<h2>よくあるWebhookによる自動デプロイ</h2>\n<h3>GitLabのWebhookをトリガーに&quot;Git pull&quot;し、Slackへ通知するスクリプト配置</h3>\n<p>サーバー上の任意の場所へ設置。</p>\n<pre><code class=\"language-php\">&lt;?php\n//Git deploy\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\n$slack_urls = array(\n    // Slack URL\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\n);\n\n$json_string = file_get_contents(&#039;php://input&#039;);\n$json = json_decode($json_string, true);\n$header = getallheaders();\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\n// echo &#039;exit&#039;;\n////    if(false) {\n// exit();\n//}\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\nexec($command, $out, $return_ver);\n\nif (sizeof($slack_urls) &gt; 0) {\n $result_mess = &#039;&#039;;\n if ($return_ver === 0) {\n    //Deploy Success\n    $emoji = &quot;:smile:&quot;;\n    $color = &#039;good&#039;;\n    $result_test = &quot;Deploy Sucess&quot;;\n } else {\n    //Deploy Failed\n    $emoji = &quot;:scream:&quot;;\n    $color = &#039;danger&#039;;\n    $result_test = &quot;Deploy Failed&quot;;\n    $result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\n    foreach ($out as $key =&gt; $value) {\n     $result_mess .= $value . &quot;\\n&quot;;\n    }\n }\n $payload = &#039;\n {\n &quot;username&quot;: &quot;&quot;,\n   &quot;attachments&quot;:[\n      {\n         &quot;fallback&quot;:&quot;Deploy&quot;,\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\n         &quot;fields&quot;:[\n            {\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\n            }\n         ]\n      }\n   ]\n} &#039;;\n\n foreach ($slack_urls as $slack_url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $slack_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n    $res = curl_exec($ch);\n//  var_dump($res);\n    curl_close($ch);\n }\n}</code></pre>\n<h3>GitLabのインテグレーション設定</h3>\n<p>GitLab-&gt;設定-&gt;インテグレーション</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png\" alt=\"\" /></p>\n<p>&quot;Git push&quot;する度に自動デプロイされる。</p>\n<h2>リモートのMYSQLをローカルへ同期</h2>\n<h3>リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置</h3>\n<p>Gitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\n実行権限も忘れずに。<br />\nmysql-sync.sh (仮)</p>\n<pre><code class=\"language-bash\">#!/usr/local/bin/bash\nSQLHOST= ホスト名\nSQLUSER= ユーザー名\nSQLPASSWORD= パスワード \nSQLTARGETDB= DB名\n\n// ファイル名\nSQL_FILE_NAME=db.sql  \n// 圧縮後のファイル名 \nSQL_ZIP_FILE_NAME=data/db.zip\n// Zipパスワード  \nSQL_ZIP_PASS= パスワード\n\n// mysqldump のPath\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\n\n// MySQLログインのためのテンポラリー my.cnf\nMYCNF=${HOME}/.my.cnf\nMYCNFCREATE() {\ncat &lt;&lt; _EOL_ | tee ${MYCNF}\n[client]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=&quot;${SQLPASSWORD}&quot;\n[mysqldump]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=&quot;${SQLPASSWORD}&quot;\n_EOL_\n}\n\nif [ ! -f ${MYCNF} ];\nthen\n MYCNFCREATE\nelse\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n MYCNFCREATE\nfi\n\n// バックアップ\n$MYSQLDUMP_PATH $SQLTARGETDB &gt; $SQL_FILE_NAME \n// テンポラリー my.cnf 削除\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n\n// パスワード付きでZip圧縮\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \n// sqlファイルは削除\nrm -rf $SQL_FILE_NAME\n\n// Git pushまで\ncd ../../\ngit add -A\ngit commit -m &#039;Sync From Deploy&#039;\ngit push origin master</code></pre>\n<h3>MySQL同期スクリプトをローカルに設置</h3>\n<p>SSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# host別設定ファイル読み込み\nsource mysql.sync\n    # sshにてlogin してmysqldumpを実行\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\n\n   git pull origin master\n    # パスワード付きzipファイル解凍\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\n\n    # local MySQLログイン用ファイル読み込み\n    LOGIN_FILE=./local_mysql_login.cnf\n    # local mysqlログイン及びdumpファイル実行\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME &lt; $AFTER_ARCIVE_FILENAME\n    # local設定を反映させるSQL実行\n    mysql --defaults-extra-file=$LOGIN_FILE &lt; $CHANGE_LOCAL_SQL_FILENAME\n\n    rm $AFTER_ARCIVE_FILENAME\n    rm $CHANGE_LOCAL_SQL_FILENAME\n</code></pre>\n<p>読み込んでいる mysql.sync</p>\n<pre><code class=\"language-bash\">\n# SSH ログイン情報\nREMOTE_HOST= ホスト名\nREMOTE_USER　ユーザー名\nREMOTE_SSH_PORT= ポート番号\n\n# Root ディレクトリ\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\n# Remote backup path\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\n# サーバー上に設定したスクリプトファイル名\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\n# バックアップコマンド実行 \nREMOTE_BACKUP_COMMAND=&quot;cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE&quot;\n\n# ローカル ディレウトリ\nLOCAL_PATH=&quot;/var/www/html/xxx/xxx&quot;\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\nARCIVE_PASS= Zipパスワード\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\n\n# local db name\nLOCAL_DB_NAME= DB名\n\n# 置換項目定数\n## Domain\nBEFORE_DOMAIN1=&quot;Before domain&quot;\nAFTER_DOMAIN1=&quot;After domain&quot;\n\n## Path\nBEFORE_PATH=&quot;Before Path&quot;\nAFTER_PATH=&quot;After Path&quot;\nTABLE_PREFIX=&quot;wp_&quot;\n\n## Update用のSQL生成\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\ntouch $CHANGE_LOCAL_SQL_FILENAME\ncat &lt;&lt;EOF&gt; $CHANGE_LOCAL_SQL_FILENAME\nSET NAMES utf8;\nuse ${LOCAL_DB_NAME}\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere option_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\npost_content = REPLACE(post_content,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere post_content like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\npost_content_filtered = REPLACE(post_content_filtered,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere post_content_filtered like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\nguid = REPLACE(guid,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere guid like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value, &#039;${BEFORE_PATH}&#039;,&#039;${AFTER_PATH}&#039;)\nwhere option_value like &quot;%${BEFORE_PATH}%&quot;;\n\nupdate ${TABLE_PREFIX}postmeta set\nmeta_value = REPLACE(meta_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere meta_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\nEOF</code></pre>\n<p>読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf </p>\n<pre><code class=\"language-bash\">[client]\nuser = root\npassword = &#039;&#039;\nhost = localhost</code></pre>\n<p>振る舞いとしては        </p>\n<ol>\n<li>ローカルからSSHでサーバーへログイン</li>\n<li>サーバ側でMySQLバックアップ、&quot;Git push&quot;</li>\n<li>ローカルで&quot;Git pull&quot;</li>\n<li>Zip(sqlファイル、パスワード付き)を解凍</li>\n<li>ローカルMySQLへインポート</li>\n<li>変更必要箇所(ドメイン、Path) をUpdate処理</li>\n</ol>\n<p>リモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。<br />\nまた手作業のためミスも起こる可能性も。<br />\nこのスクリプトでわずか数秒になりました。        </p>\n<p>数分の&quot;めんどくさい&quot;を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。<br />\n自分のアイデアを形にすることはいい勉強にはなりますわね。 </p>','WordPressでGitを使ったWebhookデプロイとリモートDB同期','リモートのDBをローカルへ同期するめんどくさい作業をスクリプト化','inherit','closed','closed','','294-revision-v1','','','2019-09-23 17:24:07','2019-09-23 08:24:07','ここでの__Git__の使い方はあくまで\"1人_Git\"、\"オレオレGit\"なのでチームでのGitの使い方には参考にはなりません。     \r\n\r\nGitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの __\r\nDBをローカルへ同期__ するスクリプトを組んでみます。        \r\n\r\n##  よくあるWebhookによる自動デプロイ\r\n### GitLabのWebhookをトリガーに\"Git pull\"し、Slackへ通知するスクリプト配置        \r\nサーバー上の任意の場所へ設置。\r\n```php\r\n&lt;?php\r\n//Git deploy\r\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\r\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\r\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\r\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\r\n$slack_urls = array(\r\n	// Slack URL\r\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\r\n);\r\n\r\n$json_string = file_get_contents(&#039;php://input&#039;);\r\n$json = json_decode($json_string, true);\r\n$header = getallheaders();\r\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\r\n// echo &#039;exit&#039;;\r\n////	if(false) {\r\n// exit();\r\n//}\r\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\r\nexec($command, $out, $return_ver);\r\n\r\nif (sizeof($slack_urls) &gt; 0) {\r\n $result_mess = &#039;&#039;;\r\n if ($return_ver === 0) {\r\n	//Deploy Success\r\n	$emoji = &quot;:smile:&quot;;\r\n	$color = &#039;good&#039;;\r\n	$result_test = &quot;Deploy Sucess&quot;;\r\n } else {\r\n	//Deploy Failed\r\n	$emoji = &quot;:scream:&quot;;\r\n	$color = &#039;danger&#039;;\r\n	$result_test = &quot;Deploy Failed&quot;;\r\n	$result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\r\n	foreach ($out as $key =&gt; $value) {\r\n	 $result_mess .= $value . &quot;\\n&quot;;\r\n	}\r\n }\r\n $payload = &#039;\r\n {\r\n &quot;username&quot;: &quot;&quot;,\r\n   &quot;attachments&quot;:[\r\n      {\r\n         &quot;fallback&quot;:&quot;Deploy&quot;,\r\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\r\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\r\n         &quot;fields&quot;:[\r\n            {\r\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\r\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\r\n            }\r\n         ]\r\n      }\r\n   ]\r\n} &#039;;\r\n\r\n foreach ($slack_urls as $slack_url) {\r\n	$ch = curl_init();\r\n	curl_setopt($ch, CURLOPT_URL, $slack_url);\r\n	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\r\n	curl_setopt($ch, CURLOPT_POST, true);\r\n	curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\r\n	$res = curl_exec($ch);\r\n//	var_dump($res);\r\n	curl_close($ch);\r\n }\r\n}\r\n```\r\n###  GitLabのインテグレーション設定           \r\nGitLab->設定->インテグレーション\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\r\n\r\n\"Git push\"する度に自動デプロイされる。\r\n\r\n## リモートのMYSQLをローカルへ同期   \r\n### リモートにMySQLをバックアップし\"git commit\",\"git push\"するスクリプトを設置     \r\nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\r\n実行権限も忘れずに。      \r\nmysql-sync.sh (仮)\r\n```bash\r\n#!/usr/local/bin/bash\r\nSQLHOST= ホスト名\r\nSQLUSER= ユーザー名\r\nSQLPASSWORD= パスワード \r\nSQLTARGETDB= DB名\r\n\r\n// ファイル名\r\nSQL_FILE_NAME=db.sql  \r\n// 圧縮後のファイル名 \r\nSQL_ZIP_FILE_NAME=data/db.zip\r\n// Zipパスワード  \r\nSQL_ZIP_PASS= パスワード\r\n\r\n// mysqldump のPath\r\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\r\n\r\n// MySQLログインのためのテンポラリー my.cnf\r\nMYCNF=${HOME}/.my.cnf\r\nMYCNFCREATE() {\r\ncat &lt;&lt; _EOL_ | tee ${MYCNF}\r\n[client]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=&quot;${SQLPASSWORD}&quot;\r\n[mysqldump]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=&quot;${SQLPASSWORD}&quot;\r\n_EOL_\r\n}\r\n\r\nif [ ! -f ${MYCNF} ];\r\nthen\r\n MYCNFCREATE\r\nelse\r\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n MYCNFCREATE\r\nfi\r\n\r\n// バックアップ\r\n$MYSQLDUMP_PATH $SQLTARGETDB &gt; $SQL_FILE_NAME \r\n// テンポラリー my.cnf 削除\r\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n\r\n// パスワード付きでZip圧縮\r\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \r\n// sqlファイルは削除\r\nrm -rf $SQL_FILE_NAME\r\n\r\n// Git pushまで\r\ncd ../../\r\ngit add -A\r\ngit commit -m &#039;Sync From Deploy&#039;\r\ngit push origin master\r\n```\r\n\r\n### MySQL同期スクリプトをローカルに設置\r\nSSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力がめんどくさい)\r\n```bash\r\n#!/bin/bash\r\n# host別設定ファイル読み込み\r\nsource mysql.sync\r\n    # sshにてlogin してmysqldumpを実行\r\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\r\n\r\n   git pull origin master\r\n    # パスワード付きzipファイル解凍\r\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\r\n \r\n    # local MySQLログイン用ファイル読み込み\r\n    LOGIN_FILE=./local_mysql_login.cnf\r\n    # local mysqlログイン及びdumpファイル実行\r\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME &lt; $AFTER_ARCIVE_FILENAME\r\n    # local設定を反映させるSQL実行\r\n    mysql --defaults-extra-file=$LOGIN_FILE &lt; $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n    rm $AFTER_ARCIVE_FILENAME\r\n    rm $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n```\r\n読み込んでいる mysql.sync\r\n```bash\r\n\r\n# SSH ログイン情報\r\nREMOTE_HOST= ホスト名\r\nREMOTE_USER　ユーザー名\r\nREMOTE_SSH_PORT= ポート番号\r\n\r\n# Root ディレクトリ\r\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\r\n# Remote backup path\r\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\r\n# サーバー上に設定したスクリプトファイル名\r\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\r\n# バックアップコマンド実行 \r\nREMOTE_BACKUP_COMMAND=&quot;cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE&quot;\r\n\r\n# ローカル ディレウトリ\r\nLOCAL_PATH=&quot;/var/www/html/xxx/xxx&quot;\r\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\r\nARCIVE_PASS= Zipパスワード\r\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\r\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\r\n\r\n# local db name\r\nLOCAL_DB_NAME= DB名\r\n\r\n# 置換項目定数\r\n## Domain\r\nBEFORE_DOMAIN1=&quot;Before domain&quot;\r\nAFTER_DOMAIN1=&quot;After domain&quot;\r\n\r\n## Path\r\nBEFORE_PATH=&quot;Before Path&quot;\r\nAFTER_PATH=&quot;After Path&quot;\r\nTABLE_PREFIX=&quot;wp_&quot;\r\n\r\n## Update用のSQL生成\r\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\r\ntouch $CHANGE_LOCAL_SQL_FILENAME\r\ncat &lt;&lt;EOF&gt; $CHANGE_LOCAL_SQL_FILENAME\r\nSET NAMES utf8;\r\nuse ${LOCAL_DB_NAME}\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere option_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content = REPLACE(post_content,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere post_content like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content_filtered = REPLACE(post_content_filtered,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere post_content_filtered like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\nguid = REPLACE(guid,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere guid like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value, &#039;${BEFORE_PATH}&#039;,&#039;${AFTER_PATH}&#039;)\r\nwhere option_value like &quot;%${BEFORE_PATH}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}postmeta set\r\nmeta_value = REPLACE(meta_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere meta_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\nEOF\r\n```\r\n\r\n\r\n読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf \r\n```bash\r\n[client]\r\nuser = root\r\npassword = &#039;&#039;\r\nhost = localhost\r\n```\r\n\r\n\r\n振る舞いとしては        \r\n1. ローカルからSSHでサーバーへログイン\r\n2. サーバ側でMySQLバックアップ、\"Git push\"\r\n3. ローカルで\"Git pull\"\r\n4. Zip(sqlファイル、パスワード付き)を解凍\r\n5. ローカルMySQLへインポート\r\n6. 変更必要箇所(ドメイン、Path) をUpdate処理\r\n\r\nリモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。      \r\nまた手作業のためミスも起こる可能性も。     \r\nこのスクリプトでわずか数秒になりました。        \r\n\r\n数分の\"めんどくさい\"を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。     \r\n自分のアイデアを形にすることはいい勉強にはなりますわね。 \r\n\r\n\r\n\r\n\r\n\r\n',294,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/294-revision-v1/',0,'revision','',0),(309,1,'2019-09-23 17:33:55','2019-09-23 08:33:55','','chrome-vimim','','inherit','closed','closed','','chrome-vimim','','','2019-09-23 17:33:55','2019-09-23 08:33:55','',249,'https://blog.webdimension.jp/wp-content/uploads/2019/09/chrome-vimim.jpg',0,'attachment','image/jpeg',0),(310,1,'2019-09-23 17:43:23','2019-09-23 08:43:23','','mysql-login','','inherit','closed','closed','','mysql-login','','','2019-09-23 17:43:23','2019-09-23 08:43:23','',273,'https://blog.webdimension.jp/wp-content/uploads/2019/09/mysql-login.jpg',0,'attachment','image/jpeg',0),(311,1,'2019-09-23 18:14:06','2019-09-23 09:14:06','','dockrer-on-vagrant','','inherit','closed','closed','','dockrer-on-vagrant','','','2019-09-23 18:14:06','2019-09-23 09:14:06','',164,'https://blog.webdimension.jp/wp-content/uploads/2019/09/dockrer-on-vagrant.jpg',0,'attachment','image/jpeg',0),(312,1,'2019-09-23 18:17:57','2019-09-23 09:17:57','','wodpress-sync','','inherit','closed','closed','','wodpress-sync-2','','','2019-09-23 18:17:57','2019-09-23 09:17:57','',154,'https://blog.webdimension.jp/wp-content/uploads/2019/09/wodpress-sync-1.png',0,'attachment','image/png',0),(313,1,'2019-09-23 18:18:30','2019-09-23 09:18:30','','vagrant-tpl','','inherit','closed','closed','','vagrant-tpl','','','2019-09-23 18:18:30','2019-09-23 09:18:30','',154,'https://blog.webdimension.jp/wp-content/uploads/2019/09/vagrant-tpl.jpg',0,'attachment','image/jpeg',0),(315,1,'2019-09-23 19:36:39','2019-09-23 10:36:39','<p>ここでの<strong>Git</strong>の使い方はあくまで&quot;1人_Git&quot;、&quot;オレオレGit&quot;なのでチームでのGitの使い方には参考にはなりません。     </p>\n<p>GitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの <strong>\nDBをローカルへ同期</strong> するスクリプトを組んでみます。        </p>\n<h2>よくあるWebhookによる自動デプロイ</h2>\n<h3>GitLabのWebhookをトリガーに&quot;Git pull&quot;し、Slackへ通知するスクリプト配置</h3>\n<p>サーバー上の任意の場所へ設置。</p>\n<pre><code class=\"language-php\">&lt;?php\n//Git deploy\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\n$slack_urls = array(\n    // Slack URL\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\n);\n\n$json_string = file_get_contents(&#039;php://input&#039;);\n$json = json_decode($json_string, true);\n$header = getallheaders();\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\n// echo &#039;exit&#039;;\n////    if(false) {\n// exit();\n//}\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\nexec($command, $out, $return_ver);\n\nif (sizeof($slack_urls) &gt; 0) {\n $result_mess = &#039;&#039;;\n if ($return_ver === 0) {\n    //Deploy Success\n    $emoji = &quot;:smile:&quot;;\n    $color = &#039;good&#039;;\n    $result_test = &quot;Deploy Sucess&quot;;\n } else {\n    //Deploy Failed\n    $emoji = &quot;:scream:&quot;;\n    $color = &#039;danger&#039;;\n    $result_test = &quot;Deploy Failed&quot;;\n    $result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\n    foreach ($out as $key =&gt; $value) {\n     $result_mess .= $value . &quot;\\n&quot;;\n    }\n }\n $payload = &#039;\n {\n &quot;username&quot;: &quot;&quot;,\n   &quot;attachments&quot;:[\n      {\n         &quot;fallback&quot;:&quot;Deploy&quot;,\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\n         &quot;fields&quot;:[\n            {\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\n            }\n         ]\n      }\n   ]\n} &#039;;\n\n foreach ($slack_urls as $slack_url) {\n    $ch = curl_init();\n    curl_setopt($ch, CURLOPT_URL, $slack_url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\n    $res = curl_exec($ch);\n//  var_dump($res);\n    curl_close($ch);\n }\n}</code></pre>\n<h3>GitLabのインテグレーション設定</h3>\n<p>GitLab-&gt;設定-&gt;インテグレーション</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png\" alt=\"\" /></p>\n<p>&quot;Git push&quot;する度に自動デプロイされる。</p>\n<h2>リモートのMYSQLをローカルへ同期</h2>\n<h3>リモートにMySQLをバックアップし&quot;git commit&quot;,&quot;git push&quot;するスクリプトを設置</h3>\n<p>Gitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\n実行権限も忘れずに。<br />\nmysql-sync.sh (仮)</p>\n<pre><code class=\"language-bash\">#!/usr/local/bin/bash\nSQLHOST= ホスト名\nSQLUSER= ユーザー名\nSQLPASSWORD= パスワード \nSQLTARGETDB= DB名\n\n// ファイル名\nSQL_FILE_NAME=db.sql  \n// 圧縮後のファイル名 \nSQL_ZIP_FILE_NAME=data/db.zip\n// Zipパスワード  \nSQL_ZIP_PASS= パスワード\n\n// mysqldump のPath\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\n\n// MySQLログインのためのテンポラリー my.cnf\nMYCNF=${HOME}/.my.cnf\nMYCNFCREATE() {\ncat &lt;&lt; _EOL_ | tee ${MYCNF}\n[client]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=&quot;${SQLPASSWORD}&quot;\n[mysqldump]\nhost=${SQLHOST}\nuser=${SQLUSER}\npassword=&quot;${SQLPASSWORD}&quot;\n_EOL_\n}\n\nif [ ! -f ${MYCNF} ];\nthen\n MYCNFCREATE\nelse\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n MYCNFCREATE\nfi\n\n// バックアップ\n$MYSQLDUMP_PATH $SQLTARGETDB &gt; $SQL_FILE_NAME \n// テンポラリー my.cnf 削除\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\n\n// パスワード付きでZip圧縮\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \n// sqlファイルは削除\nrm -rf $SQL_FILE_NAME\n\n// Git pushまで\ncd ../../\ngit add -A\ngit commit -m &#039;Sync From Deploy&#039;\ngit push origin master</code></pre>\n<h3>MySQL同期スクリプトをローカルに設置</h3>\n<p>SSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力が<span class=\"under_line\">めんどくさい</span>)</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# host別設定ファイル読み込み\nsource mysql.sync\n    # sshにてlogin してmysqldumpを実行\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\n\n   git pull origin master\n    # パスワード付きzipファイル解凍\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\n\n    # local MySQLログイン用ファイル読み込み\n    LOGIN_FILE=./local_mysql_login.cnf\n    # local mysqlログイン及びdumpファイル実行\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME &lt; $AFTER_ARCIVE_FILENAME\n    # local設定を反映させるSQL実行\n    mysql --defaults-extra-file=$LOGIN_FILE &lt; $CHANGE_LOCAL_SQL_FILENAME\n\n    rm $AFTER_ARCIVE_FILENAME\n    rm $CHANGE_LOCAL_SQL_FILENAME\n</code></pre>\n<p>読み込んでいる mysql.sync</p>\n<pre><code class=\"language-bash\">\n# SSH ログイン情報\nREMOTE_HOST= ホスト名\nREMOTE_USER　ユーザー名\nREMOTE_SSH_PORT= ポート番号\n\n# Root ディレクトリ\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\n# Remote backup path\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\n# サーバー上に設定したスクリプトファイル名\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\n# バックアップコマンド実行 \nREMOTE_BACKUP_COMMAND=&quot;cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE&quot;\n\n# ローカル ディレウトリ\nLOCAL_PATH=&quot;/var/www/html/xxx/xxx&quot;\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\nARCIVE_PASS= Zipパスワード\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\n\n# local db name\nLOCAL_DB_NAME= DB名\n\n# 置換項目定数\n## Domain\nBEFORE_DOMAIN1=&quot;Before domain&quot;\nAFTER_DOMAIN1=&quot;After domain&quot;\n\n## Path\nBEFORE_PATH=&quot;Before Path&quot;\nAFTER_PATH=&quot;After Path&quot;\nTABLE_PREFIX=&quot;wp_&quot;\n\n## Update用のSQL生成\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\ntouch $CHANGE_LOCAL_SQL_FILENAME\ncat &lt;&lt;EOF&gt; $CHANGE_LOCAL_SQL_FILENAME\nSET NAMES utf8;\nuse ${LOCAL_DB_NAME}\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere option_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\npost_content = REPLACE(post_content,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere post_content like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\npost_content_filtered = REPLACE(post_content_filtered,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere post_content_filtered like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}posts set\nguid = REPLACE(guid,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere guid like &quot;%${BEFORE_DOMAIN1}%&quot;;\n\nupdate ${TABLE_PREFIX}options set\noption_value = REPLACE(option_value, &#039;${BEFORE_PATH}&#039;,&#039;${AFTER_PATH}&#039;)\nwhere option_value like &quot;%${BEFORE_PATH}%&quot;;\n\nupdate ${TABLE_PREFIX}postmeta set\nmeta_value = REPLACE(meta_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\nwhere meta_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\nEOF</code></pre>\n<p>読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf </p>\n<pre><code class=\"language-bash\">[client]\nuser = root\npassword = &#039;&#039;\nhost = localhost</code></pre>\n<p>振る舞いとしては        </p>\n<ol>\n<li>ローカルからSSHでサーバーへログイン</li>\n<li>サーバ側でMySQLバックアップ、&quot;Git push&quot;</li>\n<li>ローカルで&quot;Git pull&quot;</li>\n<li>Zip(sqlファイル、パスワード付き)を解凍</li>\n<li>ローカルMySQLへインポート</li>\n<li>変更必要箇所(ドメイン、Path) をUpdate処理</li>\n</ol>\n<p>リモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。<br />\nまた手作業のためミスも起こる可能性も。<br />\nこのスクリプトでわずか数秒になりました。        </p>\n<p>数分の<span class=\"under_line\">めんどくさい</span>を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。<br />\n自分のアイデアを形にすることはいい勉強にはなりますわね。 </p>','WordPressでGitを使ったWebhookデプロイとリモートDB同期','リモートのDBをローカルへ同期するめんどくさい作業をスクリプト化','inherit','closed','closed','','294-revision-v1','','','2019-09-23 19:36:39','2019-09-23 10:36:39','ここでの__Git__の使い方はあくまで\"1人_Git\"、\"オレオレGit\"なのでチームでのGitの使い方には参考にはなりません。     \r\n\r\nGitリポジトリーへPushし自動デプロイはよくありますがGitを利用して本番サーバーの __\r\nDBをローカルへ同期__ するスクリプトを組んでみます。        \r\n\r\n##  よくあるWebhookによる自動デプロイ\r\n### GitLabのWebhookをトリガーに\"Git pull\"し、Slackへ通知するスクリプト配置        \r\nサーバー上の任意の場所へ設置。\r\n```php\r\n&lt;?php\r\n//Git deploy\r\ndefine(&#039;GIT_ROOT_DIR&#039;,&#039;../../&#039;); // Project root\r\ndefine(&#039;GIT_BRANCH&#039;,&#039;master&#039;); // master , develop ....\r\ndefine(&#039;GIT_TOKEN&#039;,&#039;token&#039;);  // your token\r\ndefine(&#039;GIT_TOKEN_NAME&#039;,&#039;X-Gitlab-Token&#039;);\r\n$slack_urls = array(\r\n	// Slack URL\r\n &#039;https://hooks.slack.com/services/xxxxxxxx/xxxxxxx/xxxxx&#039;\r\n);\r\n\r\n$json_string = file_get_contents(&#039;php://input&#039;);\r\n$json = json_decode($json_string, true);\r\n$header = getallheaders();\r\n//if ($header[GIT_TOKEN_NAME] !== GIT_TOKEN) {\r\n// echo &#039;exit&#039;;\r\n////	if(false) {\r\n// exit();\r\n//}\r\n $command = &quot;cd &quot; . GIT_ROOT_DIR .&quot; &amp;&amp; git fetch origin master &amp;&amp; git reset --hard origin/&quot;.GIT_BRANCH;\r\nexec($command, $out, $return_ver);\r\n\r\nif (sizeof($slack_urls) &gt; 0) {\r\n $result_mess = &#039;&#039;;\r\n if ($return_ver === 0) {\r\n	//Deploy Success\r\n	$emoji = &quot;:smile:&quot;;\r\n	$color = &#039;good&#039;;\r\n	$result_test = &quot;Deploy Sucess&quot;;\r\n } else {\r\n	//Deploy Failed\r\n	$emoji = &quot;:scream:&quot;;\r\n	$color = &#039;danger&#039;;\r\n	$result_test = &quot;Deploy Failed&quot;;\r\n	$result_test .= &quot;   &quot;.date(&quot;Y/m/d H:i:s&quot;);\r\n	foreach ($out as $key =&gt; $value) {\r\n	 $result_mess .= $value . &quot;\\n&quot;;\r\n	}\r\n }\r\n $payload = &#039;\r\n {\r\n &quot;username&quot;: &quot;&quot;,\r\n   &quot;attachments&quot;:[\r\n      {\r\n         &quot;fallback&quot;:&quot;Deploy&quot;,\r\n         &quot;pretext&quot;:&quot;Deploy &#039;. GIT_REPO . &#039; &#039;.GIT_BRANCH.&#039;&quot;,\r\n         &quot;color&quot;:&quot;&#039;.$color.&#039;&quot;,\r\n         &quot;fields&quot;:[\r\n            {\r\n               &quot;title&quot;:&quot;&#039; . $emoji . $result_test . &#039;&quot;,\r\n               &quot;value&quot;:&quot;&#039; . $result_mess .&#039;&quot;\r\n            }\r\n         ]\r\n      }\r\n   ]\r\n} &#039;;\r\n\r\n foreach ($slack_urls as $slack_url) {\r\n	$ch = curl_init();\r\n	curl_setopt($ch, CURLOPT_URL, $slack_url);\r\n	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\r\n	curl_setopt($ch, CURLOPT_POST, true);\r\n	curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);\r\n	$res = curl_exec($ch);\r\n//	var_dump($res);\r\n	curl_close($ch);\r\n }\r\n}\r\n```\r\n###  GitLabのインテグレーション設定           \r\nGitLab->設定->インテグレーション\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/gitlab-webhook.png)\r\n\r\n\"Git push\"する度に自動デプロイされる。\r\n\r\n## リモートのMYSQLをローカルへ同期   \r\n### リモートにMySQLをバックアップし\"git commit\",\"git push\"するスクリプトを設置     \r\nGitの管理内で公開ディレクトリでない場所に設置するのが望ましいかと思います。\r\n実行権限も忘れずに。      \r\nmysql-sync.sh (仮)\r\n```bash\r\n#!/usr/local/bin/bash\r\nSQLHOST= ホスト名\r\nSQLUSER= ユーザー名\r\nSQLPASSWORD= パスワード \r\nSQLTARGETDB= DB名\r\n\r\n// ファイル名\r\nSQL_FILE_NAME=db.sql  \r\n// 圧縮後のファイル名 \r\nSQL_ZIP_FILE_NAME=data/db.zip\r\n// Zipパスワード  \r\nSQL_ZIP_PASS= パスワード\r\n\r\n// mysqldump のPath\r\nMYSQLDUMP_PATH=/usr/local/bin/mysqldump\r\n\r\n// MySQLログインのためのテンポラリー my.cnf\r\nMYCNF=${HOME}/.my.cnf\r\nMYCNFCREATE() {\r\ncat &lt;&lt; _EOL_ | tee ${MYCNF}\r\n[client]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=&quot;${SQLPASSWORD}&quot;\r\n[mysqldump]\r\nhost=${SQLHOST}\r\nuser=${SQLUSER}\r\npassword=&quot;${SQLPASSWORD}&quot;\r\n_EOL_\r\n}\r\n\r\nif [ ! -f ${MYCNF} ];\r\nthen\r\n MYCNFCREATE\r\nelse\r\n mv ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n MYCNFCREATE\r\nfi\r\n\r\n// バックアップ\r\n$MYSQLDUMP_PATH $SQLTARGETDB &gt; $SQL_FILE_NAME \r\n// テンポラリー my.cnf 削除\r\nrm -rf ${MYCNF} ${MYCNF}_$(date +%Y%m%d%H%M%S)\r\n\r\n// パスワード付きでZip圧縮\r\nzip -e --password=$SQL_ZIP_PASS $SQL_ZIP_FILE_NAME $SQL_FILE_NAME \r\n// sqlファイルは削除\r\nrm -rf $SQL_FILE_NAME\r\n\r\n// Git pushまで\r\ncd ../../\r\ngit add -A\r\ngit commit -m &#039;Sync From Deploy&#039;\r\ngit push origin master\r\n```\r\n\r\n### MySQL同期スクリプトをローカルに設置\r\nSSHでのログインが必要です。鍵認証でのログインが設定済み前提です。(パスワード入力が<span class=\"under_line\">めんどくさい</span>)\r\n```bash\r\n#!/bin/bash\r\n# host別設定ファイル読み込み\r\nsource mysql.sync\r\n    # sshにてlogin してmysqldumpを実行\r\n    ssh -p $REMOTE_SSH_PORT $REMOTE_USER@$REMOTE_HOST $REMOTE_BACKUP_COMMAND\r\n\r\n   git pull origin master\r\n    # パスワード付きzipファイル解凍\r\n    unzip -o -P $ARCIVE_PASS $DOWNLOAD_FILE -d $AFTER_ARCIVE_DIR\r\n \r\n    # local MySQLログイン用ファイル読み込み\r\n    LOGIN_FILE=./local_mysql_login.cnf\r\n    # local mysqlログイン及びdumpファイル実行\r\n    mysql --defaults-extra-file=$LOGIN_FILE $LOCAL_DB_NAME &lt; $AFTER_ARCIVE_FILENAME\r\n    # local設定を反映させるSQL実行\r\n    mysql --defaults-extra-file=$LOGIN_FILE &lt; $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n    rm $AFTER_ARCIVE_FILENAME\r\n    rm $CHANGE_LOCAL_SQL_FILENAME\r\n\r\n```\r\n読み込んでいる mysql.sync\r\n```bash\r\n\r\n# SSH ログイン情報\r\nREMOTE_HOST= ホスト名\r\nREMOTE_USER　ユーザー名\r\nREMOTE_SSH_PORT= ポート番号\r\n\r\n# Root ディレクトリ\r\nREMOTE_WP_ROOT=/home/xxx/www/xxxxx\r\n# Remote backup path\r\nREMOTE_BACKUP_EXE_DIR=$REMOTE_WP_ROOT/wp_sync/\r\n# サーバー上に設定したスクリプトファイル名\r\nREMOTE_BACKUP_EXE= mysql-sync.sh (仮)\r\n# バックアップコマンド実行 \r\nREMOTE_BACKUP_COMMAND=&quot;cd $REMOTE_BACKUP_EXE_DIR; ./$REMOTE_BACKUP_EXE&quot;\r\n\r\n# ローカル ディレウトリ\r\nLOCAL_PATH=&quot;/var/www/html/xxx/xxx&quot;\r\nDOWNLOAD_FILE=$LOCAL_PATH/wp_sync/data/db.zip\r\nARCIVE_PASS= Zipパスワード\r\nAFTER_ARCIVE_DIR=$LOCAL_PATH/wp_sync/data\r\nAFTER_ARCIVE_FILENAME=$AFTER_ARCIVE_DIR/db.sql\r\n\r\n# local db name\r\nLOCAL_DB_NAME= DB名\r\n\r\n# 置換項目定数\r\n## Domain\r\nBEFORE_DOMAIN1=&quot;Before domain&quot;\r\nAFTER_DOMAIN1=&quot;After domain&quot;\r\n\r\n## Path\r\nBEFORE_PATH=&quot;Before Path&quot;\r\nAFTER_PATH=&quot;After Path&quot;\r\nTABLE_PREFIX=&quot;wp_&quot;\r\n\r\n## Update用のSQL生成\r\nCHANGE_LOCAL_SQL_FILENAME=change_local.sql\r\ntouch $CHANGE_LOCAL_SQL_FILENAME\r\ncat &lt;&lt;EOF&gt; $CHANGE_LOCAL_SQL_FILENAME\r\nSET NAMES utf8;\r\nuse ${LOCAL_DB_NAME}\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere option_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content = REPLACE(post_content,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere post_content like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\npost_content_filtered = REPLACE(post_content_filtered,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere post_content_filtered like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}posts set\r\nguid = REPLACE(guid,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere guid like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}options set\r\noption_value = REPLACE(option_value, &#039;${BEFORE_PATH}&#039;,&#039;${AFTER_PATH}&#039;)\r\nwhere option_value like &quot;%${BEFORE_PATH}%&quot;;\r\n\r\nupdate ${TABLE_PREFIX}postmeta set\r\nmeta_value = REPLACE(meta_value,&#039;${BEFORE_DOMAIN1}&#039;,&#039;${AFTER_DOMAIN1}&#039;)\r\nwhere meta_value like &quot;%${BEFORE_DOMAIN1}%&quot;;\r\nEOF\r\n```\r\n\r\n\r\n読み込んでいる ローカルMySQLログイン用local_mysql_login.cnf \r\n```bash\r\n[client]\r\nuser = root\r\npassword = &#039;&#039;\r\nhost = localhost\r\n```\r\n\r\n\r\n振る舞いとしては        \r\n1. ローカルからSSHでサーバーへログイン\r\n2. サーバ側でMySQLバックアップ、\"Git push\"\r\n3. ローカルで\"Git pull\"\r\n4. Zip(sqlファイル、パスワード付き)を解凍\r\n5. ローカルMySQLへインポート\r\n6. 変更必要箇所(ドメイン、Path) をUpdate処理\r\n\r\nリモートのDatabaseをローカルに同期するには手動でやると早くても数分はかかるでしょう。      \r\nまた手作業のためミスも起こる可能性も。     \r\nこのスクリプトでわずか数秒になりました。        \r\n\r\n数分の<span class=\"under_line\">めんどくさい</span>を解消するために1日かけるという本末転倒かもしれないが共有することによりブラッシュアップされ無駄ではなくなると信じることにしてる。     \r\n自分のアイデアを形にすることはいい勉強にはなりますわね。 \r\n\r\n\r\n\r\n\r\n\r\n',294,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/294-revision-v1/',0,'revision','',0),(316,1,'2019-09-23 19:42:19','2019-09-23 10:42:19','<p>MySQL5.7からは以前のバージョンに比べて<span class=\"under_line\">めんどくさい</span>ことになってます。</p>\n<h2>MySQL5.7インストール後の初回ログインは <strong>必ず手順を忘れる</strong> ので備忘録。</h2>\n<p>初期ログインアカウントはroot<br />\n初期パスワードはインストール時にログに吐き出されている。   </p>\n<pre><code class=\"language-bash\">$ sudo cat /var/log/mysqld.log\nor\n$ sudo cat /var/log/mysqld.log | grep password</code></pre>\n<p>この行。      </p>\n<pre><code class=\"language-bash\">temporary password is generated for root@localhost: 0h7ku9hSGM(4</code></pre>\n<p>初期パスワードでログイン後に新たにパスワードを設定。       </p>\n<pre><code class=\"language-bash\">mysql_secure_installation</code></pre>\n<p>初期パスワードを入力しあらためてパスワードを設定。<br />\n大文字、小文字、数字、記号含む。<br />\n以前のバージョンのようにパスワードを空でログインする場合は</p>\n<pre><code class=\"language-bash\">sudo vi /etc/my.cnf</code></pre>\n<p>skip-grant-tables<br />\nを追記します。\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      </p>\n<pre><code class=\"language-bash\">mysql -uroot -p</code></pre>\n<p>パスワード入力してログイン後      </p>\n<pre><code class=\"language-bash\">mysql&gt; SET GLOBAL validate_password_length=4; \nmysql&gt; SET GLOBAL validate_password_policy=LOW; </code></pre>\n<p>いろいろと<span class=\"under_line\">めんどくさい</span>のでレベルはLOW、4桁以上のパスワードを設定可能にします。</p>\n<pre><code class=\"language-bash\">mysql&gt; set password for root@localhost=password(&#039;root&#039;);</code></pre>\n<p>備考<br />\nLOW : 桁数<br />\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字<br />\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      </p>\n<p>今まで root パスなしだったのもどうなのよと思うこのごろです。</p>','MySQL5.7インストール後の初回ログイン','MySQL5.7から初期アカウントが　root パスなし　ではなくなり一手間必要。','inherit','closed','closed','','273-revision-v1','','','2019-09-23 19:42:19','2019-09-23 10:42:19','MySQL5.7からは以前のバージョンに比べて<span class=\"under_line\">めんどくさい</span>ことになってます。\r\n\r\n## MySQL5.7インストール後の初回ログインは __必ず手順を忘れる__ ので備忘録。\r\n\r\n初期ログインアカウントはroot      \r\n初期パスワードはインストール時にログに吐き出されている。   \r\n\r\n```bash\r\n$ sudo cat /var/log/mysqld.log\r\nor\r\n$ sudo cat /var/log/mysqld.log | grep password\r\n```\r\nこの行。      \r\n```bash\r\ntemporary password is generated for root@localhost: 0h7ku9hSGM(4\r\n```\r\n初期パスワードでログイン後に新たにパスワードを設定。       \r\n```bash\r\nmysql_secure_installation\r\n```\r\n初期パスワードを入力しあらためてパスワードを設定。        \r\n大文字、小文字、数字、記号含む。      \r\n以前のバージョンのようにパスワードを空でログインする場合は\r\n```bash\r\nsudo vi /etc/my.cnf\r\n```\r\nskip-grant-tables       \r\nを追記します。\r\n大文字、小文字、数字、記号ではなくもっとゆるくしたい場合      \r\n```bash\r\nmysql -uroot -p\r\n```\r\nパスワード入力してログイン後      \r\n```bash\r\nmysql&gt; SET GLOBAL validate_password_length=4; \r\nmysql&gt; SET GLOBAL validate_password_policy=LOW; \r\n```\r\nいろいろと<span class=\"under_line\">めんどくさい</span>のでレベルはLOW、4桁以上のパスワードを設定可能にします。\r\n\r\n```bash\r\nmysql&gt; set password for root@localhost=password(&#039;root&#039;);\r\n```\r\n備考      \r\nLOW : 桁数        \r\nMEDIUM : 桁数、 数字、小文字/大文字、および特殊文字     \r\nSTRONG : 桁数、 数字、小文字/大文字、および特殊文字、辞書ファイル      \r\n\r\n今まで root パスなしだったのもどうなのよと思うこのごろです。',273,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/273-revision-v1/',0,'revision','',0),(317,1,'2019-09-23 19:46:28','2019-09-23 10:46:28','<h2>VImium が便利すぎ</h2>\n<p>ブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は\n<a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a>の出番です。</p>\n<ul>\n<li>\'k\'　上スクロール </li>\n<li>\'j\'　下スクロール</li>\n<li>\'h\'　戻る</li>\n<li>\'l\'　進む </li>\n<li>\'f\'　リンクを開く、\'F\'だと新規タブで開く</li>\n<li>\'gi\' テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で <strong>\'f\'</strong> をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><strong>\'gi\'</strong> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p>がとてもVimぽくて素敵です。</p>\n<p>マウスいらずで効率アップ！</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','inherit','closed','closed','','249-revision-v1','','','2019-09-23 19:46:28','2019-09-23 10:46:28','## VImium が便利すぎ\r\nブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\r\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は\r\n[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)の出番です。\r\n\r\n- \'k\'　上スクロール \r\n- \'j\'　下スクロール\r\n- \'h\'　戻る\r\n- \'l\'　進む \r\n- \'f\'　リンクを開く、\'F\'だと新規タブで開く\r\n- \'gi\' テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で __\'f\'__ をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n__\'gi\'__ とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\nがとてもVimぽくて素敵です。\r\n\r\nマウスいらずで効率アップ！',249,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/249-revision-v1/',0,'revision','',0),(319,1,'2019-09-23 19:50:58','2019-09-23 10:50:58','<p>昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。<br />\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。<br />\n最近は \'webpack\' が主流のようです。\nBootstrapもVersion4よりSassが採用されました。<br />\n\'webpack\'はGit同様必須となりそうです。</p>\n<h2>Wordpressのテーマ UnderstrapのPackage.json</h2>\n<p>UnderstrapのSassで例えると、</p>\n<pre><code class=\"language-source\">{\n  &quot;name&quot;: &quot;understrap-child&quot;,\n  &quot;version&quot;: &quot;0.5.5&quot;,\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\n    &quot;watch&quot;: &quot;gulp watch&quot;,\n    &quot;sass&quot;: &quot;gulp sass&quot;\n  },\n...\n...\n...\n...\n...\n</code></pre>\n<p>この &quot;scripts&quot; の内容を実行するのですが、おっさんはすぐにターミナルを開き\n<strong>\'package.json\'</strong> のあるディレクトリまで移動し</p>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>などします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。<br />\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。<br />\nまた、エラー確認のためエディタとターミナルを行ったりきたり。<br />\nショートカット使ったとしても・・・めんどくさい。<br />\nなのでこの一連のアクションはIDEAでやることにしました。<br />\n<strong>結果</strong><br />\nやっぱり楽になりました。　</p>\n<h2>npm 設定手順</h2>\n<p><strong>環境</strong>      </p>\n<ul>\n<li>MAC       </li>\n<li>node.jsがインストール済み</li>\n<li>Intellij IDEA (Phpstorm,Webstormなど)</li>\n</ul>\n<hr />\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>\'cmd\' + \'f\' を押下しnpmを検索</li>\n<li>Preferences | Languages &amp; Frameworks | Node.js and NPM へ進む</li>\n<li>\'node\',\'npm\'のPathを設定</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png\" alt=\"\" /></p>\n<p>Projct tool window の \'package.json\' を右クリック。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png\" alt=\"\" /></p>\n<p>\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png\" alt=\"\" /></p>\n<p>ここには \'Package.json\' のScripts内のコマンドがリストされます。<br />\n実行したいScript名を右クリックして実行です。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png\" alt=\"\" /></p>\n<h2>Npm window を開くためのショートカット</h2>\n<p>マウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       </p>\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>Preferences | Keymap へ進む。</li>\n<li>\'npm\'で検索し ショートカットキーを割り当てる        </li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png\" alt=\"\" /> </p>\n<p>これでだいぶん楽になる。</p>\n<h2>それでも&quot;めんどくさい&quot;という場合</h2>\n<p>&quot;ただただ、\'npm run watch\' を走らせたいんだ&quot; という場合はIDEAの超便利機能\n「なんでも検索」の出番です。</p>\n<ol>\n<li>\'Shift\' x 2 （連打) で「なんでも検索」</li>\n<li>\'watch\' をタイプ、&quot;Run \'watch\' npm script&quot; が出てくるのでEnter。</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png\" alt=\"\" />       </p>\n<p>実行後はこんな感じです。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png\" alt=\"\" /></p>\n<p>IDEAの「なんでも検索」はほんとすごい。快適です。</p>','Intellij idea から npm を操作','\'npm run watch\'　などはターミナルを開いて実行してましたが地味に<span class=\"under_line\">めんどくさい</span>のでIDEA側で操作するようにした。','inherit','closed','closed','','259-revision-v1','','','2019-09-23 19:50:58','2019-09-23 10:50:58','昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。      \r\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。      \r\n最近は \'webpack\' が主流のようです。\r\nBootstrapもVersion4よりSassが採用されました。       \r\n\'webpack\'はGit同様必須となりそうです。\r\n\r\n## Wordpressのテーマ UnderstrapのPackage.json\r\nUnderstrapのSassで例えると、\r\n```source\r\n{\r\n  &quot;name&quot;: &quot;understrap-child&quot;,\r\n  &quot;version&quot;: &quot;0.5.5&quot;,\r\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\r\n  &quot;main&quot;: &quot;index.js&quot;,\r\n  &quot;scripts&quot;: {\r\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\r\n    &quot;watch&quot;: &quot;gulp watch&quot;,\r\n    &quot;sass&quot;: &quot;gulp sass&quot;\r\n  },\r\n...\r\n...\r\n...\r\n...\r\n...\r\n\r\n```\r\nこの \"scripts\" の内容を実行するのですが、おっさんはすぐにターミナルを開き\r\n__\'package.json\'__ のあるディレクトリまで移動し\r\n\r\n```bash\r\nnpm run watch\r\n```\r\n\r\nなどします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。      \r\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。     \r\nまた、エラー確認のためエディタとターミナルを行ったりきたり。     \r\nショートカット使ったとしても・・・めんどくさい。        \r\nなのでこの一連のアクションはIDEAでやることにしました。       \r\n__結果__      \r\nやっぱり楽になりました。　\r\n\r\n## npm 設定手順\r\n__環境__      \r\n- MAC       \r\n- node.jsがインストール済み\r\n- Intellij IDEA (Phpstorm,Webstormなど)\r\n\r\n--------\r\n\r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. \'cmd\' + \'f\' を押下しnpmを検索\r\n3. Preferences | Languages & Frameworks | Node.js and NPM へ進む\r\n4. \'node\',\'npm\'のPathを設定\r\n \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png)\r\n\r\nProjct tool window の \'package.json\' を右クリック。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png)\r\n\r\n\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png)\r\n\r\nここには \'Package.json\' のScripts内のコマンドがリストされます。     \r\n実行したいScript名を右クリックして実行です。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png)\r\n\r\n## Npm window を開くためのショートカット\r\nマウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       \r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. Preferences | Keymap へ進む。\r\n3. \'npm\'で検索し ショートカットキーを割り当てる        \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png) \r\n\r\n\r\nこれでだいぶん楽になる。\r\n\r\n\r\n## それでも\"めんどくさい\"という場合\r\n\"ただただ、\'npm run watch\' を走らせたいんだ\" という場合はIDEAの超便利機能\r\n「なんでも検索」の出番です。\r\n\r\n1. \'Shift\' x 2 （連打) で「なんでも検索」\r\n2. \'watch\' をタイプ、\"Run \'watch\' npm script\" が出てくるのでEnter。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png)       \r\n\r\n\r\n実行後はこんな感じです。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png)\r\n\r\nIDEAの「なんでも検索」はほんとすごい。快適です。\r\n\r\n\r\n',259,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/259-revision-v1/',0,'revision','',0),(320,1,'2019-09-23 19:52:26','2019-09-23 10:52:26','<p>昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。<br />\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。<br />\n最近は \'webpack\' が主流のようです。\nBootstrapもVersion4よりSassが採用されました。<br />\n\'webpack\'はGit同様必須となりそうです。</p>\n<h2>Wordpressのテーマ UnderstrapのPackage.json</h2>\n<p>UnderstrapのSassで例えると、</p>\n<pre><code class=\"language-source\">{\n  &quot;name&quot;: &quot;understrap-child&quot;,\n  &quot;version&quot;: &quot;0.5.5&quot;,\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\n    &quot;watch&quot;: &quot;gulp watch&quot;,\n    &quot;sass&quot;: &quot;gulp sass&quot;\n  },\n...\n...\n...\n...\n...\n</code></pre>\n<p>この &quot;scripts&quot; の内容を実行するのですが、おっさんはすぐにターミナルを開き\n<strong>\'package.json\'</strong> のあるディレクトリまで移動し</p>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>などします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。<br />\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。<br />\nまた、エラー確認のためエディタとターミナルを行ったりきたり。<br />\nショートカット使ったとしても・・・めんどくさい。<br />\nなのでこの一連のアクションはIDEAでやることにしました。<br />\n<strong>結果</strong><br />\nやっぱり楽になりました。　</p>\n<h2>npm 設定手順</h2>\n<p><strong>環境</strong>      </p>\n<ul>\n<li>MAC       </li>\n<li>node.jsがインストール済み</li>\n<li>Intellij IDEA (Phpstorm,Webstormなど)</li>\n</ul>\n<hr />\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>\'cmd\' + \'f\' を押下しnpmを検索</li>\n<li>Preferences | Languages &amp; Frameworks | Node.js and NPM へ進む</li>\n<li>\'node\',\'npm\'のPathを設定</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png\" alt=\"\" /></p>\n<p>Projct tool window の \'package.json\' を右クリック。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png\" alt=\"\" /></p>\n<p>\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png\" alt=\"\" /></p>\n<p>ここには \'Package.json\' のScripts内のコマンドがリストされます。<br />\n実行したいScript名を右クリックして実行です。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png\" alt=\"\" /></p>\n<h2>Npm window を開くためのショートカット</h2>\n<p>マウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       </p>\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>Preferences | Keymap へ進む。</li>\n<li>\'npm\'で検索し ショートカットキーを割り当てる        </li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png\" alt=\"\" /> </p>\n<p>これでだいぶん楽になる。</p>\n<h2>IDEA 「なんでも検索」 を使う</h2>\n<p>それでも<span class=\"under_line\">めんどくさい</span>という場合、\n&quot;ただただ、\'npm run watch\' を走らせたいんだ&quot; という場合はIDEAの超便利機能\n「なんでも検索」の出番です。</p>\n<ol>\n<li>\'Shift\' x 2 （連打) で「なんでも検索」</li>\n<li>\'watch\' をタイプ、&quot;Run \'watch\' npm script&quot; が出てくるのでEnter。</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png\" alt=\"\" />       </p>\n<p>実行後はこんな感じです。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png\" alt=\"\" /></p>\n<p>IDEAの「なんでも検索」はほんとすごい。快適です。</p>','Intellij idea から npm を操作','\'npm run watch\'　などはターミナルを開いて実行してましたが地味に<span class=\"under_line\">めんどくさい</span>のでIDEA側で操作するようにした。','inherit','closed','closed','','259-revision-v1','','','2019-09-23 19:52:26','2019-09-23 10:52:26','昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。      \r\n\'gulp\' や\'webpack\' などのツールを使うことが多いでしょう。      \r\n最近は \'webpack\' が主流のようです。\r\nBootstrapもVersion4よりSassが採用されました。       \r\n\'webpack\'はGit同様必須となりそうです。\r\n\r\n## Wordpressのテーマ UnderstrapのPackage.json\r\nUnderstrapのSassで例えると、\r\n```source\r\n{\r\n  &quot;name&quot;: &quot;understrap-child&quot;,\r\n  &quot;version&quot;: &quot;0.5.5&quot;,\r\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\r\n  &quot;main&quot;: &quot;index.js&quot;,\r\n  &quot;scripts&quot;: {\r\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\r\n    &quot;watch&quot;: &quot;gulp watch&quot;,\r\n    &quot;sass&quot;: &quot;gulp sass&quot;\r\n  },\r\n...\r\n...\r\n...\r\n...\r\n...\r\n\r\n```\r\nこの \"scripts\" の内容を実行するのですが、おっさんはすぐにターミナルを開き\r\n__\'package.json\'__ のあるディレクトリまで移動し\r\n\r\n```bash\r\nnpm run watch\r\n```\r\n\r\nなどします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。      \r\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。     \r\nまた、エラー確認のためエディタとターミナルを行ったりきたり。     \r\nショートカット使ったとしても・・・めんどくさい。        \r\nなのでこの一連のアクションはIDEAでやることにしました。       \r\n__結果__      \r\nやっぱり楽になりました。　\r\n\r\n## npm 設定手順\r\n__環境__      \r\n- MAC       \r\n- node.jsがインストール済み\r\n- Intellij IDEA (Phpstorm,Webstormなど)\r\n\r\n--------\r\n\r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. \'cmd\' + \'f\' を押下しnpmを検索\r\n3. Preferences | Languages & Frameworks | Node.js and NPM へ進む\r\n4. \'node\',\'npm\'のPathを設定\r\n \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png)\r\n\r\nProjct tool window の \'package.json\' を右クリック。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png)\r\n\r\n\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png)\r\n\r\nここには \'Package.json\' のScripts内のコマンドがリストされます。     \r\n実行したいScript名を右クリックして実行です。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png)\r\n\r\n## Npm window を開くためのショートカット\r\nマウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       \r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. Preferences | Keymap へ進む。\r\n3. \'npm\'で検索し ショートカットキーを割り当てる        \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png) \r\n\r\n\r\nこれでだいぶん楽になる。\r\n\r\n\r\n## IDEA 「なんでも検索」 を使う\r\nそれでも<span class=\"under_line\">めんどくさい</span>という場合、\r\n\"ただただ、\'npm run watch\' を走らせたいんだ\" という場合はIDEAの超便利機能\r\n「なんでも検索」の出番です。\r\n\r\n1. \'Shift\' x 2 （連打) で「なんでも検索」\r\n2. \'watch\' をタイプ、\"Run \'watch\' npm script\" が出てくるのでEnter。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png)       \r\n\r\n\r\n実行後はこんな感じです。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png)\r\n\r\nIDEAの「なんでも検索」はほんとすごい。快適です。\r\n\r\n\r\n',259,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/259-revision-v1/',0,'revision','',0),(321,1,'2019-09-23 19:54:47','2019-09-23 10:54:47','<h2>VPNとは</h2>\n<p><strong>Virtual Private Network</strong></p>\n<ul>\n<li>通信を暗号化して盗聴を防ぐ</li>\n<li>IPアドレスの隠蔽(いい意味で)</li>\n<li>固定IPで通信</li>\n</ul>\n<p>などのメリットがあります。</p>\n<h3>外出先で・・・</h3>\n<ul>\n<li>外出先、打ち合わせ先でみてもらいたいデータがあるが手元にない。</li>\n<li>社にとりにもどるのも<span class=\"under_line\">めんどくさい</span>・・社に電話してわざわざメールなどで送ってもらうのも・・・</li>\n</ul>\n<p>VPNを設置すればいつでも社内ネットワークにセキュア(暗号化)に接続可能です。\n打ち合わせ等外出が多い方、営業マンの方にもおすすめです。</p>\n<h3>海外で・・・</h3>\n<ul>\n<li>国外で通常通りの作業をしようとするも「この国からはお繋ぎできません」と接続できない</li>\n</ul>\n<p>VPN通信はアクセス元IPアドレスがVPNサーバーのIPアドレスとすることができます。(いい意味での隠蔽)\nVPNを通せば世界中どこにいても日本国内からの通信ができます。\n海外渡航が多い方には重宝するでしょう。(特にネットの規制が厳しい国)</p>\n<h3>スマホなどのデザリング・・・</h3>\n<ul>\n<li>外出先などデザリングで機密データを送受信したいがセキュリティーが心配</li>\n<li>FreeWiFiを使うには抵抗がある</li>\n</ul>\n<p>FreeWiFIを利用してもVPNの接続を施していれば盗聴される心配はありません。\n盗聴されても暗号化されているので解読不能です。</p>\n<h3>固定IPアドレスにしてくださいと言われたが・・・</h3>\n<ul>\n<li>ネットショップの管理画面はIP制限されるため固定IPが必要だがプロバイダーへの依頼は高額</li>\n<li>子育てのため自宅作業したいがIP制限でつながらない</li>\n<li>引っ越しなどでIPが変わると全て再設定が<span class=\"under_line\">めんどくさい</span>。</li>\n</ul>\n<p>外部にVPNを所有していればIPアドレスは不変です。\n特にネットショップ運営、WEB開発の現場に導入すればメリット大です。</p>\n<h2>VPN を導入するには</h2>\n<h3>既存のサービスを申し込む</h3>\n<p><a href=\"https://www.interlink.or.jp/\">マイIP</a>というサービスがあります。当方も利用しておりました。\n月額1000くらいで問題なく利用できてました。\nネットでは 「速度が出ない」という評価もありますがそうは思いませんでした。\n手っ取り早く導入したい時に有力です。\nただ1アカウント1接続なのでアカウントの使い回しは無理です。\nスタッフ全員で利用したい場合は人数分契約する必要があります。</p>\n<h3>VPNサーバーを自前で準備</h3>\n<p>当方現在自前でVPNを構築してます。\n月額500円の VPS (virtual private server )に <strong>SoftEther VPN</strong> をインストールしてVPN環境を構築しました。\n初期構築費はさておき月額のランニングコストはマイIPの半分です。\nアカウント数も無制限です。\nスタッフ全員に固定IPが必要な場合はとても有力な選択肢です。</p>','VPN導入でいつでもどこでも固定IP','固定IPを導入しよう。','inherit','closed','closed','','245-revision-v1','','','2019-09-23 19:54:47','2019-09-23 10:54:47','## VPNとは\r\n**Virtual Private Network**\r\n\r\n- 通信を暗号化して盗聴を防ぐ\r\n- IPアドレスの隠蔽(いい意味で)\r\n- 固定IPで通信\r\n\r\nなどのメリットがあります。\r\n\r\n### 外出先で・・・\r\n- 外出先、打ち合わせ先でみてもらいたいデータがあるが手元にない。\r\n- 社にとりにもどるのも<span class=\"under_line\">めんどくさい</span>・・社に電話してわざわざメールなどで送ってもらうのも・・・\r\n\r\nVPNを設置すればいつでも社内ネットワークにセキュア(暗号化)に接続可能です。\r\n打ち合わせ等外出が多い方、営業マンの方にもおすすめです。\r\n\r\n### 海外で・・・\r\n- 国外で通常通りの作業をしようとするも「この国からはお繋ぎできません」と接続できない\r\n\r\nVPN通信はアクセス元IPアドレスがVPNサーバーのIPアドレスとすることができます。(いい意味での隠蔽)\r\nVPNを通せば世界中どこにいても日本国内からの通信ができます。\r\n海外渡航が多い方には重宝するでしょう。(特にネットの規制が厳しい国)\r\n\r\n### スマホなどのデザリング・・・\r\n- 外出先などデザリングで機密データを送受信したいがセキュリティーが心配\r\n- FreeWiFiを使うには抵抗がある\r\n\r\nFreeWiFIを利用してもVPNの接続を施していれば盗聴される心配はありません。\r\n盗聴されても暗号化されているので解読不能です。\r\n\r\n### 固定IPアドレスにしてくださいと言われたが・・・\r\n- ネットショップの管理画面はIP制限されるため固定IPが必要だがプロバイダーへの依頼は高額\r\n- 子育てのため自宅作業したいがIP制限でつながらない\r\n- 引っ越しなどでIPが変わると全て再設定が<span class=\"under_line\">めんどくさい</span>。\r\n\r\n外部にVPNを所有していればIPアドレスは不変です。\r\n特にネットショップ運営、WEB開発の現場に導入すればメリット大です。\r\n\r\n## VPN を導入するには\r\n\r\n### 既存のサービスを申し込む\r\n[マイIP](https://www.interlink.or.jp/)というサービスがあります。当方も利用しておりました。\r\n月額1000くらいで問題なく利用できてました。\r\nネットでは 「速度が出ない」という評価もありますがそうは思いませんでした。\r\n手っ取り早く導入したい時に有力です。\r\nただ1アカウント1接続なのでアカウントの使い回しは無理です。\r\nスタッフ全員で利用したい場合は人数分契約する必要があります。\r\n\r\n### VPNサーバーを自前で準備\r\n当方現在自前でVPNを構築してます。\r\n月額500円の VPS (virtual private server )に **SoftEther VPN** をインストールしてVPN環境を構築しました。\r\n初期構築費はさておき月額のランニングコストはマイIPの半分です。\r\nアカウント数も無制限です。\r\nスタッフ全員に固定IPが必要な場合はとても有力な選択肢です。\r\n\r\n',245,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/245-revision-v1/',0,'revision','',0),(322,1,'2019-09-23 19:56:15','2019-09-23 10:56:15','<h2>VPNとは</h2>\n<p><strong>Virtual Private Network</strong></p>\n<ul>\n<li>通信を暗号化して盗聴を防ぐ</li>\n<li>IPアドレスの隠蔽(いい意味で)</li>\n<li>固定IPで通信</li>\n</ul>\n<p>などのメリットがあります。</p>\n<h3>外出先で・・・</h3>\n<ul>\n<li>外出先、打ち合わせ先でみてもらいたいデータがあるが手元にない。</li>\n<li>社にとりにもどるのも<span class=\"under_line\">めんどくさい</span>・・社に電話してわざわざメールなどで送ってもらうのも・・・</li>\n</ul>\n<p>VPNを設置すればいつでも社内ネットワークにセキュア(暗号化)に接続可能です。\n打ち合わせ等外出が多い方、営業マンの方にもおすすめです。</p>\n<h3>海外で・・・</h3>\n<ul>\n<li>国外で通常通りの作業をしようとするも「この国からはお繋ぎできません」と接続できない</li>\n</ul>\n<p>VPN通信はアクセス元IPアドレスがVPNサーバーのIPアドレスとすることができます。(いい意味での隠蔽)\nVPNを通せば世界中どこにいても日本国内からの通信ができます。\n海外渡航が多い方には重宝するでしょう。(特にネットの規制が厳しい国)</p>\n<h3>スマホなどのデザリング・・・</h3>\n<ul>\n<li>外出先などデザリングで機密データを送受信したいがセキュリティーが心配</li>\n<li>FreeWiFiを使うには抵抗がある</li>\n</ul>\n<p>FreeWiFIを利用してもVPNの接続を施していれば盗聴される心配はありません。\n盗聴されても暗号化されているので解読不能です。</p>\n<h3>固定IPアドレスにしてくださいと言われたが・・・</h3>\n<ul>\n<li>ネットショップの管理画面はIP制限されるため固定IPが必要だがプロバイダーへの依頼は高額</li>\n<li>子育てのため自宅作業したいがIP制限でつながらない</li>\n<li>引っ越しなどでIPが変わると全て再設定が<span class=\"under_line\">めんどくさい</span>。</li>\n</ul>\n<p>外部にVPNを所有していればIPアドレスは不変です。\n特にネットショップ運営、WEB開発の現場に導入すればメリット大です。</p>\n<h2>VPN を導入するには</h2>\n<h3>既存のサービスを申し込む</h3>\n<p><a href=\"https://www.interlink.or.jp/\">マイIP</a>というサービスがあります。当方も利用しておりました。\n月額1000くらいで問題なく利用できてました。\nネットでは 「速度が出ない」という評価もありますがそうは思いませんでした。\n手っ取り早く導入したい時に有力です。\nただ1アカウント1接続なのでアカウントの使い回しは無理です。\nスタッフ全員で利用したい場合は人数分契約する必要があります。</p>\n<h3>VPNサーバーを自前で準備</h3>\n<p>当方現在自前でVPNを構築してます。\n月額500円の VPS (virtual private server )に <strong>SoftEther VPN</strong> をインストールしてVPN環境を構築しました。\n初期構築費はさておき月額のランニングコストはマイIPの半分です。\nアカウント数も無制限です。\nスタッフ全員に固定IPが必要な場合はとても有力な選択肢です。</p>','VPN導入でいつでもどこでも固定IP','VPN,固定IPはメリットがいっぱい。','inherit','closed','closed','','245-revision-v1','','','2019-09-23 19:56:15','2019-09-23 10:56:15','## VPNとは\r\n**Virtual Private Network**\r\n\r\n- 通信を暗号化して盗聴を防ぐ\r\n- IPアドレスの隠蔽(いい意味で)\r\n- 固定IPで通信\r\n\r\nなどのメリットがあります。\r\n\r\n### 外出先で・・・\r\n- 外出先、打ち合わせ先でみてもらいたいデータがあるが手元にない。\r\n- 社にとりにもどるのも<span class=\"under_line\">めんどくさい</span>・・社に電話してわざわざメールなどで送ってもらうのも・・・\r\n\r\nVPNを設置すればいつでも社内ネットワークにセキュア(暗号化)に接続可能です。\r\n打ち合わせ等外出が多い方、営業マンの方にもおすすめです。\r\n\r\n### 海外で・・・\r\n- 国外で通常通りの作業をしようとするも「この国からはお繋ぎできません」と接続できない\r\n\r\nVPN通信はアクセス元IPアドレスがVPNサーバーのIPアドレスとすることができます。(いい意味での隠蔽)\r\nVPNを通せば世界中どこにいても日本国内からの通信ができます。\r\n海外渡航が多い方には重宝するでしょう。(特にネットの規制が厳しい国)\r\n\r\n### スマホなどのデザリング・・・\r\n- 外出先などデザリングで機密データを送受信したいがセキュリティーが心配\r\n- FreeWiFiを使うには抵抗がある\r\n\r\nFreeWiFIを利用してもVPNの接続を施していれば盗聴される心配はありません。\r\n盗聴されても暗号化されているので解読不能です。\r\n\r\n### 固定IPアドレスにしてくださいと言われたが・・・\r\n- ネットショップの管理画面はIP制限されるため固定IPが必要だがプロバイダーへの依頼は高額\r\n- 子育てのため自宅作業したいがIP制限でつながらない\r\n- 引っ越しなどでIPが変わると全て再設定が<span class=\"under_line\">めんどくさい</span>。\r\n\r\n外部にVPNを所有していればIPアドレスは不変です。\r\n特にネットショップ運営、WEB開発の現場に導入すればメリット大です。\r\n\r\n## VPN を導入するには\r\n\r\n### 既存のサービスを申し込む\r\n[マイIP](https://www.interlink.or.jp/)というサービスがあります。当方も利用しておりました。\r\n月額1000くらいで問題なく利用できてました。\r\nネットでは 「速度が出ない」という評価もありますがそうは思いませんでした。\r\n手っ取り早く導入したい時に有力です。\r\nただ1アカウント1接続なのでアカウントの使い回しは無理です。\r\nスタッフ全員で利用したい場合は人数分契約する必要があります。\r\n\r\n### VPNサーバーを自前で準備\r\n当方現在自前でVPNを構築してます。\r\n月額500円の VPS (virtual private server )に **SoftEther VPN** をインストールしてVPN環境を構築しました。\r\n初期構築費はさておき月額のランニングコストはマイIPの半分です。\r\nアカウント数も無制限です。\r\nスタッフ全員に固定IPが必要な場合はとても有力な選択肢です。\r\n\r\n',245,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/245-revision-v1/',0,'revision','',0),(323,1,'2019-09-23 19:59:35','2019-09-23 10:59:35','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なしだい、.gitだのnode_modulesを除外するなど<span class=\"under_line\">めんどくさい</span>。<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug     </p>\n<p><strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy       </p>\n<p><strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Servers      </p>\n<p>name : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nphpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code class=\"language-bash\">[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code class=\"language-bash\">nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong> 上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ大満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-23 19:59:35','2019-09-23 10:59:35','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なしだい、.gitだのnode_modulesを除外するなど<span class=\"under_line\">めんどくさい</span>。     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug     \r\n\r\n  __xdebugのportを9001に変更__  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n\r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\nIDEA設定        \r\nPreferences | Languages & Frameworks | PHP | Servers      \r\n\r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\nIDEA設定      \r\nphpdebug を ON     \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```bash\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```bash\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__ 上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ大満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(324,1,'2019-09-23 20:00:01','2019-09-23 11:00:01','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。<br />\nページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なしだし、.gitだのnode_modulesを除外するなど<span class=\"under_line\">めんどくさい</span>。<br />\nとてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。<br />\nとはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug     </p>\n<p><strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy       </p>\n<p><strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Servers      </p>\n<p>name : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nphpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code class=\"language-bash\">[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code class=\"language-bash\">nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong> 上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ大満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-23 20:00:01','2019-09-23 11:00:01','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なしだし、.gitだのnode_modulesを除外するなど<span class=\"under_line\">めんどくさい</span>。     \r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug     \r\n\r\n  __xdebugのportを9001に変更__  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n\r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\nIDEA設定        \r\nPreferences | Languages & Frameworks | PHP | Servers      \r\n\r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\nIDEA設定      \r\nphpdebug を ON     \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```bash\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```bash\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__ 上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ大満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(325,1,'2019-09-23 20:00:26','2019-09-23 11:00:26','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。   </p>\n<p>ページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なしだし、.gitだのnode_modulesを除外するなど<span class=\"under_line\">めんどくさい</span>。     </p>\n<p>とてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。       </p>\n<p>とはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug     </p>\n<p><strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy       </p>\n<p><strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Servers      </p>\n<p>name : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nphpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code class=\"language-bash\">[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code class=\"language-bash\">nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong> 上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ大満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-23 20:00:26','2019-09-23 11:00:26','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\n\r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なしだし、.gitだのnode_modulesを除外するなど<span class=\"under_line\">めんどくさい</span>。     \r\n\r\n\r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\n\r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__\r\nでIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug     \r\n\r\n  __xdebugのportを9001に変更__  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n\r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\nIDEA設定        \r\nPreferences | Languages & Frameworks | PHP | Servers      \r\n\r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\nIDEA設定      \r\nphpdebug を ON     \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```bash\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```bash\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__ 上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ大満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(326,1,'2019-09-23 20:00:59','2019-09-23 11:00:59','<h2>なぜDocker on Vagrant?</h2>\n<p>おとなしく <strong>Docker for Mac</strong> 使えばいいんじゃない？<br />\nそうなんです。その通りなんです。 <strong>Docker</strong> 自体 <strong>Vagrant</strong>\nを挟んで使う想定でつくられてないし。<br />\nでも、ただただ <strong>遅い</strong> んです。   </p>\n<p>ページのリロードに数秒〜十数秒かかるんです。<br />\n解決策として <strong>docker-sync</strong> なるものもあるけどさほど変化なしだし、.gitだのnode_modulesを除外するなど<span class=\"under_line\">めんどくさい</span>。     </p>\n<p>とてもじゃないけど開発環境とは言えないんです。(当環境では）<br />\nストレスだし思考は止まるしイライラするし。       </p>\n<p>とはいえ、 <strong>Docker</strong> を使わないというわけにはいかない。<br />\nなのでオレオレ <strong>Docker on Vagrant</strong>でIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。</p>\n<p>結果 : 今の所やってよかった。</p>\n<ul>\n<li><strong>Docker on Vagrant</strong> 用の <strong>Vagrant</strong> を用意</li>\n<li>テストして <strong>Docker</strong> 上にLaravelを設置 </li>\n<li>xdebugをインストールして リモートデバッグ</li>\n<li><strong>Vagrant</strong> 越しでphpunitを実行 (ココで詰まった、救世主がいた！)</li>\n</ul>\n<h3>Docker on Vagrant を用意</h3>\n<p>手前味噌の記事 <a href=\"https://blog.webdimension.jp/linux/vagrant-template-centos7/\">汎用的なVagrant( CentOS7 )</a>\nの<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>を元に <strong>provisioning</strong> の際に <strong>Docker</strong>　インストールを追記しました。<br />\n<a href=\"https://github.com/WEBDIMENSION/docker-on-vagrant\">Source</a></p>\n<p>追記分 ( CircleCIはお好みで )</p>\n<pre><code class=\"language-bash\">## Docker sudo yum remove -y docker docker-common docker-selinux\n##  Docker\nsudo yum remove -y docker docker-common docker-selinux docker-engine\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum makecache fast\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\nsudo yum remove -y docker-ce\nsudo yum install -y docker-ce\nsudo systemctl start docker\nsudo systemctl enable docker\nsudo groupadd docker\nsudo usermod -aG docker $USER\n\n## docker-composer\n FILE=&quot;/usr/local/bin/docker-compose&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE} /usr/bin/docker-compose\n   fi\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\nsudo chmod +x ${FILE}\nsudo ln -s ${FILE} /usr/bin/docker-compose\n\n# circleci-local\n FILE=&quot;/usr/local/bin/circleci&quot;\n   if [ -e ${FILE} ]; then\n     sudo rm  ${FILE}\n   fi\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci</code></pre>\n<h3>テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置</h3>\n<p>ここではDockerの設定等は省きます。<br />\n<strong>ハマりポイント</strong><br />\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\nホスト側から      </p>\n<pre><code class=\"language-bash\">$ chmod 777 data_dir</code></pre>\n<p>などでなんとか逃げる。(最初の一度だけで大丈夫)</p>\n<h3>xdebugをインストールして リモートデバッグ</h3>\n<p>phpビルド時にxdebugをインストール<br />\nDockerfileに追記       </p>\n<pre><code class=\"language-bash\"># xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug</code></pre>\n<p>xdebug用php.ini (port:9001に設定)</p>\n<pre><code class=\"language-bash\">[xdebug]\nxdebug.remote_enable=1\nxdebug.remote_autostart=1\nxdebug.remote_connect_back = 1\nxdebug.remote_port=9001\nxdebug.remote_log=/tmp/xdebug.log\nxdebug.idekey=&quot;xdebug&quot; </code></pre>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug     </p>\n<p><strong>xdebugのportを9001に変更</strong>  </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Debug | DBGp Proxy       </p>\n<p><strong>port</strong>を9001に変更<br />\nIDE key は php.ini上のxdebug.idekey<br />\nHost は LaravelへのドメインやIP       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Servers      </p>\n<p>name : 自由な名前<br />\nHost:プロジェクトのドメイン or IP<br />\nUse path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png\" alt=\"\" /></p>\n<p>IDEA設定<br />\nphpdebug を ON     </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png\" alt=\"\" /></p>\n<p>適当にブレークポイントを設定 (例えばindex.phpのどこか)<br />\nブラウザでTopPageなどを表示<br />\n設定に間違いがなければブレークポイントで止まるでしょう。</p>\n<h2>Vagrant越しでphpunitを実行</h2>\n<p><strong>ここでハマった・・・</strong><br />\nIDEAにDockerプラグイン導入は必須です。<br />\nIDEAから <strong>phpunit</strong> を実行するには <strong>phpcli intepriter</strong> の設定が必要です。</p>\n<p>IDEA設定<br />\nPreferences | Build, Execution, Deployment | Docker<br />\nでDockerとの接続を設定するのですが今回は <strong>Docker for Mac</strong> でもないし\n<strong>Docier Machine</strong> でもない。 気になるのは <strong>TCP Socket</strong>      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png\" alt=\"\" /></p>\n<p>&quot;Docker tcp socket&quot; で検索するとどうやら <strong>2376</strong>\nのPortを使うらしい。ということで <strong>TCP Socket</strong> に .<br />\nVagrantのip:2376 （例 192.168.33.11:2376 ）<br />\nで接続を試みるも繋がらず・・・<br />\n画像はわざとエラーを出すためにIPを変えてます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png\" alt=\"\" /></p>\n<p>そんな諦めかけた時に救世主現る！<br />\n<a href=\"https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71\">PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\nInterpreterにremote dockerのPythonを使う</a><br />\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。</p>\n<p>Vagrant上にて          </p>\n<pre><code class=\"language-bash\">$ sudo mkdir /etc/systemd/system/docker.service.d/\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf</code></pre>\n<p>以下を記述           </p>\n<pre><code class=\"language-bash\">[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376</code></pre>\n<pre><code class=\"language-bash\"># systemd  restart\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker.service</code></pre>\n<pre><code class=\"language-bash\">$ service docker status\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功</code></pre>\n<p>Nmapで確認してみる         </p>\n<pre><code class=\"language-bash\">nmap 192.168.33.50 -p 2376\n\nPORT     STATE SERVICE\n2376/tcp open  docker</code></pre>\n<p>Open、オープン、<strong>おーーーぷん!</strong> (手応えあり　喜)<br />\nさっきまでは <strong>filtered</strong> だった。再接続を試みる。      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png\" alt=\"\" /></p>\n<p>Success, サクセス、 <strong>さーーーくせす</strong> (勝利の予感 わくわくしてくる)<br />\n次に <strong>intepriter</strong> を設定します。<br />\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png\" alt=\"\" /></p>\n<p>間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\nIDEA設定<br />\nPreferences | Languages &amp; Frameworks | PHP | Test Frameworks<br />\nTest Frameworksに <strong>intepriter</strong> を登録します。<br />\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。<br />\nDocker側のマウントと同様にdocker container: の項目で設定します。\n通常は /home/vagrant/xxxxxx というようなpathになります。\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\nphpunit.xml は　Laravel/phpunit.xml　になります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png\" alt=\"\" /></p>\n<p>メニューから Run -&gt; Edit configureations と進み + をクリック　phpunitを登録   </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png\" alt=\"\" /></p>\n<p>unittestを実行してみる。         </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png\" alt=\"\" /></p>\n<p>なんとかunittestが通りました。     </p>\n<p>これで <strong>Docker on Vagrant</strong> でもいつもと同じように作業ができます。<br />\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)<br />\nなによりもレスポンスに満足です。\n<strong>Vagrant</strong> 上にLAMP環境作って作業するのと体感的にはかわりません。<br />\n今のところ大満足。。。</p>','Docker on Vagrant をがんばってみた','Docker for Mac のレスポンスに納得いかず、Vagrant上にDockerを作ってみた。リモートデバッグ、phpunit実行まで。','inherit','closed','closed','','164-revision-v1','','','2019-09-23 20:00:59','2019-09-23 11:00:59','##  なぜDocker on Vagrant?\r\nおとなしく __Docker for Mac__ 使えばいいんじゃない？      \r\nそうなんです。その通りなんです。 __Docker__ 自体 __Vagrant__\r\nを挟んで使う想定でつくられてないし。      \r\nでも、ただただ __遅い__ んです。   \r\n\r\nページのリロードに数秒〜十数秒かかるんです。      \r\n解決策として __docker-sync__ なるものもあるけどさほど変化なしだし、.gitだのnode_modulesを除外するなど<span class=\"under_line\">めんどくさい</span>。     \r\n\r\n\r\nとてもじゃないけど開発環境とは言えないんです。(当環境では）      \r\nストレスだし思考は止まるしイライラするし。       \r\n\r\nとはいえ、 __Docker__ を使わないというわけにはいかない。       \r\nなのでオレオレ __Docker on Vagrant__でIDEA(PhpStormなど)でリモートデバッグ、phpunit実行(IDEA使用)までをやってみた。\r\n\r\n\r\n結果 : 今の所やってよかった。\r\n\r\n- __Docker on Vagrant__ 用の __Vagrant__ を用意\r\n- テストして __Docker__ 上にLaravelを設置 \r\n- xdebugをインストールして リモートデバッグ\r\n- __Vagrant__ 越しでphpunitを実行 (ココで詰まった、救世主がいた！)\r\n\r\n### Docker on Vagrant を用意\r\n手前味噌の記事 [汎用的なVagrant( CentOS7 )](https://blog.webdimension.jp/linux/vagrant-template-centos7/)\r\nの[Source](https://github.com/WEBDIMENSION/vagrant-centos7)を元に __provisioning__ の際に __Docker__　インストールを追記しました。      \r\n[Source](https://github.com/WEBDIMENSION/docker-on-vagrant)\r\n    \r\n追記分 ( CircleCIはお好みで )\r\n```bash\r\n## Docker sudo yum remove -y docker docker-common docker-selinux\r\n##  Docker\r\nsudo yum remove -y docker docker-common docker-selinux docker-engine\r\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\r\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\nsudo yum makecache fast\r\n# sudo yum list docker-ce.x86_64 --showduplicates | sort -r\r\nsudo yum remove -y docker-ce\r\nsudo yum install -y docker-ce\r\nsudo systemctl start docker\r\nsudo systemctl enable docker\r\nsudo groupadd docker\r\nsudo usermod -aG docker $USER\r\n\r\n## docker-composer\r\n FILE=&quot;/usr/local/bin/docker-compose&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE} /usr/bin/docker-compose\r\n   fi\r\nsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o ${FILE}\r\nsudo chmod +x ${FILE}\r\nsudo ln -s ${FILE} /usr/bin/docker-compose\r\n\r\n# circleci-local\r\n FILE=&quot;/usr/local/bin/circleci&quot;\r\n   if [ -e ${FILE} ]; then\r\n     sudo rm  ${FILE}\r\n   fi\r\nsudo curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci &amp;&amp; sudo chmod +x /usr/local/bin/circleci\r\n```\r\n \r\n### テストしてDocker上にLaravelを設置テストしてDockerにLaravelを設置\r\nここではDockerの設定等は省きます。        \r\n__ハマりポイント__         \r\nMySQLやRedisのデータディレクトリをマウントした際(永続化)にパーミッションエラーがでる。\r\nホスト側から      \r\n```bash\r\n$ chmod 777 data_dir\r\n```\r\nなどでなんとか逃げる。(最初の一度だけで大丈夫)\r\n\r\n\r\n\r\n    \r\n###  xdebugをインストールして リモートデバッグ\r\nphpビルド時にxdebugをインストール       \r\nDockerfileに追記       \r\n```bash\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n```\r\n\r\nxdebug用php.ini (port:9001に設定)\r\n```bash\r\n[xdebug]\r\nxdebug.remote_enable=1\r\nxdebug.remote_autostart=1\r\nxdebug.remote_connect_back = 1\r\nxdebug.remote_port=9001\r\nxdebug.remote_log=/tmp/xdebug.log\r\nxdebug.idekey=&quot;xdebug&quot; \r\n```\r\n\r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug     \r\n\r\n  __xdebugのportを9001に変更__  \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.42.png)\r\n  \r\nIDEA設定      \r\nPreferences | Languages & Frameworks | PHP | Debug | DBGp Proxy       \r\n\r\n  __port__を9001に変更      \r\n  IDE key は php.ini上のxdebug.idekey      \r\n  Host は LaravelへのドメインやIP       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.07.11.png)\r\n  \r\nIDEA設定        \r\nPreferences | Languages & Frameworks | PHP | Servers      \r\n\r\n  name : 自由な名前         \r\n  Host:プロジェクトのドメイン or IP        \r\n  Use path mappings チェックする。 ローカルのパスとサーバー上のパスを合わせる       \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.06.26.png)\r\n  \r\nIDEA設定      \r\nphpdebug を ON     \r\n  \r\n  ![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.13.56.png)\r\n  \r\n  \r\n  適当にブレークポイントを設定 (例えばindex.phpのどこか)     \r\n  ブラウザでTopPageなどを表示       \r\n  設定に間違いがなければブレークポイントで止まるでしょう。\r\n  \r\n  \r\n## Vagrant越しでphpunitを実行    \r\n__ここでハマった・・・__      \r\nIDEAにDockerプラグイン導入は必須です。      \r\nIDEAから __phpunit__ を実行するには __phpcli intepriter__ の設定が必要です。\r\n\r\nIDEA設定       \r\nPreferences | Build, Execution, Deployment | Docker     \r\nでDockerとの接続を設定するのですが今回は __Docker for Mac__ でもないし\r\n__Docier Machine__ でもない。 気になるのは __TCP Socket__      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.37.54.png)\r\n\r\n\r\n\"Docker tcp socket\" で検索するとどうやら __2376__\r\nのPortを使うらしい。ということで __TCP Socket__ に .       \r\nVagrantのip:2376 （例 192.168.33.11:2376 ）        \r\nで接続を試みるも繋がらず・・・         \r\n画像はわざとエラーを出すためにIPを変えてます。\r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.40.06.png)\r\n\r\n\r\nそんな諦めかけた時に救世主現る！        \r\n[PyCharmのProject Interpreterにremote dockerのPythonを使うPyCharmのProject\r\nInterpreterにremote dockerのPythonを使う](https://qiita.com/wwacky/items/49d1a6239cd24bd12e71https://qiita.com/wwacky/items/49d1a6239cd24bd12e71)         \r\nPython記事ですがやりたいことはまさにこれでした。 ここの記事を実施。\r\n\r\nVagrant上にて          \r\n```bash\r\n$ sudo mkdir /etc/systemd/system/docker.service.d/\r\n$ sudo vim /etc/systemd/system/docker.service.d/startup_options.conf\r\n```\r\n\r\n以下を記述           \r\n```bash\r\n[Service]\r\nExecStart=\r\nExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376\r\n```\r\n\r\n```bash\r\n# systemd  restart\r\n$ sudo systemctl daemon-reload\r\n$ sudo systemctl restart docker.service\r\n```\r\n\r\n```bash\r\n$ service docker status\r\n# &quot;/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2376&quot; の表示があれば成功\r\n```\r\n\r\nNmapで確認してみる         \r\n```bash\r\nnmap 192.168.33.50 -p 2376\r\n\r\nPORT     STATE SERVICE\r\n2376/tcp open  docker\r\n```\r\nOpen、オープン、__おーーーぷん!__ (手応えあり　喜)     \r\nさっきまでは __filtered__ だった。再接続を試みる。      \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-16.55.01.png)\r\n\r\nSuccess, サクセス、 __さーーーくせす__ (勝利の予感 わくわくしてくる)         \r\n次に __intepriter__ を設定します。       \r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP      \r\n\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-19.05.13-1.png)\r\n\r\n間違いがなければ phpのバージョン、xdebugのバージョンが表示されます。\r\nIDEA設定       \r\nPreferences | Languages & Frameworks | PHP | Test Frameworks        \r\nTest Frameworksに __intepriter__ を登録します。       \r\nContainer path はDocker側、Host pathはこの場合Host側ではなくVagrant上のpathです。			\r\nDocker側のマウントと同様にdocker container: の項目で設定します。\r\n通常は /home/vagrant/xxxxxx というようなpathになります。\r\nLaravelのautoloaderは Laravel/vendor/autoload.php　になります。\r\nphpunit.xml は　Laravel/phpunit.xml　になります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.02.31-1.png)\r\n\r\n\r\nメニューから Run -> Edit configureations と進み + をクリック　phpunitを登録   \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-17.02.05.png)\r\n\r\nunittestを実行してみる。         \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-15-at-18.40.17.png)\r\n\r\n\r\nなんとかunittestが通りました。     \r\n\r\nこれで __Docker on Vagrant__ でもいつもと同じように作業ができます。   \r\nまた、付加価値としてMac側を汚さないというのもありますね。(ImageはすべてVagrant内)       \r\nなによりもレスポンスに満足です。\r\n__Vagrant__ 上にLAMP環境作って作業するのと体感的にはかわりません。       \r\n今のところ大満足。。。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n \r\n    \r\n',164,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/164-revision-v1/',0,'revision','',0),(327,1,'2019-09-23 20:07:42','2019-09-23 11:07:42','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nと<span class=\"under_line\">めんどくさい</span>ことになってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というのも<span class=\"under_line\">めんどくさい</span></p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nとなり、かなり<span class=\"under_line\">めんどくさい</span>なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるはめになる。ほんと<span class=\"under_line\">めんどくさい</span><br />\nGoogleなどは一度登録したパスワードは再生成できない。これがより記憶に混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>という当たり前の言葉だけでなくそんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターを買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。)</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>このままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\n待つのが<span class=\"under_line\">めんどくさい</span>ので現在接続中の端末に妨害電波でも送り接続を遮断させ、すぐに再接続しようとすると思うのでその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。\n法的にも<span class=\"under_line\">めんどくさい</span>ことなんでしょう。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を考える。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-09-23 20:07:42','2019-09-23 11:07:42','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nと<span class=\"under_line\">めんどくさい</span>ことになってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というのも<span class=\"under_line\">めんどくさい</span>\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nとなり、かなり<span class=\"under_line\">めんどくさい</span>なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるはめになる。ほんと<span class=\"under_line\">めんどくさい</span>        \r\nGoogleなどは一度登録したパスワードは再生成できない。これがより記憶に混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nという当たり前の言葉だけでなくそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターを買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。)\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nこのままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\n待つのが<span class=\"under_line\">めんどくさい</span>ので現在接続中の端末に妨害電波でも送り接続を遮断させ、すぐに再接続しようとすると思うのでその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n法的にも<span class=\"under_line\">めんどくさい</span>ことなんでしょう。\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(328,1,'2019-09-23 20:11:38','2019-09-23 11:11:38','<h2>おれおれVagrantfile</h2>\n<p>といっても特別なにかすごいことやってるわけでなく汎用的なテンプレートです。<br />\nDockerのようなコンテナ型ではなくガチのCentOS上で何か実験したい、遊びたい時などなど用途です。<br />\n毎回一から構築するのは<span class=\"under_line\">めんどくさい</span>ので VagrantのProvisioningで自動化します。</p>\n<p>VirtualBOx,Vagrantはインストール済み前提です。\n<a href=\"https://github.com/WEBDIMENSION/vagrant-centos7\">Source</a>       </p>\n<p>provision/provision/settings_local.yaml         </p>\n<pre><code class=\"language-bash\">vm:\n # Box名 なんでも可 \n boxName: &quot;centos7&quot;\n # 元となるboxのURL\n boxURL: &quot;https://vagrantcloud.com/centos/boxes/7/versions/1905.1/providers/virtualbox.box&quot;\n # IPアドレスを指定\n localIP: &quot;192.168.33.100&quot;\nsync:\n # 同期するディレクトリを配列で指定\n  dir:\n    - localPath: &quot;../../workspace/http_doc&quot;\n      vmPath: &quot;/var/www/html&quot;\n    - localPath: &quot;../../workspace/mysql&quot;\n      vmPath: &quot;/var/lib/mysql&quot;\ncopyFiles:\n # Vagrantへコピーしたいファイル配列で指定\n # localPathで指定したファイルがVagrant上 /vagrant/に　fileNameに指定した名前でコピーされる。\n # command: に記述したコマンドを実行される。\n # 下記ではHost側のssh-keyをVagrantへコピー。sshやgit cloneなどHost側と同じ設定で行える\n # sshを多様する場合は ~/.ssh/config をコピーしてもよいかも。\n\n  - fileName: &quot;id_rsa.pub&quot;\n    localPath: &quot;~/.ssh/id_rsa.pub&quot;\n    command: &quot;cat /vagrant/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; rm /vagrant/id_rsa.pub&quot;\n  - fileName: &quot;id_rsa&quot;\n    localPath: &quot;~/.ssh/id_rsa&quot;\n    command: &quot;cp /vagrant/id_rsa ~/.ssh/id_rsa &amp;&amp; rm /vagrant/id_rsa&quot;\n  - fileName: &quot;.bash_aliases&quot;\n    localPath: &quot;~/.bash_aliases&quot;\n    command: &quot;cp /vagrant/.bash_aliases ~/.bash_aliases &amp;&amp; rm /vagrant/.bash_aliases&quot;</code></pre>\n<p>Vagrantfile         </p>\n<pre><code class=\"language-bash\"># provision/settings-local.yml を load する\nrequire &#039;yaml&#039;\nsettings = YAML.load_file &#039;provision/settings_local.yaml&#039;\n\n# provision/settings-local.yml 内 copyFiles: をHost側の ~/vagrant/box名/ にコピーする。\n# ここに置かれたファイルはVagrant 立ち上げ時Vagrant側 /vagrant/へコピーされる \nsettings[&#039;copyFiles&#039;].each do |i|\n  system(&#039;cp &#039; + i[&#039;localPath&#039;] + &#039; &#039; + Dir.home + &#039;/vagrant/&#039; + settings[&#039;vm&#039;][&#039;boxName&#039;]+ &#039;/&#039; + i[&#039;fileName&#039;])\nend\n\n# provision/settings-local.yml 内の sync: の共有ディレクトリをマウント\n# マウントタイプは デフォルトの virtualbox にしてますが Mac の場合は nfs もあり。\n# nfs は早いがパーミッションにちょっと難あり? Win なら SMB?\nsettings[&#039;sync&#039;][&#039;dir&#039;].each do |i|\n  #config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;nfs&quot;, nfs_export: true\n  config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;virtualbox&quot;\n  end\n\n# provision.sh では wget git をインストール しています。\n  config.vm.provision :shell, :path =&gt; &quot;provision/provision.sh&quot;\n\n# privileged: false はroot権限でなく一般ユーザー権限で実行\n# ここでは bash_id, vim (lua,python3....)をインストール \n  config.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/privileged.sh&quot;\n\n# provision/settings-local.yml 内 copyFiles: のコマンド実行\n# run: &quot;always&quot; は Vagrant立ち上げ時 vagrant up --provision としなくても vagrant up でも実行される。\nsettings[&#039;copyFiles&#039;].each do |i|\n        $script = i[&#039;command&#039;]\n        config.vm.provision :shell, run: &quot;always&quot;, privileged: false, inline: $script\n    end\n\n# Vagrant側のHost名を設定 \n $host_script = &quot;hostnamectl set-hostname &quot; + settings[&#039;vm&#039;][&#039;hostName&#039;].to_s\n   config.vm.provision :shell, run: &quot;always&quot;, inline: $host_script\n\n# この場合は~/.ssh/configに\n# host *\n# 10     StrictHostKeyChecking no \n# を追記。ssh接続の際の確認メッセージを無視する。\n# vimrcをレポジトリからダウンロード をしてます。\nconfig.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/custom_after.sh&quot;\n</code></pre>\n<p>~/vagrant/box_name に配置。        </p>\n<pre><code class=\"language-bash\">$ cd ~/vagrant/box_name/      \n$ vagrant up      </code></pre>\n<p>でインストール開始。初回起動時はboxを生成するため時間がかかります。<br />\n壊れても </p>\n<pre><code class=\"language-bash\">$ vagrant up --provision</code></pre>\n<p>すれば再生成されます。(時間かかるけど...)</p>','汎用的なVagrant( CentOS7 )',' \' vagrant up\' ワンコマンドで Git, Vimをインストール。ホスと側ssh-keyをコピー、.vimrcを git cloneする。\'すぐに使える\'がテーマ。\r\n設定ファイルを外部ファイル化し使い回しも楽。 ','inherit','closed','closed','','154-revision-v1','','','2019-09-23 20:11:38','2019-09-23 11:11:38','## おれおれVagrantfile\r\nといっても特別なにかすごいことやってるわけでなく汎用的なテンプレートです。       \r\nDockerのようなコンテナ型ではなくガチのCentOS上で何か実験したい、遊びたい時などなど用途です。    \r\n毎回一から構築するのは<span class=\"under_line\">めんどくさい</span>ので VagrantのProvisioningで自動化します。\r\n\r\nVirtualBOx,Vagrantはインストール済み前提です。\r\n[Source](https://github.com/WEBDIMENSION/vagrant-centos7)       \r\n\r\n\r\nprovision/provision/settings_local.yaml         \r\n\r\n\r\n```bash\r\nvm:\r\n # Box名 なんでも可 \r\n boxName: &quot;centos7&quot;\r\n # 元となるboxのURL\r\n boxURL: &quot;https://vagrantcloud.com/centos/boxes/7/versions/1905.1/providers/virtualbox.box&quot;\r\n # IPアドレスを指定\r\n localIP: &quot;192.168.33.100&quot;\r\nsync:\r\n # 同期するディレクトリを配列で指定\r\n  dir:\r\n    - localPath: &quot;../../workspace/http_doc&quot;\r\n      vmPath: &quot;/var/www/html&quot;\r\n    - localPath: &quot;../../workspace/mysql&quot;\r\n      vmPath: &quot;/var/lib/mysql&quot;\r\ncopyFiles:\r\n # Vagrantへコピーしたいファイル配列で指定\r\n # localPathで指定したファイルがVagrant上 /vagrant/に　fileNameに指定した名前でコピーされる。\r\n # command: に記述したコマンドを実行される。\r\n # 下記ではHost側のssh-keyをVagrantへコピー。sshやgit cloneなどHost側と同じ設定で行える\r\n # sshを多様する場合は ~/.ssh/config をコピーしてもよいかも。\r\n \r\n  - fileName: &quot;id_rsa.pub&quot;\r\n    localPath: &quot;~/.ssh/id_rsa.pub&quot;\r\n    command: &quot;cat /vagrant/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; rm /vagrant/id_rsa.pub&quot;\r\n  - fileName: &quot;id_rsa&quot;\r\n    localPath: &quot;~/.ssh/id_rsa&quot;\r\n    command: &quot;cp /vagrant/id_rsa ~/.ssh/id_rsa &amp;&amp; rm /vagrant/id_rsa&quot;\r\n  - fileName: &quot;.bash_aliases&quot;\r\n    localPath: &quot;~/.bash_aliases&quot;\r\n    command: &quot;cp /vagrant/.bash_aliases ~/.bash_aliases &amp;&amp; rm /vagrant/.bash_aliases&quot;\r\n```\r\nVagrantfile         \r\n```bash\r\n# provision/settings-local.yml を load する\r\nrequire &#039;yaml&#039;\r\nsettings = YAML.load_file &#039;provision/settings_local.yaml&#039;\r\n\r\n# provision/settings-local.yml 内 copyFiles: をHost側の ~/vagrant/box名/ にコピーする。\r\n# ここに置かれたファイルはVagrant 立ち上げ時Vagrant側 /vagrant/へコピーされる \r\nsettings[&#039;copyFiles&#039;].each do |i|\r\n  system(&#039;cp &#039; + i[&#039;localPath&#039;] + &#039; &#039; + Dir.home + &#039;/vagrant/&#039; + settings[&#039;vm&#039;][&#039;boxName&#039;]+ &#039;/&#039; + i[&#039;fileName&#039;])\r\nend\r\n\r\n# provision/settings-local.yml 内の sync: の共有ディレクトリをマウント\r\n# マウントタイプは デフォルトの virtualbox にしてますが Mac の場合は nfs もあり。\r\n# nfs は早いがパーミッションにちょっと難あり? Win なら SMB?\r\nsettings[&#039;sync&#039;][&#039;dir&#039;].each do |i|\r\n  #config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;nfs&quot;, nfs_export: true\r\n  config.vm.synced_folder i[&#039;localPath&#039;], i[&#039;vmPath&#039;], type: &quot;virtualbox&quot;\r\n  end\r\n \r\n# provision.sh では wget git をインストール しています。\r\n  config.vm.provision :shell, :path =&gt; &quot;provision/provision.sh&quot;\r\n  \r\n# privileged: false はroot権限でなく一般ユーザー権限で実行\r\n# ここでは bash_id, vim (lua,python3....)をインストール \r\n  config.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/privileged.sh&quot;\r\n\r\n# provision/settings-local.yml 内 copyFiles: のコマンド実行\r\n# run: &quot;always&quot; は Vagrant立ち上げ時 vagrant up --provision としなくても vagrant up でも実行される。\r\nsettings[&#039;copyFiles&#039;].each do |i|\r\n        $script = i[&#039;command&#039;]\r\n        config.vm.provision :shell, run: &quot;always&quot;, privileged: false, inline: $script\r\n    end\r\n\r\n# Vagrant側のHost名を設定 \r\n $host_script = &quot;hostnamectl set-hostname &quot; + settings[&#039;vm&#039;][&#039;hostName&#039;].to_s\r\n   config.vm.provision :shell, run: &quot;always&quot;, inline: $host_script\r\n\r\n# この場合は~/.ssh/configに\r\n# host *\r\n# 10     StrictHostKeyChecking no \r\n# を追記。ssh接続の際の確認メッセージを無視する。\r\n# vimrcをレポジトリからダウンロード をしてます。\r\nconfig.vm.provision :shell, privileged: false, :path =&gt; &quot;provision/custom_after.sh&quot;\r\n\r\n```\r\n\r\n~/vagrant/box_name に配置。        \r\n```bash\r\n$ cd ~/vagrant/box_name/      \r\n$ vagrant up      \r\n```\r\nでインストール開始。初回起動時はboxを生成するため時間がかかります。     \r\n壊れても \r\n```bash\r\n$ vagrant up --provision\r\n```\r\nすれば再生成されます。(時間かかるけど...)\r\n\r\n',154,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/154-revision-v1/',0,'revision','',0),(329,1,'2019-09-23 20:15:00','2019-09-23 11:15:00','<p>昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。<br />\n\'gulp\'や\'webpack\'などのツールを使うことが多いでしょう。<br />\n最近は \'webpack\' が主流のようです。\nBootstrapもVersion4よりSassが採用されました。<br />\n\'webpack\'はGit同様必須となりそうです。</p>\n<h2>Wordpressのテーマ UnderstrapのPackage.json</h2>\n<p>UnderstrapのSassで例えると、</p>\n<pre><code class=\"language-source\">{\n  &quot;name&quot;: &quot;understrap-child&quot;,\n  &quot;version&quot;: &quot;0.5.5&quot;,\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\n    &quot;watch&quot;: &quot;gulp watch&quot;,\n    &quot;sass&quot;: &quot;gulp sass&quot;\n  },\n...\n...\n...\n...\n...\n</code></pre>\n<p>この &quot;scripts&quot; の内容を実行するのですが、おっさんはすぐにターミナルを開き\n<strong>\'package.json\'</strong> のあるディレクトリまで移動し</p>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>などします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。<br />\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。<br />\nまた、エラー確認のためエディタとターミナルを行ったりきたり。<br />\nショートカット使ったとしても・・・めんどくさい。<br />\nなのでこの一連のアクションはIDEAでやることにしました。<br />\n<strong>結果</strong><br />\nやっぱり楽になりました。　</p>\n<h2>npm 設定手順</h2>\n<p><strong>環境</strong>      </p>\n<ul>\n<li>MAC       </li>\n<li>node.jsがインストール済み</li>\n<li>Intellij IDEA (Phpstorm,Webstormなど)</li>\n</ul>\n<hr />\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>\'cmd\' + \'f\' を押下しnpmを検索</li>\n<li>Preferences | Languages &amp; Frameworks | Node.js and NPM へ進む</li>\n<li>\'node\',\'npm\'のPathを設定</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png\" alt=\"\" /></p>\n<p>Projct tool window の \'package.json\' を右クリック。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png\" alt=\"\" /></p>\n<p>\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png\" alt=\"\" /></p>\n<p>ここには \'Package.json\' のScripts内のコマンドがリストされます。<br />\n実行したいScript名を右クリックして実行です。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png\" alt=\"\" /></p>\n<h2>Npm window を開くためのショートカット</h2>\n<p>マウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       </p>\n<ol>\n<li>\'cmd\' + \',\' を押下し設定を開く</li>\n<li>Preferences | Keymap へ進む。</li>\n<li>\'npm\'で検索し ショートカットキーを割り当てる        </li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png\" alt=\"\" /> </p>\n<p>これでだいぶん楽になる。</p>\n<h2>IDEA 「なんでも検索」 を使う</h2>\n<p>それでも<span class=\"under_line\">めんどくさい</span>という場合、\n&quot;ただただ、\'npm run watch\' を走らせたいんだ&quot; という場合はIDEAの超便利機能\n「なんでも検索」の出番です。</p>\n<ol>\n<li>\'Shift\' x 2 （連打) で「なんでも検索」</li>\n<li>\'watch\' をタイプ、&quot;Run \'watch\' npm script&quot; が出てくるのでEnter。</li>\n</ol>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png\" alt=\"\" />       </p>\n<p>実行後はこんな感じです。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png\" alt=\"\" /></p>\n<p>IDEAの「なんでも検索」はほんとすごい。快適です。</p>','Intellij idea から npm を操作','\'npm run watch\'などはターミナルを開いて実行してましたが地味に<span class=\"under_line\">めんどくさい</span>のでIDEA側で操作するようにした。','inherit','closed','closed','','259-revision-v1','','','2019-09-23 20:15:00','2019-09-23 11:15:00','昨今のWEB制作ではCSSやJavaScriptはビルドするという手法です。      \r\n\'gulp\'や\'webpack\'などのツールを使うことが多いでしょう。      \r\n最近は \'webpack\' が主流のようです。\r\nBootstrapもVersion4よりSassが採用されました。       \r\n\'webpack\'はGit同様必須となりそうです。\r\n\r\n## Wordpressのテーマ UnderstrapのPackage.json\r\nUnderstrapのSassで例えると、\r\n```source\r\n{\r\n  &quot;name&quot;: &quot;understrap-child&quot;,\r\n  &quot;version&quot;: &quot;0.5.5&quot;,\r\n  &quot;description&quot;: &quot;Basic Child Theme for UnderStrap Theme Framework: https://github.com/holger1411/understrap&quot;,\r\n  &quot;main&quot;: &quot;index.js&quot;,\r\n  &quot;scripts&quot;: {\r\n    &quot;postinstall&quot;: &quot;gulp copy-assets&quot;,\r\n    &quot;watch&quot;: &quot;gulp watch&quot;,\r\n    &quot;sass&quot;: &quot;gulp sass&quot;\r\n  },\r\n...\r\n...\r\n...\r\n...\r\n...\r\n\r\n```\r\nこの \"scripts\" の内容を実行するのですが、おっさんはすぐにターミナルを開き\r\n__\'package.json\'__ のあるディレクトリまで移動し\r\n\r\n```bash\r\nnpm run watch\r\n```\r\n\r\nなどします。ターミナルでの操作はそれはそれでいいのですが毎回やるのは正直めんどくさいです。      \r\nそれに \'watch\'にするとBackgroundで動くためターミナルのタブ一枚占領します。     \r\nまた、エラー確認のためエディタとターミナルを行ったりきたり。     \r\nショートカット使ったとしても・・・めんどくさい。        \r\nなのでこの一連のアクションはIDEAでやることにしました。       \r\n__結果__      \r\nやっぱり楽になりました。　\r\n\r\n## npm 設定手順\r\n__環境__      \r\n- MAC       \r\n- node.jsがインストール済み\r\n- Intellij IDEA (Phpstorm,Webstormなど)\r\n\r\n--------\r\n\r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. \'cmd\' + \'f\' を押下しnpmを検索\r\n3. Preferences | Languages & Frameworks | Node.js and NPM へ進む\r\n4. \'node\',\'npm\'のPathを設定\r\n \r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-15.59.10.png)\r\n\r\nProjct tool window の \'package.json\' を右クリック。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.02.55.png)\r\n\r\n\'Show npm script\' をクリック。 \'npm\'のwindowが開きます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.04.14.png)\r\n\r\nここには \'Package.json\' のScripts内のコマンドがリストされます。     \r\n実行したいScript名を右クリックして実行です。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.07.39.png)\r\n\r\n## Npm window を開くためのショートカット\r\nマウスやトラックパッドを使って右クリックなどはめんどくさいのでショートカットを設定します。       \r\n1. \'cmd\' + \',\' を押下し設定を開く\r\n2. Preferences | Keymap へ進む。\r\n3. \'npm\'で検索し ショートカットキーを割り当てる        \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.12.21.png) \r\n\r\n\r\nこれでだいぶん楽になる。\r\n\r\n\r\n## IDEA 「なんでも検索」 を使う\r\nそれでも<span class=\"under_line\">めんどくさい</span>という場合、\r\n\"ただただ、\'npm run watch\' を走らせたいんだ\" という場合はIDEAの超便利機能\r\n「なんでも検索」の出番です。\r\n\r\n1. \'Shift\' x 2 （連打) で「なんでも検索」\r\n2. \'watch\' をタイプ、\"Run \'watch\' npm script\" が出てくるのでEnter。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.23.03.png)       \r\n\r\n\r\n実行後はこんな感じです。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-16.37.22.png)\r\n\r\nIDEAの「なんでも検索」はほんとすごい。快適です。\r\n\r\n\r\n',259,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/259-revision-v1/',0,'revision','',0),(330,1,'2019-09-23 20:15:55','2019-09-23 11:15:55','<h2>VImium が便利すぎ</h2>\n<p>ブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は<a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a>の出番です。</p>\n<ul>\n<li>\'k\'　上スクロール </li>\n<li>\'j\'　下スクロール</li>\n<li>\'h\'　戻る</li>\n<li>\'l\'　進む </li>\n<li>\'f\'　リンクを開く、\'F\'だと新規タブで開く</li>\n<li>\'gi\' テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で <strong>\'f\'</strong> をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><strong>\'gi\'</strong> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p>がとてもVimぽくて素敵です。</p>\n<p>マウスいらずで効率アップ！</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','inherit','closed','closed','','249-revision-v1','','','2019-09-23 20:15:55','2019-09-23 11:15:55','## VImium が便利すぎ\r\nブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\r\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)の出番です。\r\n\r\n- \'k\'　上スクロール \r\n- \'j\'　下スクロール\r\n- \'h\'　戻る\r\n- \'l\'　進む \r\n- \'f\'　リンクを開く、\'F\'だと新規タブで開く\r\n- \'gi\' テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で __\'f\'__ をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n__\'gi\'__ とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\nがとてもVimぽくて素敵です。\r\n\r\nマウスいらずで効率アップ！',249,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/249-revision-v1/',0,'revision','',0),(331,1,'2019-09-23 20:46:01','2019-09-23 11:46:01','<h2>VImium が便利すぎ</h2>\n<p>ブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は<a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a>の出番です。</p>\n<ul>\n<li><kbd>k</kbd>　上スクロール </li>\n<li><kbd>j</kbd>　下スクロール</li>\n<li><kbd>h</kbd>　戻る</li>\n<li><kbd>l</kbd>　進む </li>\n<li><kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>&nbsp;+&nbsp;<kbd>f</kbd>だと新規タブで開く</li>\n<li><kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で <kbd>f</kbd> をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><kbd>g</kbd>&nbsp;<kbd>i</kbd> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p><kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ</p>\n<p>がとてもVimぽくて素敵です。</p>\n<p>マウスいらずで効率アップ！</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','inherit','closed','closed','','249-autosave-v1','','','2019-09-23 20:46:01','2019-09-23 11:46:01','## VImium が便利すぎ\r\nブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\r\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)の出番です。\r\n\r\n- <kbd>k</kbd>　上スクロール \r\n- <kbd>j</kbd>　下スクロール\r\n- <kbd>h</kbd>　戻る\r\n- <kbd>l</kbd>　進む \r\n- <kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>&nbsp;+&nbsp;<kbd>f</kbd>だと新規タブで開く\r\n- <kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で <kbd>f</kbd> をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n<kbd>g</kbd>&nbsp;<kbd>i</kbd> とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\n<kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\r\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ\r\n\r\nがとてもVimぽくて素敵です。\r\n\r\nマウスいらずで効率アップ！',249,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/249-autosave-v1/',0,'revision','',0),(332,1,'2019-09-23 20:28:32','2019-09-23 11:28:32','<h2>VImium が便利すぎ</h2>\n<p>ブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は<a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a>の出番です。</p>\n<ul>\n<li><kbd>k</kbd>　上スクロール </li>\n<li><kbd>j</kbd>　下スクロール</li>\n<li><kbd>h</kbd>　戻る</li>\n<li><kbd>l</kbd>　進む </li>\n<li><kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>+<kbd>f</kbd>だと新規タブで開く</li>\n<li><kbd>g</kbd> <kbd>i</kbd> テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で <strong>\'f\'</strong> をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><kbd>g</kbd><kbd>i</kbd> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p><kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ</p>\n<p>がとてもVimぽくて素敵です。</p>\n<p>マウスいらずで効率アップ！</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','inherit','closed','closed','','249-revision-v1','','','2019-09-23 20:28:32','2019-09-23 11:28:32','## VImium が便利すぎ\r\nブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\r\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)の出番です。\r\n\r\n- <kbd>k</kbd>　上スクロール \r\n- <kbd>j</kbd>　下スクロール\r\n- <kbd>h</kbd>　戻る\r\n- <kbd>l</kbd>　進む \r\n- <kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>+<kbd>f</kbd>だと新規タブで開く\r\n- <kbd>g</kbd> <kbd>i</kbd> テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で __\'f\'__ をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n<kbd>g</kbd><kbd>i</kbd> とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\n<kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\r\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ\r\n\r\nがとてもVimぽくて素敵です。\r\n\r\nマウスいらずで効率アップ！',249,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/249-revision-v1/',0,'revision','',0),(333,1,'2019-09-23 20:29:16','2019-09-23 11:29:16','<h2>VImium が便利すぎ</h2>\n<p>ブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は<a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a>の出番です。</p>\n<ul>\n<li><kbd>k</kbd>　上スクロール </li>\n<li><kbd>j</kbd>　下スクロール</li>\n<li><kbd>h</kbd>　戻る</li>\n<li><kbd>l</kbd>　進む </li>\n<li><kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>+<kbd>f</kbd>だと新規タブで開く</li>\n<li><kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で <strong>\'f\'</strong> をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><kbd>g</kbd>&nbsp;<kbd>i</kbd> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p><kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ</p>\n<p>がとてもVimぽくて素敵です。</p>\n<p>マウスいらずで効率アップ！</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','inherit','closed','closed','','249-revision-v1','','','2019-09-23 20:29:16','2019-09-23 11:29:16','## VImium が便利すぎ\r\nブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\r\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)の出番です。\r\n\r\n- <kbd>k</kbd>　上スクロール \r\n- <kbd>j</kbd>　下スクロール\r\n- <kbd>h</kbd>　戻る\r\n- <kbd>l</kbd>　進む \r\n- <kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>+<kbd>f</kbd>だと新規タブで開く\r\n- <kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で __\'f\'__ をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n<kbd>g</kbd>&nbsp;<kbd>i</kbd> とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\n<kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\r\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ\r\n\r\nがとてもVimぽくて素敵です。\r\n\r\nマウスいらずで効率アップ！',249,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/249-revision-v1/',0,'revision','',0),(334,1,'2019-09-23 20:31:52','2019-09-23 11:31:52','<h2>VImium が便利すぎ</h2>\n<p>ブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は<a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a>の出番です。</p>\n<ul>\n<li><kbd>k</kbd>　上スクロール </li>\n<li><kbd>j</kbd>　下スクロール</li>\n<li><kbd>h</kbd>　戻る</li>\n<li><kbd>l</kbd>　進む </li>\n<li><kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>+<kbd>f</kbd>だと新規タブで開く</li>\n<li><kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で <kbd>f</kbd>をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p><kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ</p>\n<p>がとてもVimぽくて素敵です。</p>\n<p>マウスいらずで効率アップ！</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','inherit','closed','closed','','249-revision-v1','','','2019-09-23 20:31:52','2019-09-23 11:31:52','## VImium が便利すぎ\r\nブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\r\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)の出番です。\r\n\r\n- <kbd>k</kbd>　上スクロール \r\n- <kbd>j</kbd>　下スクロール\r\n- <kbd>h</kbd>　戻る\r\n- <kbd>l</kbd>　進む \r\n- <kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>+<kbd>f</kbd>だと新規タブで開く\r\n- <kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で <kbd>f</kbd>をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n<kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\n<kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\r\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ\r\n\r\nがとてもVimぽくて素敵です。\r\n\r\nマウスいらずで効率アップ！',249,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/249-revision-v1/',0,'revision','',0),(335,1,'2019-09-23 20:36:23','2019-09-23 11:36:23','<h2>VImium が便利すぎ</h2>\n<p>ブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は<a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a>の出番です。</p>\n<ul>\n<li><kbd>k</kbd>　上スクロール </li>\n<li><kbd>j</kbd>　下スクロール</li>\n<li><kbd>h</kbd>　戻る</li>\n<li><kbd>l</kbd>　進む </li>\n<li><kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>+<kbd>f</kbd>だと新規タブで開く</li>\n<li><kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で <kbd>f</kbd>をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p><kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ</p>\n<p>がとてもVimぽくて素敵です。</p>\n<p>マウスいらずで効率アップ！</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','inherit','closed','closed','','249-revision-v1','','','2019-09-23 20:36:23','2019-09-23 11:36:23','## VImium が便利すぎ\r\nブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\r\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)の出番です。\r\n\r\n- <kbd>k</kbd>　上スクロール \r\n- <kbd>j</kbd>　下スクロール\r\n- <kbd>h</kbd>　戻る\r\n- <kbd>l</kbd>　進む \r\n- <kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>+<kbd>f</kbd>だと新規タブで開く\r\n- <kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で <kbd>f</kbd>をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n<kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\n<kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\r\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ\r\n\r\nがとてもVimぽくて素敵です。\r\n\r\nマウスいらずで効率アップ！',249,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/249-revision-v1/',0,'revision','',0),(336,1,'2019-09-23 20:37:38','2019-09-23 11:37:38','<h2>VImium が便利すぎ</h2>\n<p>ブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は<a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a>の出番です。</p>\n<ul>\n<li><kbd>k</kbd>　上スクロール </li>\n<li><kbd>j</kbd>　下スクロール</li>\n<li><kbd>h</kbd>　戻る</li>\n<li><kbd>l</kbd>　進む </li>\n<li><kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>+<kbd>f</kbd>だと新規タブで開く</li>\n<li><kbd>g</kbd>　<kbd>i</kbd> テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で <kbd>f</kbd>をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p><kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ</p>\n<p>がとてもVimぽくて素敵です。</p>\n<p>マウスいらずで効率アップ！</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','inherit','closed','closed','','249-revision-v1','','','2019-09-23 20:37:38','2019-09-23 11:37:38','## VImium が便利すぎ\r\nブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\r\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)の出番です。\r\n\r\n- <kbd>k</kbd>　上スクロール \r\n- <kbd>j</kbd>　下スクロール\r\n- <kbd>h</kbd>　戻る\r\n- <kbd>l</kbd>　進む \r\n- <kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>+<kbd>f</kbd>だと新規タブで開く\r\n- <kbd>g</kbd>　<kbd>i</kbd> テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で <kbd>f</kbd>をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n<kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\n<kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\r\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ\r\n\r\nがとてもVimぽくて素敵です。\r\n\r\nマウスいらずで効率アップ！',249,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/249-revision-v1/',0,'revision','',0),(337,1,'2019-09-23 20:38:36','2019-09-23 11:38:36','<h2>VImium が便利すぎ</h2>\n<p>ブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は<a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a>の出番です。</p>\n<ul>\n<li><kbd>k</kbd>　上スクロール </li>\n<li><kbd>j</kbd>　下スクロール</li>\n<li><kbd>h</kbd>　戻る</li>\n<li><kbd>l</kbd>　進む </li>\n<li><kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>&nbsp;+&nbsp;<kbd>f</kbd>だと新規タブで開く</li>\n<li><kbd>g</kbd>　<kbd>i</kbd> テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で <kbd>f</kbd>をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p><kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ</p>\n<p>がとてもVimぽくて素敵です。</p>\n<p>マウスいらずで効率アップ！</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','inherit','closed','closed','','249-revision-v1','','','2019-09-23 20:38:36','2019-09-23 11:38:36','## VImium が便利すぎ\r\nブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\r\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)の出番です。\r\n\r\n- <kbd>k</kbd>　上スクロール \r\n- <kbd>j</kbd>　下スクロール\r\n- <kbd>h</kbd>　戻る\r\n- <kbd>l</kbd>　進む \r\n- <kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>&nbsp;+&nbsp;<kbd>f</kbd>だと新規タブで開く\r\n- <kbd>g</kbd>　<kbd>i</kbd> テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で <kbd>f</kbd>をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n<kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\n<kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\r\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ\r\n\r\nがとてもVimぽくて素敵です。\r\n\r\nマウスいらずで効率アップ！',249,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/249-revision-v1/',0,'revision','',0),(338,1,'2019-09-23 20:39:42','2019-09-23 11:39:42','<h2>VImium が便利すぎ</h2>\n<p>ブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は<a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a>の出番です。</p>\n<ul>\n<li><kbd>k</kbd>　上スクロール </li>\n<li><kbd>j</kbd>　下スクロール</li>\n<li><kbd>h</kbd>　戻る</li>\n<li><kbd>l</kbd>　進む </li>\n<li><kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>&nbsp;+&nbsp;<kbd>f</kbd>だと新規タブで開く</li>\n<li><kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で <kbd>f</kbd>をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p><kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ</p>\n<p>がとてもVimぽくて素敵です。</p>\n<p>マウスいらずで効率アップ！</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','inherit','closed','closed','','249-revision-v1','','','2019-09-23 20:39:42','2019-09-23 11:39:42','## VImium が便利すぎ\r\nブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\r\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)の出番です。\r\n\r\n- <kbd>k</kbd>　上スクロール \r\n- <kbd>j</kbd>　下スクロール\r\n- <kbd>h</kbd>　戻る\r\n- <kbd>l</kbd>　進む \r\n- <kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>&nbsp;+&nbsp;<kbd>f</kbd>だと新規タブで開く\r\n- <kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で <kbd>f</kbd>をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n<kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\n<kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\r\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ\r\n\r\nがとてもVimぽくて素敵です。\r\n\r\nマウスいらずで効率アップ！',249,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/249-revision-v1/',0,'revision','',0),(339,1,'2019-09-23 20:40:58','2019-09-23 11:40:58','<h2>VImium が便利すぎ</h2>\n<p>ブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は<a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a>の出番です。</p>\n<ul>\n<li><kbd>k</kbd>　上スクロール </li>\n<li><kbd>j</kbd>　下スクロール</li>\n<li><kbd>h</kbd>　戻る</li>\n<li><kbd>l</kbd>　進む </li>\n<li><kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>&nbsp;+&nbsp;<kbd>f</kbd>だと新規タブで開く</li>\n<li><kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で<kbd>f</kbd>をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p><kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ</p>\n<p>がとてもVimぽくて素敵です。</p>\n<p>マウスいらずで効率アップ！</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','inherit','closed','closed','','249-revision-v1','','','2019-09-23 20:40:58','2019-09-23 11:40:58','## VImium が便利すぎ\r\nブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\r\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)の出番です。\r\n\r\n- <kbd>k</kbd>　上スクロール \r\n- <kbd>j</kbd>　下スクロール\r\n- <kbd>h</kbd>　戻る\r\n- <kbd>l</kbd>　進む \r\n- <kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>&nbsp;+&nbsp;<kbd>f</kbd>だと新規タブで開く\r\n- <kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で<kbd>f</kbd>をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n<kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\n<kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\r\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ\r\n\r\nがとてもVimぽくて素敵です。\r\n\r\nマウスいらずで効率アップ！',249,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/249-revision-v1/',0,'revision','',0),(340,1,'2019-09-23 20:43:56','2019-09-23 11:43:56','<h2>VImium が便利すぎ</h2>\n<p>ブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は<a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a>の出番です。</p>\n<ul>\n<li><kbd>k</kbd>　上スクロール </li>\n<li><kbd>j</kbd>　下スクロール</li>\n<li><kbd>h</kbd>　戻る</li>\n<li><kbd>l</kbd>　進む </li>\n<li><kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>&nbsp;+&nbsp;<kbd>f</kbd>だと新規タブで開く</li>\n<li><kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で <kbd>f</kbd> をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p><kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ</p>\n<p>がとてもVimぽくて素敵です。</p>\n<p>マウスいらずで効率アップ！</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','inherit','closed','closed','','249-revision-v1','','','2019-09-23 20:43:56','2019-09-23 11:43:56','## VImium が便利すぎ\r\nブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\r\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)の出番です。\r\n\r\n- <kbd>k</kbd>　上スクロール \r\n- <kbd>j</kbd>　下スクロール\r\n- <kbd>h</kbd>　戻る\r\n- <kbd>l</kbd>　進む \r\n- <kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>&nbsp;+&nbsp;<kbd>f</kbd>だと新規タブで開く\r\n- <kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で <kbd>f</kbd> をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n<kbd><kbd>g</kbd>&nbsp;<kbd>i</kbd></kbd> とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\n<kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\r\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ\r\n\r\nがとてもVimぽくて素敵です。\r\n\r\nマウスいらずで効率アップ！',249,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/249-revision-v1/',0,'revision','',0),(341,1,'2019-09-23 20:44:51','2019-09-23 11:44:51','<h2>VImium が便利すぎ</h2>\n<p>ブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は<a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja\">Vimium</a>の出番です。</p>\n<ul>\n<li><kbd>k</kbd>　上スクロール </li>\n<li><kbd>j</kbd>　下スクロール</li>\n<li><kbd>h</kbd>　戻る</li>\n<li><kbd>l</kbd>　進む </li>\n<li><kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>&nbsp;+&nbsp;<kbd>f</kbd>だと新規タブで開く</li>\n<li><kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ</li>\n</ul>\n<p>And more...</p>\n<p>例えば</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png\" alt=\"\" /></p>\n<p>という表示で <kbd>f</kbd> をタイプ</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png\" alt=\"\" /></p>\n<p>ということです。</p>\n<p><kbd>g</kbd>&nbsp;<kbd>i</kbd> とタイプすると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png\" alt=\"\" /></p>\n<p>テキストボックスにカーソルが移動。</p>\n<p>カスタマイズもできます。\n僕はこのような設定にしてます。</p>\n<pre><code class=\"language-bash\"># Insert your preferred key mappings here.\nmap h goBack\nmap l goForward\nmap H scrollLeft\nmap L scrollRight\nmap , previousTab\nmap . nextTab\nmap j scrollDown count=1\nmap k scrollUp count=1\nmap &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2\nmap w removeTab\nmap T restoreTab</code></pre>\n<pre><code class=\"language-bash\">map &lt;c-f&gt; scrollPageDown count=2\nmap &lt;c-b&gt; scrollPageUp count=2</code></pre>\n<p><kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ</p>\n<p>がとてもVimぽくて素敵です。</p>\n<p>マウスいらずで効率アップ！</p>','Chrome アドオン \"Vimium\"','Chromeの便利なアドオン \"Vimium\" 。マウスいらずでスピードアップ','inherit','closed','closed','','249-revision-v1','','','2019-09-23 20:44:51','2019-09-23 11:44:51','## VImium が便利すぎ\r\nブラウジング時に戻ったり、進んだり、上スクロールしたり、下スクロールしたり、フォーム入力だったり・・・\r\nマウスやトラックパッドでガチャガチャやるのが<span class=\"under_line\">めんどくさい</span>時は[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=ja)の出番です。\r\n\r\n- <kbd>k</kbd>　上スクロール \r\n- <kbd>j</kbd>　下スクロール\r\n- <kbd>h</kbd>　戻る\r\n- <kbd>l</kbd>　進む \r\n- <kbd>f</kbd>　リンクを開く、<kbd>Shit</kbd>&nbsp;+&nbsp;<kbd>f</kbd>だと新規タブで開く\r\n- <kbd>g</kbd>&nbsp;<kbd>i</kbd> テキストボックスをアクティブ\r\n\r\nAnd more...\r\n\r\n例えば\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.29.png)\r\n\r\nという表示で <kbd>f</kbd> をタイプ\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.46.43.png)\r\n\r\nということです。\r\n\r\n<kbd>g</kbd>&nbsp;<kbd>i</kbd> とタイプすると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-22-at-10.52.58.png)\r\n\r\nテキストボックスにカーソルが移動。\r\n\r\nカスタマイズもできます。\r\n僕はこのような設定にしてます。\r\n```bash\r\n# Insert your preferred key mappings here.\r\nmap h goBack\r\nmap l goForward\r\nmap H scrollLeft\r\nmap L scrollRight\r\nmap , previousTab\r\nmap . nextTab\r\nmap j scrollDown count=1\r\nmap k scrollUp count=1\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\nmap w removeTab\r\nmap T restoreTab\r\n```\r\n\r\n```bash\r\nmap &lt;c-f&gt; scrollPageDown count=2\r\nmap &lt;c-b&gt; scrollPageUp count=2\r\n```\r\n<kbd>ctl</kbd>+<kbd>f</kbd> ページダウン\r\n<kbd>ctl</kbd>+<kbd>b</kbd> ページアップ\r\n\r\nがとてもVimぽくて素敵です。\r\n\r\nマウスいらずで効率アップ！',249,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/249-revision-v1/',0,'revision','',0),(342,1,'2019-09-23 20:51:17','2019-09-23 11:51:17','<h2>PHP Composer とは</h2>\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\nNode.js の npm と似た扱いになります。<br />\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p></p>\n<p><em>なにがいいのかというと</em></p>\n<ul><li>ライブラリーを簡単にインストールできる</li>\n<li>ライブラリーの依存関係を解決してくれる</li>\n<li>composer.json の内容からパッケージをインストールするのでチームでの共有がしやすい。(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\nに影響をあたえない。 </li>\n</ul>\n<p>と言われてます。</p>\n<h3>Composer がない時代</h3>\n<p>経験談ですが・・・<br>\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\nをインストールしランキングを表示させるモジュールを作る。\nサイト内でランキングを表示する。    </p>\n<p>その後        </p>\n<p>ランミング結果を xml化し軽量化および外部配信を試みる 。<br><em>XML_Query2XML</em><br>\nという SQL の結果を簡単にxmlファイルへ変換してくれるライブラリーをインストール       </p>\n<p>それなりのスクリプトを組んで実行してみる。</p>\n<p>PearDB には対応してません。　とエラーになる。<br>\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br>\nMDB2 をインストールおよび動作チェック。</p>\n<p>もう<span class=\"under_line\">めんどくさい</span></p>\n<h3>Composer があると</h3>\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\n<pre><code class=\"language-json\">  \"require\": {\n  \"php\": \"&gt;=5.5.9\",\n  \"laravel/framework\": \"5.2.*\",\n   }\n  \"require-dev\": {\n  \"phpunit/phpunit\": \"3.7.*\"\n  }</code></pre>\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\nその時依存関係を解決をComposerが試みてくれます。</p>\n<h3>Autoloader</h3>\n<pre><code class=\"language-json\">\"autoload\":\n{\n        \"psr-4\": {\n            \"myhoge\\\\\": \"src/\"\n        }\n    }</code></pre>\n<p>オートローダーはファイルを自動で読み込んでくれる仕組みです。      </p>\n<pre><code class=\"language-php\"> &lt;?php\nnamespace myhoge;\nclass hoge {\n function hogehoge(){\n   return true;   \n }\n  }\n}\n?&gt; </code></pre>\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\n<h2>PHP Composer を CentOS7 にインストール</h2>\n<p>以下Root権限　もしくは sudo  </p>\n<pre><code class=\"language-bash\"># php -r \"copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');\"</code></pre>\n<p>公式サイト推奨のインストール方法です。<br>\ncomposer-setup.php のダウンロードをしてます。        </p>\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\n<p>composer の本体である composer.phar を作ります。        </p>\n<pre><code class=\"language-bash\"># php -r \"unlink(\'composer-setup.php\');\"</code></pre>\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\n<pre><code class=\"language-bash\"># which composer\n/usr/local/bin/composer </code></pre>\n<p>composer が配置されたか確認      </p>\n<pre><code class=\"language-bash\"># composer --version\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\n<p>Version確認</p>\n<p>これで Composer の準備が整いました。</p>','PHP Composer','PHP のパッケージマネージャー Composer .\r\nその特徴とインストール','inherit','closed','closed','','45-revision-v1','','','2019-09-23 20:51:17','2019-09-23 11:51:17','<h2>PHP Composer とは</h2>\r\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br />\r\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br />\r\nNode.js の npm と似た扱いになります。<br />\r\nNode.js では package.jsonに当たる部分が Composer では composer.json になります。        　</p>\r\n<p><em>なにがいいのかというと</em></p>\r\n<ul>\r\n<li>ライブラリーを簡単にインストールできる</li>\r\n<li>ライブラリーの依存関係を解決してくれる</li>\r\n<li>composer.json の内容からパッケージをインストールするのでチームでの共有がしやすい。(プロジェクト進行中にパッケージの追加があってもcomposer.jsonをGitで共有すればよい)</li>\r\n<li>インストールされたパッケージは基本Gitの管理外なので Git-Repository\r\nに影響をあたえない。 </li>\r\n</ul>\r\n<p>と言われてます。</p>\r\n<h3>Composer がない時代</h3>\r\n<p>経験談ですが・・・<br />\r\nあるシステム(仮にECサイト)に Pearライブラリ から PearDB\r\nをインストールしランキングを表示させるモジュールを作る。\r\nサイト内でランキングを表示する。    </p>\r\n<p>その後        </p>\r\n<p>ランミング結果を xml化し軽量化および外部配信を試みる 。<br />\r\n<em>XML_Query2XML</em><br />\r\nという SQL の結果を簡単にxmlファイルへ変換してくれるライブラリーをインストール       </p>\r\n<p>それなりのスクリプトを組んで実行してみる。</p>\r\n<p>PearDB には対応してません。　とエラーになる。<br />\r\nいろいろググって Pear から MDB2 というライブラリは PearDB　の後継だと知る。<br />\r\nMDB2 をインストールおよび動作チェック。</p>\r\nもう<span class=\"under_line\">めんどくさい</span>\r\n\r\n<h3>Composer があると</h3>\r\n<p>composer.jsonに 必要なライブラリーを記述します。    </p>\r\n<pre><code class=\"language-json\">  &quot;require&quot;: {\r\n  &quot;php&quot;: &quot;&gt;=5.5.9&quot;,\r\n  &quot;laravel/framework&quot;: &quot;5.2.*&quot;,\r\n   }\r\n  &quot;require-dev&quot;: {\r\n  &quot;phpunit/phpunit&quot;: &quot;3.7.*&quot;\r\n  }</code></pre>\r\n<p>この記述例をもとにRepositoryからダウンロートしてくれます。\r\nその時依存関係を解決をComposerが試みてくれます。</p>\r\n<h3>Autoloader</h3>\r\n<pre><code class=\"language-json\">&quot;autoload&quot;:\r\n{\r\n        &quot;psr-4&quot;: {\r\n            &quot;myhoge\\\\&quot;: &quot;src/&quot;\r\n        }\r\n    }</code></pre>\r\n<p>オートローダーはファイルを自動で読み込んでくれる仕組みです。      </p>\r\n<pre><code class=\"language-php\"> &lt;?php\r\nnamespace myhoge;\r\nclass hoge {\r\n function hogehoge(){\r\n   return true;   \r\n }\r\n  }\r\n}\r\n?&gt; </code></pre>\r\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\r\n<h2>PHP Composer を CentOS7 にインストール</h2>\r\n<p>以下Root権限　もしくは sudo  </p>\r\n<pre><code class=\"language-bash\"># php -r &quot;copy(&#039;https://getcomposer.org/installer&#039;, &#039;composer-setup.php&#039;);&quot;</code></pre>\r\n<p>公式サイト推奨のインストール方法です。<br />\r\ncomposer-setup.php のダウンロードをしてます。        </p>\r\n<pre><code class=\"language-bash\"># php composer-setup.php</code></pre>\r\n<p>composer の本体である composer.phar を作ります。        </p>\r\n<pre><code class=\"language-bash\"># php -r &quot;unlink(&#039;composer-setup.php&#039;);&quot;</code></pre>\r\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\r\n<pre><code class=\"language-bash\"># mv composer.phar /usr/local/bin/composer</code></pre>\r\n<p>composerをグローバルで使えるよう/usr/local/bin/ に配置してます。    </p>\r\n<pre><code class=\"language-bash\"># which composer\r\n/usr/local/bin/composer </code></pre>\r\n<p>composer が配置されたか確認      </p>\r\n<pre><code class=\"language-bash\"># composer --version\r\nComposer version 1.8.3 2019-01-30 08:31:33</code></pre>\r\n<p>Version確認</p>\r\n<p>これで Composer の準備が整いました。</p>',45,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/45-revision-v1/',0,'revision','',0),(344,1,'2019-10-01 15:00:14','2019-10-01 06:00:14','<p>開発中のプロジェクトにVMwear上のOSからテストやセキュリティーチェックなどしたいけれども開発中のプロジェクトをグローバルなサーバーにアップするのも<span class=\"under_line\">めんどくさい</span>のでVMwearFusionのネットワークにVagrantを設定しローカル内で完結させる。</p>\n<h2>VMware上のOSのネットワーク設定</h2>\n<p>VMの設定を開く</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.39.35.png\" alt=\"\" /></p>\n<p>デバイスを追加をクリック</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.40.35.png\" alt=\"\" /></p>\n<p>ネットワークアダプタを追加\n\'Macを共有\' を設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-14.00.03.png\" alt=\"\" /></p>\n<h2>Vagrant側のネットワーク設定</h2>\n<p>HostOSからVMwearネットワークを確認</p>\n<pre><code class=\"language-bash\">ifconfig </code></pre>\n<pre><code class=\"language-bash\">...\n...\n vmnet8: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500\n        ether 00:50:56:c0:00:08 \n        inet 172.16.221.1 netmask 0xffffff00 broadcast 172.16.221.255\n...\n...</code></pre>\n<p>この情報を元に Vagratfile に追記　（クラスC)</p>\n<pre><code class=\"language-bash\"> config.vm.network :public_network, :bridge =&gt; &quot;vmnet8&quot;, ip: &quot;172.16.221.12&quot;</code></pre>\n<p>第4オクテッドはご自由に。ここでは12にしてます。\nVagrantを再起動。</p>\n<h2>VMwear上のOSから接続確認</h2>\n<p>hostsファイル編集</p>\n<pre><code class=\"language-bash\">vi /etc/hosts</code></pre>\n<p>hostを追記 \'vagrant.local\'はご自由に。</p>\n<pre><code class=\"language-bash\">172.16.221.12 vagrant.local</code></pre>\n<p>VagrantへのネットワークをNmapで確認</p>\n<pre><code class=\"language-bash\">○ → nmap 172.16.221.12</code></pre>\n<pre><code class=\"language-bash\">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-01 13:46 JST\nNmap scan report for centos75.exp (172.16.221.12)\nHost is up (0.00042s latency).\nNot shown: 994 closed ports\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n111/tcp  open  rpcbind\n443/tcp  open  https\n3000/tcp open  ppp\n3306/tcp open  mysql</code></pre>\n<p>繋がりました。</p>','Vagrant(VirtualBox)とVMwear Fusion をネットワーク共有','VMwaer上のOSからVagrant (VirtualBox) を突つきたい時のネットワーク設定','publish','closed','open','','vagrant-vmwear-network','','','2019-11-02 23:00:32','2019-11-02 14:00:32','開発中のプロジェクトにVMwear上のOSからテストやセキュリティーチェックなどしたいけれども開発中のプロジェクトをグローバルなサーバーにアップするのも<span class=\"under_line\">めんどくさい</span>のでVMwearFusionのネットワークにVagrantを設定しローカル内で完結させる。\r\n\r\n\r\n\r\n## VMware上のOSのネットワーク設定\r\nVMの設定を開く\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.39.35.png)\r\n\r\nデバイスを追加をクリック\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.40.35.png)\r\n\r\nネットワークアダプタを追加\r\n\'Macを共有\' を設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-14.00.03.png)\r\n\r\n## Vagrant側のネットワーク設定\r\nHostOSからVMwearネットワークを確認\r\n```bash\r\nifconfig \r\n```\r\n\r\n```bash\r\n...\r\n...\r\n vmnet8: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500\r\n        ether 00:50:56:c0:00:08 \r\n        inet 172.16.221.1 netmask 0xffffff00 broadcast 172.16.221.255\r\n...\r\n...\r\n```\r\nこの情報を元に Vagratfile に追記　（クラスC)\r\n```bash\r\n config.vm.network :public_network, :bridge =&gt; &quot;vmnet8&quot;, ip: &quot;172.16.221.12&quot;\r\n```\r\n第4オクテッドはご自由に。ここでは12にしてます。\r\nVagrantを再起動。\r\n\r\n## VMwear上のOSから接続確認\r\nhostsファイル編集\r\n```bash\r\nvi /etc/hosts\r\n```\r\nhostを追記 \'vagrant.local\'はご自由に。\r\n```bash\r\n172.16.221.12 vagrant.local\r\n```\r\nVagrantへのネットワークをNmapで確認\r\n```bash\r\n○ → nmap 172.16.221.12\r\n```\r\n```bash\r\nStarting Nmap 7.80 ( https://nmap.org ) at 2019-10-01 13:46 JST\r\nNmap scan report for centos75.exp (172.16.221.12)\r\nHost is up (0.00042s latency).\r\nNot shown: 994 closed ports\r\nPORT     STATE SERVICE\r\n22/tcp   open  ssh\r\n80/tcp   open  http\r\n111/tcp  open  rpcbind\r\n443/tcp  open  https\r\n3000/tcp open  ppp\r\n3306/tcp open  mysql\r\n```\r\n繋がりました。',0,'https://blog.webdimension.jp/?p=344',0,'post','',0),(345,1,'2019-10-01 13:49:47','2019-10-01 04:49:47','<p>test</p>','Vagrant(VirtualBox)とVMwear をネットワーク共有','','inherit','closed','closed','','344-revision-v1','','','2019-10-01 13:49:47','2019-10-01 04:49:47','test',344,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/344-revision-v1/',0,'revision','',0),(349,1,'2019-10-01 14:17:03','2019-10-01 05:17:03','<h2>VMware上のOSのネットワーク設定</h2>\n<p>VMの設定を開く</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.39.35.png\" alt=\"\" /></p>\n<p>デバイスを追加をクリック</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.40.35.png\" alt=\"\" /></p>\n<p>ネットワークアダプタを追加\n\'Macを共有\' を設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-14.00.03.png\" alt=\"\" /></p>\n<h2>Vagrant側のネットワーク設定</h2>\n<p>HostOSからVMwearネットワークを確認</p>\n<pre><code class=\"language-bash\">ifconfig </code></pre>\n<pre><code class=\"language-bash\">...\n...\n vmnet8: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500\n        ether 00:50:56:c0:00:08 \n        inet 172.16.221.1 netmask 0xffffff00 broadcast 172.16.221.255\n...\n...</code></pre>\n<p>この情報を元に Vagratfile に追記　（クラスC)</p>\n<pre><code class=\"language-bash\"> config.vm.network :public_network, :bridge =&gt; &quot;vmnet8&quot;, ip: &quot;172.16.221.12&quot;</code></pre>\n<p>第4オクテッドはご自由に。ここでは12にしてます。\nVagrantを再起動。</p>\n<h2>VMwear上のOSから接続確認</h2>\n<p>hostsファイル編集</p>\n<pre><code class=\"language-bash\">vi /etc/hosts</code></pre>\n<p>hostを追記 \'vagrant.local\'はご自由に。</p>\n<pre><code class=\"language-bash\">172.16.221.12 vagrant.local</code></pre>\n<p>VagrantへのネットワークをNmapで確認</p>\n<pre><code class=\"language-bash\">○ → nmap 172.16.221.12</code></pre>\n<pre><code class=\"language-bash\">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-01 13:46 JST\nNmap scan report for centos75.exp (172.16.221.12)\nHost is up (0.00042s latency).\nNot shown: 994 closed ports\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n111/tcp  open  rpcbind\n443/tcp  open  https\n3000/tcp open  ppp\n3306/tcp open  mysql</code></pre>\n<p>繋がりました。</p>','Vagrant(VirtualBox)とVMwear Fusion をネットワーク共有','VMwaer上のOSからVagrant (VirtualBox) を突つきたい時のネットワーク設定','inherit','closed','closed','','344-revision-v1','','','2019-10-01 14:17:03','2019-10-01 05:17:03','## VMware上のOSのネットワーク設定\r\nVMの設定を開く\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.39.35.png)\r\n\r\nデバイスを追加をクリック\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.40.35.png)\r\n\r\nネットワークアダプタを追加\r\n\'Macを共有\' を設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-14.00.03.png)\r\n\r\n## Vagrant側のネットワーク設定\r\nHostOSからVMwearネットワークを確認\r\n```bash\r\nifconfig \r\n```\r\n\r\n```bash\r\n...\r\n...\r\n vmnet8: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500\r\n        ether 00:50:56:c0:00:08 \r\n        inet 172.16.221.1 netmask 0xffffff00 broadcast 172.16.221.255\r\n...\r\n...\r\n```\r\nこの情報を元に Vagratfile に追記　（クラスC)\r\n```bash\r\n config.vm.network :public_network, :bridge =&gt; &quot;vmnet8&quot;, ip: &quot;172.16.221.12&quot;\r\n```\r\n第4オクテッドはご自由に。ここでは12にしてます。\r\nVagrantを再起動。\r\n\r\n## VMwear上のOSから接続確認\r\nhostsファイル編集\r\n```bash\r\nvi /etc/hosts\r\n```\r\nhostを追記 \'vagrant.local\'はご自由に。\r\n```bash\r\n172.16.221.12 vagrant.local\r\n```\r\nVagrantへのネットワークをNmapで確認\r\n```bash\r\n○ → nmap 172.16.221.12\r\n```\r\n```bash\r\nStarting Nmap 7.80 ( https://nmap.org ) at 2019-10-01 13:46 JST\r\nNmap scan report for centos75.exp (172.16.221.12)\r\nHost is up (0.00042s latency).\r\nNot shown: 994 closed ports\r\nPORT     STATE SERVICE\r\n22/tcp   open  ssh\r\n80/tcp   open  http\r\n111/tcp  open  rpcbind\r\n443/tcp  open  https\r\n3000/tcp open  ppp\r\n3306/tcp open  mysql\r\n```\r\n繋がりました。',344,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/344-revision-v1/',0,'revision','',0),(352,1,'2019-10-01 15:23:00','2019-10-01 06:23:00','<p>開発中のプロジェクトにVMwear上のOSからテストなどしたいけれども開発中のプロジェクトをグローバルなサーバーにアップするのも\n&lt;span class=\'\'under_line&quot;&gt;めんどくさい</span>のでVMwearFusionのネットワークにVagrantを設定しローカル内で完結させる。</p>\n<h2>VMware上のOSのネットワーク設定</h2>\n<p>VMの設定を開く</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.39.35.png\" alt=\"\" /></p>\n<p>デバイスを追加をクリック</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.40.35.png\" alt=\"\" /></p>\n<p>ネットワークアダプタを追加\n\'Macを共有\' を設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-14.00.03.png\" alt=\"\" /></p>\n<h2>Vagrant側のネットワーク設定</h2>\n<p>HostOSからVMwearネットワークを確認</p>\n<pre><code class=\"language-bash\">ifconfig </code></pre>\n<pre><code class=\"language-bash\">...\n...\n vmnet8: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500\n        ether 00:50:56:c0:00:08 \n        inet 172.16.221.1 netmask 0xffffff00 broadcast 172.16.221.255\n...\n...</code></pre>\n<p>この情報を元に Vagratfile に追記　（クラスC)</p>\n<pre><code class=\"language-bash\"> config.vm.network :public_network, :bridge =&gt; &quot;vmnet8&quot;, ip: &quot;172.16.221.12&quot;</code></pre>\n<p>第4オクテッドはご自由に。ここでは12にしてます。\nVagrantを再起動。</p>\n<h2>VMwear上のOSから接続確認</h2>\n<p>hostsファイル編集</p>\n<pre><code class=\"language-bash\">vi /etc/hosts</code></pre>\n<p>hostを追記 \'vagrant.local\'はご自由に。</p>\n<pre><code class=\"language-bash\">172.16.221.12 vagrant.local</code></pre>\n<p>VagrantへのネットワークをNmapで確認</p>\n<pre><code class=\"language-bash\">○ → nmap 172.16.221.12</code></pre>\n<pre><code class=\"language-bash\">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-01 13:46 JST\nNmap scan report for centos75.exp (172.16.221.12)\nHost is up (0.00042s latency).\nNot shown: 994 closed ports\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n111/tcp  open  rpcbind\n443/tcp  open  https\n3000/tcp open  ppp\n3306/tcp open  mysql</code></pre>\n<p>繋がりました。</p>','Vagrant(VirtualBox)とVMwear Fusion をネットワーク共有','VMwaer上のOSからVagrant (VirtualBox) を突つきたい時のネットワーク設定','inherit','closed','closed','','344-revision-v1','','','2019-10-01 15:23:00','2019-10-01 06:23:00','開発中のプロジェクトにVMwear上のOSからテストなどしたいけれども開発中のプロジェクトをグローバルなサーバーにアップするのも\r\n<span class=\'\'under_line\">めんどくさい</span>のでVMwearFusionのネットワークにVagrantを設定しローカル内で完結させる。\r\n\r\n\r\n\r\n## VMware上のOSのネットワーク設定\r\nVMの設定を開く\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.39.35.png)\r\n\r\nデバイスを追加をクリック\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.40.35.png)\r\n\r\nネットワークアダプタを追加\r\n\'Macを共有\' を設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-14.00.03.png)\r\n\r\n## Vagrant側のネットワーク設定\r\nHostOSからVMwearネットワークを確認\r\n```bash\r\nifconfig \r\n```\r\n\r\n```bash\r\n...\r\n...\r\n vmnet8: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500\r\n        ether 00:50:56:c0:00:08 \r\n        inet 172.16.221.1 netmask 0xffffff00 broadcast 172.16.221.255\r\n...\r\n...\r\n```\r\nこの情報を元に Vagratfile に追記　（クラスC)\r\n```bash\r\n config.vm.network :public_network, :bridge =&gt; &quot;vmnet8&quot;, ip: &quot;172.16.221.12&quot;\r\n```\r\n第4オクテッドはご自由に。ここでは12にしてます。\r\nVagrantを再起動。\r\n\r\n## VMwear上のOSから接続確認\r\nhostsファイル編集\r\n```bash\r\nvi /etc/hosts\r\n```\r\nhostを追記 \'vagrant.local\'はご自由に。\r\n```bash\r\n172.16.221.12 vagrant.local\r\n```\r\nVagrantへのネットワークをNmapで確認\r\n```bash\r\n○ → nmap 172.16.221.12\r\n```\r\n```bash\r\nStarting Nmap 7.80 ( https://nmap.org ) at 2019-10-01 13:46 JST\r\nNmap scan report for centos75.exp (172.16.221.12)\r\nHost is up (0.00042s latency).\r\nNot shown: 994 closed ports\r\nPORT     STATE SERVICE\r\n22/tcp   open  ssh\r\n80/tcp   open  http\r\n111/tcp  open  rpcbind\r\n443/tcp  open  https\r\n3000/tcp open  ppp\r\n3306/tcp open  mysql\r\n```\r\n繋がりました。',344,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/344-revision-v1/',0,'revision','',0),(353,1,'2019-10-01 15:23:39','2019-10-01 06:23:39','<p>開発中のプロジェクトにVMwear上のOSからテストなどしたいけれども開発中のプロジェクトをグローバルなサーバーにアップするのも\n<span class=\"under_line\">めんどくさい</span>のでVMwearFusionのネットワークにVagrantを設定しローカル内で完結させる。</p>\n<h2>VMware上のOSのネットワーク設定</h2>\n<p>VMの設定を開く</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.39.35.png\" alt=\"\" /></p>\n<p>デバイスを追加をクリック</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.40.35.png\" alt=\"\" /></p>\n<p>ネットワークアダプタを追加\n\'Macを共有\' を設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-14.00.03.png\" alt=\"\" /></p>\n<h2>Vagrant側のネットワーク設定</h2>\n<p>HostOSからVMwearネットワークを確認</p>\n<pre><code class=\"language-bash\">ifconfig </code></pre>\n<pre><code class=\"language-bash\">...\n...\n vmnet8: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500\n        ether 00:50:56:c0:00:08 \n        inet 172.16.221.1 netmask 0xffffff00 broadcast 172.16.221.255\n...\n...</code></pre>\n<p>この情報を元に Vagratfile に追記　（クラスC)</p>\n<pre><code class=\"language-bash\"> config.vm.network :public_network, :bridge =&gt; &quot;vmnet8&quot;, ip: &quot;172.16.221.12&quot;</code></pre>\n<p>第4オクテッドはご自由に。ここでは12にしてます。\nVagrantを再起動。</p>\n<h2>VMwear上のOSから接続確認</h2>\n<p>hostsファイル編集</p>\n<pre><code class=\"language-bash\">vi /etc/hosts</code></pre>\n<p>hostを追記 \'vagrant.local\'はご自由に。</p>\n<pre><code class=\"language-bash\">172.16.221.12 vagrant.local</code></pre>\n<p>VagrantへのネットワークをNmapで確認</p>\n<pre><code class=\"language-bash\">○ → nmap 172.16.221.12</code></pre>\n<pre><code class=\"language-bash\">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-01 13:46 JST\nNmap scan report for centos75.exp (172.16.221.12)\nHost is up (0.00042s latency).\nNot shown: 994 closed ports\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n111/tcp  open  rpcbind\n443/tcp  open  https\n3000/tcp open  ppp\n3306/tcp open  mysql</code></pre>\n<p>繋がりました。</p>','Vagrant(VirtualBox)とVMwear Fusion をネットワーク共有','VMwaer上のOSからVagrant (VirtualBox) を突つきたい時のネットワーク設定','inherit','closed','closed','','344-revision-v1','','','2019-10-01 15:23:39','2019-10-01 06:23:39','開発中のプロジェクトにVMwear上のOSからテストなどしたいけれども開発中のプロジェクトをグローバルなサーバーにアップするのも\r\n<span class=\"under_line\">めんどくさい</span>のでVMwearFusionのネットワークにVagrantを設定しローカル内で完結させる。\r\n\r\n\r\n\r\n## VMware上のOSのネットワーク設定\r\nVMの設定を開く\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.39.35.png)\r\n\r\nデバイスを追加をクリック\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.40.35.png)\r\n\r\nネットワークアダプタを追加\r\n\'Macを共有\' を設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-14.00.03.png)\r\n\r\n## Vagrant側のネットワーク設定\r\nHostOSからVMwearネットワークを確認\r\n```bash\r\nifconfig \r\n```\r\n\r\n```bash\r\n...\r\n...\r\n vmnet8: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500\r\n        ether 00:50:56:c0:00:08 \r\n        inet 172.16.221.1 netmask 0xffffff00 broadcast 172.16.221.255\r\n...\r\n...\r\n```\r\nこの情報を元に Vagratfile に追記　（クラスC)\r\n```bash\r\n config.vm.network :public_network, :bridge =&gt; &quot;vmnet8&quot;, ip: &quot;172.16.221.12&quot;\r\n```\r\n第4オクテッドはご自由に。ここでは12にしてます。\r\nVagrantを再起動。\r\n\r\n## VMwear上のOSから接続確認\r\nhostsファイル編集\r\n```bash\r\nvi /etc/hosts\r\n```\r\nhostを追記 \'vagrant.local\'はご自由に。\r\n```bash\r\n172.16.221.12 vagrant.local\r\n```\r\nVagrantへのネットワークをNmapで確認\r\n```bash\r\n○ → nmap 172.16.221.12\r\n```\r\n```bash\r\nStarting Nmap 7.80 ( https://nmap.org ) at 2019-10-01 13:46 JST\r\nNmap scan report for centos75.exp (172.16.221.12)\r\nHost is up (0.00042s latency).\r\nNot shown: 994 closed ports\r\nPORT     STATE SERVICE\r\n22/tcp   open  ssh\r\n80/tcp   open  http\r\n111/tcp  open  rpcbind\r\n443/tcp  open  https\r\n3000/tcp open  ppp\r\n3306/tcp open  mysql\r\n```\r\n繋がりました。',344,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/344-revision-v1/',0,'revision','',0),(354,1,'2019-11-02 23:12:36','2019-11-02 14:12:36','<p>パスワード生成には</p>\n<ul>\n<li>大文字</li>\n<li>小文字</li>\n<li>数字</li>\n<li>記号</li>\n</ul>\n<p>混じりで8桁以上とか、とにかく<span class=\"under_line\">めんどくさい</span>ので簡単に生成してくれる \'pwgen\' が便利です。</p>\n<h2>pwgen Install</h2>\n<pre><code class=\"language-bash\"># brew\nbrew install pwgen\n\n#apt\napt-get install pwgen\n\n#yum\nyum install pwgen</code></pre>\n<p>よく使うやつ</p>\n<pre><code class=\"language-bash\">○ → pwgen -y 16 1\nniey2Wienah6ca~k</code></pre>\n<p>第一引数</p>\n<ul>\n<li>-y 記号を含める</li>\n<li>-0 数字を含めない</li>\n<li>-A 大文字を含めない</li>\n</ul>\n<p>第二引数</p>\n<ul>\n<li>パスワードの桁数</li>\n</ul>\n<p>第三引数</p>\n<ul>\n<li>生成するパスワード数</li>\n</ul>','パスワード生成に便利なツール \'pwgen\'','複雑なパスワードをコマンド一発で生成','publish','closed','open','','pwgen','','','2019-11-02 23:14:00','2019-11-02 14:14:00','パスワード生成には\r\n- 大文字\r\n- 小文字\r\n- 数字\r\n- 記号\r\n\r\n混じりで8桁以上とか、とにかく<span class=\"under_line\">めんどくさい</span>ので簡単に生成してくれる \'pwgen\' が便利です。\r\n\r\n## pwgen Install\r\n```bash\r\n# brew\r\nbrew install pwgen\r\n\r\n#apt\r\napt-get install pwgen\r\n\r\n#yum\r\nyum install pwgen\r\n```\r\n\r\nよく使うやつ\r\n```bash\r\n○ → pwgen -y 16 1\r\nniey2Wienah6ca~k\r\n```\r\n第一引数\r\n- -y 記号を含める\r\n- -0 数字を含めない\r\n- -A 大文字を含めない\r\n\r\n第二引数\r\n- パスワードの桁数\r\n\r\n第三引数\r\n- 生成するパスワード数\r\n',0,'https://blog.webdimension.jp/?p=354',0,'post','',0),(355,1,'2019-10-01 15:28:12','2019-10-01 06:28:12','<p>パスワード生成には</p>\n<ul>\n<li>大文字</li>\n<li>小文字</li>\n<li>数字</li>\n<li>記号</li>\n</ul>\n<p>混じりで8桁以上と、とにかく<span class=\"under_line\">めんどくさい</span>ので簡単に生成してくれる \'pwgen\' が便利です。</p>','パスワード生成に便利なツール \' pwgen\'','','inherit','closed','closed','','354-revision-v1','','','2019-10-01 15:28:12','2019-10-01 06:28:12','パスワード生成には\r\n- 大文字\r\n- 小文字\r\n- 数字\r\n- 記号\r\n\r\n混じりで8桁以上と、とにかく<span class=\"under_line\">めんどくさい</span>ので簡単に生成してくれる \'pwgen\' が便利です。\r\n\r\n\r\n',354,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/354-revision-v1/',0,'revision','',0),(356,1,'2019-10-01 15:39:05','2019-10-01 06:39:05','<p>パスワード生成には</p>\n<ul>\n<li>大文字</li>\n<li>小文字</li>\n<li>数字</li>\n<li>記号</li>\n</ul>\n<p>混じりで8桁以上とか、とにかく<span class=\"under_line\">めんどくさい</span>ので簡単に生成してくれる \'pwgen\' が便利です。</p>\n<h2>pwgen Install</h2>\n<pre><code class=\"language-bash\"># brew\nbrew install pwgen\n\n#apt\napt-get install pwgen\n\n#yum\nyum install pwgen</code></pre>\n<p>よく使うやつ</p>\n<pre><code class=\"language-bash\">○ → pwgen -y 16 1\nniey2Wienah6ca~k</code></pre>\n<p>第一引数</p>\n<ul>\n<li>-y 記号を含める</li>\n<li>-0 数字を含めない</li>\n<li>-A 大文字を含めない</li>\n</ul>\n<p>第二引数</p>\n<ul>\n<li>パスワードの桁数</li>\n</ul>\n<p>第三引数</p>\n<ul>\n<li>生成するパスワード数</li>\n</ul>','パスワード生成に便利なツール \' pwgen\'','','inherit','closed','closed','','354-revision-v1','','','2019-10-01 15:39:05','2019-10-01 06:39:05','パスワード生成には\r\n- 大文字\r\n- 小文字\r\n- 数字\r\n- 記号\r\n\r\n混じりで8桁以上とか、とにかく<span class=\"under_line\">めんどくさい</span>ので簡単に生成してくれる \'pwgen\' が便利です。\r\n\r\n## pwgen Install\r\n```bash\r\n# brew\r\nbrew install pwgen\r\n\r\n#apt\r\napt-get install pwgen\r\n\r\n#yum\r\nyum install pwgen\r\n```\r\n\r\nよく使うやつ\r\n```bash\r\n○ → pwgen -y 16 1\r\nniey2Wienah6ca~k\r\n```\r\n第一引数\r\n- -y 記号を含める\r\n- -0 数字を含めない\r\n- -A 大文字を含めない\r\n\r\n第二引数\r\n- パスワードの桁数\r\n\r\n第三引数\r\n- 生成するパスワード数\r\n',354,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/354-revision-v1/',0,'revision','',0),(357,1,'2019-10-01 15:42:41','2019-10-01 06:42:41','<p>パスワード生成には</p>\n<ul>\n<li>大文字</li>\n<li>小文字</li>\n<li>数字</li>\n<li>記号</li>\n</ul>\n<p>混じりで8桁以上とか、とにかく<span class=\"under_line\">めんどくさい</span>ので簡単に生成してくれる \'pwgen\' が便利です。</p>\n<h2>pwgen Install</h2>\n<pre><code class=\"language-bash\"># brew\nbrew install pwgen\n\n#apt\napt-get install pwgen\n\n#yum\nyum install pwgen</code></pre>\n<p>よく使うやつ</p>\n<pre><code class=\"language-bash\">○ → pwgen -y 16 1\nniey2Wienah6ca~k</code></pre>\n<p>第一引数</p>\n<ul>\n<li>-y 記号を含める</li>\n<li>-0 数字を含めない</li>\n<li>-A 大文字を含めない</li>\n</ul>\n<p>第二引数</p>\n<ul>\n<li>パスワードの桁数</li>\n</ul>\n<p>第三引数</p>\n<ul>\n<li>生成するパスワード数</li>\n</ul>','パスワード生成に便利なツール \'pwgen\'','複雑なパスワードをコマンド一発で生成','inherit','closed','closed','','354-revision-v1','','','2019-10-01 15:42:41','2019-10-01 06:42:41','パスワード生成には\r\n- 大文字\r\n- 小文字\r\n- 数字\r\n- 記号\r\n\r\n混じりで8桁以上とか、とにかく<span class=\"under_line\">めんどくさい</span>ので簡単に生成してくれる \'pwgen\' が便利です。\r\n\r\n## pwgen Install\r\n```bash\r\n# brew\r\nbrew install pwgen\r\n\r\n#apt\r\napt-get install pwgen\r\n\r\n#yum\r\nyum install pwgen\r\n```\r\n\r\nよく使うやつ\r\n```bash\r\n○ → pwgen -y 16 1\r\nniey2Wienah6ca~k\r\n```\r\n第一引数\r\n- -y 記号を含める\r\n- -0 数字を含めない\r\n- -A 大文字を含めない\r\n\r\n第二引数\r\n- パスワードの桁数\r\n\r\n第三引数\r\n- 生成するパスワード数\r\n',354,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/354-revision-v1/',0,'revision','',0),(358,1,'2019-11-02 23:01:37','2019-11-02 14:01:37','<p>夜な夜な調べ物などでブラウジングしていると目が疲れますよね。</p>\n<p>特に深夜の白背景は目にきつい。\nここ最近はダークモードも流行ってきてる。</p>\n<p>気の利いたサイトでは白背景のようで実は若干グレーな背景であったりする。\n白背景が眩しい時、パソコンの照度を下げたり上げたりは<span class=\"under_line\">めんどくさい</span>のでショートカット一発でどんなサイトも強制的にダークモードにしてくれる<a href=\"https://chrome.google.com/webstore/detail/care-your-eyes/fidmpnedniahpnkeomejhnepmbdamlhlhttp://\" title=\"Care your Eyes\">care-your-eyes</a>が便利。\n(色反転なのでダークモードのサイトは逆にライトに。)</p>\n<hr />\n<p>Before</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.47.43.png\" alt=\"\" /></p>\n<hr />\n<p>After\n<kbd>alt</kbd>+<kbd>ctl</kbd>+<kbd>x</kbd></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.48.02.png\" alt=\"\" /></p>\n<p>目が辛くなってきたおっさんエンジニアには必須です！</p>','Chrome アドオン Care your Eyes','ChromeでもるWebサイトをダークモードで目の負担を軽減','publish','closed','open','','chrome-care-your-eyes','','','2019-11-02 23:01:37','2019-11-02 14:01:37','夜な夜な調べ物などでブラウジングしていると目が疲れますよね。\r\n\r\n特に深夜の白背景は目にきつい。\r\nここ最近はダークモードも流行ってきてる。\r\n\r\n気の利いたサイトでは白背景のようで実は若干グレーな背景であったりする。\r\n白背景が眩しい時、パソコンの照度を下げたり上げたりは<span class=\"under_line\">めんどくさい</span>のでショートカット一発でどんなサイトも強制的にダークモードにしてくれる[care-your-eyes][care-your-eyes]が便利。\r\n(色反転なのでダークモードのサイトは逆にライトに。)\r\n\r\n\r\n------------\r\n\r\n\r\nBefore\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.47.43.png)\r\n\r\n\r\n\r\n[care-your-eyes]: https://chrome.google.com/webstore/detail/care-your-eyes/fidmpnedniahpnkeomejhnepmbdamlhlhttp:// \"Care your Eyes\"\r\n\r\n\r\n------------\r\n\r\nAfter\r\n<kbd>alt</kbd>+<kbd>ctl</kbd>+<kbd>x</kbd>\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.48.02.png)\r\n\r\n\r\n目が辛くなってきたおっさんエンジニアには必須です！',0,'https://blog.webdimension.jp/?p=358',0,'post','',0),(359,1,'2019-10-01 15:46:53','2019-10-01 06:46:53','<p>test</p>','Chrome アドオン Care your Eyes','','inherit','closed','closed','','358-revision-v1','','','2019-10-01 15:46:53','2019-10-01 06:46:53','test',358,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/358-revision-v1/',0,'revision','',0),(361,1,'2019-10-01 15:58:26','2019-10-01 06:58:26','<p>夜な夜な調べ物などでブラウジングしていると目が疲れますよね。</p>\n<p>特に深夜の白背景は目にきつい。\nここ最近はダークモードも流行ってきてる。</p>\n<p>気の利いたサイトでは白背景のようで実は若干グレーな背景であったりする。\n白背景が眩しい時、パソコンの照度を下げたり上げたりは<span class=\"under_line\">めんどくさい</span>のでショートカット一発でどんなサイトも強制的にダークモードにしてくれる<a href=\"https://chrome.google.com/webstore/detail/care-your-eyes/fidmpnedniahpnkeomejhnepmbdamlhlhttp://\" title=\"Care your Eyes\">care-your-eyes</a>が便利。</p>\n<p>Before</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.47.43.png\" alt=\"\" /></p>','Chrome アドオン Care your Eyes','','inherit','closed','closed','','358-revision-v1','','','2019-10-01 15:58:26','2019-10-01 06:58:26','夜な夜な調べ物などでブラウジングしていると目が疲れますよね。\r\n\r\n特に深夜の白背景は目にきつい。\r\nここ最近はダークモードも流行ってきてる。\r\n\r\n気の利いたサイトでは白背景のようで実は若干グレーな背景であったりする。\r\n白背景が眩しい時、パソコンの照度を下げたり上げたりは<span class=\"under_line\">めんどくさい</span>のでショートカット一発でどんなサイトも強制的にダークモードにしてくれる[care-your-eyes][care-your-eyes]が便利。\r\n\r\n\r\n\r\nBefore\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.47.43.png)\r\n\r\n\r\n\r\n[care-your-eyes]: https://chrome.google.com/webstore/detail/care-your-eyes/fidmpnedniahpnkeomejhnepmbdamlhlhttp:// \"Care your Eyes\"',358,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/358-revision-v1/',0,'revision','',0),(363,1,'2019-10-01 16:04:22','2019-10-01 07:04:22','<p>夜な夜な調べ物などでブラウジングしていると目が疲れますよね。</p>\n<p>特に深夜の白背景は目にきつい。\nここ最近はダークモードも流行ってきてる。</p>\n<p>気の利いたサイトでは白背景のようで実は若干グレーな背景であったりする。\n白背景が眩しい時、パソコンの照度を下げたり上げたりは<span class=\"under_line\">めんどくさい</span>のでショートカット一発でどんなサイトも強制的にダークモードにしてくれる<a href=\"https://chrome.google.com/webstore/detail/care-your-eyes/fidmpnedniahpnkeomejhnepmbdamlhlhttp://\" title=\"Care your Eyes\">care-your-eyes</a>が便利。\n(色反転なのでダークモードのサイトは逆にライトに。)</p>\n<hr />\n<p>Before</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.47.43.png\" alt=\"\" /></p>\n<hr />\n<p>After\n<kbd>alt</kbd>+<kbd>ctl</kbd>+<kbd>x</kbd></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.48.02.png\" alt=\"\" /></p>\n<p>目が辛くなってきたおっさんエンジニアには必須です！</p>','Chrome アドオン Care your Eyes','','inherit','closed','closed','','358-revision-v1','','','2019-10-01 16:04:22','2019-10-01 07:04:22','夜な夜な調べ物などでブラウジングしていると目が疲れますよね。\r\n\r\n特に深夜の白背景は目にきつい。\r\nここ最近はダークモードも流行ってきてる。\r\n\r\n気の利いたサイトでは白背景のようで実は若干グレーな背景であったりする。\r\n白背景が眩しい時、パソコンの照度を下げたり上げたりは<span class=\"under_line\">めんどくさい</span>のでショートカット一発でどんなサイトも強制的にダークモードにしてくれる[care-your-eyes][care-your-eyes]が便利。\r\n(色反転なのでダークモードのサイトは逆にライトに。)\r\n\r\n\r\n------------\r\n\r\n\r\nBefore\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.47.43.png)\r\n\r\n\r\n\r\n[care-your-eyes]: https://chrome.google.com/webstore/detail/care-your-eyes/fidmpnedniahpnkeomejhnepmbdamlhlhttp:// \"Care your Eyes\"\r\n\r\n\r\n------------\r\n\r\nAfter\r\n<kbd>alt</kbd>+<kbd>ctl</kbd>+<kbd>x</kbd>\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.48.02.png)\r\n\r\n\r\n目が辛くなってきたおっさんエンジニアには必須です！',358,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/358-revision-v1/',0,'revision','',0),(364,1,'2019-10-01 16:06:11','2019-10-01 07:06:11','<p>夜な夜な調べ物などでブラウジングしていると目が疲れますよね。</p>\n<p>特に深夜の白背景は目にきつい。\nここ最近はダークモードも流行ってきてる。</p>\n<p>気の利いたサイトでは白背景のようで実は若干グレーな背景であったりする。\n白背景が眩しい時、パソコンの照度を下げたり上げたりは<span class=\"under_line\">めんどくさい</span>のでショートカット一発でどんなサイトも強制的にダークモードにしてくれる<a href=\"https://chrome.google.com/webstore/detail/care-your-eyes/fidmpnedniahpnkeomejhnepmbdamlhlhttp://\" title=\"Care your Eyes\">care-your-eyes</a>が便利。\n(色反転なのでダークモードのサイトは逆にライトに。)</p>\n<hr />\n<p>Before</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.47.43.png\" alt=\"\" /></p>\n<hr />\n<p>After\n<kbd>alt</kbd>+<kbd>ctl</kbd>+<kbd>x</kbd></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.48.02.png\" alt=\"\" /></p>\n<p>目が辛くなってきたおっさんエンジニアには必須です！</p>','Chrome アドオン Care your Eyes','ダークモードで目の負担を軽減','inherit','closed','closed','','358-revision-v1','','','2019-10-01 16:06:11','2019-10-01 07:06:11','夜な夜な調べ物などでブラウジングしていると目が疲れますよね。\r\n\r\n特に深夜の白背景は目にきつい。\r\nここ最近はダークモードも流行ってきてる。\r\n\r\n気の利いたサイトでは白背景のようで実は若干グレーな背景であったりする。\r\n白背景が眩しい時、パソコンの照度を下げたり上げたりは<span class=\"under_line\">めんどくさい</span>のでショートカット一発でどんなサイトも強制的にダークモードにしてくれる[care-your-eyes][care-your-eyes]が便利。\r\n(色反転なのでダークモードのサイトは逆にライトに。)\r\n\r\n\r\n------------\r\n\r\n\r\nBefore\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.47.43.png)\r\n\r\n\r\n\r\n[care-your-eyes]: https://chrome.google.com/webstore/detail/care-your-eyes/fidmpnedniahpnkeomejhnepmbdamlhlhttp:// \"Care your Eyes\"\r\n\r\n\r\n------------\r\n\r\nAfter\r\n<kbd>alt</kbd>+<kbd>ctl</kbd>+<kbd>x</kbd>\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.48.02.png)\r\n\r\n\r\n目が辛くなってきたおっさんエンジニアには必須です！',358,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/358-revision-v1/',0,'revision','',0),(367,1,'2019-10-01 16:26:16','2019-10-01 07:26:16','<p>夜な夜な調べ物などでブラウジングしていると目が疲れますよね。</p>\n<p>特に深夜の白背景は目にきつい。\nここ最近はダークモードも流行ってきてる。</p>\n<p>気の利いたサイトでは白背景のようで実は若干グレーな背景であったりする。\n白背景が眩しい時、パソコンの照度を下げたり上げたりは<span class=\"under_line\">めんどくさい</span>のでショートカット一発でどんなサイトも強制的にダークモードにしてくれる<a href=\"https://chrome.google.com/webstore/detail/care-your-eyes/fidmpnedniahpnkeomejhnepmbdamlhlhttp://\" title=\"Care your Eyes\">care-your-eyes</a>が便利。\n(色反転なのでダークモードのサイトは逆にライトに。)</p>\n<hr />\n<p>Before</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.47.43.png\" alt=\"\" /></p>\n<hr />\n<p>After\n<kbd>alt</kbd>+<kbd>ctl</kbd>+<kbd>x</kbd></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.48.02.png\" alt=\"\" /></p>\n<p>目が辛くなってきたおっさんエンジニアには必須です！</p>','Chrome アドオン Care your Eyes','ChromeでもるWebサイトをダークモードで目の負担を軽減','inherit','closed','closed','','358-revision-v1','','','2019-10-01 16:26:16','2019-10-01 07:26:16','夜な夜な調べ物などでブラウジングしていると目が疲れますよね。\r\n\r\n特に深夜の白背景は目にきつい。\r\nここ最近はダークモードも流行ってきてる。\r\n\r\n気の利いたサイトでは白背景のようで実は若干グレーな背景であったりする。\r\n白背景が眩しい時、パソコンの照度を下げたり上げたりは<span class=\"under_line\">めんどくさい</span>のでショートカット一発でどんなサイトも強制的にダークモードにしてくれる[care-your-eyes][care-your-eyes]が便利。\r\n(色反転なのでダークモードのサイトは逆にライトに。)\r\n\r\n\r\n------------\r\n\r\n\r\nBefore\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.47.43.png)\r\n\r\n\r\n\r\n[care-your-eyes]: https://chrome.google.com/webstore/detail/care-your-eyes/fidmpnedniahpnkeomejhnepmbdamlhlhttp:// \"Care your Eyes\"\r\n\r\n\r\n------------\r\n\r\nAfter\r\n<kbd>alt</kbd>+<kbd>ctl</kbd>+<kbd>x</kbd>\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.48.02.png)\r\n\r\n\r\n目が辛くなってきたおっさんエンジニアには必須です！',358,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/358-revision-v1/',0,'revision','',0),(369,1,'2019-11-02 23:11:21','2019-11-02 14:11:21','<p>sshログインをパスワード認証ではなく鍵認証にして ~/ssh/config に</p>\n<pre><code class=\"language-bash\">host vagrant.local\nHostName 192.168.33.11\nUser vagrant\nPort 22\nIdentityFile ~/.ssh/id_rsa</code></pre>\n<p>の様に設定を追加して</p>\n<pre><code class=\"language-bash\">ssh vagrant.local</code></pre>\n<p>でログイン。</p>\n<p>これはこれで大変便利なのですが、Hostの数が多くなるとHost名を覚えるのが<span class=\"under_line\">めんどくさい</span>。\n記憶力との戦いになる。戦わなくていい相手。</p>\n<p>Host一覧をプルダウンで表示させるスクリプトを考えてみた。\n(チョー簡単な内容です)</p>\n<pre><code class=\"language-bash\"> #!/bin/bash\n# grep host ~/.ssh/config | awk \'{print $2}\'\nssh_dir=$HOME/.ssh\nchmod 700  $ssh_dir\nchmod 600 $ssh_dir/*\narray=(<code>grep ^host $ssh_dir/config | awk &#039;{print $2}&#039;</code>)\narray_size=${#array[@]}\n# echo \"array size = $array_size\"\n\nn=0\nwhile [ $n -lt $array_size ] ;do\n     # eval echo \"\'[\'$n\']\'  ${array[$n]}\"\n      echo -e $\'\\e[96m\' \"[$n] ${array[$n]}\"\n    n=<code>expr $n + 1</code>\ndone\n\nread -p $\'\\e[93mEnter Number:\\e[0m\' number\nssh  ${array[$number]}</code></pre>\n<p>を sshs (仮)で保存および実行権限付与。</p>\n<p>~/.ssh/config が下記の場合</p>\n<pre><code class=\"language-bash\">host aaa.com\nHostName 192.168.33.1\nUser vagrant\nPort 22\nIdentityFile ~/.ssh/id_rsa\n\nhost bbb.com\nHostName 192.168.33.2\nUser vagrant\nPort 22\nIdentityFile ~/.ssh/id_rsa\n\nhost ccc.com\nHostName 192.168.33.3\nUser vagrant\nPort 22\nIdentityFile ~/.ssh/id_rsa</code></pre>\n<p>sshsの実行</p>\n<pre><code class=\"language-bash\">○ → sshs\n [0] aaa.com\n [1] bbb.com\n [2] ccc.com\nEnter Number:</code></pre>\n<p>目的のHostの番号を入力しエンター。</p>\n<p>たったこれだけですが非常に快適です。</p>','sshでのログインを快適に','sshでログインの際の手続きをちょっとのスクリプトで楽をする。記憶力とは戦わない。\r\n','publish','closed','open','','ssh-login-script','','','2019-11-06 19:26:54','2019-11-06 10:26:54','sshログインをパスワード認証ではなく鍵認証にして ~/ssh/config に\r\n\r\n```bash\r\nhost vagrant.local\r\nHostName 192.168.33.11\r\nUser vagrant\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n```\r\nの様に設定を追加して\r\n```bash\r\nssh vagrant.local\r\n```\r\nでログイン。\r\n\r\nこれはこれで大変便利なのですが、Hostの数が多くなるとHost名を覚えるのが<span class=\"under_line\">めんどくさい</span>。\r\n記憶力との戦いになる。戦わなくていい相手。\r\n\r\n Host一覧をプルダウンで表示させるスクリプトを考えてみた。\r\n (チョー簡単な内容です)\r\n \r\n ```bash\r\n #!/bin/bash\r\n# grep host ~/.ssh/config | awk \'{print $2}\'\r\nssh_dir=$HOME/.ssh\r\nchmod 700  $ssh_dir\r\nchmod 600 $ssh_dir/*\r\narray=(`grep ^host $ssh_dir/config | awk \'{print $2}\'`)\r\narray_size=${#array[@]}\r\n# echo \"array size = $array_size\"\r\n\r\nn=0\r\nwhile [ $n -lt $array_size ] ;do\r\n     # eval echo \"\'[\'$n\']\'  ${array[$n]}\"\r\n      echo -e $\'\\e[96m\' \"[$n] ${array[$n]}\"\r\n    n=`expr $n + 1`\r\ndone\r\n\r\nread -p $\'\\e[93mEnter Number:\\e[0m\' number\r\nssh  ${array[$number]}\r\n ```\r\n を sshs (仮)で保存および実行権限付与。\r\n \r\n~/.ssh/config が下記の場合\r\n```bash\r\nhost aaa.com\r\nHostName 192.168.33.1\r\nUser vagrant\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n\r\nhost bbb.com\r\nHostName 192.168.33.2\r\nUser vagrant\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n\r\nhost ccc.com\r\nHostName 192.168.33.3\r\nUser vagrant\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n```\r\n\r\nsshsの実行\r\n```bash\r\n○ → sshs\r\n [0] aaa.com\r\n [1] bbb.com\r\n [2] ccc.com\r\nEnter Number:\r\n```\r\n\r\n目的のHostの番号を入力しエンター。\r\n\r\nたったこれだけですが非常に快適です。\r\n\r\n',0,'https://blog.webdimension.jp/?p=369',0,'post','',0),(370,1,'2019-10-01 17:09:12','2019-10-01 08:09:12','<p>sshログインをパスワード認証ではなく鍵認証にして ~/ssh/config に</p>\n<pre><code class=\"language-bash\">host vagrant.local\nHostName 192.168.33.11\nUser vagrant\nPort 22\nIdentityFile ~/.ssh/id_rsa</code></pre>\n<p>の様に設定を追加して</p>\n<pre><code class=\"language-bash\">ssh vagrant.local</code></pre>\n<p>でログイン。</p>\n<p>これはこれで大変便利なのですが、Hostの数が多くなるとHost名を覚えるのが<span class=\"under_line\">めんどくさい</span>。\n記憶力との戦いになる。戦わなくていい相手。</p>\n<p>Host一覧をプルダウンで表示させるスクリプトを考えてみた。\n(チョー簡単な内容です)</p>\n<pre><code class=\"language-bash\"> #!/bin/bash\n# grep host ~/.ssh/config | awk \'{print $2}\'\nssh_dir=$HOME/.ssh\nchmod 700  $ssh_dir\nchmod 600 $ssh_dir/*\narray=(<code>grep ^host $ssh_dir/config | awk &#039;{print $2}&#039;</code>)\narray_size=${#array[@]}\n# echo \"array size = $array_size\"\n\nn=0\nwhile [ $n -lt $array_size ] ;do\n     # eval echo \"\'[\'$n\']\'  ${array[$n]}\"\n      echo -e $\'\\e[96m\' \"[$n] ${array[$n]}\"\n    n=<code>expr $n + 1</code>\ndone\n\nread -p $\'\\e[93mEnter Number:\\e[0m\' number\nssh  ${array[$number]}</code></pre>\n<p>を sshs (仮)で保存および実行権限付与。</p>\n<p>~/.ssh/config が下記の場合</p>\n<pre><code class=\"language-bash\">host docker\nHostName 192.168.33.50\nUser vagrant\nPort 22\nIdentityFile ~/.ssh/id_rsa\n\nhost oldrig_test\nHostName 118.27.30.95\nUser oldrig\nPort 22\nIdentityFile ~/.ssh/id_rsa\n\nhost oldrig\nHostName 133.242.5.17\nUser oldrig\nPort 22\nIdentityFile ~/.ssh/id_rsa</code></pre>\n<p>sshsの実行</p>\n<pre><code class=\"language-bash\">○ → sshs\n [0] aaa.com\n [1] bbb.com\n [2] ccc.com\nEnter Number:</code></pre>\n<p>目的のHostの番号を入力しエンター。</p>\n<p>たったこれだけですが非常に快適です。</p>','sshでのログインを快適に','sshでログインの際の手続きをちょっとのスクリプトで楽をする。\r\n','inherit','closed','closed','','369-revision-v1','','','2019-10-01 17:09:12','2019-10-01 08:09:12','sshログインをパスワード認証ではなく鍵認証にして ~/ssh/config に\r\n\r\n```bash\r\nhost vagrant.local\r\nHostName 192.168.33.11\r\nUser vagrant\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n```\r\nの様に設定を追加して\r\n```bash\r\nssh vagrant.local\r\n```\r\nでログイン。\r\n\r\nこれはこれで大変便利なのですが、Hostの数が多くなるとHost名を覚えるのが<span class=\"under_line\">めんどくさい</span>。\r\n記憶力との戦いになる。戦わなくていい相手。\r\n\r\n Host一覧をプルダウンで表示させるスクリプトを考えてみた。\r\n (チョー簡単な内容です)\r\n \r\n ```bash\r\n #!/bin/bash\r\n# grep host ~/.ssh/config | awk \'{print $2}\'\r\nssh_dir=$HOME/.ssh\r\nchmod 700  $ssh_dir\r\nchmod 600 $ssh_dir/*\r\narray=(`grep ^host $ssh_dir/config | awk \'{print $2}\'`)\r\narray_size=${#array[@]}\r\n# echo \"array size = $array_size\"\r\n\r\nn=0\r\nwhile [ $n -lt $array_size ] ;do\r\n     # eval echo \"\'[\'$n\']\'  ${array[$n]}\"\r\n      echo -e $\'\\e[96m\' \"[$n] ${array[$n]}\"\r\n    n=`expr $n + 1`\r\ndone\r\n\r\nread -p $\'\\e[93mEnter Number:\\e[0m\' number\r\nssh  ${array[$number]}\r\n ```\r\n を sshs (仮)で保存および実行権限付与。\r\n \r\n~/.ssh/config が下記の場合\r\n```bash\r\nhost docker\r\nHostName 192.168.33.50\r\nUser vagrant\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n\r\nhost oldrig_test\r\nHostName 118.27.30.95\r\nUser oldrig\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n\r\nhost oldrig\r\nHostName 133.242.5.17\r\nUser oldrig\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n```\r\n\r\nsshsの実行\r\n```bash\r\n○ → sshs\r\n [0] aaa.com\r\n [1] bbb.com\r\n [2] ccc.com\r\nEnter Number:\r\n```\r\n\r\n目的のHostの番号を入力しエンター。\r\n\r\nたったこれだけですが非常に快適です。\r\n\r\n',369,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/369-revision-v1/',0,'revision','',0),(372,1,'2019-10-01 17:29:07','2019-10-01 08:29:07','<p>sshログインをパスワード認証ではなく鍵認証にして ~/ssh/config に</p>\n<pre><code class=\"language-bash\">host vagrant.local\nHostName 192.168.33.11\nUser vagrant\nPort 22\nIdentityFile ~/.ssh/id_rsa</code></pre>\n<p>の様に設定を追加して</p>\n<pre><code class=\"language-bash\">ssh vagrant.local</code></pre>\n<p>でログイン。</p>\n<p>これはこれで大変便利なのですが、Hostの数が多くなるとHost名を覚えるのが<span class=\"under_line\">めんどくさい</span>。\n記憶力との戦いになる。戦わなくていい相手。</p>\n<p>Host一覧をプルダウンで表示させるスクリプトを考えてみた。\n(チョー簡単な内容です)</p>\n<pre><code class=\"language-bash\"> #!/bin/bash\n# grep host ~/.ssh/config | awk \'{print $2}\'\nssh_dir=$HOME/.ssh\nchmod 700  $ssh_dir\nchmod 600 $ssh_dir/*\narray=(<code>grep ^host $ssh_dir/config | awk &#039;{print $2}&#039;</code>)\narray_size=${#array[@]}\n# echo \"array size = $array_size\"\n\nn=0\nwhile [ $n -lt $array_size ] ;do\n     # eval echo \"\'[\'$n\']\'  ${array[$n]}\"\n      echo -e $\'\\e[96m\' \"[$n] ${array[$n]}\"\n    n=<code>expr $n + 1</code>\ndone\n\nread -p $\'\\e[93mEnter Number:\\e[0m\' number\nssh  ${array[$number]}</code></pre>\n<p>を sshs (仮)で保存および実行権限付与。</p>\n<p>~/.ssh/config が下記の場合</p>\n<pre><code class=\"language-bash\">host docker\nHostName 192.168.33.50\nUser vagrant\nPort 22\nIdentityFile ~/.ssh/id_rsa\n\nhost oldrig_test\nHostName 118.27.30.95\nUser oldrig\nPort 22\nIdentityFile ~/.ssh/id_rsa\n\nhost oldrig\nHostName 133.242.5.17\nUser oldrig\nPort 22\nIdentityFile ~/.ssh/id_rsa</code></pre>\n<p>sshsの実行</p>\n<pre><code class=\"language-bash\">○ → sshs\n [0] aaa.com\n [1] bbb.com\n [2] ccc.com\nEnter Number:</code></pre>\n<p>目的のHostの番号を入力しエンター。</p>\n<p>たったこれだけですが非常に快適です。</p>','sshでのログインを快適に','sshでログインの際の手続きをちょっとのスクリプトで楽をする。記憶力とは戦わない。\r\n','inherit','closed','closed','','369-revision-v1','','','2019-10-01 17:29:07','2019-10-01 08:29:07','sshログインをパスワード認証ではなく鍵認証にして ~/ssh/config に\r\n\r\n```bash\r\nhost vagrant.local\r\nHostName 192.168.33.11\r\nUser vagrant\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n```\r\nの様に設定を追加して\r\n```bash\r\nssh vagrant.local\r\n```\r\nでログイン。\r\n\r\nこれはこれで大変便利なのですが、Hostの数が多くなるとHost名を覚えるのが<span class=\"under_line\">めんどくさい</span>。\r\n記憶力との戦いになる。戦わなくていい相手。\r\n\r\n Host一覧をプルダウンで表示させるスクリプトを考えてみた。\r\n (チョー簡単な内容です)\r\n \r\n ```bash\r\n #!/bin/bash\r\n# grep host ~/.ssh/config | awk \'{print $2}\'\r\nssh_dir=$HOME/.ssh\r\nchmod 700  $ssh_dir\r\nchmod 600 $ssh_dir/*\r\narray=(`grep ^host $ssh_dir/config | awk \'{print $2}\'`)\r\narray_size=${#array[@]}\r\n# echo \"array size = $array_size\"\r\n\r\nn=0\r\nwhile [ $n -lt $array_size ] ;do\r\n     # eval echo \"\'[\'$n\']\'  ${array[$n]}\"\r\n      echo -e $\'\\e[96m\' \"[$n] ${array[$n]}\"\r\n    n=`expr $n + 1`\r\ndone\r\n\r\nread -p $\'\\e[93mEnter Number:\\e[0m\' number\r\nssh  ${array[$number]}\r\n ```\r\n を sshs (仮)で保存および実行権限付与。\r\n \r\n~/.ssh/config が下記の場合\r\n```bash\r\nhost docker\r\nHostName 192.168.33.50\r\nUser vagrant\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n\r\nhost oldrig_test\r\nHostName 118.27.30.95\r\nUser oldrig\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n\r\nhost oldrig\r\nHostName 133.242.5.17\r\nUser oldrig\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n```\r\n\r\nsshsの実行\r\n```bash\r\n○ → sshs\r\n [0] aaa.com\r\n [1] bbb.com\r\n [2] ccc.com\r\nEnter Number:\r\n```\r\n\r\n目的のHostの番号を入力しエンター。\r\n\r\nたったこれだけですが非常に快適です。\r\n\r\n',369,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/369-revision-v1/',0,'revision','',0),(373,1,'2019-10-18 10:03:25','2019-10-18 01:03:25','<p>ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。</p>\n<p><strong>Parrot Security OS</strong> とはその名前から &quot;<strong>Security</strong>に特化したOS&quot; というのは推測できますが <strong>ペネレーションテスト</strong>や<strong>リバースエンジニアリング</strong>だけでなくOffice系も<strong>プログラミング</strong>もほぼ全てに精通したOSというのは過大評価ではないのではと思います。</p>\n<p><strong>ペネレーションテス</strong>トといえば真っ先に&quot;<strong>Kali Linux</strong>&quot;というイメージもありますが&quot;P<strong>arrot Security OS</strong>&quot;は&quot;<strong>Kali Linux</strong>&quot;のツールをほぼほぼ搭載しています。\n&quot;<strong>Kali Linux</strong>&quot;以上かもしれません。\nどちらも<strong>Debian</strong>系のOSです。</p>\n<p>イタリア製というのもあってか美しいです</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png\" alt=\"\" /></p>\n<p>何かひらくと\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png\" alt=\"\" /></p>\n<p>Office系(<strong>libreOffice</strong>)</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png\" alt=\"\" /></p>\n<p>ブラウザは<strong>Firefox</strong>がデフォルトです。\n&quot;TORブラウザ”もデフォルトで搭載してまがここでは触れません。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png\" alt=\"\" /></p>\n<h2>VMwear上に Parrot Security OS をインストール</h2>\n<p>環境</p>\n<ul>\n<li>MAC mojave</li>\n<li>VMwear Fusion 11.5.0 </li>\n</ul>\n<p>OSのイメージファイルは本家<a href=\"https://parrotlinux.org/\">Parrot Security OS</a>からダウンロードするのも良いですし、<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からVMwear用のイメージをダウンロードしてもいいでしょう。\n今回は<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からインストールしました。</p>\n<p>VMweraへのOSのインストールはここでは触れません。\n簡単にできますので。</p>\n<h2>Prrot Security OSに追加でインストール</h2>\n<p><strong>Prrot Security OS</strong>にはデフォルトで一般的なアプリは入っています。\n<strong>Vim</strong>は<strong>Nvim</strong>がインストールされてました。\n以下を追加でインストールしました。\nUSER_NAMEは設定されているものに変更してください。\n例) oxboxes.org </p>\n<pre><code class=\"language-bash\">#sudo su をパスワードなしで行える設定\nsudo addgroup wheel\nsudo usermod -aG wheel USER_NAME\n\nvim /etc/pam.d/su \n#追記\n\nauth sufficient pam_wheel.so trust group=wheel\nsudo visudo\n#追記\nUSER_NAME  ALL=NOPASSWD: ALL\n%wheel ALL=(ALL) NOPASSWD:ALL</code></pre>\n<pre><code class=\"language-bash\">#日本語入力\napt install -y ibus-mozc</code></pre>\n<pre><code class=\"language-bash\">#なくてもいいツール(個人の趣味)\n## neofetch\napt install neofetch\n## glances\napt install glances\n## bash_it\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\n~/.bash_it/install.sh\n## lolcat\nsudo apt-get install lolcat\n## Terminology 動画も画像も扱えるTerminal\nsudo apt-get install terminology\n\n## tmuxinator\ngem install tmuxinator\n## tmux使用時のコピペに必要\nsudo apt install xsel</code></pre>\n<h2>Tmuxが動かない</h2>\n<p>いつも<strong>Tmuxinator</strong>を使ているので4.2の設定をそのまま持ってきたところ<strong>Tmuxinator</strong>が起動しない。(Tmux)\n調べたところ</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\nset-option -g status-fg black\nset-option -g status-bg &quot;colour237&quot;\n\n# ウィンドウリストの色を設定する\nsetw -g window-status-fg white\nsetw -g window-status-bg black\nsetw -g window-status-attr dim\n# アクティブなウィンドウを目立たせる\nsetw -g window-status-current-fg black\nsetw -g window-status-current-bg &quot;colour68&quot;\nsetw -g window-status-current-attr bright\n\n# ペインボーダーの色を設定する\nset -g pane-border-fg &quot;colour237&quot;\nset -g pane-border-bg &quot;colour237&quot;\n# アクティブなペインを目立たせる\nset -g pane-active-border-fg &quot;colour68&quot;\nset -g pane-active-border-bg  &quot;colour237&quot;\n\n# コマンドラインの色を設定する\nset -g message-fg white\nset -g message-bg black\nset -g message-attr bright</code></pre>\n<p>ここらへんでエラーになる。\nググったところ<strong>Tmux</strong>のバージョンの違いによる設定ファイルの記述らしい。\n<a href=\"https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed\">参考サイト</a></p>\n<p>変更後</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\n set-option -g status-style fg=&quot;black&quot;\n set-option -g status-style bg=&quot;colour237&quot;\n#\n## ウィンドウリストの色を設定する\n setw -g window-status-style fg=&quot;white&quot;\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\n# setw -g window-status-attr dim\n\n## アクティブなウィンドウを目立たせる\n setw -g window-status-current-style fg=&quot;black&quot;\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\n# setw -g window-status-current-style attr=&quot;bright&quot;\n#\n## ペインボーダーの色を設定する\n set -g pane-border-style fg=&quot;colour237&quot;\n set -g pane-border-style bg=&quot;colour237&quot;\n\n## アクティブなペインを目立たせる\n# set -g pane-active-border-style fg=&quot;colour68&quot;\n# set -g pane-active-border-style bg=&quot;colour237&quot;\n#\n## コマンドラインの色を設定する\n set -g message-style fg=&quot;white&quot;\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\n#set -g message-style attr=&quot;bright&quot;</code></pre>\n<p>で無事4.2同様動かすことができました。</p>\n<h2>Kali Linus VS Parrot Security OS</h2>\n<p>なんて記事もありますが適材適所かと思います。\nHostOS側の開発環境への<strong>ペネレーションテスト</strong>や<strong>セキュリティーチェック</strong>などはVM上の<strong>Kalli Linux</strong>という使いかたはありかと思います。\n<strong>Parrot Security OS</strong>は実機で使ってこそパフォーマンスを発揮するような感じです。</p>\n<p>ということで<strong>Parrot Security OS</strong>を実機で持ちたい・・・\nが、<strong>Parrot Srcurity OS</strong>は日本語での情報は皆無と言っていいくらい厳しいです。\n英語、中国語では活発なコミュニティーがあるようです。</p>\n<p>最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、<strong>Kali Linux</strong>のように&quot;Think padと相性がいい&quot;とかあるのだろうか・・・</p>\n<p>今後の課題です。</p>','Parrot Security OS','ペネレーションテストなど行う場合ToolをMACにインストールするのは<span  class=\"under_line\">めんどくさい</span>し限界もあるので<strong>Parrot Security OS</strong>を準備する','publish','closed','open','','parrot-scurity-os','','','2019-10-20 08:59:42','2019-10-19 23:59:42','ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。\r\n\r\n__Parrot Security OS__ とはその名前から \"__Security__に特化したOS\" というのは推測できますが __ペネレーションテスト__や__リバースエンジニアリング__だけでなくOffice系も__プログラミング__もほぼ全てに精通したOSというのは過大評価ではないのではと思います。\r\n\r\n__ペネレーションテス__トといえば真っ先に\"__Kali Linux__\"というイメージもありますが\"P__arrot Security OS__\"は\"__Kali Linux__\"のツールをほぼほぼ搭載しています。\r\n\"__Kali Linux__\"以上かもしれません。\r\nどちらも__Debian__系のOSです。\r\n\r\nイタリア製というのもあってか美しいです\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png)\r\n\r\n何かひらくと\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png)\r\n\r\nOffice系(__libreOffice__)\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png)\r\n\r\nブラウザは__Firefox__がデフォルトです。\r\n\"TORブラウザ”もデフォルトで搭載してまがここでは触れません。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png)\r\n\r\n## VMwear上に Parrot Security OS をインストール\r\n環境\r\n- MAC mojave\r\n- VMwear Fusion 11.5.0 \r\n\r\nOSのイメージファイルは本家[Parrot Security OS](https://parrotlinux.org/)からダウンロードするのも良いですし、[osboxes.org](https://www.osboxes.org/parrot-security-os/)からVMwear用のイメージをダウンロードしてもいいでしょう。\r\n今回は[osboxes.org](https://www.osboxes.org/parrot-security-os/)からインストールしました。\r\n\r\nVMweraへのOSのインストールはここでは触れません。\r\n簡単にできますので。\r\n\r\n## Prrot Security OSに追加でインストール\r\n__Prrot Security OS__にはデフォルトで一般的なアプリは入っています。\r\n__Vim__は__Nvim__がインストールされてました。\r\n以下を追加でインストールしました。\r\nUSER_NAMEは設定されているものに変更してください。\r\n例) oxboxes.org \r\n```bash\r\n#sudo su をパスワードなしで行える設定\r\nsudo addgroup wheel\r\nsudo usermod -aG wheel USER_NAME\r\n\r\nvim /etc/pam.d/su \r\n#追記\r\n\r\nauth sufficient pam_wheel.so trust group=wheel\r\nsudo visudo\r\n#追記\r\nUSER_NAME  ALL=NOPASSWD: ALL\r\n%wheel ALL=(ALL) NOPASSWD:ALL\r\n```\r\n\r\n```bash\r\n#日本語入力\r\napt install -y ibus-mozc\r\n```\r\n\r\n```bash\r\n#なくてもいいツール(個人の趣味)\r\n## neofetch\r\napt install neofetch\r\n## glances\r\napt install glances\r\n## bash_it\r\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\r\n~/.bash_it/install.sh\r\n## lolcat\r\nsudo apt-get install lolcat\r\n## Terminology 動画も画像も扱えるTerminal\r\nsudo apt-get install terminology\r\n\r\n## tmuxinator\r\ngem install tmuxinator\r\n## tmux使用時のコピペに必要\r\nsudo apt install xsel\r\n```\r\n\r\n## Tmuxが動かない\r\nいつも__Tmuxinator__を使ているので4.2の設定をそのまま持ってきたところ__Tmuxinator__が起動しない。(Tmux)\r\n調べたところ\r\n```bash\r\n# ステータスバーの色を設定する\r\nset-option -g status-fg black\r\nset-option -g status-bg &quot;colour237&quot;\r\n\r\n# ウィンドウリストの色を設定する\r\nsetw -g window-status-fg white\r\nsetw -g window-status-bg black\r\nsetw -g window-status-attr dim\r\n# アクティブなウィンドウを目立たせる\r\nsetw -g window-status-current-fg black\r\nsetw -g window-status-current-bg &quot;colour68&quot;\r\nsetw -g window-status-current-attr bright\r\n\r\n# ペインボーダーの色を設定する\r\nset -g pane-border-fg &quot;colour237&quot;\r\nset -g pane-border-bg &quot;colour237&quot;\r\n# アクティブなペインを目立たせる\r\nset -g pane-active-border-fg &quot;colour68&quot;\r\nset -g pane-active-border-bg  &quot;colour237&quot;\r\n\r\n# コマンドラインの色を設定する\r\nset -g message-fg white\r\nset -g message-bg black\r\nset -g message-attr bright\r\n```\r\nここらへんでエラーになる。\r\nググったところ__Tmux__のバージョンの違いによる設定ファイルの記述らしい。\r\n[参考サイト](https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed)\r\n\r\n変更後\r\n```bash\r\n# ステータスバーの色を設定する\r\n set-option -g status-style fg=&quot;black&quot;\r\n set-option -g status-style bg=&quot;colour237&quot;\r\n#\r\n## ウィンドウリストの色を設定する\r\n setw -g window-status-style fg=&quot;white&quot;\r\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\r\n# setw -g window-status-attr dim\r\n\r\n## アクティブなウィンドウを目立たせる\r\n setw -g window-status-current-style fg=&quot;black&quot;\r\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\r\n# setw -g window-status-current-style attr=&quot;bright&quot;\r\n#\r\n## ペインボーダーの色を設定する\r\n set -g pane-border-style fg=&quot;colour237&quot;\r\n set -g pane-border-style bg=&quot;colour237&quot;\r\n\r\n## アクティブなペインを目立たせる\r\n# set -g pane-active-border-style fg=&quot;colour68&quot;\r\n# set -g pane-active-border-style bg=&quot;colour237&quot;\r\n#\r\n## コマンドラインの色を設定する\r\n set -g message-style fg=&quot;white&quot;\r\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\r\n#set -g message-style attr=&quot;bright&quot;\r\n```\r\n\r\nで無事4.2同様動かすことができました。\r\n\r\n## Kali Linus VS Parrot Security OS \r\nなんて記事もありますが適材適所かと思います。\r\nHostOS側の開発環境への__ペネレーションテスト__や__セキュリティーチェック__などはVM上の__Kalli Linux__という使いかたはありかと思います。\r\n__Parrot Security OS__は実機で使ってこそパフォーマンスを発揮するような感じです。\r\n\r\nということで__Parrot Security OS__を実機で持ちたい・・・\r\nが、__Parrot Srcurity OS__は日本語での情報は皆無と言っていいくらい厳しいです。\r\n英語、中国語では活発なコミュニティーがあるようです。\r\n\r\n最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、__Kali Linux__のように\"Think padと相性がいい\"とかあるのだろうか・・・\r\n\r\n今後の課題です。\r\n\r\n\r\n\r\n\r\n',0,'https://blog.webdimension.jp/?p=373',0,'post','',0),(378,1,'2019-10-01 21:54:00','2019-10-01 12:54:00','<p>ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。</p>\n<p><strong>Parrot Security OS</strong> とはその名前から &quot;<strong>Security</strong>に特化したOS&quot; というのは推測できますが <strong>ペネレーションテスト</strong>や<strong>リバースエンジニアリング</strong>だけでなくOffice系も<strong>プログラミング</strong>もほぼ全てに精通したOSというのは過大評価ではないのではと思います。</p>\n<p><strong>ペネレーションテス</strong>トといえば真っ先に&quot;<strong>Kali Linux</strong>&quot;というイメージもありますが&quot;P<strong>arrot Security OS</strong>&quot;は&quot;<strong>Kali Linux</strong>&quot;のツールをほぼほぼ搭載しています。\n&quot;<strong>Kali Linux</strong>&quot;以上かもしれません。\nどちらも<strong>Debian</strong>系のOSです。</p>\n<p>イタリア製というのもあってか美しいです</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png\" alt=\"\" /></p>\n<p>何かひらくと\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png\" alt=\"\" /></p>\n<p>Office系(<strong>libreOffice</strong>)</p>\n<p><img src=\"http//blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png\" alt=\"\" /></p>\n<p>ブラウザは<strong>Firefox</strong>がデフォルトです。\n&quot;TORブラウザ”もデフォルトで搭載してまがここでは触れません。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png\" alt=\"\" /></p>\n<h2>VMwear上に Parrot Security OS をインストール</h2>\n<p>環境</p>\n<ul>\n<li>MAC mojave</li>\n<li>VMwear Fusion 11.5.0 </li>\n</ul>\n<p>OSのイメージファイルは本家<a href=\"https://parrotlinux.org/\">Parrot Security OS</a>からダウンロードするのも良いですし、<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からVMwear用のイメージをダウンロードしてもいいでしょう。\n今回は<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からインストールしました。</p>\n<p>VMweraへのOSのインストールはここでは触れません。\n簡単にできますので。</p>\n<h2>Prrot Security OSに追加でインストール</h2>\n<p><strong>Prrot Security OS</strong>にはデフォルトで一般的なアプリは入っています。\n<strong>Vim</strong>は<strong>Nvim</strong>がインストールされてました。\n以下を追加でインストールしました。\nUSER_NAMEは設定されているものに変更してください。\n例) oxboxes.org </p>\n<pre><code class=\"language-bash\">#sudo su をパスワードなしで行える設定\nsudo addgroup wheel\nsudo usermod -aG wheel USER_NAME\n\nvim /etc/pam.d/su \n#追記\n\nauth sufficient pam_wheel.so trust group=wheel\nsudo visudo\n#追記\nUSER_NAME  ALL=NOPASSWD: ALL\n%wheel ALL=(ALL) NOPASSWD:ALL</code></pre>\n<pre><code class=\"language-bash\">#日本語入力\napt install -y ibus-mozc\napt-get install ibus-mozc</code></pre>\n<pre><code class=\"language-bash\">#なくてもいいツール(個人の趣味)\n## neofetch\napt install neofetch\n## glances\napt install glances\n## bash_it\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\n~/.bash_it/install.sh\n## lolcat\nsudo apt-get install lolcat\n## Terminology 動画も画像も扱えるTerminal\nsudo apt-get install terminology\n\n## tmuxinator\ngem install tmuxinator\n## tmux使用時のコピペに必要\nsudo apt install xsel</code></pre>\n<h2>Tmuxが動かない</h2>\n<p>いつも<strong>Tmuxinator</strong>を使ているので4.2の設定をそのまま持ってきたところ<strong>Tmuxinator</strong>が起動しない。(Tmux)\n調べたところ</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\nset-option -g status-fg black\nset-option -g status-bg &quot;colour237&quot;\n\n# ウィンドウリストの色を設定する\nsetw -g window-status-fg white\nsetw -g window-status-bg black\nsetw -g window-status-attr dim\n# アクティブなウィンドウを目立たせる\nsetw -g window-status-current-fg black\nsetw -g window-status-current-bg &quot;colour68&quot;\nsetw -g window-status-current-attr bright\n\n# ペインボーダーの色を設定する\nset -g pane-border-fg &quot;colour237&quot;\nset -g pane-border-bg &quot;colour237&quot;\n# アクティブなペインを目立たせる\nset -g pane-active-border-fg &quot;colour68&quot;\nset -g pane-active-border-bg  &quot;colour237&quot;\n\n# コマンドラインの色を設定する\nset -g message-fg white\nset -g message-bg black\nset -g message-attr bright</code></pre>\n<p>ここらへんでエラーになる。\nググったところ<strong>Tmux</strong>のバージョンの違いによる設定ファイルの記述らしい。\n<a href=\"https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed\">参考サイト</a></p>\n<p>変更後</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\n set-option -g status-style fg=&quot;black&quot;\n set-option -g status-style bg=&quot;colour237&quot;\n#\n## ウィンドウリストの色を設定する\n setw -g window-status-style fg=&quot;white&quot;\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\n# setw -g window-status-attr dim\n\n## アクティブなウィンドウを目立たせる\n setw -g window-status-current-style fg=&quot;black&quot;\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\n# setw -g window-status-current-style attr=&quot;bright&quot;\n#\n## ペインボーダーの色を設定する\n set -g pane-border-style fg=&quot;colour237&quot;\n set -g pane-border-style bg=&quot;colour237&quot;\n\n## アクティブなペインを目立たせる\n# set -g pane-active-border-style fg=&quot;colour68&quot;\n# set -g pane-active-border-style bg=&quot;colour237&quot;\n#\n## コマンドラインの色を設定する\n set -g message-style fg=&quot;white&quot;\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\n#set -g message-style attr=&quot;bright&quot;</code></pre>\n<p>で無事4.2同様動かすことができました。</p>\n<h2>Kali Linus VS Parrot Security OS</h2>\n<p>なんて記事もありますが適材適所かと思います。\nHostOS側で通常の作業をして<strong>ペネレーションテスト</strong>や<strong>セキュリティーチェック</strong>などはVM上の<strong>Kalli Linux</strong>という使いかたはありかと思います。\n<strong>Parrot Security OS</strong>は実機で使ってこそパフォーマンスを発揮するような感じです。</p>\n<p>ということで<strong>Parrot Security OS</strong>を実機で持ちたい・・・\nが、<strong>Parrot Srcurity OS</strong>は日本語での情報は皆無と言っていいくらい厳しいです。\n英語、中国語では活発なコミュニティーがあるようです。</p>\n<p>最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、<strong>Kali Linux</strong>のように&quot;Think padと相性がいい&quot;とかあるのだろうか・・・</p>\n<p>今後の課題です。</p>','Parrot Security OS','Version 4.2 から 4.7に移行した際の','inherit','closed','closed','','373-revision-v1','','','2019-10-01 21:54:00','2019-10-01 12:54:00','ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。\r\n\r\n__Parrot Security OS__ とはその名前から \"__Security__に特化したOS\" というのは推測できますが __ペネレーションテスト__や__リバースエンジニアリング__だけでなくOffice系も__プログラミング__もほぼ全てに精通したOSというのは過大評価ではないのではと思います。\r\n\r\n__ペネレーションテス__トといえば真っ先に\"__Kali Linux__\"というイメージもありますが\"P__arrot Security OS__\"は\"__Kali Linux__\"のツールをほぼほぼ搭載しています。\r\n\"__Kali Linux__\"以上かもしれません。\r\nどちらも__Debian__系のOSです。\r\n\r\nイタリア製というのもあってか美しいです\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png)\r\n\r\n何かひらくと\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png)\r\n\r\nOffice系(__libreOffice__)\r\n\r\n![](http//blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png)\r\n\r\nブラウザは__Firefox__がデフォルトです。\r\n\"TORブラウザ”もデフォルトで搭載してまがここでは触れません。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png)\r\n\r\n## VMwear上に Parrot Security OS をインストール\r\n環境\r\n- MAC mojave\r\n- VMwear Fusion 11.5.0 \r\n\r\nOSのイメージファイルは本家[Parrot Security OS](https://parrotlinux.org/)からダウンロードするのも良いですし、[osboxes.org](https://www.osboxes.org/parrot-security-os/)からVMwear用のイメージをダウンロードしてもいいでしょう。\r\n今回は[osboxes.org](https://www.osboxes.org/parrot-security-os/)からインストールしました。\r\n\r\nVMweraへのOSのインストールはここでは触れません。\r\n簡単にできますので。\r\n\r\n## Prrot Security OSに追加でインストール\r\n__Prrot Security OS__にはデフォルトで一般的なアプリは入っています。\r\n__Vim__は__Nvim__がインストールされてました。\r\n以下を追加でインストールしました。\r\nUSER_NAMEは設定されているものに変更してください。\r\n例) oxboxes.org \r\n```bash\r\n#sudo su をパスワードなしで行える設定\r\nsudo addgroup wheel\r\nsudo usermod -aG wheel USER_NAME\r\n\r\nvim /etc/pam.d/su \r\n#追記\r\n\r\nauth sufficient pam_wheel.so trust group=wheel\r\nsudo visudo\r\n#追記\r\nUSER_NAME  ALL=NOPASSWD: ALL\r\n%wheel ALL=(ALL) NOPASSWD:ALL\r\n```\r\n\r\n```bash\r\n#日本語入力\r\napt install -y ibus-mozc\r\napt-get install ibus-mozc\r\n```\r\n\r\n```bash\r\n#なくてもいいツール(個人の趣味)\r\n## neofetch\r\napt install neofetch\r\n## glances\r\napt install glances\r\n## bash_it\r\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\r\n~/.bash_it/install.sh\r\n## lolcat\r\nsudo apt-get install lolcat\r\n## Terminology 動画も画像も扱えるTerminal\r\nsudo apt-get install terminology\r\n\r\n## tmuxinator\r\ngem install tmuxinator\r\n## tmux使用時のコピペに必要\r\nsudo apt install xsel\r\n```\r\n\r\n## Tmuxが動かない\r\nいつも__Tmuxinator__を使ているので4.2の設定をそのまま持ってきたところ__Tmuxinator__が起動しない。(Tmux)\r\n調べたところ\r\n```bash\r\n# ステータスバーの色を設定する\r\nset-option -g status-fg black\r\nset-option -g status-bg &quot;colour237&quot;\r\n\r\n# ウィンドウリストの色を設定する\r\nsetw -g window-status-fg white\r\nsetw -g window-status-bg black\r\nsetw -g window-status-attr dim\r\n# アクティブなウィンドウを目立たせる\r\nsetw -g window-status-current-fg black\r\nsetw -g window-status-current-bg &quot;colour68&quot;\r\nsetw -g window-status-current-attr bright\r\n\r\n# ペインボーダーの色を設定する\r\nset -g pane-border-fg &quot;colour237&quot;\r\nset -g pane-border-bg &quot;colour237&quot;\r\n# アクティブなペインを目立たせる\r\nset -g pane-active-border-fg &quot;colour68&quot;\r\nset -g pane-active-border-bg  &quot;colour237&quot;\r\n\r\n# コマンドラインの色を設定する\r\nset -g message-fg white\r\nset -g message-bg black\r\nset -g message-attr bright\r\n```\r\nここらへんでエラーになる。\r\nググったところ__Tmux__のバージョンの違いによる設定ファイルの記述らしい。\r\n[参考サイト](https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed)\r\n\r\n変更後\r\n```bash\r\n# ステータスバーの色を設定する\r\n set-option -g status-style fg=&quot;black&quot;\r\n set-option -g status-style bg=&quot;colour237&quot;\r\n#\r\n## ウィンドウリストの色を設定する\r\n setw -g window-status-style fg=&quot;white&quot;\r\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\r\n# setw -g window-status-attr dim\r\n\r\n## アクティブなウィンドウを目立たせる\r\n setw -g window-status-current-style fg=&quot;black&quot;\r\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\r\n# setw -g window-status-current-style attr=&quot;bright&quot;\r\n#\r\n## ペインボーダーの色を設定する\r\n set -g pane-border-style fg=&quot;colour237&quot;\r\n set -g pane-border-style bg=&quot;colour237&quot;\r\n\r\n## アクティブなペインを目立たせる\r\n# set -g pane-active-border-style fg=&quot;colour68&quot;\r\n# set -g pane-active-border-style bg=&quot;colour237&quot;\r\n#\r\n## コマンドラインの色を設定する\r\n set -g message-style fg=&quot;white&quot;\r\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\r\n#set -g message-style attr=&quot;bright&quot;\r\n```\r\n\r\nで無事4.2同様動かすことができました。\r\n\r\n## Kali Linus VS Parrot Security OS \r\nなんて記事もありますが適材適所かと思います。\r\nHostOS側で通常の作業をして__ペネレーションテスト__や__セキュリティーチェック__などはVM上の__Kalli Linux__という使いかたはありかと思います。\r\n__Parrot Security OS__は実機で使ってこそパフォーマンスを発揮するような感じです。\r\n\r\nということで__Parrot Security OS__を実機で持ちたい・・・\r\nが、__Parrot Srcurity OS__は日本語での情報は皆無と言っていいくらい厳しいです。\r\n英語、中国語では活発なコミュニティーがあるようです。\r\n\r\n最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、__Kali Linux__のように\"Think padと相性がいい\"とかあるのだろうか・・・\r\n\r\n今後の課題です。\r\n\r\n\r\n\r\n\r\n',373,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/373-revision-v1/',0,'revision','',0),(379,1,'2019-10-01 21:57:28','2019-10-01 12:57:28','<p>ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。</p>\n<p><strong>Parrot Security OS</strong> とはその名前から &quot;<strong>Security</strong>に特化したOS&quot; というのは推測できますが <strong>ペネレーションテスト</strong>や<strong>リバースエンジニアリング</strong>だけでなくOffice系も<strong>プログラミング</strong>もほぼ全てに精通したOSというのは過大評価ではないのではと思います。</p>\n<p><strong>ペネレーションテス</strong>トといえば真っ先に&quot;<strong>Kali Linux</strong>&quot;というイメージもありますが&quot;P<strong>arrot Security OS</strong>&quot;は&quot;<strong>Kali Linux</strong>&quot;のツールをほぼほぼ搭載しています。\n&quot;<strong>Kali Linux</strong>&quot;以上かもしれません。\nどちらも<strong>Debian</strong>系のOSです。</p>\n<p>イタリア製というのもあってか美しいです</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png\" alt=\"\" /></p>\n<p>何かひらくと\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png\" alt=\"\" /></p>\n<p>Office系(<strong>libreOffice</strong>)</p>\n<p><img src=\"http//blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png\" alt=\"\" /></p>\n<p>ブラウザは<strong>Firefox</strong>がデフォルトです。\n&quot;TORブラウザ”もデフォルトで搭載してまがここでは触れません。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png\" alt=\"\" /></p>\n<h2>VMwear上に Parrot Security OS をインストール</h2>\n<p>環境</p>\n<ul>\n<li>MAC mojave</li>\n<li>VMwear Fusion 11.5.0 </li>\n</ul>\n<p>OSのイメージファイルは本家<a href=\"https://parrotlinux.org/\">Parrot Security OS</a>からダウンロードするのも良いですし、<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からVMwear用のイメージをダウンロードしてもいいでしょう。\n今回は<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からインストールしました。</p>\n<p>VMweraへのOSのインストールはここでは触れません。\n簡単にできますので。</p>\n<h2>Prrot Security OSに追加でインストール</h2>\n<p><strong>Prrot Security OS</strong>にはデフォルトで一般的なアプリは入っています。\n<strong>Vim</strong>は<strong>Nvim</strong>がインストールされてました。\n以下を追加でインストールしました。\nUSER_NAMEは設定されているものに変更してください。\n例) oxboxes.org </p>\n<pre><code class=\"language-bash\">#sudo su をパスワードなしで行える設定\nsudo addgroup wheel\nsudo usermod -aG wheel USER_NAME\n\nvim /etc/pam.d/su \n#追記\n\nauth sufficient pam_wheel.so trust group=wheel\nsudo visudo\n#追記\nUSER_NAME  ALL=NOPASSWD: ALL\n%wheel ALL=(ALL) NOPASSWD:ALL</code></pre>\n<pre><code class=\"language-bash\">#日本語入力\napt install -y ibus-mozc\napt-get install ibus-mozc</code></pre>\n<pre><code class=\"language-bash\">#なくてもいいツール(個人の趣味)\n## neofetch\napt install neofetch\n## glances\napt install glances\n## bash_it\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\n~/.bash_it/install.sh\n## lolcat\nsudo apt-get install lolcat\n## Terminology 動画も画像も扱えるTerminal\nsudo apt-get install terminology\n\n## tmuxinator\ngem install tmuxinator\n## tmux使用時のコピペに必要\nsudo apt install xsel</code></pre>\n<h2>Tmuxが動かない</h2>\n<p>いつも<strong>Tmuxinator</strong>を使ているので4.2の設定をそのまま持ってきたところ<strong>Tmuxinator</strong>が起動しない。(Tmux)\n調べたところ</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\nset-option -g status-fg black\nset-option -g status-bg &quot;colour237&quot;\n\n# ウィンドウリストの色を設定する\nsetw -g window-status-fg white\nsetw -g window-status-bg black\nsetw -g window-status-attr dim\n# アクティブなウィンドウを目立たせる\nsetw -g window-status-current-fg black\nsetw -g window-status-current-bg &quot;colour68&quot;\nsetw -g window-status-current-attr bright\n\n# ペインボーダーの色を設定する\nset -g pane-border-fg &quot;colour237&quot;\nset -g pane-border-bg &quot;colour237&quot;\n# アクティブなペインを目立たせる\nset -g pane-active-border-fg &quot;colour68&quot;\nset -g pane-active-border-bg  &quot;colour237&quot;\n\n# コマンドラインの色を設定する\nset -g message-fg white\nset -g message-bg black\nset -g message-attr bright</code></pre>\n<p>ここらへんでエラーになる。\nググったところ<strong>Tmux</strong>のバージョンの違いによる設定ファイルの記述らしい。\n<a href=\"https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed\">参考サイト</a></p>\n<p>変更後</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\n set-option -g status-style fg=&quot;black&quot;\n set-option -g status-style bg=&quot;colour237&quot;\n#\n## ウィンドウリストの色を設定する\n setw -g window-status-style fg=&quot;white&quot;\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\n# setw -g window-status-attr dim\n\n## アクティブなウィンドウを目立たせる\n setw -g window-status-current-style fg=&quot;black&quot;\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\n# setw -g window-status-current-style attr=&quot;bright&quot;\n#\n## ペインボーダーの色を設定する\n set -g pane-border-style fg=&quot;colour237&quot;\n set -g pane-border-style bg=&quot;colour237&quot;\n\n## アクティブなペインを目立たせる\n# set -g pane-active-border-style fg=&quot;colour68&quot;\n# set -g pane-active-border-style bg=&quot;colour237&quot;\n#\n## コマンドラインの色を設定する\n set -g message-style fg=&quot;white&quot;\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\n#set -g message-style attr=&quot;bright&quot;</code></pre>\n<p>で無事4.2同様動かすことができました。</p>\n<h2>Kali Linus VS Parrot Security OS</h2>\n<p>なんて記事もありますが適材適所かと思います。\nHostOS側で通常の作業をして<strong>ペネレーションテスト</strong>や<strong>セキュリティーチェック</strong>などはVM上の<strong>Kalli Linux</strong>という使いかたはありかと思います。\n<strong>Parrot Security OS</strong>は実機で使ってこそパフォーマンスを発揮するような感じです。</p>\n<p>ということで<strong>Parrot Security OS</strong>を実機で持ちたい・・・\nが、<strong>Parrot Srcurity OS</strong>は日本語での情報は皆無と言っていいくらい厳しいです。\n英語、中国語では活発なコミュニティーがあるようです。</p>\n<p>最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、<strong>Kali Linux</strong>のように&quot;Think padと相性がいい&quot;とかあるのだろうか・・・</p>\n<p>今後の課題です。</p>','Parrot Security OS','ペネレーションテストなど行う場合ToolをMACにインストールするのは<span  class=\"under_line\">めんどくさい</span>し限界もあるので__Parrot Security OS__を準備する','inherit','closed','closed','','373-revision-v1','','','2019-10-01 21:57:28','2019-10-01 12:57:28','ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。\r\n\r\n__Parrot Security OS__ とはその名前から \"__Security__に特化したOS\" というのは推測できますが __ペネレーションテスト__や__リバースエンジニアリング__だけでなくOffice系も__プログラミング__もほぼ全てに精通したOSというのは過大評価ではないのではと思います。\r\n\r\n__ペネレーションテス__トといえば真っ先に\"__Kali Linux__\"というイメージもありますが\"P__arrot Security OS__\"は\"__Kali Linux__\"のツールをほぼほぼ搭載しています。\r\n\"__Kali Linux__\"以上かもしれません。\r\nどちらも__Debian__系のOSです。\r\n\r\nイタリア製というのもあってか美しいです\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png)\r\n\r\n何かひらくと\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png)\r\n\r\nOffice系(__libreOffice__)\r\n\r\n![](http//blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png)\r\n\r\nブラウザは__Firefox__がデフォルトです。\r\n\"TORブラウザ”もデフォルトで搭載してまがここでは触れません。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png)\r\n\r\n## VMwear上に Parrot Security OS をインストール\r\n環境\r\n- MAC mojave\r\n- VMwear Fusion 11.5.0 \r\n\r\nOSのイメージファイルは本家[Parrot Security OS](https://parrotlinux.org/)からダウンロードするのも良いですし、[osboxes.org](https://www.osboxes.org/parrot-security-os/)からVMwear用のイメージをダウンロードしてもいいでしょう。\r\n今回は[osboxes.org](https://www.osboxes.org/parrot-security-os/)からインストールしました。\r\n\r\nVMweraへのOSのインストールはここでは触れません。\r\n簡単にできますので。\r\n\r\n## Prrot Security OSに追加でインストール\r\n__Prrot Security OS__にはデフォルトで一般的なアプリは入っています。\r\n__Vim__は__Nvim__がインストールされてました。\r\n以下を追加でインストールしました。\r\nUSER_NAMEは設定されているものに変更してください。\r\n例) oxboxes.org \r\n```bash\r\n#sudo su をパスワードなしで行える設定\r\nsudo addgroup wheel\r\nsudo usermod -aG wheel USER_NAME\r\n\r\nvim /etc/pam.d/su \r\n#追記\r\n\r\nauth sufficient pam_wheel.so trust group=wheel\r\nsudo visudo\r\n#追記\r\nUSER_NAME  ALL=NOPASSWD: ALL\r\n%wheel ALL=(ALL) NOPASSWD:ALL\r\n```\r\n\r\n```bash\r\n#日本語入力\r\napt install -y ibus-mozc\r\napt-get install ibus-mozc\r\n```\r\n\r\n```bash\r\n#なくてもいいツール(個人の趣味)\r\n## neofetch\r\napt install neofetch\r\n## glances\r\napt install glances\r\n## bash_it\r\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\r\n~/.bash_it/install.sh\r\n## lolcat\r\nsudo apt-get install lolcat\r\n## Terminology 動画も画像も扱えるTerminal\r\nsudo apt-get install terminology\r\n\r\n## tmuxinator\r\ngem install tmuxinator\r\n## tmux使用時のコピペに必要\r\nsudo apt install xsel\r\n```\r\n\r\n## Tmuxが動かない\r\nいつも__Tmuxinator__を使ているので4.2の設定をそのまま持ってきたところ__Tmuxinator__が起動しない。(Tmux)\r\n調べたところ\r\n```bash\r\n# ステータスバーの色を設定する\r\nset-option -g status-fg black\r\nset-option -g status-bg &quot;colour237&quot;\r\n\r\n# ウィンドウリストの色を設定する\r\nsetw -g window-status-fg white\r\nsetw -g window-status-bg black\r\nsetw -g window-status-attr dim\r\n# アクティブなウィンドウを目立たせる\r\nsetw -g window-status-current-fg black\r\nsetw -g window-status-current-bg &quot;colour68&quot;\r\nsetw -g window-status-current-attr bright\r\n\r\n# ペインボーダーの色を設定する\r\nset -g pane-border-fg &quot;colour237&quot;\r\nset -g pane-border-bg &quot;colour237&quot;\r\n# アクティブなペインを目立たせる\r\nset -g pane-active-border-fg &quot;colour68&quot;\r\nset -g pane-active-border-bg  &quot;colour237&quot;\r\n\r\n# コマンドラインの色を設定する\r\nset -g message-fg white\r\nset -g message-bg black\r\nset -g message-attr bright\r\n```\r\nここらへんでエラーになる。\r\nググったところ__Tmux__のバージョンの違いによる設定ファイルの記述らしい。\r\n[参考サイト](https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed)\r\n\r\n変更後\r\n```bash\r\n# ステータスバーの色を設定する\r\n set-option -g status-style fg=&quot;black&quot;\r\n set-option -g status-style bg=&quot;colour237&quot;\r\n#\r\n## ウィンドウリストの色を設定する\r\n setw -g window-status-style fg=&quot;white&quot;\r\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\r\n# setw -g window-status-attr dim\r\n\r\n## アクティブなウィンドウを目立たせる\r\n setw -g window-status-current-style fg=&quot;black&quot;\r\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\r\n# setw -g window-status-current-style attr=&quot;bright&quot;\r\n#\r\n## ペインボーダーの色を設定する\r\n set -g pane-border-style fg=&quot;colour237&quot;\r\n set -g pane-border-style bg=&quot;colour237&quot;\r\n\r\n## アクティブなペインを目立たせる\r\n# set -g pane-active-border-style fg=&quot;colour68&quot;\r\n# set -g pane-active-border-style bg=&quot;colour237&quot;\r\n#\r\n## コマンドラインの色を設定する\r\n set -g message-style fg=&quot;white&quot;\r\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\r\n#set -g message-style attr=&quot;bright&quot;\r\n```\r\n\r\nで無事4.2同様動かすことができました。\r\n\r\n## Kali Linus VS Parrot Security OS \r\nなんて記事もありますが適材適所かと思います。\r\nHostOS側で通常の作業をして__ペネレーションテスト__や__セキュリティーチェック__などはVM上の__Kalli Linux__という使いかたはありかと思います。\r\n__Parrot Security OS__は実機で使ってこそパフォーマンスを発揮するような感じです。\r\n\r\nということで__Parrot Security OS__を実機で持ちたい・・・\r\nが、__Parrot Srcurity OS__は日本語での情報は皆無と言っていいくらい厳しいです。\r\n英語、中国語では活発なコミュニティーがあるようです。\r\n\r\n最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、__Kali Linux__のように\"Think padと相性がいい\"とかあるのだろうか・・・\r\n\r\n今後の課題です。\r\n\r\n\r\n\r\n\r\n',373,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/373-revision-v1/',0,'revision','',0),(380,1,'2019-10-01 21:58:55','2019-10-01 12:58:55','<p>ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。</p>\n<p><strong>Parrot Security OS</strong> とはその名前から &quot;<strong>Security</strong>に特化したOS&quot; というのは推測できますが <strong>ペネレーションテスト</strong>や<strong>リバースエンジニアリング</strong>だけでなくOffice系も<strong>プログラミング</strong>もほぼ全てに精通したOSというのは過大評価ではないのではと思います。</p>\n<p><strong>ペネレーションテス</strong>トといえば真っ先に&quot;<strong>Kali Linux</strong>&quot;というイメージもありますが&quot;P<strong>arrot Security OS</strong>&quot;は&quot;<strong>Kali Linux</strong>&quot;のツールをほぼほぼ搭載しています。\n&quot;<strong>Kali Linux</strong>&quot;以上かもしれません。\nどちらも<strong>Debian</strong>系のOSです。</p>\n<p>イタリア製というのもあってか美しいです</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png\" alt=\"\" /></p>\n<p>何かひらくと\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png\" alt=\"\" /></p>\n<p>Office系(<strong>libreOffice</strong>)</p>\n<p><img src=\"http//blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png\" alt=\"\" /></p>\n<p>ブラウザは<strong>Firefox</strong>がデフォルトです。\n&quot;TORブラウザ”もデフォルトで搭載してまがここでは触れません。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png\" alt=\"\" /></p>\n<h2>VMwear上に Parrot Security OS をインストール</h2>\n<p>環境</p>\n<ul>\n<li>MAC mojave</li>\n<li>VMwear Fusion 11.5.0 </li>\n</ul>\n<p>OSのイメージファイルは本家<a href=\"https://parrotlinux.org/\">Parrot Security OS</a>からダウンロードするのも良いですし、<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からVMwear用のイメージをダウンロードしてもいいでしょう。\n今回は<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からインストールしました。</p>\n<p>VMweraへのOSのインストールはここでは触れません。\n簡単にできますので。</p>\n<h2>Prrot Security OSに追加でインストール</h2>\n<p><strong>Prrot Security OS</strong>にはデフォルトで一般的なアプリは入っています。\n<strong>Vim</strong>は<strong>Nvim</strong>がインストールされてました。\n以下を追加でインストールしました。\nUSER_NAMEは設定されているものに変更してください。\n例) oxboxes.org </p>\n<pre><code class=\"language-bash\">#sudo su をパスワードなしで行える設定\nsudo addgroup wheel\nsudo usermod -aG wheel USER_NAME\n\nvim /etc/pam.d/su \n#追記\n\nauth sufficient pam_wheel.so trust group=wheel\nsudo visudo\n#追記\nUSER_NAME  ALL=NOPASSWD: ALL\n%wheel ALL=(ALL) NOPASSWD:ALL</code></pre>\n<pre><code class=\"language-bash\">#日本語入力\napt install -y ibus-mozc\napt-get install ibus-mozc</code></pre>\n<pre><code class=\"language-bash\">#なくてもいいツール(個人の趣味)\n## neofetch\napt install neofetch\n## glances\napt install glances\n## bash_it\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\n~/.bash_it/install.sh\n## lolcat\nsudo apt-get install lolcat\n## Terminology 動画も画像も扱えるTerminal\nsudo apt-get install terminology\n\n## tmuxinator\ngem install tmuxinator\n## tmux使用時のコピペに必要\nsudo apt install xsel</code></pre>\n<h2>Tmuxが動かない</h2>\n<p>いつも<strong>Tmuxinator</strong>を使ているので4.2の設定をそのまま持ってきたところ<strong>Tmuxinator</strong>が起動しない。(Tmux)\n調べたところ</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\nset-option -g status-fg black\nset-option -g status-bg &quot;colour237&quot;\n\n# ウィンドウリストの色を設定する\nsetw -g window-status-fg white\nsetw -g window-status-bg black\nsetw -g window-status-attr dim\n# アクティブなウィンドウを目立たせる\nsetw -g window-status-current-fg black\nsetw -g window-status-current-bg &quot;colour68&quot;\nsetw -g window-status-current-attr bright\n\n# ペインボーダーの色を設定する\nset -g pane-border-fg &quot;colour237&quot;\nset -g pane-border-bg &quot;colour237&quot;\n# アクティブなペインを目立たせる\nset -g pane-active-border-fg &quot;colour68&quot;\nset -g pane-active-border-bg  &quot;colour237&quot;\n\n# コマンドラインの色を設定する\nset -g message-fg white\nset -g message-bg black\nset -g message-attr bright</code></pre>\n<p>ここらへんでエラーになる。\nググったところ<strong>Tmux</strong>のバージョンの違いによる設定ファイルの記述らしい。\n<a href=\"https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed\">参考サイト</a></p>\n<p>変更後</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\n set-option -g status-style fg=&quot;black&quot;\n set-option -g status-style bg=&quot;colour237&quot;\n#\n## ウィンドウリストの色を設定する\n setw -g window-status-style fg=&quot;white&quot;\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\n# setw -g window-status-attr dim\n\n## アクティブなウィンドウを目立たせる\n setw -g window-status-current-style fg=&quot;black&quot;\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\n# setw -g window-status-current-style attr=&quot;bright&quot;\n#\n## ペインボーダーの色を設定する\n set -g pane-border-style fg=&quot;colour237&quot;\n set -g pane-border-style bg=&quot;colour237&quot;\n\n## アクティブなペインを目立たせる\n# set -g pane-active-border-style fg=&quot;colour68&quot;\n# set -g pane-active-border-style bg=&quot;colour237&quot;\n#\n## コマンドラインの色を設定する\n set -g message-style fg=&quot;white&quot;\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\n#set -g message-style attr=&quot;bright&quot;</code></pre>\n<p>で無事4.2同様動かすことができました。</p>\n<h2>Kali Linus VS Parrot Security OS</h2>\n<p>なんて記事もありますが適材適所かと思います。\nHostOS側で通常の作業をして<strong>ペネレーションテスト</strong>や<strong>セキュリティーチェック</strong>などはVM上の<strong>Kalli Linux</strong>という使いかたはありかと思います。\n<strong>Parrot Security OS</strong>は実機で使ってこそパフォーマンスを発揮するような感じです。</p>\n<p>ということで<strong>Parrot Security OS</strong>を実機で持ちたい・・・\nが、<strong>Parrot Srcurity OS</strong>は日本語での情報は皆無と言っていいくらい厳しいです。\n英語、中国語では活発なコミュニティーがあるようです。</p>\n<p>最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、<strong>Kali Linux</strong>のように&quot;Think padと相性がいい&quot;とかあるのだろうか・・・</p>\n<p>今後の課題です。</p>','Parrot Security OS','ペネレーションテストなど行う場合ToolをMACにインストールするのは<span  class=\"under_line\">めんどくさい</span>し限界もあるので<strong>Parrot Security OS</strong>を準備する','inherit','closed','closed','','373-revision-v1','','','2019-10-01 21:58:55','2019-10-01 12:58:55','ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。\r\n\r\n__Parrot Security OS__ とはその名前から \"__Security__に特化したOS\" というのは推測できますが __ペネレーションテスト__や__リバースエンジニアリング__だけでなくOffice系も__プログラミング__もほぼ全てに精通したOSというのは過大評価ではないのではと思います。\r\n\r\n__ペネレーションテス__トといえば真っ先に\"__Kali Linux__\"というイメージもありますが\"P__arrot Security OS__\"は\"__Kali Linux__\"のツールをほぼほぼ搭載しています。\r\n\"__Kali Linux__\"以上かもしれません。\r\nどちらも__Debian__系のOSです。\r\n\r\nイタリア製というのもあってか美しいです\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png)\r\n\r\n何かひらくと\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png)\r\n\r\nOffice系(__libreOffice__)\r\n\r\n![](http//blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png)\r\n\r\nブラウザは__Firefox__がデフォルトです。\r\n\"TORブラウザ”もデフォルトで搭載してまがここでは触れません。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png)\r\n\r\n## VMwear上に Parrot Security OS をインストール\r\n環境\r\n- MAC mojave\r\n- VMwear Fusion 11.5.0 \r\n\r\nOSのイメージファイルは本家[Parrot Security OS](https://parrotlinux.org/)からダウンロードするのも良いですし、[osboxes.org](https://www.osboxes.org/parrot-security-os/)からVMwear用のイメージをダウンロードしてもいいでしょう。\r\n今回は[osboxes.org](https://www.osboxes.org/parrot-security-os/)からインストールしました。\r\n\r\nVMweraへのOSのインストールはここでは触れません。\r\n簡単にできますので。\r\n\r\n## Prrot Security OSに追加でインストール\r\n__Prrot Security OS__にはデフォルトで一般的なアプリは入っています。\r\n__Vim__は__Nvim__がインストールされてました。\r\n以下を追加でインストールしました。\r\nUSER_NAMEは設定されているものに変更してください。\r\n例) oxboxes.org \r\n```bash\r\n#sudo su をパスワードなしで行える設定\r\nsudo addgroup wheel\r\nsudo usermod -aG wheel USER_NAME\r\n\r\nvim /etc/pam.d/su \r\n#追記\r\n\r\nauth sufficient pam_wheel.so trust group=wheel\r\nsudo visudo\r\n#追記\r\nUSER_NAME  ALL=NOPASSWD: ALL\r\n%wheel ALL=(ALL) NOPASSWD:ALL\r\n```\r\n\r\n```bash\r\n#日本語入力\r\napt install -y ibus-mozc\r\napt-get install ibus-mozc\r\n```\r\n\r\n```bash\r\n#なくてもいいツール(個人の趣味)\r\n## neofetch\r\napt install neofetch\r\n## glances\r\napt install glances\r\n## bash_it\r\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\r\n~/.bash_it/install.sh\r\n## lolcat\r\nsudo apt-get install lolcat\r\n## Terminology 動画も画像も扱えるTerminal\r\nsudo apt-get install terminology\r\n\r\n## tmuxinator\r\ngem install tmuxinator\r\n## tmux使用時のコピペに必要\r\nsudo apt install xsel\r\n```\r\n\r\n## Tmuxが動かない\r\nいつも__Tmuxinator__を使ているので4.2の設定をそのまま持ってきたところ__Tmuxinator__が起動しない。(Tmux)\r\n調べたところ\r\n```bash\r\n# ステータスバーの色を設定する\r\nset-option -g status-fg black\r\nset-option -g status-bg &quot;colour237&quot;\r\n\r\n# ウィンドウリストの色を設定する\r\nsetw -g window-status-fg white\r\nsetw -g window-status-bg black\r\nsetw -g window-status-attr dim\r\n# アクティブなウィンドウを目立たせる\r\nsetw -g window-status-current-fg black\r\nsetw -g window-status-current-bg &quot;colour68&quot;\r\nsetw -g window-status-current-attr bright\r\n\r\n# ペインボーダーの色を設定する\r\nset -g pane-border-fg &quot;colour237&quot;\r\nset -g pane-border-bg &quot;colour237&quot;\r\n# アクティブなペインを目立たせる\r\nset -g pane-active-border-fg &quot;colour68&quot;\r\nset -g pane-active-border-bg  &quot;colour237&quot;\r\n\r\n# コマンドラインの色を設定する\r\nset -g message-fg white\r\nset -g message-bg black\r\nset -g message-attr bright\r\n```\r\nここらへんでエラーになる。\r\nググったところ__Tmux__のバージョンの違いによる設定ファイルの記述らしい。\r\n[参考サイト](https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed)\r\n\r\n変更後\r\n```bash\r\n# ステータスバーの色を設定する\r\n set-option -g status-style fg=&quot;black&quot;\r\n set-option -g status-style bg=&quot;colour237&quot;\r\n#\r\n## ウィンドウリストの色を設定する\r\n setw -g window-status-style fg=&quot;white&quot;\r\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\r\n# setw -g window-status-attr dim\r\n\r\n## アクティブなウィンドウを目立たせる\r\n setw -g window-status-current-style fg=&quot;black&quot;\r\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\r\n# setw -g window-status-current-style attr=&quot;bright&quot;\r\n#\r\n## ペインボーダーの色を設定する\r\n set -g pane-border-style fg=&quot;colour237&quot;\r\n set -g pane-border-style bg=&quot;colour237&quot;\r\n\r\n## アクティブなペインを目立たせる\r\n# set -g pane-active-border-style fg=&quot;colour68&quot;\r\n# set -g pane-active-border-style bg=&quot;colour237&quot;\r\n#\r\n## コマンドラインの色を設定する\r\n set -g message-style fg=&quot;white&quot;\r\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\r\n#set -g message-style attr=&quot;bright&quot;\r\n```\r\n\r\nで無事4.2同様動かすことができました。\r\n\r\n## Kali Linus VS Parrot Security OS \r\nなんて記事もありますが適材適所かと思います。\r\nHostOS側で通常の作業をして__ペネレーションテスト__や__セキュリティーチェック__などはVM上の__Kalli Linux__という使いかたはありかと思います。\r\n__Parrot Security OS__は実機で使ってこそパフォーマンスを発揮するような感じです。\r\n\r\nということで__Parrot Security OS__を実機で持ちたい・・・\r\nが、__Parrot Srcurity OS__は日本語での情報は皆無と言っていいくらい厳しいです。\r\n英語、中国語では活発なコミュニティーがあるようです。\r\n\r\n最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、__Kali Linux__のように\"Think padと相性がいい\"とかあるのだろうか・・・\r\n\r\n今後の課題です。\r\n\r\n\r\n\r\n\r\n',373,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/373-revision-v1/',0,'revision','',0),(381,1,'2019-10-01 22:00:17','2019-10-01 13:00:17','<p>ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。</p>\n<p><strong>Parrot Security OS</strong> とはその名前から &quot;<strong>Security</strong>に特化したOS&quot; というのは推測できますが <strong>ペネレーションテスト</strong>や<strong>リバースエンジニアリング</strong>だけでなくOffice系も<strong>プログラミング</strong>もほぼ全てに精通したOSというのは過大評価ではないのではと思います。</p>\n<p><strong>ペネレーションテス</strong>トといえば真っ先に&quot;<strong>Kali Linux</strong>&quot;というイメージもありますが&quot;P<strong>arrot Security OS</strong>&quot;は&quot;<strong>Kali Linux</strong>&quot;のツールをほぼほぼ搭載しています。\n&quot;<strong>Kali Linux</strong>&quot;以上かもしれません。\nどちらも<strong>Debian</strong>系のOSです。</p>\n<p>イタリア製というのもあってか美しいです</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png\" alt=\"\" /></p>\n<p>何かひらくと\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png\" alt=\"\" /></p>\n<p>Office系(<strong>libreOffice</strong>)</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png\" alt=\"\" /></p>\n<p>ブラウザは<strong>Firefox</strong>がデフォルトです。\n&quot;TORブラウザ”もデフォルトで搭載してまがここでは触れません。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png\" alt=\"\" /></p>\n<h2>VMwear上に Parrot Security OS をインストール</h2>\n<p>環境</p>\n<ul>\n<li>MAC mojave</li>\n<li>VMwear Fusion 11.5.0 </li>\n</ul>\n<p>OSのイメージファイルは本家<a href=\"https://parrotlinux.org/\">Parrot Security OS</a>からダウンロードするのも良いですし、<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からVMwear用のイメージをダウンロードしてもいいでしょう。\n今回は<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からインストールしました。</p>\n<p>VMweraへのOSのインストールはここでは触れません。\n簡単にできますので。</p>\n<h2>Prrot Security OSに追加でインストール</h2>\n<p><strong>Prrot Security OS</strong>にはデフォルトで一般的なアプリは入っています。\n<strong>Vim</strong>は<strong>Nvim</strong>がインストールされてました。\n以下を追加でインストールしました。\nUSER_NAMEは設定されているものに変更してください。\n例) oxboxes.org </p>\n<pre><code class=\"language-bash\">#sudo su をパスワードなしで行える設定\nsudo addgroup wheel\nsudo usermod -aG wheel USER_NAME\n\nvim /etc/pam.d/su \n#追記\n\nauth sufficient pam_wheel.so trust group=wheel\nsudo visudo\n#追記\nUSER_NAME  ALL=NOPASSWD: ALL\n%wheel ALL=(ALL) NOPASSWD:ALL</code></pre>\n<pre><code class=\"language-bash\">#日本語入力\napt install -y ibus-mozc\napt-get install ibus-mozc</code></pre>\n<pre><code class=\"language-bash\">#なくてもいいツール(個人の趣味)\n## neofetch\napt install neofetch\n## glances\napt install glances\n## bash_it\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\n~/.bash_it/install.sh\n## lolcat\nsudo apt-get install lolcat\n## Terminology 動画も画像も扱えるTerminal\nsudo apt-get install terminology\n\n## tmuxinator\ngem install tmuxinator\n## tmux使用時のコピペに必要\nsudo apt install xsel</code></pre>\n<h2>Tmuxが動かない</h2>\n<p>いつも<strong>Tmuxinator</strong>を使ているので4.2の設定をそのまま持ってきたところ<strong>Tmuxinator</strong>が起動しない。(Tmux)\n調べたところ</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\nset-option -g status-fg black\nset-option -g status-bg &quot;colour237&quot;\n\n# ウィンドウリストの色を設定する\nsetw -g window-status-fg white\nsetw -g window-status-bg black\nsetw -g window-status-attr dim\n# アクティブなウィンドウを目立たせる\nsetw -g window-status-current-fg black\nsetw -g window-status-current-bg &quot;colour68&quot;\nsetw -g window-status-current-attr bright\n\n# ペインボーダーの色を設定する\nset -g pane-border-fg &quot;colour237&quot;\nset -g pane-border-bg &quot;colour237&quot;\n# アクティブなペインを目立たせる\nset -g pane-active-border-fg &quot;colour68&quot;\nset -g pane-active-border-bg  &quot;colour237&quot;\n\n# コマンドラインの色を設定する\nset -g message-fg white\nset -g message-bg black\nset -g message-attr bright</code></pre>\n<p>ここらへんでエラーになる。\nググったところ<strong>Tmux</strong>のバージョンの違いによる設定ファイルの記述らしい。\n<a href=\"https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed\">参考サイト</a></p>\n<p>変更後</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\n set-option -g status-style fg=&quot;black&quot;\n set-option -g status-style bg=&quot;colour237&quot;\n#\n## ウィンドウリストの色を設定する\n setw -g window-status-style fg=&quot;white&quot;\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\n# setw -g window-status-attr dim\n\n## アクティブなウィンドウを目立たせる\n setw -g window-status-current-style fg=&quot;black&quot;\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\n# setw -g window-status-current-style attr=&quot;bright&quot;\n#\n## ペインボーダーの色を設定する\n set -g pane-border-style fg=&quot;colour237&quot;\n set -g pane-border-style bg=&quot;colour237&quot;\n\n## アクティブなペインを目立たせる\n# set -g pane-active-border-style fg=&quot;colour68&quot;\n# set -g pane-active-border-style bg=&quot;colour237&quot;\n#\n## コマンドラインの色を設定する\n set -g message-style fg=&quot;white&quot;\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\n#set -g message-style attr=&quot;bright&quot;</code></pre>\n<p>で無事4.2同様動かすことができました。</p>\n<h2>Kali Linus VS Parrot Security OS</h2>\n<p>なんて記事もありますが適材適所かと思います。\nHostOS側で通常の作業をして<strong>ペネレーションテスト</strong>や<strong>セキュリティーチェック</strong>などはVM上の<strong>Kalli Linux</strong>という使いかたはありかと思います。\n<strong>Parrot Security OS</strong>は実機で使ってこそパフォーマンスを発揮するような感じです。</p>\n<p>ということで<strong>Parrot Security OS</strong>を実機で持ちたい・・・\nが、<strong>Parrot Srcurity OS</strong>は日本語での情報は皆無と言っていいくらい厳しいです。\n英語、中国語では活発なコミュニティーがあるようです。</p>\n<p>最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、<strong>Kali Linux</strong>のように&quot;Think padと相性がいい&quot;とかあるのだろうか・・・</p>\n<p>今後の課題です。</p>','Parrot Security OS','ペネレーションテストなど行う場合ToolをMACにインストールするのは<span  class=\"under_line\">めんどくさい</span>し限界もあるので<strong>Parrot Security OS</strong>を準備する','inherit','closed','closed','','373-revision-v1','','','2019-10-01 22:00:17','2019-10-01 13:00:17','ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。\r\n\r\n__Parrot Security OS__ とはその名前から \"__Security__に特化したOS\" というのは推測できますが __ペネレーションテスト__や__リバースエンジニアリング__だけでなくOffice系も__プログラミング__もほぼ全てに精通したOSというのは過大評価ではないのではと思います。\r\n\r\n__ペネレーションテス__トといえば真っ先に\"__Kali Linux__\"というイメージもありますが\"P__arrot Security OS__\"は\"__Kali Linux__\"のツールをほぼほぼ搭載しています。\r\n\"__Kali Linux__\"以上かもしれません。\r\nどちらも__Debian__系のOSです。\r\n\r\nイタリア製というのもあってか美しいです\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png)\r\n\r\n何かひらくと\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png)\r\n\r\nOffice系(__libreOffice__)\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png)\r\n\r\nブラウザは__Firefox__がデフォルトです。\r\n\"TORブラウザ”もデフォルトで搭載してまがここでは触れません。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png)\r\n\r\n## VMwear上に Parrot Security OS をインストール\r\n環境\r\n- MAC mojave\r\n- VMwear Fusion 11.5.0 \r\n\r\nOSのイメージファイルは本家[Parrot Security OS](https://parrotlinux.org/)からダウンロードするのも良いですし、[osboxes.org](https://www.osboxes.org/parrot-security-os/)からVMwear用のイメージをダウンロードしてもいいでしょう。\r\n今回は[osboxes.org](https://www.osboxes.org/parrot-security-os/)からインストールしました。\r\n\r\nVMweraへのOSのインストールはここでは触れません。\r\n簡単にできますので。\r\n\r\n## Prrot Security OSに追加でインストール\r\n__Prrot Security OS__にはデフォルトで一般的なアプリは入っています。\r\n__Vim__は__Nvim__がインストールされてました。\r\n以下を追加でインストールしました。\r\nUSER_NAMEは設定されているものに変更してください。\r\n例) oxboxes.org \r\n```bash\r\n#sudo su をパスワードなしで行える設定\r\nsudo addgroup wheel\r\nsudo usermod -aG wheel USER_NAME\r\n\r\nvim /etc/pam.d/su \r\n#追記\r\n\r\nauth sufficient pam_wheel.so trust group=wheel\r\nsudo visudo\r\n#追記\r\nUSER_NAME  ALL=NOPASSWD: ALL\r\n%wheel ALL=(ALL) NOPASSWD:ALL\r\n```\r\n\r\n```bash\r\n#日本語入力\r\napt install -y ibus-mozc\r\napt-get install ibus-mozc\r\n```\r\n\r\n```bash\r\n#なくてもいいツール(個人の趣味)\r\n## neofetch\r\napt install neofetch\r\n## glances\r\napt install glances\r\n## bash_it\r\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\r\n~/.bash_it/install.sh\r\n## lolcat\r\nsudo apt-get install lolcat\r\n## Terminology 動画も画像も扱えるTerminal\r\nsudo apt-get install terminology\r\n\r\n## tmuxinator\r\ngem install tmuxinator\r\n## tmux使用時のコピペに必要\r\nsudo apt install xsel\r\n```\r\n\r\n## Tmuxが動かない\r\nいつも__Tmuxinator__を使ているので4.2の設定をそのまま持ってきたところ__Tmuxinator__が起動しない。(Tmux)\r\n調べたところ\r\n```bash\r\n# ステータスバーの色を設定する\r\nset-option -g status-fg black\r\nset-option -g status-bg &quot;colour237&quot;\r\n\r\n# ウィンドウリストの色を設定する\r\nsetw -g window-status-fg white\r\nsetw -g window-status-bg black\r\nsetw -g window-status-attr dim\r\n# アクティブなウィンドウを目立たせる\r\nsetw -g window-status-current-fg black\r\nsetw -g window-status-current-bg &quot;colour68&quot;\r\nsetw -g window-status-current-attr bright\r\n\r\n# ペインボーダーの色を設定する\r\nset -g pane-border-fg &quot;colour237&quot;\r\nset -g pane-border-bg &quot;colour237&quot;\r\n# アクティブなペインを目立たせる\r\nset -g pane-active-border-fg &quot;colour68&quot;\r\nset -g pane-active-border-bg  &quot;colour237&quot;\r\n\r\n# コマンドラインの色を設定する\r\nset -g message-fg white\r\nset -g message-bg black\r\nset -g message-attr bright\r\n```\r\nここらへんでエラーになる。\r\nググったところ__Tmux__のバージョンの違いによる設定ファイルの記述らしい。\r\n[参考サイト](https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed)\r\n\r\n変更後\r\n```bash\r\n# ステータスバーの色を設定する\r\n set-option -g status-style fg=&quot;black&quot;\r\n set-option -g status-style bg=&quot;colour237&quot;\r\n#\r\n## ウィンドウリストの色を設定する\r\n setw -g window-status-style fg=&quot;white&quot;\r\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\r\n# setw -g window-status-attr dim\r\n\r\n## アクティブなウィンドウを目立たせる\r\n setw -g window-status-current-style fg=&quot;black&quot;\r\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\r\n# setw -g window-status-current-style attr=&quot;bright&quot;\r\n#\r\n## ペインボーダーの色を設定する\r\n set -g pane-border-style fg=&quot;colour237&quot;\r\n set -g pane-border-style bg=&quot;colour237&quot;\r\n\r\n## アクティブなペインを目立たせる\r\n# set -g pane-active-border-style fg=&quot;colour68&quot;\r\n# set -g pane-active-border-style bg=&quot;colour237&quot;\r\n#\r\n## コマンドラインの色を設定する\r\n set -g message-style fg=&quot;white&quot;\r\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\r\n#set -g message-style attr=&quot;bright&quot;\r\n```\r\n\r\nで無事4.2同様動かすことができました。\r\n\r\n## Kali Linus VS Parrot Security OS \r\nなんて記事もありますが適材適所かと思います。\r\nHostOS側で通常の作業をして__ペネレーションテスト__や__セキュリティーチェック__などはVM上の__Kalli Linux__という使いかたはありかと思います。\r\n__Parrot Security OS__は実機で使ってこそパフォーマンスを発揮するような感じです。\r\n\r\nということで__Parrot Security OS__を実機で持ちたい・・・\r\nが、__Parrot Srcurity OS__は日本語での情報は皆無と言っていいくらい厳しいです。\r\n英語、中国語では活発なコミュニティーがあるようです。\r\n\r\n最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、__Kali Linux__のように\"Think padと相性がいい\"とかあるのだろうか・・・\r\n\r\n今後の課題です。\r\n\r\n\r\n\r\n\r\n',373,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/373-revision-v1/',0,'revision','',0),(383,1,'2019-11-02 23:02:45','2019-11-02 14:02:45','<p>特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちらもメリット、デメリットあります。</p>\n<p>USキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\n<a href=\"https://pqrs.org/osx/karabiner/\">Karabiner</a></p>\n<h2>Karabinercで自分だけのショートカット</h2>\n<p>以下USキーボード前提での例です。僕の例です。</p>\n<ul>\n<li><kbd>delet</kbd> + <kbd>e</kbd> Excel </li>\n<li><kbd>delet</kbd> + <kbd>z</kbd> Finder </li>\n<li><kbd>fn</kbd> + <kbd>j</kbd> Intellij idea </li>\n<li><kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\nなどなど。。。</li>\n</ul>\n<p>USキーボードでは</p>\n<ul>\n<li><kbd>delete</kbd>、は右上</li>\n<li><kbd>fn</kbd>、は左下</li>\n</ul>\n<p>にあります。</p>\n<p>ホームポッションを崩さずにアプリを一瞬でスイッチングできます。\n他のアルファベットや数字キーによく使うアプリを設定しています。</p>\n<p>正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。</p>\n<h2>Karabinerでキー押下時をカスタマイズ。</h2>\n<p>以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png\" alt=\"\" />\nKarabinerでの設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png\" alt=\"\" /></p>\n<h3>どんなことができるのか</h3>\n<ul>\n<li><kbd>space</kbd>長押しで<kbd>shift</kbd></li>\n<li><kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信</li>\n<li><kbd>enter</kbd> 長押しで <kbd>control</kbd></li>\n<li>More...</li>\n</ul>\n<p>特に<strong>Vim</strong>を使う時には有効な設定です。</p>\n<p>個人的には</p>\n<ul>\n<li><kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動</li>\n</ul>\n<p>そういうことです。\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。</p>\n<h2>Karabinerのデメリット</h2>\n<p><strong>Karabiner</strong>無しでは仕事が捗らなくなるという中毒性があります。\n他人のMACを操作するとTypo連発です。</p>\n<p>キーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)</p>\n<p>でも僕はこの設定は外しました。\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\nゆっくり打てばいいのですがそれは<span class=\"under_line\">めんどくさい</span>ので一旦外してます。\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでない設定を考えてみようと思います。\n今後の課題とします。</p>','Karabiner','MACのキーボードカスタマイズアプリ。特にUSキーボード使いには必須かも。JISキーボードでも効率アップ。\r\n自分だけのキーボードにカスタマイズ。','publish','closed','open','','karabiner','','','2019-11-08 11:31:11','2019-11-08 02:31:11','特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちらもメリット、デメリットあります。\r\n\r\nUSキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\r\n[Karabiner](https://pqrs.org/osx/karabiner/)\r\n\r\n## Karabinercで自分だけのショートカット\r\n以下USキーボード前提での例です。僕の例です。\r\n- <kbd>delet</kbd> + <kbd>e</kbd> Excel \r\n- <kbd>delet</kbd> + <kbd>z</kbd> Finder \r\n- <kbd>fn</kbd> + <kbd>j</kbd> Intellij idea \r\n- <kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\r\nなどなど。。。\r\n\r\nUSキーボードでは\r\n- <kbd>delete</kbd>、は右上\r\n- <kbd>fn</kbd>、は左下\r\n\r\nにあります。\r\n\r\n\r\n\r\nホームポッションを崩さずにアプリを一瞬でスイッチングできます。\r\n他のアルファベットや数字キーによく使うアプリを設定しています。\r\n\r\n正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\r\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。\r\n\r\n## Karabinerでキー押下時をカスタマイズ。\r\n以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\r\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png)\r\nKarabinerでの設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png)\r\n\r\n\r\n### どんなことができるのか\r\n\r\n- <kbd>space</kbd>長押しで<kbd>shift</kbd>\r\n- <kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信\r\n- <kbd>enter</kbd> 長押しで <kbd>control</kbd>\r\n- More...\r\n\r\n特に__Vim__を使う時には有効な設定です。\r\n\r\n個人的には\r\n- <kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動\r\n\r\nそういうことです。\r\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\r\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。\r\n\r\n\r\n## Karabinerのデメリット\r\n__Karabiner__無しでは仕事が捗らなくなるという中毒性があります。\r\n他人のMACを操作するとTypo連発です。\r\n\r\nキーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\r\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)\r\n\r\nでも僕はこの設定は外しました。\r\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\r\nゆっくり打てばいいのですがそれは<span class=\"under_line\">めんどくさい</span>ので一旦外してます。\r\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでない設定を考えてみようと思います。\r\n今後の課題とします。\r\n\r\n\r\n',0,'https://blog.webdimension.jp/?p=383',0,'post','',0),(387,1,'2019-10-02 22:25:43','2019-10-02 13:25:43','<p>特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。</p>\n<p>USキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\n<a href=\"https://pqrs.org/osx/karabiner/\">Karabiner</a></p>\n<h2>Karabinercで自分だけのショートカット</h2>\n<p>以下USキーボード前提での例です。僕の例です。</p>\n<ul>\n<li><kbd>delet</kbd> + <kbd>e</kbd> Excel </li>\n<li><kbd>delet</kbd> + <kbd>z</kbd> Finder </li>\n<li><kbd>fn</kbd> + <kbd>j</kbd> Intellij idea </li>\n<li><kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\nなどなど。。。</li>\n</ul>\n<p>USキーボードでは</p>\n<ul>\n<li><kbd>delete</kbd>、は右上</li>\n<li><kbd>fn</kbd>、は左下</li>\n</ul>\n<p>にあります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png\" alt=\"\" /></p>\n<p>ホームポッションを崩さずにアプリを一瞬でスイッチングできます。\n他のアルファベットや数字キーによく使うアプリを設定しています。</p>\n<p>正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。</p>\n<h2>Karabinerでキー押下時をカスタマイズ。</h2>\n<p>以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png\" alt=\"\" /></p>\n<p>Karabinerでの設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png\" alt=\"\" /></p>\n<h3>どんなことができるのか</h3>\n<ul>\n<li><kbd>space</kbd>長押しで<kbd>shift</kbd></li>\n<li><kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信</li>\n<li><kbd>enter</kbd> 長押しで <kbd>control</kbd></li>\n</ul>\n<p>特に<strong>Vim</strong>を使う時には有効な設定です。</p>\n<p>個人的には</p>\n<ul>\n<li><kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動\n。。。そういうことです。<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。</li>\n</ul>\n<h2>Karabinerのデメリット</h2>\n<p><strong>Karabiner</strong>無しでは仕事がはかどらなくなるという中毒性があります。\n他人のMACを操作するとTypo連発です。</p>\n<p>キーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)\nでも僕はこの設定は外しました。\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\nゆっくり打てばいいのですがそれは&lt;span class＝under＿line&quot;&gt;めんどくさい</span>ので一旦外してます。\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでな設定を考えてみようと思います。課題です。</p>','Karabiner','MACもキーボードカスタマイズアプリ。特にUSキーボード使いには必須かも。JISキーボードでも効率アップ。\r\n自分だけのキーボードにカスタマイズ。','inherit','closed','closed','','383-revision-v1','','','2019-10-02 22:25:43','2019-10-02 13:25:43','特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。\r\n\r\nUSキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\r\n[Karabiner](https://pqrs.org/osx/karabiner/)\r\n\r\n## Karabinercで自分だけのショートカット\r\n以下USキーボード前提での例です。僕の例です。\r\n- <kbd>delet</kbd> + <kbd>e</kbd> Excel \r\n- <kbd>delet</kbd> + <kbd>z</kbd> Finder \r\n- <kbd>fn</kbd> + <kbd>j</kbd> Intellij idea \r\n- <kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\r\nなどなど。。。\r\n\r\nUSキーボードでは\r\n- <kbd>delete</kbd>、は右上\r\n- <kbd>fn</kbd>、は左下\r\n\r\nにあります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png)\r\n\r\nホームポッションを崩さずにアプリを一瞬でスイッチングできます。\r\n他のアルファベットや数字キーによく使うアプリを設定しています。\r\n\r\n正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\r\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。\r\n\r\n## Karabinerでキー押下時をカスタマイズ。\r\n以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\r\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png)\r\n\r\nKarabinerでの設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png)\r\n\r\n\r\n### どんなことができるのか\r\n\r\n- <kbd>space</kbd>長押しで<kbd>shift</kbd>\r\n- <kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信\r\n- <kbd>enter</kbd> 長押しで <kbd>control</kbd>\r\n\r\n特に__Vim__を使う時には有効な設定です。\r\n\r\n個人的には\r\n- <kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動\r\n。。。そういうことです。<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\r\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。\r\n\r\n\r\n## Karabinerのデメリット\r\n__Karabiner__無しでは仕事がはかどらなくなるという中毒性があります。\r\n他人のMACを操作するとTypo連発です。\r\n\r\nキーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\r\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)\r\nでも僕はこの設定は外しました。\r\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\r\nゆっくり打てばいいのですがそれは<span class＝under＿line\">めんどくさい</span>ので一旦外してます。\r\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでな設定を考えてみようと思います。課題です。\r\n\r\n\r\n',383,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/383-revision-v1/',0,'revision','',0),(389,1,'2019-10-02 22:36:51','2019-10-02 13:36:51','<p>特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。</p>\n<p>USキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\n<a href=\"https://pqrs.org/osx/karabiner/\">Karabiner</a></p>\n<h2>Karabinercで自分だけのショートカット</h2>\n<p>以下USキーボード前提での例です。僕の例です。</p>\n<ul>\n<li><kbd>delet</kbd> + <kbd>e</kbd> Excel </li>\n<li><kbd>delet</kbd> + <kbd>z</kbd> Finder </li>\n<li><kbd>fn</kbd> + <kbd>j</kbd> Intellij idea </li>\n<li><kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\nなどなど。。。</li>\n</ul>\n<p>USキーボードでは</p>\n<ul>\n<li><kbd>delete</kbd>、は右上</li>\n<li><kbd>fn</kbd>、は左下</li>\n</ul>\n<p>にあります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png\" alt=\"\" /></p>\n<p>ホームポッションを崩さずにアプリを一瞬でスイッチングできます。\n他のアルファベットや数字キーによく使うアプリを設定しています。</p>\n<p>正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。</p>\n<h2>Karabinerでキー押下時をカスタマイズ。</h2>\n<p>以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png\" alt=\"\" /></p>\n<p>Karabinerでの設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png\" alt=\"\" /></p>\n<h3>どんなことができるのか</h3>\n<ul>\n<li><kbd>space</kbd>長押しで<kbd>shift</kbd></li>\n<li><kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信</li>\n<li><kbd>enter</kbd> 長押しで <kbd>control</kbd></li>\n<li>More...</li>\n</ul>\n<p>特に<strong>Vim</strong>を使う時には有効な設定です。</p>\n<p>個人的には</p>\n<ul>\n<li><kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動</li>\n</ul>\n<p>。。。そういうことです。\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。</p>\n<h2>Karabinerのデメリット</h2>\n<p><strong>Karabiner</strong>無しでは仕事がはかどらなくなるという中毒性があります。\n他人のMACを操作するとTypo連発です。</p>\n<p>キーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)</p>\n<p>でも僕はこの設定は外しました。\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\nゆっくり打てばいいのですがそれは&lt;span class＝under＿line&quot;&gt;めんどくさい</span>ので一旦外してます。\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでな設定を考えてみようと思います。\n今後の課題とします。</p>','Karabiner','MACのキーボードカスタマイズアプリ。特にUSキーボード使いには必須かも。JISキーボードでも効率アップ。\r\n自分だけのキーボードにカスタマイズ。','inherit','closed','closed','','383-revision-v1','','','2019-10-02 22:36:51','2019-10-02 13:36:51','特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。\r\n\r\nUSキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\r\n[Karabiner](https://pqrs.org/osx/karabiner/)\r\n\r\n## Karabinercで自分だけのショートカット\r\n以下USキーボード前提での例です。僕の例です。\r\n- <kbd>delet</kbd> + <kbd>e</kbd> Excel \r\n- <kbd>delet</kbd> + <kbd>z</kbd> Finder \r\n- <kbd>fn</kbd> + <kbd>j</kbd> Intellij idea \r\n- <kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\r\nなどなど。。。\r\n\r\nUSキーボードでは\r\n- <kbd>delete</kbd>、は右上\r\n- <kbd>fn</kbd>、は左下\r\n\r\nにあります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png)\r\n\r\nホームポッションを崩さずにアプリを一瞬でスイッチングできます。\r\n他のアルファベットや数字キーによく使うアプリを設定しています。\r\n\r\n正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\r\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。\r\n\r\n## Karabinerでキー押下時をカスタマイズ。\r\n以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\r\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png)\r\n\r\nKarabinerでの設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png)\r\n\r\n\r\n### どんなことができるのか\r\n\r\n- <kbd>space</kbd>長押しで<kbd>shift</kbd>\r\n- <kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信\r\n- <kbd>enter</kbd> 長押しで <kbd>control</kbd>\r\n- More...\r\n\r\n特に__Vim__を使う時には有効な設定です。\r\n\r\n個人的には\r\n- <kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動\r\n\r\n。。。そういうことです。\r\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\r\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。\r\n\r\n\r\n## Karabinerのデメリット\r\n__Karabiner__無しでは仕事がはかどらなくなるという中毒性があります。\r\n他人のMACを操作するとTypo連発です。\r\n\r\nキーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\r\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)\r\n\r\nでも僕はこの設定は外しました。\r\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\r\nゆっくり打てばいいのですがそれは<span class＝under＿line\">めんどくさい</span>ので一旦外してます。\r\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでな設定を考えてみようと思います。\r\n今後の課題とします。\r\n\r\n\r\n',383,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/383-revision-v1/',0,'revision','',0),(390,1,'2019-10-02 22:38:50','2019-10-02 13:38:50','<p>特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。</p>\n<p>USキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\n<a href=\"https://pqrs.org/osx/karabiner/\">Karabiner</a></p>\n<h2>Karabinercで自分だけのショートカット</h2>\n<p>以下USキーボード前提での例です。僕の例です。</p>\n<ul>\n<li><kbd>delet</kbd> + <kbd>e</kbd> Excel </li>\n<li><kbd>delet</kbd> + <kbd>z</kbd> Finder </li>\n<li><kbd>fn</kbd> + <kbd>j</kbd> Intellij idea </li>\n<li><kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\nなどなど。。。</li>\n</ul>\n<p>USキーボードでは</p>\n<ul>\n<li><kbd>delete</kbd>、は右上</li>\n<li><kbd>fn</kbd>、は左下</li>\n</ul>\n<p>にあります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png\" alt=\"\" /></p>\n<p>ホームポッションを崩さずにアプリを一瞬でスイッチングできます。\n他のアルファベットや数字キーによく使うアプリを設定しています。</p>\n<p>正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。</p>\n<h2>Karabinerでキー押下時をカスタマイズ。</h2>\n<p>以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png\" alt=\"\" /></p>\n<p>Karabinerでの設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png\" alt=\"\" /></p>\n<h3>どんなことができるのか</h3>\n<ul>\n<li><kbd>space</kbd>長押しで<kbd>shift</kbd></li>\n<li><kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信</li>\n<li><kbd>enter</kbd> 長押しで <kbd>control</kbd></li>\n<li>More...</li>\n</ul>\n<p>特に<strong>Vim</strong>を使う時には有効な設定です。</p>\n<p>個人的には</p>\n<ul>\n<li><kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動</li>\n</ul>\n<p>。。。そういうことです。\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。</p>\n<h2>Karabinerのデメリット</h2>\n<p><strong>Karabiner</strong>無しでは仕事がはかどらなくなるという中毒性があります。\n他人のMACを操作するとTypo連発です。</p>\n<p>キーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)</p>\n<p>でも僕はこの設定は外しました。\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\nゆっくり打てばいいのですがそれは&lt;span class＝under_line&quot;&gt;めんどくさい</span>ので一旦外してます。\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでな設定を考えてみようと思います。\n今後の課題とします。</p>','Karabiner','MACのキーボードカスタマイズアプリ。特にUSキーボード使いには必須かも。JISキーボードでも効率アップ。\r\n自分だけのキーボードにカスタマイズ。','inherit','closed','closed','','383-revision-v1','','','2019-10-02 22:38:50','2019-10-02 13:38:50','特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。\r\n\r\nUSキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\r\n[Karabiner](https://pqrs.org/osx/karabiner/)\r\n\r\n## Karabinercで自分だけのショートカット\r\n以下USキーボード前提での例です。僕の例です。\r\n- <kbd>delet</kbd> + <kbd>e</kbd> Excel \r\n- <kbd>delet</kbd> + <kbd>z</kbd> Finder \r\n- <kbd>fn</kbd> + <kbd>j</kbd> Intellij idea \r\n- <kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\r\nなどなど。。。\r\n\r\nUSキーボードでは\r\n- <kbd>delete</kbd>、は右上\r\n- <kbd>fn</kbd>、は左下\r\n\r\nにあります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png)\r\n\r\nホームポッションを崩さずにアプリを一瞬でスイッチングできます。\r\n他のアルファベットや数字キーによく使うアプリを設定しています。\r\n\r\n正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\r\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。\r\n\r\n## Karabinerでキー押下時をカスタマイズ。\r\n以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\r\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png)\r\n\r\nKarabinerでの設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png)\r\n\r\n\r\n### どんなことができるのか\r\n\r\n- <kbd>space</kbd>長押しで<kbd>shift</kbd>\r\n- <kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信\r\n- <kbd>enter</kbd> 長押しで <kbd>control</kbd>\r\n- More...\r\n\r\n特に__Vim__を使う時には有効な設定です。\r\n\r\n個人的には\r\n- <kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動\r\n\r\n。。。そういうことです。\r\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\r\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。\r\n\r\n\r\n## Karabinerのデメリット\r\n__Karabiner__無しでは仕事がはかどらなくなるという中毒性があります。\r\n他人のMACを操作するとTypo連発です。\r\n\r\nキーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\r\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)\r\n\r\nでも僕はこの設定は外しました。\r\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\r\nゆっくり打てばいいのですがそれは<span class＝under_line\">めんどくさい</span>ので一旦外してます。\r\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでな設定を考えてみようと思います。\r\n今後の課題とします。\r\n\r\n\r\n',383,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/383-revision-v1/',0,'revision','',0),(391,1,'2019-10-02 22:39:27','2019-10-02 13:39:27','<p>特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。</p>\n<p>USキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\n<a href=\"https://pqrs.org/osx/karabiner/\">Karabiner</a></p>\n<h2>Karabinercで自分だけのショートカット</h2>\n<p>以下USキーボード前提での例です。僕の例です。</p>\n<ul>\n<li><kbd>delet</kbd> + <kbd>e</kbd> Excel </li>\n<li><kbd>delet</kbd> + <kbd>z</kbd> Finder </li>\n<li><kbd>fn</kbd> + <kbd>j</kbd> Intellij idea </li>\n<li><kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\nなどなど。。。</li>\n</ul>\n<p>USキーボードでは</p>\n<ul>\n<li><kbd>delete</kbd>、は右上</li>\n<li><kbd>fn</kbd>、は左下</li>\n</ul>\n<p>にあります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png\" alt=\"\" /></p>\n<p>ホームポッションを崩さずにアプリを一瞬でスイッチングできます。\n他のアルファベットや数字キーによく使うアプリを設定しています。</p>\n<p>正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。</p>\n<h2>Karabinerでキー押下時をカスタマイズ。</h2>\n<p>以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png\" alt=\"\" /></p>\n<p>Karabinerでの設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png\" alt=\"\" /></p>\n<h3>どんなことができるのか</h3>\n<ul>\n<li><kbd>space</kbd>長押しで<kbd>shift</kbd></li>\n<li><kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信</li>\n<li><kbd>enter</kbd> 長押しで <kbd>control</kbd></li>\n<li>More...</li>\n</ul>\n<p>特に<strong>Vim</strong>を使う時には有効な設定です。</p>\n<p>個人的には</p>\n<ul>\n<li><kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動</li>\n</ul>\n<p>。。。そういうことです。\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。</p>\n<h2>Karabinerのデメリット</h2>\n<p><strong>Karabiner</strong>無しでは仕事がはかどらなくなるという中毒性があります。\n他人のMACを操作するとTypo連発です。</p>\n<p>キーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)</p>\n<p>でも僕はこの設定は外しました。\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\nゆっくり打てばいいのですがそれは&lt;span class＝&quot;under_line&quot;&gt;めんどくさい</span>ので一旦外してます。\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでな設定を考えてみようと思います。\n今後の課題とします。</p>','Karabiner','MACのキーボードカスタマイズアプリ。特にUSキーボード使いには必須かも。JISキーボードでも効率アップ。\r\n自分だけのキーボードにカスタマイズ。','inherit','closed','closed','','383-revision-v1','','','2019-10-02 22:39:27','2019-10-02 13:39:27','特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。\r\n\r\nUSキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\r\n[Karabiner](https://pqrs.org/osx/karabiner/)\r\n\r\n## Karabinercで自分だけのショートカット\r\n以下USキーボード前提での例です。僕の例です。\r\n- <kbd>delet</kbd> + <kbd>e</kbd> Excel \r\n- <kbd>delet</kbd> + <kbd>z</kbd> Finder \r\n- <kbd>fn</kbd> + <kbd>j</kbd> Intellij idea \r\n- <kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\r\nなどなど。。。\r\n\r\nUSキーボードでは\r\n- <kbd>delete</kbd>、は右上\r\n- <kbd>fn</kbd>、は左下\r\n\r\nにあります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png)\r\n\r\nホームポッションを崩さずにアプリを一瞬でスイッチングできます。\r\n他のアルファベットや数字キーによく使うアプリを設定しています。\r\n\r\n正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\r\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。\r\n\r\n## Karabinerでキー押下時をカスタマイズ。\r\n以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\r\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png)\r\n\r\nKarabinerでの設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png)\r\n\r\n\r\n### どんなことができるのか\r\n\r\n- <kbd>space</kbd>長押しで<kbd>shift</kbd>\r\n- <kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信\r\n- <kbd>enter</kbd> 長押しで <kbd>control</kbd>\r\n- More...\r\n\r\n特に__Vim__を使う時には有効な設定です。\r\n\r\n個人的には\r\n- <kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動\r\n\r\n。。。そういうことです。\r\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\r\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。\r\n\r\n\r\n## Karabinerのデメリット\r\n__Karabiner__無しでは仕事がはかどらなくなるという中毒性があります。\r\n他人のMACを操作するとTypo連発です。\r\n\r\nキーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\r\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)\r\n\r\nでも僕はこの設定は外しました。\r\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\r\nゆっくり打てばいいのですがそれは<span class＝\"under_line\">めんどくさい</span>ので一旦外してます。\r\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでな設定を考えてみようと思います。\r\n今後の課題とします。\r\n\r\n\r\n',383,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/383-revision-v1/',0,'revision','',0),(392,1,'2019-10-02 22:41:09','2019-10-02 13:41:09','<p>特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。</p>\n<p>USキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\n<a href=\"https://pqrs.org/osx/karabiner/\">Karabiner</a></p>\n<h2>Karabinercで自分だけのショートカット</h2>\n<p>以下USキーボード前提での例です。僕の例です。</p>\n<ul>\n<li><kbd>delet</kbd> + <kbd>e</kbd> Excel </li>\n<li><kbd>delet</kbd> + <kbd>z</kbd> Finder </li>\n<li><kbd>fn</kbd> + <kbd>j</kbd> Intellij idea </li>\n<li><kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\nなどなど。。。</li>\n</ul>\n<p>USキーボードでは</p>\n<ul>\n<li><kbd>delete</kbd>、は右上</li>\n<li><kbd>fn</kbd>、は左下</li>\n</ul>\n<p>にあります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png\" alt=\"\" /></p>\n<p>ホームポッションを崩さずにアプリを一瞬でスイッチングできます。\n他のアルファベットや数字キーによく使うアプリを設定しています。</p>\n<p>正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。</p>\n<h2>Karabinerでキー押下時をカスタマイズ。</h2>\n<p>以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png\" alt=\"\" /></p>\n<p>Karabinerでの設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png\" alt=\"\" /></p>\n<h3>どんなことができるのか</h3>\n<ul>\n<li><kbd>space</kbd>長押しで<kbd>shift</kbd></li>\n<li><kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信</li>\n<li><kbd>enter</kbd> 長押しで <kbd>control</kbd></li>\n<li>More...</li>\n</ul>\n<p>特に<strong>Vim</strong>を使う時には有効な設定です。</p>\n<p>個人的には</p>\n<ul>\n<li><kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動</li>\n</ul>\n<p>。。。そういうことです。\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。</p>\n<h2>Karabinerのデメリット</h2>\n<p><strong>Karabiner</strong>無しでは仕事がはかどらなくなるという中毒性があります。\n他人のMACを操作するとTypo連発です。</p>\n<p>キーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)</p>\n<p>でも僕はこの設定は外しました。\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\nゆっくり打てばいいのですがそれは<span class=\"under_line\">めんどくさい</span>ので一旦外してます。\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでな設定を考えてみようと思います。\n今後の課題とします。</p>','Karabiner','MACのキーボードカスタマイズアプリ。特にUSキーボード使いには必須かも。JISキーボードでも効率アップ。\r\n自分だけのキーボードにカスタマイズ。','inherit','closed','closed','','383-revision-v1','','','2019-10-02 22:41:09','2019-10-02 13:41:09','特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。\r\n\r\nUSキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\r\n[Karabiner](https://pqrs.org/osx/karabiner/)\r\n\r\n## Karabinercで自分だけのショートカット\r\n以下USキーボード前提での例です。僕の例です。\r\n- <kbd>delet</kbd> + <kbd>e</kbd> Excel \r\n- <kbd>delet</kbd> + <kbd>z</kbd> Finder \r\n- <kbd>fn</kbd> + <kbd>j</kbd> Intellij idea \r\n- <kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\r\nなどなど。。。\r\n\r\nUSキーボードでは\r\n- <kbd>delete</kbd>、は右上\r\n- <kbd>fn</kbd>、は左下\r\n\r\nにあります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png)\r\n\r\nホームポッションを崩さずにアプリを一瞬でスイッチングできます。\r\n他のアルファベットや数字キーによく使うアプリを設定しています。\r\n\r\n正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\r\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。\r\n\r\n## Karabinerでキー押下時をカスタマイズ。\r\n以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\r\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png)\r\n\r\nKarabinerでの設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png)\r\n\r\n\r\n### どんなことができるのか\r\n\r\n- <kbd>space</kbd>長押しで<kbd>shift</kbd>\r\n- <kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信\r\n- <kbd>enter</kbd> 長押しで <kbd>control</kbd>\r\n- More...\r\n\r\n特に__Vim__を使う時には有効な設定です。\r\n\r\n個人的には\r\n- <kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動\r\n\r\n。。。そういうことです。\r\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\r\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。\r\n\r\n\r\n## Karabinerのデメリット\r\n__Karabiner__無しでは仕事がはかどらなくなるという中毒性があります。\r\n他人のMACを操作するとTypo連発です。\r\n\r\nキーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\r\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)\r\n\r\nでも僕はこの設定は外しました。\r\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\r\nゆっくり打てばいいのですがそれは<span class=\"under_line\">めんどくさい</span>ので一旦外してます。\r\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでな設定を考えてみようと思います。\r\n今後の課題とします。\r\n\r\n\r\n',383,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/383-revision-v1/',0,'revision','',0),(393,1,'2019-10-02 22:41:42','2019-10-02 13:41:42','<p>特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。</p>\n<p>USキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\n<a href=\"https://pqrs.org/osx/karabiner/\">Karabiner</a></p>\n<h2>Karabinercで自分だけのショートカット</h2>\n<p>以下USキーボード前提での例です。僕の例です。</p>\n<ul>\n<li><kbd>delet</kbd> + <kbd>e</kbd> Excel </li>\n<li><kbd>delet</kbd> + <kbd>z</kbd> Finder </li>\n<li><kbd>fn</kbd> + <kbd>j</kbd> Intellij idea </li>\n<li><kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\nなどなど。。。</li>\n</ul>\n<p>USキーボードでは</p>\n<ul>\n<li><kbd>delete</kbd>、は右上</li>\n<li><kbd>fn</kbd>、は左下</li>\n</ul>\n<p>にあります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png\" alt=\"\" /></p>\n<p>ホームポッションを崩さずにアプリを一瞬でスイッチングできます。\n他のアルファベットや数字キーによく使うアプリを設定しています。</p>\n<p>正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。</p>\n<h2>Karabinerでキー押下時をカスタマイズ。</h2>\n<p>以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png\" alt=\"\" /></p>\n<p>Karabinerでの設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png\" alt=\"\" /></p>\n<h3>どんなことができるのか</h3>\n<ul>\n<li><kbd>space</kbd>長押しで<kbd>shift</kbd></li>\n<li><kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信</li>\n<li><kbd>enter</kbd> 長押しで <kbd>control</kbd></li>\n<li>More...</li>\n</ul>\n<p>特に<strong>Vim</strong>を使う時には有効な設定です。</p>\n<p>個人的には</p>\n<ul>\n<li><kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動</li>\n</ul>\n<p>。。。そういうことです。\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。</p>\n<h2>Karabinerのデメリット</h2>\n<p><strong>Karabiner</strong>無しでは仕事がはかどらなくなるという中毒性があります。\n他人のMACを操作するとTypo連発です。</p>\n<p>キーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)</p>\n<p>でも僕はこの設定は外しました。\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\nゆっくり打てばいいのですがそれは<span class=\"under_line\">めんどくさい</span>ので一旦外してます。\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでない設定を考えてみようと思います。\n今後の課題とします。</p>','Karabiner','MACのキーボードカスタマイズアプリ。特にUSキーボード使いには必須かも。JISキーボードでも効率アップ。\r\n自分だけのキーボードにカスタマイズ。','inherit','closed','closed','','383-revision-v1','','','2019-10-02 22:41:42','2019-10-02 13:41:42','特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。\r\n\r\nUSキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\r\n[Karabiner](https://pqrs.org/osx/karabiner/)\r\n\r\n## Karabinercで自分だけのショートカット\r\n以下USキーボード前提での例です。僕の例です。\r\n- <kbd>delet</kbd> + <kbd>e</kbd> Excel \r\n- <kbd>delet</kbd> + <kbd>z</kbd> Finder \r\n- <kbd>fn</kbd> + <kbd>j</kbd> Intellij idea \r\n- <kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\r\nなどなど。。。\r\n\r\nUSキーボードでは\r\n- <kbd>delete</kbd>、は右上\r\n- <kbd>fn</kbd>、は左下\r\n\r\nにあります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png)\r\n\r\nホームポッションを崩さずにアプリを一瞬でスイッチングできます。\r\n他のアルファベットや数字キーによく使うアプリを設定しています。\r\n\r\n正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\r\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。\r\n\r\n## Karabinerでキー押下時をカスタマイズ。\r\n以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\r\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png)\r\n\r\nKarabinerでの設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png)\r\n\r\n\r\n### どんなことができるのか\r\n\r\n- <kbd>space</kbd>長押しで<kbd>shift</kbd>\r\n- <kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信\r\n- <kbd>enter</kbd> 長押しで <kbd>control</kbd>\r\n- More...\r\n\r\n特に__Vim__を使う時には有効な設定です。\r\n\r\n個人的には\r\n- <kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動\r\n\r\n。。。そういうことです。\r\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\r\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。\r\n\r\n\r\n## Karabinerのデメリット\r\n__Karabiner__無しでは仕事がはかどらなくなるという中毒性があります。\r\n他人のMACを操作するとTypo連発です。\r\n\r\nキーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\r\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)\r\n\r\nでも僕はこの設定は外しました。\r\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\r\nゆっくり打てばいいのですがそれは<span class=\"under_line\">めんどくさい</span>ので一旦外してます。\r\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでない設定を考えてみようと思います。\r\n今後の課題とします。\r\n\r\n\r\n',383,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/383-revision-v1/',0,'revision','',0),(394,1,'2019-10-02 22:43:30','2019-10-02 13:43:30','<p>特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。</p>\n<p>USキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\n<a href=\"https://pqrs.org/osx/karabiner/\">Karabiner</a></p>\n<h2>Karabinercで自分だけのショートカット</h2>\n<p>以下USキーボード前提での例です。僕の例です。</p>\n<ul>\n<li><kbd>delet</kbd> + <kbd>e</kbd> Excel </li>\n<li><kbd>delet</kbd> + <kbd>z</kbd> Finder </li>\n<li><kbd>fn</kbd> + <kbd>j</kbd> Intellij idea </li>\n<li><kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\nなどなど。。。</li>\n</ul>\n<p>USキーボードでは</p>\n<ul>\n<li><kbd>delete</kbd>、は右上</li>\n<li><kbd>fn</kbd>、は左下</li>\n</ul>\n<p>にあります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png\" alt=\"\" /></p>\n<p>ホームポッションを崩さずにアプリを一瞬でスイッチングできます。\n他のアルファベットや数字キーによく使うアプリを設定しています。</p>\n<p>正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。</p>\n<h2>Karabinerでキー押下時をカスタマイズ。</h2>\n<p>以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png\" alt=\"\" /></p>\n<p>Karabinerでの設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png\" alt=\"\" /></p>\n<h3>どんなことができるのか</h3>\n<ul>\n<li><kbd>space</kbd>長押しで<kbd>shift</kbd></li>\n<li><kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信</li>\n<li><kbd>enter</kbd> 長押しで <kbd>control</kbd></li>\n<li>More...</li>\n</ul>\n<p>特に<strong>Vim</strong>を使う時には有効な設定です。</p>\n<p>個人的には</p>\n<ul>\n<li><kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動</li>\n</ul>\n<p>そういうことです。\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。</p>\n<h2>Karabinerのデメリット</h2>\n<p><strong>Karabiner</strong>無しでは仕事がはかどらなくなるという中毒性があります。\n他人のMACを操作するとTypo連発です。</p>\n<p>キーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)</p>\n<p>でも僕はこの設定は外しました。\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\nゆっくり打てばいいのですがそれは<span class=\"under_line\">めんどくさい</span>ので一旦外してます。\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでない設定を考えてみようと思います。\n今後の課題とします。</p>','Karabiner','MACのキーボードカスタマイズアプリ。特にUSキーボード使いには必須かも。JISキーボードでも効率アップ。\r\n自分だけのキーボードにカスタマイズ。','inherit','closed','closed','','383-revision-v1','','','2019-10-02 22:43:30','2019-10-02 13:43:30','特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。\r\n\r\nUSキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\r\n[Karabiner](https://pqrs.org/osx/karabiner/)\r\n\r\n## Karabinercで自分だけのショートカット\r\n以下USキーボード前提での例です。僕の例です。\r\n- <kbd>delet</kbd> + <kbd>e</kbd> Excel \r\n- <kbd>delet</kbd> + <kbd>z</kbd> Finder \r\n- <kbd>fn</kbd> + <kbd>j</kbd> Intellij idea \r\n- <kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\r\nなどなど。。。\r\n\r\nUSキーボードでは\r\n- <kbd>delete</kbd>、は右上\r\n- <kbd>fn</kbd>、は左下\r\n\r\nにあります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png)\r\n\r\nホームポッションを崩さずにアプリを一瞬でスイッチングできます。\r\n他のアルファベットや数字キーによく使うアプリを設定しています。\r\n\r\n正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\r\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。\r\n\r\n## Karabinerでキー押下時をカスタマイズ。\r\n以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\r\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png)\r\n\r\nKarabinerでの設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png)\r\n\r\n\r\n### どんなことができるのか\r\n\r\n- <kbd>space</kbd>長押しで<kbd>shift</kbd>\r\n- <kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信\r\n- <kbd>enter</kbd> 長押しで <kbd>control</kbd>\r\n- More...\r\n\r\n特に__Vim__を使う時には有効な設定です。\r\n\r\n個人的には\r\n- <kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動\r\n\r\nそういうことです。\r\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\r\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。\r\n\r\n\r\n## Karabinerのデメリット\r\n__Karabiner__無しでは仕事がはかどらなくなるという中毒性があります。\r\n他人のMACを操作するとTypo連発です。\r\n\r\nキーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\r\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)\r\n\r\nでも僕はこの設定は外しました。\r\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\r\nゆっくり打てばいいのですがそれは<span class=\"under_line\">めんどくさい</span>ので一旦外してます。\r\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでない設定を考えてみようと思います。\r\n今後の課題とします。\r\n\r\n\r\n',383,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/383-revision-v1/',0,'revision','',0),(395,1,'2019-10-02 22:44:16','2019-10-02 13:44:16','<p>特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。</p>\n<p>USキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\n<a href=\"https://pqrs.org/osx/karabiner/\">Karabiner</a></p>\n<h2>Karabinercで自分だけのショートカット</h2>\n<p>以下USキーボード前提での例です。僕の例です。</p>\n<ul>\n<li><kbd>delet</kbd> + <kbd>e</kbd> Excel </li>\n<li><kbd>delet</kbd> + <kbd>z</kbd> Finder </li>\n<li><kbd>fn</kbd> + <kbd>j</kbd> Intellij idea </li>\n<li><kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\nなどなど。。。</li>\n</ul>\n<p>USキーボードでは</p>\n<ul>\n<li><kbd>delete</kbd>、は右上</li>\n<li><kbd>fn</kbd>、は左下</li>\n</ul>\n<p>にあります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png\" alt=\"\" /></p>\n<p>ホームポッションを崩さずにアプリを一瞬でスイッチングできます。\n他のアルファベットや数字キーによく使うアプリを設定しています。</p>\n<p>正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。</p>\n<h2>Karabinerでキー押下時をカスタマイズ。</h2>\n<p>以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png\" alt=\"\" /></p>\n<p>Karabinerでの設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png\" alt=\"\" /></p>\n<h3>どんなことができるのか</h3>\n<ul>\n<li><kbd>space</kbd>長押しで<kbd>shift</kbd></li>\n<li><kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信</li>\n<li><kbd>enter</kbd> 長押しで <kbd>control</kbd></li>\n<li>More...</li>\n</ul>\n<p>特に<strong>Vim</strong>を使う時には有効な設定です。</p>\n<p>個人的には</p>\n<ul>\n<li><kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動</li>\n</ul>\n<p>そういうことです。\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。</p>\n<h2>Karabinerのデメリット</h2>\n<p><strong>Karabiner</strong>無しでは仕事が捗らなくなるという中毒性があります。\n他人のMACを操作するとTypo連発です。</p>\n<p>キーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)</p>\n<p>でも僕はこの設定は外しました。\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\nゆっくり打てばいいのですがそれは<span class=\"under_line\">めんどくさい</span>ので一旦外してます。\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでない設定を考えてみようと思います。\n今後の課題とします。</p>','Karabiner','MACのキーボードカスタマイズアプリ。特にUSキーボード使いには必須かも。JISキーボードでも効率アップ。\r\n自分だけのキーボードにカスタマイズ。','inherit','closed','closed','','383-revision-v1','','','2019-10-02 22:44:16','2019-10-02 13:44:16','特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちたもメリット、デメリットあります。\r\n\r\nUSキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\r\n[Karabiner](https://pqrs.org/osx/karabiner/)\r\n\r\n## Karabinercで自分だけのショートカット\r\n以下USキーボード前提での例です。僕の例です。\r\n- <kbd>delet</kbd> + <kbd>e</kbd> Excel \r\n- <kbd>delet</kbd> + <kbd>z</kbd> Finder \r\n- <kbd>fn</kbd> + <kbd>j</kbd> Intellij idea \r\n- <kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\r\nなどなど。。。\r\n\r\nUSキーボードでは\r\n- <kbd>delete</kbd>、は右上\r\n- <kbd>fn</kbd>、は左下\r\n\r\nにあります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png)\r\n\r\nホームポッションを崩さずにアプリを一瞬でスイッチングできます。\r\n他のアルファベットや数字キーによく使うアプリを設定しています。\r\n\r\n正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\r\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。\r\n\r\n## Karabinerでキー押下時をカスタマイズ。\r\n以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\r\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png)\r\n\r\nKarabinerでの設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png)\r\n\r\n\r\n### どんなことができるのか\r\n\r\n- <kbd>space</kbd>長押しで<kbd>shift</kbd>\r\n- <kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信\r\n- <kbd>enter</kbd> 長押しで <kbd>control</kbd>\r\n- More...\r\n\r\n特に__Vim__を使う時には有効な設定です。\r\n\r\n個人的には\r\n- <kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動\r\n\r\nそういうことです。\r\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\r\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。\r\n\r\n\r\n## Karabinerのデメリット\r\n__Karabiner__無しでは仕事が捗らなくなるという中毒性があります。\r\n他人のMACを操作するとTypo連発です。\r\n\r\nキーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\r\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)\r\n\r\nでも僕はこの設定は外しました。\r\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\r\nゆっくり打てばいいのですがそれは<span class=\"under_line\">めんどくさい</span>ので一旦外してます。\r\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでない設定を考えてみようと思います。\r\n今後の課題とします。\r\n\r\n\r\n',383,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/383-revision-v1/',0,'revision','',0),(397,1,'2019-10-18 09:58:20','2019-10-18 00:58:20','<p>ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。</p>\n<p><strong>Parrot Security OS</strong> とはその名前から &quot;<strong>Security</strong>に特化したOS&quot; というのは推測できますが <strong>ペネレーションテスト</strong>や<strong>リバースエンジニアリング</strong>だけでなくOffice系も<strong>プログラミング</strong>もほぼ全てに精通したOSというのは過大評価ではないのではと思います。</p>\n<p><strong>ペネレーションテス</strong>トといえば真っ先に&quot;<strong>Kali Linux</strong>&quot;というイメージもありますが&quot;P<strong>arrot Security OS</strong>&quot;は&quot;<strong>Kali Linux</strong>&quot;のツールをほぼほぼ搭載しています。\n&quot;<strong>Kali Linux</strong>&quot;以上かもしれません。\nどちらも<strong>Debian</strong>系のOSです。</p>\n<p>イタリア製というのもあってか美しいです</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png\" alt=\"\" /></p>\n<p>何かひらくと\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png\" alt=\"\" /></p>\n<p>Office系(<strong>libreOffice</strong>)</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png\" alt=\"\" /></p>\n<p>ブラウザは<strong>Firefox</strong>がデフォルトです。\n&quot;TORブラウザ”もデフォルトで搭載してまがここでは触れません。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png\" alt=\"\" /></p>\n<h2>VMwear上に Parrot Security OS をインストール</h2>\n<p>環境</p>\n<ul>\n<li>MAC mojave</li>\n<li>VMwear Fusion 11.5.0 </li>\n</ul>\n<p>OSのイメージファイルは本家<a href=\"https://parrotlinux.org/\">Parrot Security OS</a>からダウンロードするのも良いですし、<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からVMwear用のイメージをダウンロードしてもいいでしょう。\n今回は<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からインストールしました。</p>\n<p>VMweraへのOSのインストールはここでは触れません。\n簡単にできますので。</p>\n<h2>Prrot Security OSに追加でインストール</h2>\n<p><strong>Prrot Security OS</strong>にはデフォルトで一般的なアプリは入っています。\n<strong>Vim</strong>は<strong>Nvim</strong>がインストールされてました。\n以下を追加でインストールしました。\nUSER_NAMEは設定されているものに変更してください。\n例) oxboxes.org </p>\n<pre><code class=\"language-bash\">#sudo su をパスワードなしで行える設定\nsudo addgroup wheel\nsudo usermod -aG wheel USER_NAME\n\nvim /etc/pam.d/su \n#追記\n\nauth sufficient pam_wheel.so trust group=wheel\nsudo visudo\n#追記\nUSER_NAME  ALL=NOPASSWD: ALL\n%wheel ALL=(ALL) NOPASSWD:ALL</code></pre>\n<pre><code class=\"language-bash\">#日本語入力\napt install -y ibus-mozc</code></pre>\n<pre><code class=\"language-bash\">#なくてもいいツール(個人の趣味)\n## neofetch\napt install neofetch\n## glances\napt install glances\n## bash_it\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\n~/.bash_it/install.sh\n## lolcat\nsudo apt-get install lolcat\n## Terminology 動画も画像も扱えるTerminal\nsudo apt-get install terminology\n\n## tmuxinator\ngem install tmuxinator\n## tmux使用時のコピペに必要\nsudo apt install xsel</code></pre>\n<h2>Tmuxが動かない</h2>\n<p>いつも<strong>Tmuxinator</strong>を使ているので4.2の設定をそのまま持ってきたところ<strong>Tmuxinator</strong>が起動しない。(Tmux)\n調べたところ</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\nset-option -g status-fg black\nset-option -g status-bg &quot;colour237&quot;\n\n# ウィンドウリストの色を設定する\nsetw -g window-status-fg white\nsetw -g window-status-bg black\nsetw -g window-status-attr dim\n# アクティブなウィンドウを目立たせる\nsetw -g window-status-current-fg black\nsetw -g window-status-current-bg &quot;colour68&quot;\nsetw -g window-status-current-attr bright\n\n# ペインボーダーの色を設定する\nset -g pane-border-fg &quot;colour237&quot;\nset -g pane-border-bg &quot;colour237&quot;\n# アクティブなペインを目立たせる\nset -g pane-active-border-fg &quot;colour68&quot;\nset -g pane-active-border-bg  &quot;colour237&quot;\n\n# コマンドラインの色を設定する\nset -g message-fg white\nset -g message-bg black\nset -g message-attr bright</code></pre>\n<p>ここらへんでエラーになる。\nググったところ<strong>Tmux</strong>のバージョンの違いによる設定ファイルの記述らしい。\n<a href=\"https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed\">参考サイト</a></p>\n<p>変更後</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\n set-option -g status-style fg=&quot;black&quot;\n set-option -g status-style bg=&quot;colour237&quot;\n#\n## ウィンドウリストの色を設定する\n setw -g window-status-style fg=&quot;white&quot;\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\n# setw -g window-status-attr dim\n\n## アクティブなウィンドウを目立たせる\n setw -g window-status-current-style fg=&quot;black&quot;\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\n# setw -g window-status-current-style attr=&quot;bright&quot;\n#\n## ペインボーダーの色を設定する\n set -g pane-border-style fg=&quot;colour237&quot;\n set -g pane-border-style bg=&quot;colour237&quot;\n\n## アクティブなペインを目立たせる\n# set -g pane-active-border-style fg=&quot;colour68&quot;\n# set -g pane-active-border-style bg=&quot;colour237&quot;\n#\n## コマンドラインの色を設定する\n set -g message-style fg=&quot;white&quot;\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\n#set -g message-style attr=&quot;bright&quot;</code></pre>\n<p>で無事4.2同様動かすことができました。</p>\n<h2>Kali Linus VS Parrot Security OS</h2>\n<p>なんて記事もありますが適材適所かと思います。\nHostOS側で通常の作業をして<strong>ペネレーションテスト</strong>や<strong>セキュリティーチェック</strong>などはVM上の<strong>Kalli Linux</strong>という使いかたはありかと思います。\n<strong>Parrot Security OS</strong>は実機で使ってこそパフォーマンスを発揮するような感じです。</p>\n<p>ということで<strong>Parrot Security OS</strong>を実機で持ちたい・・・\nが、<strong>Parrot Srcurity OS</strong>は日本語での情報は皆無と言っていいくらい厳しいです。\n英語、中国語では活発なコミュニティーがあるようです。</p>\n<p>最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、<strong>Kali Linux</strong>のように&quot;Think padと相性がいい&quot;とかあるのだろうか・・・</p>\n<p>今後の課題です。</p>','Parrot Security OS','ペネレーションテストなど行う場合ToolをMACにインストールするのは<span  class=\"under_line\">めんどくさい</span>し限界もあるので<strong>Parrot Security OS</strong>を準備する','inherit','closed','closed','','373-revision-v1','','','2019-10-18 09:58:20','2019-10-18 00:58:20','ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。\r\n\r\n__Parrot Security OS__ とはその名前から \"__Security__に特化したOS\" というのは推測できますが __ペネレーションテスト__や__リバースエンジニアリング__だけでなくOffice系も__プログラミング__もほぼ全てに精通したOSというのは過大評価ではないのではと思います。\r\n\r\n__ペネレーションテス__トといえば真っ先に\"__Kali Linux__\"というイメージもありますが\"P__arrot Security OS__\"は\"__Kali Linux__\"のツールをほぼほぼ搭載しています。\r\n\"__Kali Linux__\"以上かもしれません。\r\nどちらも__Debian__系のOSです。\r\n\r\nイタリア製というのもあってか美しいです\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png)\r\n\r\n何かひらくと\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png)\r\n\r\nOffice系(__libreOffice__)\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png)\r\n\r\nブラウザは__Firefox__がデフォルトです。\r\n\"TORブラウザ”もデフォルトで搭載してまがここでは触れません。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png)\r\n\r\n## VMwear上に Parrot Security OS をインストール\r\n環境\r\n- MAC mojave\r\n- VMwear Fusion 11.5.0 \r\n\r\nOSのイメージファイルは本家[Parrot Security OS](https://parrotlinux.org/)からダウンロードするのも良いですし、[osboxes.org](https://www.osboxes.org/parrot-security-os/)からVMwear用のイメージをダウンロードしてもいいでしょう。\r\n今回は[osboxes.org](https://www.osboxes.org/parrot-security-os/)からインストールしました。\r\n\r\nVMweraへのOSのインストールはここでは触れません。\r\n簡単にできますので。\r\n\r\n## Prrot Security OSに追加でインストール\r\n__Prrot Security OS__にはデフォルトで一般的なアプリは入っています。\r\n__Vim__は__Nvim__がインストールされてました。\r\n以下を追加でインストールしました。\r\nUSER_NAMEは設定されているものに変更してください。\r\n例) oxboxes.org \r\n```bash\r\n#sudo su をパスワードなしで行える設定\r\nsudo addgroup wheel\r\nsudo usermod -aG wheel USER_NAME\r\n\r\nvim /etc/pam.d/su \r\n#追記\r\n\r\nauth sufficient pam_wheel.so trust group=wheel\r\nsudo visudo\r\n#追記\r\nUSER_NAME  ALL=NOPASSWD: ALL\r\n%wheel ALL=(ALL) NOPASSWD:ALL\r\n```\r\n\r\n```bash\r\n#日本語入力\r\napt install -y ibus-mozc\r\n```\r\n\r\n```bash\r\n#なくてもいいツール(個人の趣味)\r\n## neofetch\r\napt install neofetch\r\n## glances\r\napt install glances\r\n## bash_it\r\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\r\n~/.bash_it/install.sh\r\n## lolcat\r\nsudo apt-get install lolcat\r\n## Terminology 動画も画像も扱えるTerminal\r\nsudo apt-get install terminology\r\n\r\n## tmuxinator\r\ngem install tmuxinator\r\n## tmux使用時のコピペに必要\r\nsudo apt install xsel\r\n```\r\n\r\n## Tmuxが動かない\r\nいつも__Tmuxinator__を使ているので4.2の設定をそのまま持ってきたところ__Tmuxinator__が起動しない。(Tmux)\r\n調べたところ\r\n```bash\r\n# ステータスバーの色を設定する\r\nset-option -g status-fg black\r\nset-option -g status-bg &quot;colour237&quot;\r\n\r\n# ウィンドウリストの色を設定する\r\nsetw -g window-status-fg white\r\nsetw -g window-status-bg black\r\nsetw -g window-status-attr dim\r\n# アクティブなウィンドウを目立たせる\r\nsetw -g window-status-current-fg black\r\nsetw -g window-status-current-bg &quot;colour68&quot;\r\nsetw -g window-status-current-attr bright\r\n\r\n# ペインボーダーの色を設定する\r\nset -g pane-border-fg &quot;colour237&quot;\r\nset -g pane-border-bg &quot;colour237&quot;\r\n# アクティブなペインを目立たせる\r\nset -g pane-active-border-fg &quot;colour68&quot;\r\nset -g pane-active-border-bg  &quot;colour237&quot;\r\n\r\n# コマンドラインの色を設定する\r\nset -g message-fg white\r\nset -g message-bg black\r\nset -g message-attr bright\r\n```\r\nここらへんでエラーになる。\r\nググったところ__Tmux__のバージョンの違いによる設定ファイルの記述らしい。\r\n[参考サイト](https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed)\r\n\r\n変更後\r\n```bash\r\n# ステータスバーの色を設定する\r\n set-option -g status-style fg=&quot;black&quot;\r\n set-option -g status-style bg=&quot;colour237&quot;\r\n#\r\n## ウィンドウリストの色を設定する\r\n setw -g window-status-style fg=&quot;white&quot;\r\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\r\n# setw -g window-status-attr dim\r\n\r\n## アクティブなウィンドウを目立たせる\r\n setw -g window-status-current-style fg=&quot;black&quot;\r\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\r\n# setw -g window-status-current-style attr=&quot;bright&quot;\r\n#\r\n## ペインボーダーの色を設定する\r\n set -g pane-border-style fg=&quot;colour237&quot;\r\n set -g pane-border-style bg=&quot;colour237&quot;\r\n\r\n## アクティブなペインを目立たせる\r\n# set -g pane-active-border-style fg=&quot;colour68&quot;\r\n# set -g pane-active-border-style bg=&quot;colour237&quot;\r\n#\r\n## コマンドラインの色を設定する\r\n set -g message-style fg=&quot;white&quot;\r\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\r\n#set -g message-style attr=&quot;bright&quot;\r\n```\r\n\r\nで無事4.2同様動かすことができました。\r\n\r\n## Kali Linus VS Parrot Security OS \r\nなんて記事もありますが適材適所かと思います。\r\nHostOS側で通常の作業をして__ペネレーションテスト__や__セキュリティーチェック__などはVM上の__Kalli Linux__という使いかたはありかと思います。\r\n__Parrot Security OS__は実機で使ってこそパフォーマンスを発揮するような感じです。\r\n\r\nということで__Parrot Security OS__を実機で持ちたい・・・\r\nが、__Parrot Srcurity OS__は日本語での情報は皆無と言っていいくらい厳しいです。\r\n英語、中国語では活発なコミュニティーがあるようです。\r\n\r\n最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、__Kali Linux__のように\"Think padと相性がいい\"とかあるのだろうか・・・\r\n\r\n今後の課題です。\r\n\r\n\r\n\r\n\r\n',373,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/373-revision-v1/',0,'revision','',0),(398,1,'2019-10-18 10:00:36','2019-10-18 01:00:36','<p>ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。</p>\n<p><strong>Parrot Security OS</strong> とはその名前から &quot;<strong>Security</strong>に特化したOS&quot; というのは推測できますが <strong>ペネレーションテスト</strong>や<strong>リバースエンジニアリング</strong>だけでなくOffice系も<strong>プログラミング</strong>もほぼ全てに精通したOSというのは過大評価ではないのではと思います。</p>\n<p><strong>ペネレーションテス</strong>トといえば真っ先に&quot;<strong>Kali Linux</strong>&quot;というイメージもありますが&quot;P<strong>arrot Security OS</strong>&quot;は&quot;<strong>Kali Linux</strong>&quot;のツールをほぼほぼ搭載しています。\n&quot;<strong>Kali Linux</strong>&quot;以上かもしれません。\nどちらも<strong>Debian</strong>系のOSです。</p>\n<p>イタリア製というのもあってか美しいです</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png\" alt=\"\" /></p>\n<p>何かひらくと\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png\" alt=\"\" /></p>\n<p>Office系(<strong>libreOffice</strong>)</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png\" alt=\"\" /></p>\n<p>ブラウザは<strong>Firefox</strong>がデフォルトです。\n&quot;TORブラウザ”もデフォルトで搭載してまがここでは触れません。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png\" alt=\"\" /></p>\n<h2>VMwear上に Parrot Security OS をインストール</h2>\n<p>環境</p>\n<ul>\n<li>MAC mojave</li>\n<li>VMwear Fusion 11.5.0 </li>\n</ul>\n<p>OSのイメージファイルは本家<a href=\"https://parrotlinux.org/\">Parrot Security OS</a>からダウンロードするのも良いですし、<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からVMwear用のイメージをダウンロードしてもいいでしょう。\n今回は<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からインストールしました。</p>\n<p>VMweraへのOSのインストールはここでは触れません。\n簡単にできますので。</p>\n<h2>Prrot Security OSに追加でインストール</h2>\n<p><strong>Prrot Security OS</strong>にはデフォルトで一般的なアプリは入っています。\n<strong>Vim</strong>は<strong>Nvim</strong>がインストールされてました。\n以下を追加でインストールしました。\nUSER_NAMEは設定されているものに変更してください。\n例) oxboxes.org </p>\n<pre><code class=\"language-bash\">#sudo su をパスワードなしで行える設定\nsudo addgroup wheel\nsudo usermod -aG wheel USER_NAME\n\nvim /etc/pam.d/su \n#追記\n\nauth sufficient pam_wheel.so trust group=wheel\nsudo visudo\n#追記\nUSER_NAME  ALL=NOPASSWD: ALL\n%wheel ALL=(ALL) NOPASSWD:ALL</code></pre>\n<pre><code class=\"language-bash\">#日本語入力\napt install -y ibus-mozc</code></pre>\n<pre><code class=\"language-bash\">#なくてもいいツール(個人の趣味)\n## neofetch\napt install neofetch\n## glances\napt install glances\n## bash_it\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\n~/.bash_it/install.sh\n## lolcat\nsudo apt-get install lolcat\n## Terminology 動画も画像も扱えるTerminal\nsudo apt-get install terminology\n\n## tmuxinator\ngem install tmuxinator\n## tmux使用時のコピペに必要\nsudo apt install xsel</code></pre>\n<h2>Tmuxが動かない</h2>\n<p>いつも<strong>Tmuxinator</strong>を使ているので4.2の設定をそのまま持ってきたところ<strong>Tmuxinator</strong>が起動しない。(Tmux)\n調べたところ</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\nset-option -g status-fg black\nset-option -g status-bg &quot;colour237&quot;\n\n# ウィンドウリストの色を設定する\nsetw -g window-status-fg white\nsetw -g window-status-bg black\nsetw -g window-status-attr dim\n# アクティブなウィンドウを目立たせる\nsetw -g window-status-current-fg black\nsetw -g window-status-current-bg &quot;colour68&quot;\nsetw -g window-status-current-attr bright\n\n# ペインボーダーの色を設定する\nset -g pane-border-fg &quot;colour237&quot;\nset -g pane-border-bg &quot;colour237&quot;\n# アクティブなペインを目立たせる\nset -g pane-active-border-fg &quot;colour68&quot;\nset -g pane-active-border-bg  &quot;colour237&quot;\n\n# コマンドラインの色を設定する\nset -g message-fg white\nset -g message-bg black\nset -g message-attr bright</code></pre>\n<p>ここらへんでエラーになる。\nググったところ<strong>Tmux</strong>のバージョンの違いによる設定ファイルの記述らしい。\n<a href=\"https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed\">参考サイト</a></p>\n<p>変更後</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\n set-option -g status-style fg=&quot;black&quot;\n set-option -g status-style bg=&quot;colour237&quot;\n#\n## ウィンドウリストの色を設定する\n setw -g window-status-style fg=&quot;white&quot;\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\n# setw -g window-status-attr dim\n\n## アクティブなウィンドウを目立たせる\n setw -g window-status-current-style fg=&quot;black&quot;\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\n# setw -g window-status-current-style attr=&quot;bright&quot;\n#\n## ペインボーダーの色を設定する\n set -g pane-border-style fg=&quot;colour237&quot;\n set -g pane-border-style bg=&quot;colour237&quot;\n\n## アクティブなペインを目立たせる\n# set -g pane-active-border-style fg=&quot;colour68&quot;\n# set -g pane-active-border-style bg=&quot;colour237&quot;\n#\n## コマンドラインの色を設定する\n set -g message-style fg=&quot;white&quot;\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\n#set -g message-style attr=&quot;bright&quot;</code></pre>\n<p>で無事4.2同様動かすことができました。</p>\n<h2>Kali Linus VS Parrot Security OS</h2>\n<p>なんて記事もありますが適材適所かと思います。\nHostOS側の開発環境へ<strong>ペネレーションテスト</strong>や<strong>セキュリティーチェック</strong>などはVM上の<strong>Kalli Linux</strong>という使いかたはありかと思います。\n<strong>Parrot Security OS</strong>は実機で使ってこそパフォーマンスを発揮するような感じです。</p>\n<p>ということで<strong>Parrot Security OS</strong>を実機で持ちたい・・・\nが、<strong>Parrot Srcurity OS</strong>は日本語での情報は皆無と言っていいくらい厳しいです。\n英語、中国語では活発なコミュニティーがあるようです。</p>\n<p>最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、<strong>Kali Linux</strong>のように&quot;Think padと相性がいい&quot;とかあるのだろうか・・・</p>\n<p>今後の課題です。</p>','Parrot Security OS','ペネレーションテストなど行う場合ToolをMACにインストールするのは<span  class=\"under_line\">めんどくさい</span>し限界もあるので<strong>Parrot Security OS</strong>を準備する','inherit','closed','closed','','373-revision-v1','','','2019-10-18 10:00:36','2019-10-18 01:00:36','ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。\r\n\r\n__Parrot Security OS__ とはその名前から \"__Security__に特化したOS\" というのは推測できますが __ペネレーションテスト__や__リバースエンジニアリング__だけでなくOffice系も__プログラミング__もほぼ全てに精通したOSというのは過大評価ではないのではと思います。\r\n\r\n__ペネレーションテス__トといえば真っ先に\"__Kali Linux__\"というイメージもありますが\"P__arrot Security OS__\"は\"__Kali Linux__\"のツールをほぼほぼ搭載しています。\r\n\"__Kali Linux__\"以上かもしれません。\r\nどちらも__Debian__系のOSです。\r\n\r\nイタリア製というのもあってか美しいです\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png)\r\n\r\n何かひらくと\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png)\r\n\r\nOffice系(__libreOffice__)\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png)\r\n\r\nブラウザは__Firefox__がデフォルトです。\r\n\"TORブラウザ”もデフォルトで搭載してまがここでは触れません。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png)\r\n\r\n## VMwear上に Parrot Security OS をインストール\r\n環境\r\n- MAC mojave\r\n- VMwear Fusion 11.5.0 \r\n\r\nOSのイメージファイルは本家[Parrot Security OS](https://parrotlinux.org/)からダウンロードするのも良いですし、[osboxes.org](https://www.osboxes.org/parrot-security-os/)からVMwear用のイメージをダウンロードしてもいいでしょう。\r\n今回は[osboxes.org](https://www.osboxes.org/parrot-security-os/)からインストールしました。\r\n\r\nVMweraへのOSのインストールはここでは触れません。\r\n簡単にできますので。\r\n\r\n## Prrot Security OSに追加でインストール\r\n__Prrot Security OS__にはデフォルトで一般的なアプリは入っています。\r\n__Vim__は__Nvim__がインストールされてました。\r\n以下を追加でインストールしました。\r\nUSER_NAMEは設定されているものに変更してください。\r\n例) oxboxes.org \r\n```bash\r\n#sudo su をパスワードなしで行える設定\r\nsudo addgroup wheel\r\nsudo usermod -aG wheel USER_NAME\r\n\r\nvim /etc/pam.d/su \r\n#追記\r\n\r\nauth sufficient pam_wheel.so trust group=wheel\r\nsudo visudo\r\n#追記\r\nUSER_NAME  ALL=NOPASSWD: ALL\r\n%wheel ALL=(ALL) NOPASSWD:ALL\r\n```\r\n\r\n```bash\r\n#日本語入力\r\napt install -y ibus-mozc\r\n```\r\n\r\n```bash\r\n#なくてもいいツール(個人の趣味)\r\n## neofetch\r\napt install neofetch\r\n## glances\r\napt install glances\r\n## bash_it\r\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\r\n~/.bash_it/install.sh\r\n## lolcat\r\nsudo apt-get install lolcat\r\n## Terminology 動画も画像も扱えるTerminal\r\nsudo apt-get install terminology\r\n\r\n## tmuxinator\r\ngem install tmuxinator\r\n## tmux使用時のコピペに必要\r\nsudo apt install xsel\r\n```\r\n\r\n## Tmuxが動かない\r\nいつも__Tmuxinator__を使ているので4.2の設定をそのまま持ってきたところ__Tmuxinator__が起動しない。(Tmux)\r\n調べたところ\r\n```bash\r\n# ステータスバーの色を設定する\r\nset-option -g status-fg black\r\nset-option -g status-bg &quot;colour237&quot;\r\n\r\n# ウィンドウリストの色を設定する\r\nsetw -g window-status-fg white\r\nsetw -g window-status-bg black\r\nsetw -g window-status-attr dim\r\n# アクティブなウィンドウを目立たせる\r\nsetw -g window-status-current-fg black\r\nsetw -g window-status-current-bg &quot;colour68&quot;\r\nsetw -g window-status-current-attr bright\r\n\r\n# ペインボーダーの色を設定する\r\nset -g pane-border-fg &quot;colour237&quot;\r\nset -g pane-border-bg &quot;colour237&quot;\r\n# アクティブなペインを目立たせる\r\nset -g pane-active-border-fg &quot;colour68&quot;\r\nset -g pane-active-border-bg  &quot;colour237&quot;\r\n\r\n# コマンドラインの色を設定する\r\nset -g message-fg white\r\nset -g message-bg black\r\nset -g message-attr bright\r\n```\r\nここらへんでエラーになる。\r\nググったところ__Tmux__のバージョンの違いによる設定ファイルの記述らしい。\r\n[参考サイト](https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed)\r\n\r\n変更後\r\n```bash\r\n# ステータスバーの色を設定する\r\n set-option -g status-style fg=&quot;black&quot;\r\n set-option -g status-style bg=&quot;colour237&quot;\r\n#\r\n## ウィンドウリストの色を設定する\r\n setw -g window-status-style fg=&quot;white&quot;\r\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\r\n# setw -g window-status-attr dim\r\n\r\n## アクティブなウィンドウを目立たせる\r\n setw -g window-status-current-style fg=&quot;black&quot;\r\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\r\n# setw -g window-status-current-style attr=&quot;bright&quot;\r\n#\r\n## ペインボーダーの色を設定する\r\n set -g pane-border-style fg=&quot;colour237&quot;\r\n set -g pane-border-style bg=&quot;colour237&quot;\r\n\r\n## アクティブなペインを目立たせる\r\n# set -g pane-active-border-style fg=&quot;colour68&quot;\r\n# set -g pane-active-border-style bg=&quot;colour237&quot;\r\n#\r\n## コマンドラインの色を設定する\r\n set -g message-style fg=&quot;white&quot;\r\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\r\n#set -g message-style attr=&quot;bright&quot;\r\n```\r\n\r\nで無事4.2同様動かすことができました。\r\n\r\n## Kali Linus VS Parrot Security OS \r\nなんて記事もありますが適材適所かと思います。\r\nHostOS側の開発環境へ__ペネレーションテスト__や__セキュリティーチェック__などはVM上の__Kalli Linux__という使いかたはありかと思います。\r\n__Parrot Security OS__は実機で使ってこそパフォーマンスを発揮するような感じです。\r\n\r\nということで__Parrot Security OS__を実機で持ちたい・・・\r\nが、__Parrot Srcurity OS__は日本語での情報は皆無と言っていいくらい厳しいです。\r\n英語、中国語では活発なコミュニティーがあるようです。\r\n\r\n最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、__Kali Linux__のように\"Think padと相性がいい\"とかあるのだろうか・・・\r\n\r\n今後の課題です。\r\n\r\n\r\n\r\n\r\n',373,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/373-revision-v1/',0,'revision','',0),(399,1,'2019-10-18 10:01:36','2019-10-18 01:01:36','<p>ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。</p>\n<p><strong>Parrot Security OS</strong> とはその名前から &quot;<strong>Security</strong>に特化したOS&quot; というのは推測できますが <strong>ペネレーションテスト</strong>や<strong>リバースエンジニアリング</strong>だけでなくOffice系も<strong>プログラミング</strong>もほぼ全てに精通したOSというのは過大評価ではないのではと思います。</p>\n<p><strong>ペネレーションテス</strong>トといえば真っ先に&quot;<strong>Kali Linux</strong>&quot;というイメージもありますが&quot;P<strong>arrot Security OS</strong>&quot;は&quot;<strong>Kali Linux</strong>&quot;のツールをほぼほぼ搭載しています。\n&quot;<strong>Kali Linux</strong>&quot;以上かもしれません。\nどちらも<strong>Debian</strong>系のOSです。</p>\n<p>イタリア製というのもあってか美しいです</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png\" alt=\"\" /></p>\n<p>何かひらくと\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png\" alt=\"\" /></p>\n<p>Office系(<strong>libreOffice</strong>)</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png\" alt=\"\" /></p>\n<p>ブラウザは<strong>Firefox</strong>がデフォルトです。\n&quot;TORブラウザ”もデフォルトで搭載してまがここでは触れません。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png\" alt=\"\" /></p>\n<h2>VMwear上に Parrot Security OS をインストール</h2>\n<p>環境</p>\n<ul>\n<li>MAC mojave</li>\n<li>VMwear Fusion 11.5.0 </li>\n</ul>\n<p>OSのイメージファイルは本家<a href=\"https://parrotlinux.org/\">Parrot Security OS</a>からダウンロードするのも良いですし、<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からVMwear用のイメージをダウンロードしてもいいでしょう。\n今回は<a href=\"https://www.osboxes.org/parrot-security-os/\">osboxes.org</a>からインストールしました。</p>\n<p>VMweraへのOSのインストールはここでは触れません。\n簡単にできますので。</p>\n<h2>Prrot Security OSに追加でインストール</h2>\n<p><strong>Prrot Security OS</strong>にはデフォルトで一般的なアプリは入っています。\n<strong>Vim</strong>は<strong>Nvim</strong>がインストールされてました。\n以下を追加でインストールしました。\nUSER_NAMEは設定されているものに変更してください。\n例) oxboxes.org </p>\n<pre><code class=\"language-bash\">#sudo su をパスワードなしで行える設定\nsudo addgroup wheel\nsudo usermod -aG wheel USER_NAME\n\nvim /etc/pam.d/su \n#追記\n\nauth sufficient pam_wheel.so trust group=wheel\nsudo visudo\n#追記\nUSER_NAME  ALL=NOPASSWD: ALL\n%wheel ALL=(ALL) NOPASSWD:ALL</code></pre>\n<pre><code class=\"language-bash\">#日本語入力\napt install -y ibus-mozc</code></pre>\n<pre><code class=\"language-bash\">#なくてもいいツール(個人の趣味)\n## neofetch\napt install neofetch\n## glances\napt install glances\n## bash_it\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\n~/.bash_it/install.sh\n## lolcat\nsudo apt-get install lolcat\n## Terminology 動画も画像も扱えるTerminal\nsudo apt-get install terminology\n\n## tmuxinator\ngem install tmuxinator\n## tmux使用時のコピペに必要\nsudo apt install xsel</code></pre>\n<h2>Tmuxが動かない</h2>\n<p>いつも<strong>Tmuxinator</strong>を使ているので4.2の設定をそのまま持ってきたところ<strong>Tmuxinator</strong>が起動しない。(Tmux)\n調べたところ</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\nset-option -g status-fg black\nset-option -g status-bg &quot;colour237&quot;\n\n# ウィンドウリストの色を設定する\nsetw -g window-status-fg white\nsetw -g window-status-bg black\nsetw -g window-status-attr dim\n# アクティブなウィンドウを目立たせる\nsetw -g window-status-current-fg black\nsetw -g window-status-current-bg &quot;colour68&quot;\nsetw -g window-status-current-attr bright\n\n# ペインボーダーの色を設定する\nset -g pane-border-fg &quot;colour237&quot;\nset -g pane-border-bg &quot;colour237&quot;\n# アクティブなペインを目立たせる\nset -g pane-active-border-fg &quot;colour68&quot;\nset -g pane-active-border-bg  &quot;colour237&quot;\n\n# コマンドラインの色を設定する\nset -g message-fg white\nset -g message-bg black\nset -g message-attr bright</code></pre>\n<p>ここらへんでエラーになる。\nググったところ<strong>Tmux</strong>のバージョンの違いによる設定ファイルの記述らしい。\n<a href=\"https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed\">参考サイト</a></p>\n<p>変更後</p>\n<pre><code class=\"language-bash\"># ステータスバーの色を設定する\n set-option -g status-style fg=&quot;black&quot;\n set-option -g status-style bg=&quot;colour237&quot;\n#\n## ウィンドウリストの色を設定する\n setw -g window-status-style fg=&quot;white&quot;\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\n# setw -g window-status-attr dim\n\n## アクティブなウィンドウを目立たせる\n setw -g window-status-current-style fg=&quot;black&quot;\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\n# setw -g window-status-current-style attr=&quot;bright&quot;\n#\n## ペインボーダーの色を設定する\n set -g pane-border-style fg=&quot;colour237&quot;\n set -g pane-border-style bg=&quot;colour237&quot;\n\n## アクティブなペインを目立たせる\n# set -g pane-active-border-style fg=&quot;colour68&quot;\n# set -g pane-active-border-style bg=&quot;colour237&quot;\n#\n## コマンドラインの色を設定する\n set -g message-style fg=&quot;white&quot;\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\n#set -g message-style attr=&quot;bright&quot;</code></pre>\n<p>で無事4.2同様動かすことができました。</p>\n<h2>Kali Linus VS Parrot Security OS</h2>\n<p>なんて記事もありますが適材適所かと思います。\nHostOS側の開発環境への<strong>ペネレーションテスト</strong>や<strong>セキュリティーチェック</strong>などはVM上の<strong>Kalli Linux</strong>という使いかたはありかと思います。\n<strong>Parrot Security OS</strong>は実機で使ってこそパフォーマンスを発揮するような感じです。</p>\n<p>ということで<strong>Parrot Security OS</strong>を実機で持ちたい・・・\nが、<strong>Parrot Srcurity OS</strong>は日本語での情報は皆無と言っていいくらい厳しいです。\n英語、中国語では活発なコミュニティーがあるようです。</p>\n<p>最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、<strong>Kali Linux</strong>のように&quot;Think padと相性がいい&quot;とかあるのだろうか・・・</p>\n<p>今後の課題です。</p>','Parrot Security OS','ペネレーションテストなど行う場合ToolをMACにインストールするのは<span  class=\"under_line\">めんどくさい</span>し限界もあるので<strong>Parrot Security OS</strong>を準備する','inherit','closed','closed','','373-revision-v1','','','2019-10-18 10:01:36','2019-10-18 01:01:36','ずっと使っていたVersion4.2が無理しすぎたせいか動きがわるくなったので4.7へ移行してみた。\r\n\r\n__Parrot Security OS__ とはその名前から \"__Security__に特化したOS\" というのは推測できますが __ペネレーションテスト__や__リバースエンジニアリング__だけでなくOffice系も__プログラミング__もほぼ全てに精通したOSというのは過大評価ではないのではと思います。\r\n\r\n__ペネレーションテス__トといえば真っ先に\"__Kali Linux__\"というイメージもありますが\"P__arrot Security OS__\"は\"__Kali Linux__\"のツールをほぼほぼ搭載しています。\r\n\"__Kali Linux__\"以上かもしれません。\r\nどちらも__Debian__系のOSです。\r\n\r\nイタリア製というのもあってか美しいです\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png)\r\n\r\n何かひらくと\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png)\r\n\r\nOffice系(__libreOffice__)\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png)\r\n\r\nブラウザは__Firefox__がデフォルトです。\r\n\"TORブラウザ”もデフォルトで搭載してまがここでは触れません。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png)\r\n\r\n## VMwear上に Parrot Security OS をインストール\r\n環境\r\n- MAC mojave\r\n- VMwear Fusion 11.5.0 \r\n\r\nOSのイメージファイルは本家[Parrot Security OS](https://parrotlinux.org/)からダウンロードするのも良いですし、[osboxes.org](https://www.osboxes.org/parrot-security-os/)からVMwear用のイメージをダウンロードしてもいいでしょう。\r\n今回は[osboxes.org](https://www.osboxes.org/parrot-security-os/)からインストールしました。\r\n\r\nVMweraへのOSのインストールはここでは触れません。\r\n簡単にできますので。\r\n\r\n## Prrot Security OSに追加でインストール\r\n__Prrot Security OS__にはデフォルトで一般的なアプリは入っています。\r\n__Vim__は__Nvim__がインストールされてました。\r\n以下を追加でインストールしました。\r\nUSER_NAMEは設定されているものに変更してください。\r\n例) oxboxes.org \r\n```bash\r\n#sudo su をパスワードなしで行える設定\r\nsudo addgroup wheel\r\nsudo usermod -aG wheel USER_NAME\r\n\r\nvim /etc/pam.d/su \r\n#追記\r\n\r\nauth sufficient pam_wheel.so trust group=wheel\r\nsudo visudo\r\n#追記\r\nUSER_NAME  ALL=NOPASSWD: ALL\r\n%wheel ALL=(ALL) NOPASSWD:ALL\r\n```\r\n\r\n```bash\r\n#日本語入力\r\napt install -y ibus-mozc\r\n```\r\n\r\n```bash\r\n#なくてもいいツール(個人の趣味)\r\n## neofetch\r\napt install neofetch\r\n## glances\r\napt install glances\r\n## bash_it\r\ngit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\r\n~/.bash_it/install.sh\r\n## lolcat\r\nsudo apt-get install lolcat\r\n## Terminology 動画も画像も扱えるTerminal\r\nsudo apt-get install terminology\r\n\r\n## tmuxinator\r\ngem install tmuxinator\r\n## tmux使用時のコピペに必要\r\nsudo apt install xsel\r\n```\r\n\r\n## Tmuxが動かない\r\nいつも__Tmuxinator__を使ているので4.2の設定をそのまま持ってきたところ__Tmuxinator__が起動しない。(Tmux)\r\n調べたところ\r\n```bash\r\n# ステータスバーの色を設定する\r\nset-option -g status-fg black\r\nset-option -g status-bg &quot;colour237&quot;\r\n\r\n# ウィンドウリストの色を設定する\r\nsetw -g window-status-fg white\r\nsetw -g window-status-bg black\r\nsetw -g window-status-attr dim\r\n# アクティブなウィンドウを目立たせる\r\nsetw -g window-status-current-fg black\r\nsetw -g window-status-current-bg &quot;colour68&quot;\r\nsetw -g window-status-current-attr bright\r\n\r\n# ペインボーダーの色を設定する\r\nset -g pane-border-fg &quot;colour237&quot;\r\nset -g pane-border-bg &quot;colour237&quot;\r\n# アクティブなペインを目立たせる\r\nset -g pane-active-border-fg &quot;colour68&quot;\r\nset -g pane-active-border-bg  &quot;colour237&quot;\r\n\r\n# コマンドラインの色を設定する\r\nset -g message-fg white\r\nset -g message-bg black\r\nset -g message-attr bright\r\n```\r\nここらへんでエラーになる。\r\nググったところ__Tmux__のバージョンの違いによる設定ファイルの記述らしい。\r\n[参考サイト](https://qiita.com/TsutomuNakamura/items/663b8e456768f29e37ed)\r\n\r\n変更後\r\n```bash\r\n# ステータスバーの色を設定する\r\n set-option -g status-style fg=&quot;black&quot;\r\n set-option -g status-style bg=&quot;colour237&quot;\r\n#\r\n## ウィンドウリストの色を設定する\r\n setw -g window-status-style fg=&quot;white&quot;\r\n setw -g window-status-style bg=&quot;black&quot;,&quot;dim&quot;\r\n# setw -g window-status-attr dim\r\n\r\n## アクティブなウィンドウを目立たせる\r\n setw -g window-status-current-style fg=&quot;black&quot;\r\n setw -g window-status-current-style bg=&quot;colour68&quot;,&quot;bright&quot;\r\n# setw -g window-status-current-style attr=&quot;bright&quot;\r\n#\r\n## ペインボーダーの色を設定する\r\n set -g pane-border-style fg=&quot;colour237&quot;\r\n set -g pane-border-style bg=&quot;colour237&quot;\r\n\r\n## アクティブなペインを目立たせる\r\n# set -g pane-active-border-style fg=&quot;colour68&quot;\r\n# set -g pane-active-border-style bg=&quot;colour237&quot;\r\n#\r\n## コマンドラインの色を設定する\r\n set -g message-style fg=&quot;white&quot;\r\n set -g message-style bg=&quot;black&quot;,&quot;bright&quot;\r\n#set -g message-style attr=&quot;bright&quot;\r\n```\r\n\r\nで無事4.2同様動かすことができました。\r\n\r\n## Kali Linus VS Parrot Security OS \r\nなんて記事もありますが適材適所かと思います。\r\nHostOS側の開発環境への__ペネレーションテスト__や__セキュリティーチェック__などはVM上の__Kalli Linux__という使いかたはありかと思います。\r\n__Parrot Security OS__は実機で使ってこそパフォーマンスを発揮するような感じです。\r\n\r\nということで__Parrot Security OS__を実機で持ちたい・・・\r\nが、__Parrot Srcurity OS__は日本語での情報は皆無と言っていいくらい厳しいです。\r\n英語、中国語では活発なコミュニティーがあるようです。\r\n\r\n最近のMACではBootcampでLinuxは無理のようだし、WindowsPCならインストールできるのか、__Kali Linux__のように\"Think padと相性がいい\"とかあるのだろうか・・・\r\n\r\n今後の課題です。\r\n\r\n\r\n\r\n\r\n',373,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/373-revision-v1/',0,'revision','',0),(400,1,'2019-10-18 10:13:04','2019-10-18 01:13:04','<h2>大文字、小文字、数字、記号、何かと面倒なパスワード</h2>\n<p>最近パスワードを設定しようとすると 　　<br />\n<strong>&quot;8文字以上、大文字、小文字、数字、記号&quot;</strong> を混ぜてください。<br />\nと<span class=\"under_line\">めんどくさい</span>ことになってます。<br />\n<strong>&quot;推測できないワード&quot;</strong> とか、<strong>&quot;辞書にないワード&quot;</strong> というのも<span class=\"under_line\">めんどくさい</span></p>\n<p>どこかのサイトにログインしようとして数回ミスると<br />\n<strong>&quot;アカウントロックしました&quot;</strong><br />\nとなり、かなり<span class=\"under_line\">めんどくさい</span>なことになる。</p>\n<p>とはいえ、<strong>大文字、小文字、数字、記号</strong> 混じりのパスワードは覚えにくし。<br />\n<strong>&quot;パスワードを忘れた方はこちら&quot;</strong>というリンクをたどるはめになる。ほんと<span class=\"under_line\">めんどくさい</span><br />\nGoogleなどは一度登録したパスワードは再生成できない。これがより記憶に混乱を招くこととなる。        </p>\n<p>なぜこのような複雑なパスワードを要求するのか？     </p>\n<p><strong>&quot;不正ログインを防ぐため&quot;</strong> です。  </p>\n<p>という当たり前の言葉だけでなくそんなパスワードの重要性を &quot;Wi-Fi&quot; を題材に考え直してみます。     </p>\n<p><strong>検証環境</strong></p>\n<ul>\n<li>MAC</li>\n<li>VMware Fusion(MAC)上の &quot;Parrot Security OS &quot;</li>\n<li>USB Wi-Fi子機(Parrot Security OSに接続) </li>\n<li>Aircrack-ng</li>\n<li>自宅のWi-Fiルーター(テストアカウント作成)</li>\n<li>焼肉食べたい気持ちを抑える精神力</li>\n</ul>\n<h2>テスト用のWi-Fi環境を作る</h2>\n<p>Wi-Fiには大きくわけて？？？（この言い方がもう古い)</p>\n<ul>\n<li>WEP</li>\n<li>WPA       </li>\n</ul>\n<p>とがあります。WEPは今ではもう古いです。滅多にみかけません。<br />\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。<br />\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)<br />\nWEP使ってる方は今すぐWi-Fiルーターを買い換えましょう。</p>\n<p>ということで <strong>WPA</strong>でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。)</p>\n<ul>\n<li>SSID : wifi-test</li>\n<li>Password : yakiniku </li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png\" alt=\"\" /></p>\n<p>MACでみると</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;に Wi-Fi子機を接続<br />\nAmazonでポチったやつ　（動作はするが熱くなる)\n<a href=\"https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&amp;psc=1\">https://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1</a></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg\" alt=\"\" /></p>\n<p>&quot;Parrot Security OS&quot;からWi-Fi一覧をみてみる      </p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png\" alt=\"\" /></p>\n<p>電波をキャッチできてる模様</p>\n<h2>接続情報をキャプチャーするまで</h2>\n<p>ここでいうキャプチャーとは通信情報をファイルとして保存することです。\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。</p>\n<p>&quot;Parrot Security OS&quot;からワイヤレスネットワークを確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png\" alt=\"\" /></p>\n<p>モニターモードへ変更</p>\n<pre><code class=\"language-bash\">airmon-ng start wlan0</code></pre>\n<p>確認</p>\n<pre><code class=\"language-bash\">iwconfig</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png\" alt=\"\" /></p>\n<p>wlan0mon を確認</p>\n<p>通信内容をみる</p>\n<pre><code class=\"language-bash\">airodump-ng wlan0mon</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg\" alt=\"\" /></p>\n<p>wifi-test で通信が行われているのを確認 (YouTubeを再生してるため)</p>\n<p>キャプチャー開始</p>\n<pre><code class=\"language-bash\">airodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon</code></pre>\n<ul>\n<li>xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png\" alt=\"\" /></p>\n<p>ただただ・・・待つ・・・</p>\n<p>このままでは何も起きません。\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\n待つのが<span class=\"under_line\">めんどくさい</span>ので現在接続中の端末に妨害電波でも送り接続を遮断させ、すぐに再接続しようとすると思うのでその瞬間のデータをキャプチャーしてみる。</p>\n<pre><code class=\"language-bash\">aireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon</code></pre>\n<ul>\n<li>yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス</li>\n</ul>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg\" alt=\"\" /></p>\n<p>接続情報をキャプチャーできたようです。\nここまでくればあとはパスワードを解析するだけです。\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。</p>\n<h2>WI-Fiキャプチャーで思うこと</h2>\n<p>こういう行為は\n<strong>&quot;決して人様に対して行ってはいけません”</strong>\nとよく目にしますが果たしてここまでの行為は？？？\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\nこの行為だけで法律違反となるのだろうか。\n賛美両論なんでしょうけど疑問に思うところであります。\n法的にも<span class=\"under_line\">めんどくさい</span>ことなんでしょう。</p>\n<h2>キャプチャーファイルを解析する</h2>\n<p>いよいよ解析してみます。\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。</p>\n<p>答えありきでPasswordListに今回の”yakiniku&quot;が存在するかみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep yakiniku\nyakiniku</code></pre>\n<p>存在しているようです。</p>\n<p>それでは解析</p>\n<pre><code class=\"language-bash\">aircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx</code></pre>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png\" alt=\"\" /></p>\n<p>正しく解析できました。</p>\n<p>PasswordListの行数をみてみます</p>\n<pre><code class=\"language-bash\">wc -l japanese_pass.txt\n113963 </code></pre>\n<p>&quot;yakiniku&quot;が何行目かをみてみます。</p>\n<pre><code class=\"language-bash\">cat japanese_pass.txt | grep -n yakiniku\n107592:yakiniku</code></pre>\n<p>113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。</p>\n<h2>まとめ</h2>\n<p>PasswordListは自分で作ることもできます。</p>\n<ul>\n<li>小文字8桁</li>\n<li>大文字小文字8桁</li>\n<li>大文字小文字数字10桁</li>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>などなど。\nはたまた、yakiniku<em>@@@\n&quot;yakiniku</em>&quot; プラス 3桁のリスト\nとかいろいろできます。</p>\n<ul>\n<li>大文字小文字数字記号12桁</li>\n</ul>\n<p>を生成するとなると、とってもとっても時間がかかります。\n逆に言えば解析するのにもとってもとっても時間がかかります。\nかといって、&quot;aaaaaA1!&quot; だと比較的早い段階で解析されそうですよね。</p>\n<p><a href=\"https://cybersecurity-jp.com/cyber-terrorism/17426\">ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？</a>\nの表がとてもわかりやすいです。</p>\n<ul>\n<li><strong>理論上、パスワードは解析できてしまうということを忘れてはいけない。</strong></li>\n<li><strong>大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。</strong>\n（解析する側をあきらめさせる）</li>\n</ul>\n<p>そうなんです！\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。</p>','Passwordの重要性を再考。','簡単なパスワードのWi-Fi(WPA2)を用意してAircrack-ngでPasswordを解析してみる。','inherit','closed','closed','','202-revision-v1','','','2019-10-18 10:13:04','2019-10-18 01:13:04','## 大文字、小文字、数字、記号、何かと面倒なパスワード\r\n\r\n最近パスワードを設定しようとすると 　　        \r\n__\"8文字以上、大文字、小文字、数字、記号\"__ を混ぜてください。  \r\nと<span class=\"under_line\">めんどくさい</span>ことになってます。        \r\n__\"推測できないワード\"__ とか、__\"辞書にないワード\"__ というのも<span class=\"under_line\">めんどくさい</span>\r\n\r\n\r\n\r\nどこかのサイトにログインしようとして数回ミスると  \r\n__\"アカウントロックしました\"__      \r\nとなり、かなり<span class=\"under_line\">めんどくさい</span>なことになる。\r\n\r\nとはいえ、__大文字、小文字、数字、記号__ 混じりのパスワードは覚えにくし。     \r\n__\"パスワードを忘れた方はこちら\"__というリンクをたどるはめになる。ほんと<span class=\"under_line\">めんどくさい</span>        \r\nGoogleなどは一度登録したパスワードは再生成できない。これがより記憶に混乱を招くこととなる。        \r\n\r\nなぜこのような複雑なパスワードを要求するのか？     \r\n\r\n__\"不正ログインを防ぐため\"__ です。  \r\n\r\nという当たり前の言葉だけでなくそんなパスワードの重要性を \"Wi-Fi\" を題材に考え直してみます。     \r\n\r\n__検証環境__\r\n- MAC\r\n- VMware Fusion(MAC)上の \"Parrot Security OS \"\r\n- USB Wi-Fi子機(Parrot Security OSに接続) \r\n- Aircrack-ng\r\n- 自宅のWi-Fiルーター(テストアカウント作成)\r\n- 焼肉食べたい気持ちを抑える精神力\r\n\r\n##  テスト用のWi-Fi環境を作る\r\nWi-Fiには大きくわけて？？？（この言い方がもう古い)\r\n- WEP\r\n- WPA       \r\n\r\nとがあります。WEPは今ではもう古いです。滅多にみかけません。         \r\nというよりWEPはかなり危険なんです。WEPに関してはここでは触れませんがある程度の通信量があれば簡単にパスワードが判明してしまいます。        \r\n(通信量によりますが十数分から30分、YouTubeとかみてたら一発です。)      \r\nWEP使ってる方は今すぐWi-Fiルーターを買い換えましょう。\r\n\r\nということで __WPA__でテスト環境を作ります。（ちなみにうちのルーターはバッファローです。)\r\n\r\n- SSID : wifi-test\r\n- Password : yakiniku \r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.07.44.png)\r\n\r\n\r\nMACでみると\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.08.34-のコピー.png)\r\n\r\n\"Parrot Security OS\"に Wi-Fi子機を接続		\r\nAmazonでポチったやつ　（動作はするが熱くなる)\r\nhttps://www.amazon.co.jp/gp/product/B005DU4XSM/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/wifi-usb.jpg)\r\n\r\n\"Parrot Security OS\"からWi-Fi一覧をみてみる		\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.23.42.png)\r\n\r\n電波をキャッチできてる模様\r\n\r\n\r\n## 接続情報をキャプチャーするまで\r\n\r\nここでいうキャプチャーとは通信情報をファイルとして保存することです。\r\nデモンストレーションなのでわかりやすように他の通信機器をwifi-testにつないでYoutubeでも再生さておきます。\r\n\r\n\"Parrot Security OS\"からワイヤレスネットワークを確認\r\n```bash\r\niwconfig\r\n```\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.27.22.png)\r\n\r\nモニターモードへ変更\r\n```bash\r\nairmon-ng start wlan0\r\n```\r\n\r\n確認\r\n\r\n```bash\r\niwconfig\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-16-at-21.28.22.png)\r\n\r\nwlan0mon を確認\r\n\r\n通信内容をみる\r\n```bash\r\nairodump-ng wlan0mon\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/airodump-1.jpg)\r\n\r\nwifi-test で通信が行われているのを確認 (YouTubeを再生してるため)\r\n\r\nキャプチャー開始\r\n```bash\r\nairodump-ng -c 1 --bssid xx:xx:xx:xx:xx:xx -w wifi-test wlan0mon\r\n```\r\n* xx:xx:xx:xx:xx:xx はWiFiルーターのMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.38.20.png)\r\n\r\n\r\nただただ・・・待つ・・・\r\n\r\nこのままでは何も起きません。\r\n欲しいのは接続する瞬間の情報であり接続中の情報ではありません。\r\n待つのが<span class=\"under_line\">めんどくさい</span>ので現在接続中の端末に妨害電波でも送り接続を遮断させ、すぐに再接続しようとすると思うのでその瞬間のデータをキャプチャーしてみる。\r\n\r\n```bash\r\naireplay-ng -0 1 -a xx:xx:xx:xx:xx:xx-c yy:yy:yy:yy:yy:yy wlan0mon\r\n```\r\n* yy:yy:yy:yy:yy:yy は接続している機器ののMACアドレス\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/handshake.jpg)\r\n\r\n接続情報をキャプチャーできたようです。\r\nここまでくればあとはパスワードを解析するだけです。\r\nキャプチャーをやめWiFiモニタリングもやめ、とっととその場を離れ近所のコーヒーショップで続きをやるのもいいでしょう。\r\n\r\n\r\n## WI-Fiキャプチャーで思うこと\r\nこういう行為は\r\n__\"決して人様に対して行ってはいけません”__\r\nとよく目にしますが果たしてここまでの行為は？？？\r\n不正アクセスしているわけでもないし、秘密情報を盗んだわけでもない。\r\nただその辺に飛んでいる電波をなんだかんだしただけ。。。\r\nこの行為だけで法律違反となるのだろうか。\r\n賛美両論なんでしょうけど疑問に思うところであります。\r\n法的にも<span class=\"under_line\">めんどくさい</span>ことなんでしょう。\r\n\r\n## キャプチャーファイルを解析する\r\nいよいよ解析してみます。\r\nPasswordListを自分で生成するのもいいですが今回はネット上にあるPasswordListを使ってみます。\r\n今では日本語対応のPasswordListなるものが平気であります。ダウンロードフリーです。\r\n有料版も存在します。どれだけのものか知りませんがハッキングしたてのアクティブである可能性が非常に高いPasswordListということらしいです。\r\n\r\n\r\n答えありきでPasswordListに今回の”yakiniku\"が存在するかみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep yakiniku\r\nyakiniku\r\n```\r\n存在しているようです。\r\n\r\nそれでは解析\r\n```bash\r\naircrack-ng wifi-test-xxx.cap -w japanes_pass.txt -b xx:xx:xx:xx:xx:xx\r\n```\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/09/Screen-Shot-2019-09-17-at-0.51.28.png)\r\n\r\n正しく解析できました。\r\n\r\nPasswordListの行数をみてみます\r\n```bash\r\nwc -l japanese_pass.txt\r\n113963 \r\n```\r\n\r\n\"yakiniku\"が何行目かをみてみます。\r\n```bash\r\ncat japanese_pass.txt | grep -n yakiniku\r\n107592:yakiniku\r\n```\r\n\r\n113963行あるリストの107592行目にあるパスワードが13秒で解析されてます。\r\n正直、もっと時間がかかるかと思い解析中にコンビニにお酒を買いに行こうと決めてたのですが瞬殺でした。\r\n\r\n## まとめ\r\nPasswordListは自分で作ることもできます。\r\n- 小文字8桁\r\n- 大文字小文字8桁\r\n- 大文字小文字数字10桁\r\n- 大文字小文字数字記号12桁\r\n\r\nなどなど。\r\nはたまた、yakiniku_@@@\r\n\"yakiniku_\" プラス 3桁のリスト\r\nとかいろいろできます。\r\n- 大文字小文字数字記号12桁\r\n\r\nを生成するとなると、とってもとっても時間がかかります。\r\n逆に言えば解析するのにもとってもとっても時間がかかります。\r\nかといって、\"aaaaaA1!\" だと比較的早い段階で解析されそうですよね。\r\n\r\n[ブルートフォースアタック（総当たり攻撃）とは？そのやり方・実際にかかる時間・対策方法は？](https://cybersecurity-jp.com/cyber-terrorism/17426)\r\nの表がとてもわかりやすいです。\r\n\r\n- __理論上、パスワードは解析できてしまうということを忘れてはいけない。__\r\n- __大文字、小文字、数字、記号、をランダムに配置し現実的に解析できなくする。__\r\n（解析する側をあきらめさせる）\r\n\r\nそうなんです！\r\n解析者の戦闘意欲をなくし諦めさせるパスワードを考えるのが大事なんです。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',202,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/202-revision-v1/',0,'revision','',0),(402,1,'2019-10-18 13:50:36','2019-10-18 04:50:36','','vmwear-vagrant-network','','inherit','closed','closed','','vmwear-vagrant-network','','','2019-10-18 13:50:36','2019-10-18 04:50:36','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/10/vmwear-vagrant-network.png',0,'attachment','image/png',0),(403,1,'2019-10-18 13:53:21','2019-10-18 04:53:21','','スクリーンショット 2019-10-01 12.39.35','','inherit','closed','closed','','%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2019-10-01-12-39-35','','','2019-10-18 13:53:21','2019-10-18 04:53:21','',344,'https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.39.35.png',0,'attachment','image/png',0),(404,1,'2019-10-18 13:53:23','2019-10-18 04:53:23','','スクリーンショット 2019-10-01 12.40.35','','inherit','closed','closed','','%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2019-10-01-12-40-35','','','2019-10-18 13:53:23','2019-10-18 04:53:23','',344,'https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.40.35.png',0,'attachment','image/png',0),(405,1,'2019-10-18 13:53:25','2019-10-18 04:53:25','','スクリーンショット 2019-10-01 14.00.03','','inherit','closed','closed','','%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2019-10-01-14-00-03','','','2019-10-18 13:53:25','2019-10-18 04:53:25','',344,'https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-14.00.03.png',0,'attachment','image/png',0),(406,1,'2019-10-18 13:54:40','2019-10-18 04:54:40','','pwgen','','inherit','closed','closed','','pwgen-2','','','2019-10-18 13:54:40','2019-10-18 04:54:40','',354,'https://blog.webdimension.jp/wp-content/uploads/2019/10/pwgen.jpg',0,'attachment','image/jpeg',0),(407,1,'2019-10-18 13:56:37','2019-10-18 04:56:37','','スクリーンショット 2019-10-01 15.47.43','','inherit','closed','closed','','%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2019-10-01-15-47-43','','','2019-10-18 13:56:37','2019-10-18 04:56:37','',344,'https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.47.43.png',0,'attachment','image/png',0),(408,1,'2019-10-18 13:56:45','2019-10-18 04:56:45','','スクリーンショット 2019-10-01 15.48.02','','inherit','closed','closed','','%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2019-10-01-15-48-02','','','2019-10-18 13:56:45','2019-10-18 04:56:45','',344,'https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-15.48.02.png',0,'attachment','image/png',0),(410,1,'2019-10-18 13:59:53','2019-10-18 04:59:53','','care-your-eyes','','inherit','closed','closed','','care-your-eyes','','','2019-10-18 13:59:53','2019-10-18 04:59:53','',358,'https://blog.webdimension.jp/wp-content/uploads/2019/10/care-your-eyes.png',0,'attachment','image/png',0),(411,1,'2019-10-18 14:00:55','2019-10-18 05:00:55','','sshs','','inherit','closed','closed','','sshs','','','2019-10-18 14:00:55','2019-10-18 05:00:55','',369,'https://blog.webdimension.jp/wp-content/uploads/2019/10/sshs.jpg',0,'attachment','image/jpeg',0),(413,1,'2019-10-20 08:48:00','2019-10-19 23:48:00','','Screen Shot 2019-10-01 at 20.57.15','','inherit','closed','closed','','screen-shot-2019-10-01-at-20-57-15','','','2019-10-20 08:48:00','2019-10-19 23:48:00','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.15.png',0,'attachment','image/png',0),(414,1,'2019-10-20 08:48:05','2019-10-19 23:48:05','','Screen Shot 2019-10-01 at 20.57.31','','inherit','closed','closed','','screen-shot-2019-10-01-at-20-57-31','','','2019-10-20 08:48:05','2019-10-19 23:48:05','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-20.57.31.png',0,'attachment','image/png',0),(415,1,'2019-10-20 08:48:08','2019-10-19 23:48:08','','Screen Shot 2019-10-01 at 21.07.26','','inherit','closed','closed','','screen-shot-2019-10-01-at-21-07-26','','','2019-10-20 08:48:08','2019-10-19 23:48:08','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.07.26.png',0,'attachment','image/png',0),(416,1,'2019-10-20 08:48:11','2019-10-19 23:48:11','','Screen Shot 2019-10-01 at 21.09.29','','inherit','closed','closed','','screen-shot-2019-10-01-at-21-09-29','','','2019-10-20 08:48:11','2019-10-19 23:48:11','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-01-at-21.09.29.png',0,'attachment','image/png',0),(417,1,'2019-10-20 08:48:14','2019-10-19 23:48:14','','Screen Shot 2019-10-02 at 21.58.08','','inherit','closed','closed','','screen-shot-2019-10-02-at-21-58-08','','','2019-10-20 08:48:14','2019-10-19 23:48:14','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png',0,'attachment','image/png',0),(418,1,'2019-10-20 08:49:42','2019-10-19 23:49:42','','parrot','','inherit','closed','closed','','parrot','','','2019-10-20 08:49:42','2019-10-19 23:49:42','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/10/parrot.jpg',0,'attachment','image/jpeg',0),(419,1,'2019-10-20 08:51:58','2019-10-19 23:51:58','','Screen Shot 2019-10-02 at 21.58.08','','inherit','closed','closed','','screen-shot-2019-10-02-at-21-58-08-2','','','2019-10-20 08:51:58','2019-10-19 23:51:58','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08-1.png',0,'attachment','image/png',0),(420,1,'2019-10-20 08:52:04','2019-10-19 23:52:04','','karabiner','','inherit','closed','closed','','karabiner-2','','','2019-10-20 08:52:04','2019-10-19 23:52:04','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/10/karabiner.jpg',0,'attachment','image/jpeg',0),(421,1,'2019-10-20 08:52:10','2019-10-19 23:52:10','','us-kbd','','inherit','closed','closed','','us-kbd','','','2019-10-20 08:52:10','2019-10-19 23:52:10','',0,'https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png',0,'attachment','image/png',0),(422,1,'2019-10-20 16:59:30','2019-10-20 07:59:30','<p>[myRecentPosts my_limit=6]</p>\n<div class=\"row\">\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script><!-- wide2 --><ins class=\"adsbygoogle col-12\" style=\"display:block\" data-ad-client=\"ca-pub-9655568772147861\" data-ad-slot=\"1864104647\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n                        <script>\n                            (adsbygoogle = window.adsbygoogle || []).push({});\n                        </script></div>\n<p>[myRankingPosts my_limit=6]</p>','','','inherit','closed','closed','','35-revision-v1','','','2019-10-20 16:59:30','2019-10-20 07:59:30','[myRecentPosts my_limit=6]\r\n <div class=\"row\" >\r\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\r\n                        <!-- wide2 -->\r\n                        <ins class=\"adsbygoogle col-12\"\r\n                             style=\"display:block\"\r\n                             data-ad-client=\"ca-pub-9655568772147861\"\r\n                             data-ad-slot=\"1864104647\"\r\n                             data-ad-format=\"auto\"\r\n                             data-full-width-responsive=\"true\"></ins>\r\n                        <script>\r\n                            (adsbygoogle = window.adsbygoogle || []).push({});\r\n                        </script>\r\n                    </div>\r\n[myRankingPosts my_limit=6]',35,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/35-revision-v1/',0,'revision','',0),(423,1,'2019-10-20 17:01:03','2019-10-20 08:01:03','<p>[myRecentPosts my_limit=6]</p>\n<pre><code>                    <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n                    <!-- wide2 -->\n                    <ins class=\"adsbygoogle\"\n                         style=\"display:block\"\n                         data-ad-client=\"ca-pub-9655568772147861\"\n                         data-ad-slot=\"1864104647\"\n                         data-ad-format=\"auto\"\n                         data-full-width-responsive=\"true\"></ins>\n                    <script>\n                        (adsbygoogle = window.adsbygoogle || []).push({});\n                    </script></code></pre>\n<p>[myRankingPosts my_limit=6]</p>','','','inherit','closed','closed','','35-revision-v1','','','2019-10-20 17:01:03','2019-10-20 08:01:03','[myRecentPosts my_limit=6]\r\n\r\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\r\n                        <!-- wide2 -->\r\n                        <ins class=\"adsbygoogle\"\r\n                             style=\"display:block\"\r\n                             data-ad-client=\"ca-pub-9655568772147861\"\r\n                             data-ad-slot=\"1864104647\"\r\n                             data-ad-format=\"auto\"\r\n                             data-full-width-responsive=\"true\"></ins>\r\n                        <script>\r\n                            (adsbygoogle = window.adsbygoogle || []).push({});\r\n                        </script>\r\n\r\n[myRankingPosts my_limit=6]',35,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/35-revision-v1/',0,'revision','',0),(424,1,'2019-10-20 17:01:44','2019-10-20 08:01:44','<p>[myRecentPosts my_limit=6]\n[myRankingPosts my_limit=6]</p>','','','inherit','closed','closed','','35-revision-v1','','','2019-10-20 17:01:44','2019-10-20 08:01:44','[myRecentPosts my_limit=6]\r\n[myRankingPosts my_limit=6]',35,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/35-revision-v1/',0,'revision','',0),(425,1,'2019-10-20 17:21:29','2019-10-20 08:21:29','<p>[myRecentPosts my_limit=6]</p>\n<div class=\"row\">\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script><!-- wide2 --><ins class=\"adsbygoogle col-12\" style=\"display:block\" data-ad-client=\"ca-pub-9655568772147861\" data-ad-slot=\"1864104647\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n                        <script>\n                            (adsbygoogle = window.adsbygoogle || []).push({});\n                        </script></div>\n<p>[myRankingPosts my_limit=6]</p>','','','inherit','closed','closed','','35-revision-v1','','','2019-10-20 17:21:29','2019-10-20 08:21:29','[myRecentPosts my_limit=6]\r\n                    <div class=\"row\" >\r\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\r\n                        <!-- wide2 -->\r\n                        <ins class=\"adsbygoogle col-12\"\r\n                             style=\"display:block\"\r\n                             data-ad-client=\"ca-pub-9655568772147861\"\r\n                             data-ad-slot=\"1864104647\"\r\n                             data-ad-format=\"auto\"\r\n                             data-full-width-responsive=\"true\"></ins>\r\n                        <script>\r\n                            (adsbygoogle = window.adsbygoogle || []).push({});\r\n                        </script>\r\n                    </div>\r\n\r\n[myRankingPosts my_limit=6]',35,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/35-revision-v1/',0,'revision','',0),(426,1,'2019-10-20 17:51:04','2019-10-20 08:51:04','<p>[myRecentPosts my_limit=6]</p>\n<div class=\"row mr-0 ml-0 mb-3\">\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script><!-- wide2 --><ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\" style=\"display:block\" data-ad-client=\"ca-pub-9655568772147861\" data-ad-slot=\"1864104647\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n                        <script>\n                            (adsbygoogle = window.adsbygoogle || []).push({});\n                        </script></div>\n<p>[myRankingPosts my_limit=6]</p>','','','inherit','closed','closed','','35-revision-v1','','','2019-10-20 17:51:04','2019-10-20 08:51:04',' [myRecentPosts my_limit=6]\r\n                    <div class=\"row mr-0 ml-0 mb-3\" >\r\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\r\n                        <!-- wide2 -->\r\n                        <ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\"\r\n                             style=\"display:block\"\r\n                             data-ad-client=\"ca-pub-9655568772147861\"\r\n                             data-ad-slot=\"1864104647\"\r\n                             data-ad-format=\"auto\"\r\n                             data-full-width-responsive=\"true\"></ins>\r\n                        <script>\r\n                            (adsbygoogle = window.adsbygoogle || []).push({});\r\n                        </script>\r\n                    </div>\r\n\r\n\r\n[myRankingPosts my_limit=6]',35,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/35-revision-v1/',0,'revision','',0),(427,1,'2019-10-20 17:51:44','2019-10-20 08:51:44','<p>[myRecentPosts my_limit=6]</p>\n<div class=\"row mr-0 ml-0 mb-3\">\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script><!-- wide2 --><ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\" style=\"display:block\" data-ad-client=\"ca-pub-9655568772147861\" data-ad-slot=\"1864104647\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n                        <script>\n                            (adsbygoogle = window.adsbygoogle || []).push({});\n                        </script></div>\n<p>[myRankingPosts my_limit=6]</p>\n<div class=\"row mr-0 ml-0 mb-3\">\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script><!-- wide2 --><ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\" style=\"display:block\" data-ad-client=\"ca-pub-9655568772147861\" data-ad-slot=\"1864104647\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n                        <script>\n                            (adsbygoogle = window.adsbygoogle || []).push({});\n                        </script></div>','','','inherit','closed','closed','','35-revision-v1','','','2019-10-20 17:51:44','2019-10-20 08:51:44',' [myRecentPosts my_limit=6]\r\n                    <div class=\"row mr-0 ml-0 mb-3\" >\r\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\r\n                        <!-- wide2 -->\r\n                        <ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\"\r\n                             style=\"display:block\"\r\n                             data-ad-client=\"ca-pub-9655568772147861\"\r\n                             data-ad-slot=\"1864104647\"\r\n                             data-ad-format=\"auto\"\r\n                             data-full-width-responsive=\"true\"></ins>\r\n                        <script>\r\n                            (adsbygoogle = window.adsbygoogle || []).push({});\r\n                        </script>\r\n                    </div>\r\n\r\n\r\n[myRankingPosts my_limit=6]\r\n                   <div class=\"row mr-0 ml-0 mb-3\" >\r\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\r\n                        <!-- wide2 -->\r\n                        <ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\"\r\n                             style=\"display:block\"\r\n                             data-ad-client=\"ca-pub-9655568772147861\"\r\n                             data-ad-slot=\"1864104647\"\r\n                             data-ad-format=\"auto\"\r\n                             data-full-width-responsive=\"true\"></ins>\r\n                        <script>\r\n                            (adsbygoogle = window.adsbygoogle || []).push({});\r\n                        </script>\r\n                    </div>\r\n\r\n',35,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/35-revision-v1/',0,'revision','',0),(428,1,'2019-10-20 17:54:08','2019-10-20 08:54:08','<p>[myRecentPosts my_limit=6]</p>\n<div class=\"row mr-0 ml-0 mb-3\">\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script><!-- wide1 --><ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\" style=\"display:block\" data-ad-client=\"ca-pub-9655568772147861\" data-ad-slot=\"4206718020\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n                        <script>\n                            (adsbygoogle = window.adsbygoogle || []).push({});\n                        </script></div>\n<p>[myRankingPosts my_limit=6]</p>\n<div class=\"row mr-0 ml-0 mb-3\">\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script><!-- wide2 --><ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\" style=\"display:block\" data-ad-client=\"ca-pub-9655568772147861\" data-ad-slot=\"1864104647\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n                        <script>\n                            (adsbygoogle = window.adsbygoogle || []).push({});\n                        </script></div>','','','inherit','closed','closed','','35-revision-v1','','','2019-10-20 17:54:08','2019-10-20 08:54:08',' [myRecentPosts my_limit=6]\r\n                    <div class=\"row mr-0 ml-0 mb-3\" >\r\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\r\n                        <!-- wide1 -->\r\n                        <ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\"\r\n                             style=\"display:block\"\r\n     data-ad-client=\"ca-pub-9655568772147861\"\r\n     data-ad-slot=\"4206718020\"\r\n                             data-ad-format=\"auto\"\r\n                             data-full-width-responsive=\"true\"></ins>\r\n                        <script>\r\n                            (adsbygoogle = window.adsbygoogle || []).push({});\r\n                        </script>\r\n                    </div>\r\n\r\n\r\n[myRankingPosts my_limit=6]\r\n                   <div class=\"row mr-0 ml-0 mb-3\" >\r\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\r\n                        <!-- wide2 -->\r\n                        <ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\"\r\n                             style=\"display:block\"\r\n     data-ad-client=\"ca-pub-9655568772147861\"\r\n     data-ad-slot=\"1864104647\"\r\n                             data-ad-format=\"auto\"\r\n                             data-full-width-responsive=\"true\"></ins>\r\n                        <script>\r\n                            (adsbygoogle = window.adsbygoogle || []).push({});\r\n                        </script>\r\n                    </div>\r\n\r\n',35,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/35-revision-v1/',0,'revision','',0),(429,1,'2019-10-20 22:34:53','2019-10-20 13:34:53','<p>[myRecentPosts my_limit=6]</p>\n<p>[myRankingPosts my_limit=6]</p>','','','inherit','closed','closed','','35-revision-v1','','','2019-10-20 22:34:53','2019-10-20 13:34:53',' [myRecentPosts my_limit=6]\r\n\r\n\r\n\r\n[myRankingPosts my_limit=6]\r\n\r\n\r\n',35,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/35-revision-v1/',0,'revision','',0),(432,1,'2019-10-24 10:32:56','2019-10-24 01:32:56','<p>[myRecentPosts my_limit=6]</p>\n<div class=\"row mr-0 ml-0 mb-3\">\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script><!-- wide1 --><ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\" style=\"display:block\" data-ad-client=\"ca-pub-9655568772147861\" data-ad-slot=\"4206718020\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n                        <script>\n                            (adsbygoogle = window.adsbygoogle || []).push({});\n                        </script></div>\n<p>[myRankingPosts my_limit=6]</p>\n<div class=\"row mr-0 ml-0 mb-3\">\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script><!-- wide2 --><ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\" style=\"display:block\" data-ad-client=\"ca-pub-9655568772147861\" data-ad-slot=\"1864104647\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins>\n                        <script>\n                            (adsbygoogle = window.adsbygoogle || []).push({});\n                        </script></div>','','','inherit','closed','closed','','35-revision-v1','','','2019-10-24 10:32:56','2019-10-24 01:32:56',' [myRecentPosts my_limit=6]\r\n                    <div class=\"row mr-0 ml-0 mb-3\" >\r\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\r\n                        <!-- wide1 -->\r\n                        <ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\"\r\n                             style=\"display:block\"\r\n     data-ad-client=\"ca-pub-9655568772147861\"\r\n     data-ad-slot=\"4206718020\"\r\n                             data-ad-format=\"auto\"\r\n                             data-full-width-responsive=\"true\"></ins>\r\n                        <script>\r\n                            (adsbygoogle = window.adsbygoogle || []).push({});\r\n                        </script>\r\n                    </div>\r\n\r\n\r\n[myRankingPosts my_limit=6]\r\n                   <div class=\"row mr-0 ml-0 mb-3\" >\r\n                        <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\r\n                        <!-- wide2 -->\r\n                        <ins class=\"adsbygoogle col-12 pl-0 pr-2 pt-1 pb-1\"\r\n                             style=\"display:block\"\r\n     data-ad-client=\"ca-pub-9655568772147861\"\r\n     data-ad-slot=\"1864104647\"\r\n                             data-ad-format=\"auto\"\r\n                             data-full-width-responsive=\"true\"></ins>\r\n                        <script>\r\n                            (adsbygoogle = window.adsbygoogle || []).push({});\r\n                        </script>\r\n                    </div>\r\n\r\n',35,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/35-revision-v1/',0,'revision','',0),(434,1,'2019-11-02 22:59:35','2019-11-02 13:59:35','<p>開発中のプロジェクトにVMwear上のOSからテストなどしたいけれども開発中のプロジェクトをグローバルなサーバーにアップするのも<span class=\"under_line\">めんどくさい</span>のでVMwearFusionのネットワークにVagrantを設定しローカル内で完結させる。</p>\n<h2>VMware上のOSのネットワーク設定</h2>\n<p>VMの設定を開く</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.39.35.png\" alt=\"\" /></p>\n<p>デバイスを追加をクリック</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.40.35.png\" alt=\"\" /></p>\n<p>ネットワークアダプタを追加\n\'Macを共有\' を設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-14.00.03.png\" alt=\"\" /></p>\n<h2>Vagrant側のネットワーク設定</h2>\n<p>HostOSからVMwearネットワークを確認</p>\n<pre><code class=\"language-bash\">ifconfig </code></pre>\n<pre><code class=\"language-bash\">...\n...\n vmnet8: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500\n        ether 00:50:56:c0:00:08 \n        inet 172.16.221.1 netmask 0xffffff00 broadcast 172.16.221.255\n...\n...</code></pre>\n<p>この情報を元に Vagratfile に追記　（クラスC)</p>\n<pre><code class=\"language-bash\"> config.vm.network :public_network, :bridge =&gt; &quot;vmnet8&quot;, ip: &quot;172.16.221.12&quot;</code></pre>\n<p>第4オクテッドはご自由に。ここでは12にしてます。\nVagrantを再起動。</p>\n<h2>VMwear上のOSから接続確認</h2>\n<p>hostsファイル編集</p>\n<pre><code class=\"language-bash\">vi /etc/hosts</code></pre>\n<p>hostを追記 \'vagrant.local\'はご自由に。</p>\n<pre><code class=\"language-bash\">172.16.221.12 vagrant.local</code></pre>\n<p>VagrantへのネットワークをNmapで確認</p>\n<pre><code class=\"language-bash\">○ → nmap 172.16.221.12</code></pre>\n<pre><code class=\"language-bash\">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-01 13:46 JST\nNmap scan report for centos75.exp (172.16.221.12)\nHost is up (0.00042s latency).\nNot shown: 994 closed ports\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n111/tcp  open  rpcbind\n443/tcp  open  https\n3000/tcp open  ppp\n3306/tcp open  mysql</code></pre>\n<p>繋がりました。</p>','Vagrant(VirtualBox)とVMwear Fusion をネットワーク共有','VMwaer上のOSからVagrant (VirtualBox) を突つきたい時のネットワーク設定','inherit','closed','closed','','344-revision-v1','','','2019-11-02 22:59:35','2019-11-02 13:59:35','開発中のプロジェクトにVMwear上のOSからテストなどしたいけれども開発中のプロジェクトをグローバルなサーバーにアップするのも<span class=\"under_line\">めんどくさい</span>のでVMwearFusionのネットワークにVagrantを設定しローカル内で完結させる。\r\n\r\n\r\n\r\n## VMware上のOSのネットワーク設定\r\nVMの設定を開く\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.39.35.png)\r\n\r\nデバイスを追加をクリック\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.40.35.png)\r\n\r\nネットワークアダプタを追加\r\n\'Macを共有\' を設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-14.00.03.png)\r\n\r\n## Vagrant側のネットワーク設定\r\nHostOSからVMwearネットワークを確認\r\n```bash\r\nifconfig \r\n```\r\n\r\n```bash\r\n...\r\n...\r\n vmnet8: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500\r\n        ether 00:50:56:c0:00:08 \r\n        inet 172.16.221.1 netmask 0xffffff00 broadcast 172.16.221.255\r\n...\r\n...\r\n```\r\nこの情報を元に Vagratfile に追記　（クラスC)\r\n```bash\r\n config.vm.network :public_network, :bridge =&gt; &quot;vmnet8&quot;, ip: &quot;172.16.221.12&quot;\r\n```\r\n第4オクテッドはご自由に。ここでは12にしてます。\r\nVagrantを再起動。\r\n\r\n## VMwear上のOSから接続確認\r\nhostsファイル編集\r\n```bash\r\nvi /etc/hosts\r\n```\r\nhostを追記 \'vagrant.local\'はご自由に。\r\n```bash\r\n172.16.221.12 vagrant.local\r\n```\r\nVagrantへのネットワークをNmapで確認\r\n```bash\r\n○ → nmap 172.16.221.12\r\n```\r\n```bash\r\nStarting Nmap 7.80 ( https://nmap.org ) at 2019-10-01 13:46 JST\r\nNmap scan report for centos75.exp (172.16.221.12)\r\nHost is up (0.00042s latency).\r\nNot shown: 994 closed ports\r\nPORT     STATE SERVICE\r\n22/tcp   open  ssh\r\n80/tcp   open  http\r\n111/tcp  open  rpcbind\r\n443/tcp  open  https\r\n3000/tcp open  ppp\r\n3306/tcp open  mysql\r\n```\r\n繋がりました。',344,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/344-revision-v1/',0,'revision','',0),(435,1,'2019-11-02 23:00:32','2019-11-02 14:00:32','<p>開発中のプロジェクトにVMwear上のOSからテストやセキュリティーチェックなどしたいけれども開発中のプロジェクトをグローバルなサーバーにアップするのも<span class=\"under_line\">めんどくさい</span>のでVMwearFusionのネットワークにVagrantを設定しローカル内で完結させる。</p>\n<h2>VMware上のOSのネットワーク設定</h2>\n<p>VMの設定を開く</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.39.35.png\" alt=\"\" /></p>\n<p>デバイスを追加をクリック</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.40.35.png\" alt=\"\" /></p>\n<p>ネットワークアダプタを追加\n\'Macを共有\' を設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-14.00.03.png\" alt=\"\" /></p>\n<h2>Vagrant側のネットワーク設定</h2>\n<p>HostOSからVMwearネットワークを確認</p>\n<pre><code class=\"language-bash\">ifconfig </code></pre>\n<pre><code class=\"language-bash\">...\n...\n vmnet8: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500\n        ether 00:50:56:c0:00:08 \n        inet 172.16.221.1 netmask 0xffffff00 broadcast 172.16.221.255\n...\n...</code></pre>\n<p>この情報を元に Vagratfile に追記　（クラスC)</p>\n<pre><code class=\"language-bash\"> config.vm.network :public_network, :bridge =&gt; &quot;vmnet8&quot;, ip: &quot;172.16.221.12&quot;</code></pre>\n<p>第4オクテッドはご自由に。ここでは12にしてます。\nVagrantを再起動。</p>\n<h2>VMwear上のOSから接続確認</h2>\n<p>hostsファイル編集</p>\n<pre><code class=\"language-bash\">vi /etc/hosts</code></pre>\n<p>hostを追記 \'vagrant.local\'はご自由に。</p>\n<pre><code class=\"language-bash\">172.16.221.12 vagrant.local</code></pre>\n<p>VagrantへのネットワークをNmapで確認</p>\n<pre><code class=\"language-bash\">○ → nmap 172.16.221.12</code></pre>\n<pre><code class=\"language-bash\">Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-01 13:46 JST\nNmap scan report for centos75.exp (172.16.221.12)\nHost is up (0.00042s latency).\nNot shown: 994 closed ports\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n111/tcp  open  rpcbind\n443/tcp  open  https\n3000/tcp open  ppp\n3306/tcp open  mysql</code></pre>\n<p>繋がりました。</p>','Vagrant(VirtualBox)とVMwear Fusion をネットワーク共有','VMwaer上のOSからVagrant (VirtualBox) を突つきたい時のネットワーク設定','inherit','closed','closed','','344-revision-v1','','','2019-11-02 23:00:32','2019-11-02 14:00:32','開発中のプロジェクトにVMwear上のOSからテストやセキュリティーチェックなどしたいけれども開発中のプロジェクトをグローバルなサーバーにアップするのも<span class=\"under_line\">めんどくさい</span>のでVMwearFusionのネットワークにVagrantを設定しローカル内で完結させる。\r\n\r\n\r\n\r\n## VMware上のOSのネットワーク設定\r\nVMの設定を開く\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.39.35.png)\r\n\r\nデバイスを追加をクリック\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-12.40.35.png)\r\n\r\nネットワークアダプタを追加\r\n\'Macを共有\' を設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/スクリーンショット-2019-10-01-14.00.03.png)\r\n\r\n## Vagrant側のネットワーク設定\r\nHostOSからVMwearネットワークを確認\r\n```bash\r\nifconfig \r\n```\r\n\r\n```bash\r\n...\r\n...\r\n vmnet8: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500\r\n        ether 00:50:56:c0:00:08 \r\n        inet 172.16.221.1 netmask 0xffffff00 broadcast 172.16.221.255\r\n...\r\n...\r\n```\r\nこの情報を元に Vagratfile に追記　（クラスC)\r\n```bash\r\n config.vm.network :public_network, :bridge =&gt; &quot;vmnet8&quot;, ip: &quot;172.16.221.12&quot;\r\n```\r\n第4オクテッドはご自由に。ここでは12にしてます。\r\nVagrantを再起動。\r\n\r\n## VMwear上のOSから接続確認\r\nhostsファイル編集\r\n```bash\r\nvi /etc/hosts\r\n```\r\nhostを追記 \'vagrant.local\'はご自由に。\r\n```bash\r\n172.16.221.12 vagrant.local\r\n```\r\nVagrantへのネットワークをNmapで確認\r\n```bash\r\n○ → nmap 172.16.221.12\r\n```\r\n```bash\r\nStarting Nmap 7.80 ( https://nmap.org ) at 2019-10-01 13:46 JST\r\nNmap scan report for centos75.exp (172.16.221.12)\r\nHost is up (0.00042s latency).\r\nNot shown: 994 closed ports\r\nPORT     STATE SERVICE\r\n22/tcp   open  ssh\r\n80/tcp   open  http\r\n111/tcp  open  rpcbind\r\n443/tcp  open  https\r\n3000/tcp open  ppp\r\n3306/tcp open  mysql\r\n```\r\n繋がりました。',344,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/344-revision-v1/',0,'revision','',0),(436,1,'2019-11-02 23:03:25','2019-11-02 14:03:25','<p>特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちらもメリット、デメリットあります。</p>\n<p>USキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\n<a href=\"https://pqrs.org/osx/karabiner/\">Karabiner</a></p>\n<h2>Karabinercで自分だけのショートカット</h2>\n<p>以下USキーボード前提での例です。僕の例です。</p>\n<ul>\n<li><kbd>delet</kbd> + <kbd>e</kbd> Excel </li>\n<li><kbd>delet</kbd> + <kbd>z</kbd> Finder </li>\n<li><kbd>fn</kbd> + <kbd>j</kbd> Intellij idea </li>\n<li><kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\nなどなど。。。</li>\n</ul>\n<p>USキーボードでは</p>\n<ul>\n<li><kbd>delete</kbd>、は右上</li>\n<li><kbd>fn</kbd>、は左下</li>\n</ul>\n<p>にあります。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png\" alt=\"\" /></p>\n<p>ホームポッションを崩さずにアプリを一瞬でスイッチングできます。\n他のアルファベットや数字キーによく使うアプリを設定しています。</p>\n<p>正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。</p>\n<h2>Karabinerでキー押下時をカスタマイズ。</h2>\n<p>以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\n<img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png\" alt=\"\" /></p>\n<p>Karabinerでの設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png\" alt=\"\" /></p>\n<h3>どんなことができるのか</h3>\n<ul>\n<li><kbd>space</kbd>長押しで<kbd>shift</kbd></li>\n<li><kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信</li>\n<li><kbd>enter</kbd> 長押しで <kbd>control</kbd></li>\n<li>More...</li>\n</ul>\n<p>特に<strong>Vim</strong>を使う時には有効な設定です。</p>\n<p>個人的には</p>\n<ul>\n<li><kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動</li>\n</ul>\n<p>そういうことです。\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。</p>\n<h2>Karabinerのデメリット</h2>\n<p><strong>Karabiner</strong>無しでは仕事が捗らなくなるという中毒性があります。\n他人のMACを操作するとTypo連発です。</p>\n<p>キーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)</p>\n<p>でも僕はこの設定は外しました。\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\nゆっくり打てばいいのですがそれは<span class=\"under_line\">めんどくさい</span>ので一旦外してます。\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでない設定を考えてみようと思います。\n今後の課題とします。</p>','Karabiner','MACのキーボードカスタマイズアプリ。特にUSキーボード使いには必須かも。JISキーボードでも効率アップ。\r\n自分だけのキーボードにカスタマイズ。','inherit','closed','closed','','383-revision-v1','','','2019-11-02 23:03:25','2019-11-02 14:03:25','特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちらもメリット、デメリットあります。\r\n\r\nUSキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\r\n[Karabiner](https://pqrs.org/osx/karabiner/)\r\n\r\n## Karabinercで自分だけのショートカット\r\n以下USキーボード前提での例です。僕の例です。\r\n- <kbd>delet</kbd> + <kbd>e</kbd> Excel \r\n- <kbd>delet</kbd> + <kbd>z</kbd> Finder \r\n- <kbd>fn</kbd> + <kbd>j</kbd> Intellij idea \r\n- <kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\r\nなどなど。。。\r\n\r\nUSキーボードでは\r\n- <kbd>delete</kbd>、は右上\r\n- <kbd>fn</kbd>、は左下\r\n\r\nにあります。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png)\r\n\r\nホームポッションを崩さずにアプリを一瞬でスイッチングできます。\r\n他のアルファベットや数字キーによく使うアプリを設定しています。\r\n\r\n正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\r\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。\r\n\r\n## Karabinerでキー押下時をカスタマイズ。\r\n以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\r\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd-1.png)\r\n\r\nKarabinerでの設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png)\r\n\r\n\r\n### どんなことができるのか\r\n\r\n- <kbd>space</kbd>長押しで<kbd>shift</kbd>\r\n- <kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信\r\n- <kbd>enter</kbd> 長押しで <kbd>control</kbd>\r\n- More...\r\n\r\n特に__Vim__を使う時には有効な設定です。\r\n\r\n個人的には\r\n- <kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動\r\n\r\nそういうことです。\r\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\r\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。\r\n\r\n\r\n## Karabinerのデメリット\r\n__Karabiner__無しでは仕事が捗らなくなるという中毒性があります。\r\n他人のMACを操作するとTypo連発です。\r\n\r\nキーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\r\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)\r\n\r\nでも僕はこの設定は外しました。\r\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\r\nゆっくり打てばいいのですがそれは<span class=\"under_line\">めんどくさい</span>ので一旦外してます。\r\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでない設定を考えてみようと思います。\r\n今後の課題とします。\r\n\r\n\r\n',383,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/383-revision-v1/',0,'revision','',0),(437,1,'2019-11-02 23:05:33','2019-11-02 14:05:33','<p>特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちらもメリット、デメリットあります。</p>\n<p>USキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\n<a href=\"https://pqrs.org/osx/karabiner/\">Karabiner</a></p>\n<h2>Karabinercで自分だけのショートカット</h2>\n<p>以下USキーボード前提での例です。僕の例です。</p>\n<ul>\n<li><kbd>delet</kbd> + <kbd>e</kbd> Excel </li>\n<li><kbd>delet</kbd> + <kbd>z</kbd> Finder </li>\n<li><kbd>fn</kbd> + <kbd>j</kbd> Intellij idea </li>\n<li><kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\nなどなど。。。</li>\n</ul>\n<p>USキーボードでは</p>\n<ul>\n<li><kbd>delete</kbd>、は右上</li>\n<li><kbd>fn</kbd>、は左下</li>\n</ul>\n<p>にあります。</p>\n<p>ホームポッションを崩さずにアプリを一瞬でスイッチングできます。\n他のアルファベットや数字キーによく使うアプリを設定しています。</p>\n<p>正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。</p>\n<h2>Karabinerでキー押下時をカスタマイズ。</h2>\n<p>以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png\" alt=\"\" />\nKarabinerでの設定</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png\" alt=\"\" /></p>\n<h3>どんなことができるのか</h3>\n<ul>\n<li><kbd>space</kbd>長押しで<kbd>shift</kbd></li>\n<li><kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信</li>\n<li><kbd>enter</kbd> 長押しで <kbd>control</kbd></li>\n<li>More...</li>\n</ul>\n<p>特に<strong>Vim</strong>を使う時には有効な設定です。</p>\n<p>個人的には</p>\n<ul>\n<li><kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動</li>\n</ul>\n<p>そういうことです。\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。</p>\n<h2>Karabinerのデメリット</h2>\n<p><strong>Karabiner</strong>無しでは仕事が捗らなくなるという中毒性があります。\n他人のMACを操作するとTypo連発です。</p>\n<p>キーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)</p>\n<p>でも僕はこの設定は外しました。\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\nゆっくり打てばいいのですがそれは<span class=\"under_line\">めんどくさい</span>ので一旦外してます。\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでない設定を考えてみようと思います。\n今後の課題とします。</p>','Karabiner','MACのキーボードカスタマイズアプリ。特にUSキーボード使いには必須かも。JISキーボードでも効率アップ。\r\n自分だけのキーボードにカスタマイズ。','inherit','closed','closed','','383-revision-v1','','','2019-11-02 23:05:33','2019-11-02 14:05:33','特にMACではUSキーボードかJISキーボードかと宗教戦争みたいなこともありますがどちらもメリット、デメリットあります。\r\n\r\nUSキーボードでもJISキーボードでもどちらのデメリットを補ってくれるキーボードをカスタマイズできるアプリです。\r\n[Karabiner](https://pqrs.org/osx/karabiner/)\r\n\r\n## Karabinercで自分だけのショートカット\r\n以下USキーボード前提での例です。僕の例です。\r\n- <kbd>delet</kbd> + <kbd>e</kbd> Excel \r\n- <kbd>delet</kbd> + <kbd>z</kbd> Finder \r\n- <kbd>fn</kbd> + <kbd>j</kbd> Intellij idea \r\n- <kbd>fn</kbd> + <kbd>p</kbd> Adobe Photoshop\r\nなどなど。。。\r\n\r\nUSキーボードでは\r\n- <kbd>delete</kbd>、は右上\r\n- <kbd>fn</kbd>、は左下\r\n\r\nにあります。\r\n\r\n\r\n\r\nホームポッションを崩さずにアプリを一瞬でスイッチングできます。\r\n他のアルファベットや数字キーによく使うアプリを設定しています。\r\n\r\n正直、<kbd>cmd</kbd> + <kbd>tab</kbd> のスイッチングは<kbd>tab</kbd>の連打が<span class=\"under_line\">めんどくさい</span>。\r\n<kbd>cmd</kbd> + <kbd>tab</kbd> より遥かに楽で早いです。\r\n\r\n## Karabinerでキー押下時をカスタマイズ。\r\n以下、<kbd>caps lock</kbd>と<kbd>left control</kbd>を入れ替えた設定を前提にしてます。\r\nこれはMACの設定画面でもできますがKarabinerでももちろんできます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/us-kbd.png)\r\nKarabinerでの設定\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/10/Screen-Shot-2019-10-02-at-21.58.08.png)\r\n\r\n\r\n### どんなことができるのか\r\n\r\n- <kbd>space</kbd>長押しで<kbd>shift</kbd>\r\n- <kbd>left control</kbd>にトレードオフした<kbd>caps lock</kbd>単体押し(長押しでない)で<kbd>esc</kbd> <kbd>英数を送信\r\n- <kbd>enter</kbd> 長押しで <kbd>control</kbd>\r\n- More...\r\n\r\n特に__Vim__を使う時には有効な設定です。\r\n\r\n個人的には\r\n- <kbd>caps lock</kbd>にトレードオフした<kbd>letf control</kbd> + <kbd>h</kbd> でカーソル左移動\r\n\r\nそういうことです。\r\n<kbd>j</kbd>,<kbd>k</kbd>,<kbd>l</kbd>も割り当てます。個人的にはこれはすごく便利です。\r\nマウスやカーソルキーを使うのは<span class=\"under_line\">めんどくさい</span>のでなるべくホームポジションを崩したくないんです。\r\n\r\n\r\n## Karabinerのデメリット\r\n__Karabiner__無しでは仕事が捗らなくなるという中毒性があります。\r\n他人のMACを操作するとTypo連発です。\r\n\r\nキーバードでマウスを動かす設定もできます。マウスのスピードも調整できます。\r\n<kbd>d</kbd> + (<kbd>h</kbd> or <kbd>j</kbd> or <kbd>k</kbd> or <kbd>l</kbd>)\r\n\r\nでも僕はこの設定は外しました。\r\n\'sudo\' と早くタイプするとなぜか \'suod\' になってしまうのです。\r\nゆっくり打てばいいのですがそれは<span class=\"under_line\">めんどくさい</span>ので一旦外してます。\r\nキーボード上でマウス操作できるは魅力なので通常のタイプに問題がでない設定を考えてみようと思います。\r\n今後の課題とします。\r\n\r\n\r\n',383,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/383-revision-v1/',0,'revision','',0),(438,1,'2019-11-03 12:49:33','2019-11-03 03:49:33','<p>AIや機械学習で遊ぶため(お勉強)<strong>JupyterLab</strong>の環境をDockerで作りました。\n<strong>JupyterLab</strong>は動いたのですがPDFやLetaxでダウンロードするには<strong>texlive-full</strong>を追加しなければいけないことになった。       </p>\n<p>しかし、<strong>texlive-full</strong>のBuild(docker-composer buildとか)にかなり時間がかかりました。(30分超)\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。   </p>\n<p>再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので<strong>texlive-full</strong>のインストールを<strong>Dockerfile</strong>ではなく<strong>DockerImage</strong>内でインストールしておく<strong>DockerImage</strong>を作成。<br />\n作成した<strong>DockerImage</strong>を<a href=\"https://cloud.docker.com/repository/docker/webdimension/jupyter-latex\" target=\"_blank\" rel=\"noopener noreferrer\">DockerHub</a>へ、Sourceを<a href=\"https://gitlab.com/webdimension/python\" target=\"_blank\" rel=\"noopener noreferrer\">GitLab</a>へ登録しました。</p>\n<h2>既存の DockerImageからJupyterLabを構築</h2>\n<p>ネットからほぼコピペのDockerfileだと</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>\n<p>これでも<strong>JupyteLab</strong>自体動作しますがメニューの\n&quot;File -&gt; Export Nootebook as &quot;からPDFやLatexでダウンロードしようとするとエラーが発生。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-02-at-16.20.03.png\" alt=\"\" /></p>\n<p>調べたところ<strong>texlive-full</strong>をインストールすれば解決するらしい。\n<strong>texlive-full</strong>のインストールを追記した<strong>Dockerfile</strong>が以下。</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\n\nADD xelatex/packages.txt .\nRUN apt-get update &amp;&amp; \\\n    # Install packages\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\n    # Removing documentation packages *after* installing them is kind of hacky,\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\n    # Remove more unnecessary stuff\n    apt-get clean -y &amp;&amp; \\\n    # Create directory for iso690\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Change directory\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Clone repository\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\n    # Run texhash\n    texhash\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>\n<p>これでPDFやLatexでダウンロードできるようになりました。しかしbuildにかなり時間がかかります。(30分超)。\n最初の一回だけならまだいいのですがこのDockerfileだと</p>\n<pre><code class=\"language-bash\">COPY requirements.txt /tmp/requirements.txt\n...\n...\npip install -r /tmp/requirements.txt &amp;&amp; \\</code></pre>\n<p>この部分でpythonのパッケージをpipでインストールしています。\n<strong>pandas</strong>などのパッケージを追加する場合はrequirements.txtに<strong>pandas</strong>を追記してbuildするようになります。\nこのままだとライブラリを追加する度に30分以上かかり<span class=\"under_line\">めんどくさい</span>のでDockerfileは最小限にして<strong>JupyterLab</strong>,<strong>texlive-full</strong>のインストールはDockerImage側でするようなDockerImageを用意します。</p>\n<h2>JupyterLab,exlive-full 環境構築のためのDockerFile</h2>\n<p>DockerImageを作るためのDockerfileです。</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\n\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install jupyterlab\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nADD xelatex/packages.txt .\nRUN apt-get update &amp;&amp; \\\n    # Install packages\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\n    # Removing documentation packages *after* installing them is kind of hacky,\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\n    # Remove more unnecessary stuff\n    apt-get clean -y &amp;&amp; \\\n    # Create directory for iso690\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Change directory\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Clone repository\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\n    # Run texhash\n    texhash</code></pre>\n<p>docker-composer.yml</p>\n<pre><code class=\"language-bash\">version: &#039;3&#039;\n\nservices:\n  jupyterlab:\n    build: jupyterlab\n    hostname: jupyterlab\n    container_name: jupyterlab</code></pre>\n<p>このDockerfileでは</p>\n<pre><code class=\"language-bash\">pip install jupyterlab\n...\nRUN jupyter labextension install jupyterlab_vim\n...\napt-get install -y $(cat packages.txt)</code></pre>\n<ul>\n<li>Pythonパッケージは<strong>JupyterLab</strong>のみインストール</li>\n<li><strong>JupyterLab</strong>拡張機能のインストール</li>\n<li>*texlive-full**</li>\n</ul>\n<p>となってます。</p>\n<h2>DockerImageを生成しDockerHubへアップロード</h2>\n<ul>\n<li>DcokerHubでアカウント登録</li>\n<li>DockerHubでリポジトリの作成\n上記が前提です。<a href=\"https://hub.docker.com/\" target=\"_brank\" rel=\"noopener noreferrer\">Docker Hub</a></li>\n</ul>\n<p>DockerImageを生成</p>\n<pre><code class=\"language-bash\">$docker-compose build</code></pre>\n<p>時間がかかります。\n...\n生成されたDockerImageを確認</p>\n<pre><code class=\"language-bash\">$docker images</code></pre>\n<p>生成された<strong>DckerImage</strong>を確認できるかと思います。\n生成された<strong>DockerImage</strong>を<strong>DockerHub</strong>へPushします。\nまずはDockerHubへログイン</p>\n<pre><code class=\"language-bash\">$ docker login\n# パスワードを入力してログイン</code></pre>\n<p>新規<strong>DockerImage</strong>をCommit</p>\n<pre><code class=\"language-bash\">$docker commit -a &quot;webdimension&quot; -m &quot;jupyterlab and latex&quot; jupyterlab webdimension/jupyter-latex\n# docker commit -a &quot;作者名&quot; -m &quot;コメント&quot; 対象のイメージ名 DockerHubアカウント名/リポジトリ名</code></pre>\n<p>新規<strong>DockerImage</strong>をリポジトリへPush</p>\n<pre><code class=\"language-bash\">$docker push webdimension/jupyter-latex\n# docker push DockerHubアカウント名/jupyter-リポジトリ名</code></pre>\n<p>これまた時間がかかります。。。。\n無事Pushが完了すれば<a href=\"https://cloud.docker.com/repository/list\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubのレポジトリ</a>でも確認してみます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-03-at-11.45.33.png\" alt=\"\" /></p>\n<p>これで新規DockerImageをDockerHubへ登録できました。</p>\n<h2>DockerHubへ登録したDockerImageからJupyterLab環境を構築</h2>\n<p>docker-compose.yml</p>\n<pre><code class=\"language-bash\">version: &#039;3&#039;\n\nservices:\n  jupyterlab:\n    build: jupyterlab\n    hostname: jupyterlab\n    container_name: jupyterlab\n    ports:\n      - &quot;8888:8888&quot;\n    volumes:\n      - ../src:/opt/python/src\n      - ../jupyter:/opt/python/jupyter\n      - ./jupyterlab:/opt/python/jupyterlab\n      - ./jupyterlab/library:/opt/python/librar</code></pre>\n<p>Dockerfile</p>\n<pre><code class=\"language-bash\">FROM webdimension/jupyter-latex\nENV PYTHONPATH &quot;/opt/python/library&quot;\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/src &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\n</code></pre>\n<p>Buildは</p>\n<ul>\n<li>Pythonパッケージのインストール</li>\n<li>JupyterLabの設定</li>\n</ul>\n<p>とシンプルになりとBuild時間も数秒になりました。</p>','JupyterLab on Docker でPDFやLatexでダウンロードできるまで','既存のDockerイメージ(python:3.7.3-slim-stretch)にtexlive-fullをインストールしDockerHubへPushするまで。','publish','closed','open','','jypyter_on_docker','','','2019-11-03 12:49:33','2019-11-03 03:49:33','AIや機械学習で遊ぶため(お勉強)**JupyterLab**の環境をDockerで作りました。\r\n**JupyterLab**は動いたのですがPDFやLetaxでダウンロードするには**texlive-full**を追加しなければいけないことになった。		\r\n\r\nしかし、**texlive-full**のBuild(docker-composer buildとか)にかなり時間がかかりました。(30分超)	\r\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。	\r\n\r\n再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので**texlive-full**のインストールを**Dockerfile**ではなく**DockerImage**内でインストールしておく**DockerImage**を作成。		\r\n作成した**DockerImage**を<a href=\"https://cloud.docker.com/repository/docker/webdimension/jupyter-latex\" target=\"_blank\" rel=\"noopener noreferrer\">DockerHub</a>へ、Sourceを<a href=\"https://gitlab.com/webdimension/python\" target=\"_blank\" rel=\"noopener noreferrer\">GitLab</a>へ登録しました。\r\n\r\n\r\n## 既存の DockerImageからJupyterLabを構築\r\nネットからほぼコピペのDockerfileだと\r\n\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\n\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```\r\nこれでも**JupyteLab**自体動作しますがメニューの\r\n\"File -> Export Nootebook as \"からPDFやLatexでダウンロードしようとするとエラーが発生。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-02-at-16.20.03.png)\r\n\r\n調べたところ**texlive-full**をインストールすれば解決するらしい。\r\n**texlive-full**のインストールを追記した**Dockerfile**が以下。\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\n\r\nADD xelatex/packages.txt .\r\nRUN apt-get update &amp;&amp; \\\r\n    # Install packages\r\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\r\n    # Removing documentation packages *after* installing them is kind of hacky,\r\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\r\n    # Remove more unnecessary stuff\r\n    apt-get clean -y &amp;&amp; \\\r\n    # Create directory for iso690\r\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Change directory\r\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Clone repository\r\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\r\n    # Run texhash\r\n    texhash\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```\r\nこれでPDFやLatexでダウンロードできるようになりました。しかしbuildにかなり時間がかかります。(30分超)。\r\n最初の一回だけならまだいいのですがこのDockerfileだと\r\n```bash\r\nCOPY requirements.txt /tmp/requirements.txt\r\n...\r\n...\r\npip install -r /tmp/requirements.txt &amp;&amp; \\\r\n```\r\nこの部分でpythonのパッケージをpipでインストールしています。\r\n**pandas**などのパッケージを追加する場合はrequirements.txtに**pandas**を追記してbuildするようになります。\r\nこのままだとライブラリを追加する度に30分以上かかり<span class=\"under_line\">めんどくさい</span>のでDockerfileは最小限にして**JupyterLab**,**texlive-full**のインストールはDockerImage側でするようなDockerImageを用意します。\r\n\r\n## JupyterLab,exlive-full 環境構築のためのDockerFile\r\nDockerImageを作るためのDockerfileです。\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\n\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install jupyterlab\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nADD xelatex/packages.txt .\r\nRUN apt-get update &amp;&amp; \\\r\n    # Install packages\r\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\r\n    # Removing documentation packages *after* installing them is kind of hacky,\r\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\r\n    # Remove more unnecessary stuff\r\n    apt-get clean -y &amp;&amp; \\\r\n    # Create directory for iso690\r\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Change directory\r\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Clone repository\r\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\r\n    # Run texhash\r\n    texhash\r\n```\r\ndocker-composer.yml\r\n\r\n```bash\r\nversion: &#039;3&#039;\r\n\r\nservices:\r\n  jupyterlab:\r\n    build: jupyterlab\r\n    hostname: jupyterlab\r\n    container_name: jupyterlab\r\n```\r\nこのDockerfileでは\r\n```bash\r\npip install jupyterlab\r\n...\r\nRUN jupyter labextension install jupyterlab_vim\r\n...\r\napt-get install -y $(cat packages.txt)\r\n```\r\n- Pythonパッケージは**JupyterLab**のみインストール\r\n- **JupyterLab**拡張機能のインストール\r\n- *texlive-full**\r\n\r\nとなってます。\r\n\r\n## DockerImageを生成しDockerHubへアップロード\r\n- DcokerHubでアカウント登録\r\n- DockerHubでリポジトリの作成\r\n上記が前提です。<a href=\"https://hub.docker.com/\" target=\"_brank\" rel=\"noopener noreferrer\">Docker Hub</a>\r\n\r\nDockerImageを生成\r\n```bash\r\n$docker-compose build\r\n```\r\n時間がかかります。\r\n...\r\n生成されたDockerImageを確認\r\n```bash\r\n$docker images\r\n```\r\n生成された**DckerImage**を確認できるかと思います。\r\n生成された**DockerImage**を**DockerHub**へPushします。\r\nまずはDockerHubへログイン\r\n```bash\r\n$ docker login\r\n# パスワードを入力してログイン\r\n```\r\n新規**DockerImage**をCommit\r\n```bash\r\n$docker commit -a &quot;webdimension&quot; -m &quot;jupyterlab and latex&quot; jupyterlab webdimension/jupyter-latex\r\n# docker commit -a &quot;作者名&quot; -m &quot;コメント&quot; 対象のイメージ名 DockerHubアカウント名/リポジトリ名\r\n```\r\n新規**DockerImage**をリポジトリへPush\r\n```bash\r\n$docker push webdimension/jupyter-latex\r\n# docker push DockerHubアカウント名/jupyter-リポジトリ名\r\n```\r\nこれまた時間がかかります。。。。\r\n無事Pushが完了すれば<a href=\"https://cloud.docker.com/repository/list\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubのレポジトリ</a>でも確認してみます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-03-at-11.45.33.png)\r\n\r\nこれで新規DockerImageをDockerHubへ登録できました。\r\n\r\n## DockerHubへ登録したDockerImageからJupyterLab環境を構築\r\ndocker-compose.yml\r\n```bash\r\nversion: &#039;3&#039;\r\n\r\nservices:\r\n  jupyterlab:\r\n    build: jupyterlab\r\n    hostname: jupyterlab\r\n    container_name: jupyterlab\r\n    ports:\r\n      - &quot;8888:8888&quot;\r\n    volumes:\r\n      - ../src:/opt/python/src\r\n      - ../jupyter:/opt/python/jupyter\r\n      - ./jupyterlab:/opt/python/jupyterlab\r\n      - ./jupyterlab/library:/opt/python/librar\r\n```\r\n\r\n\r\nDockerfile\r\n```bash\r\nFROM webdimension/jupyter-latex\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/src &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n\r\n```\r\nBuildは\r\n- Pythonパッケージのインストール\r\n- JupyterLabの設定\r\n\r\nとシンプルになりとBuild時間も数秒になりました。\r\n',0,'https://blog.webdimension.jp/?p=438',0,'post','',0),(439,1,'2019-11-02 23:52:23','2019-11-02 14:52:23','<p>AIや機械学習のお勉強のため<strong>JupyterLab</strong>の環境をDockerで作りました。*JupyterLab<strong>は動いたのですがPDFやLetaxでダウンロードするには</strong>texlive-full**を追加しなければいけないことになった。       </p>\n<p>しかし、<strong>texlive-full</strong>のBuildにかなり時間がかかりました。(30分超)<br />\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。   </p>\n<p>再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので<strong>texlive-full</strong>のインストールを<strong>Dockerfile</strong>ではなく<strong>DockerImage</strong>ないでインストールしておく<strong>DockerImage</strong>を作成。<br />\n作成した<strong>DockerImage</strong>をDockerHubへ登録しました。</p>\n<h2>既存の Do*のckerImageからJupyterLabを構築</h2>\n<p>ネットからほぼコピペのDockerfileだと</p>\n<pre><code>FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\n\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\n</code></pre>','JupyterLab on Docker でPDFやLatexでダウンロードできるまで','既存のDockerイメージ(python:3.7.3-slim-stretch)にtexlive-fullをインストールしDockerHubへPushするまで。','inherit','closed','closed','','438-revision-v1','','','2019-11-02 23:52:23','2019-11-02 14:52:23','AIや機械学習のお勉強のため**JupyterLab**の環境をDockerで作りました。*JupyterLab**は動いたのですがPDFやLetaxでダウンロードするには**texlive-full**を追加しなければいけないことになった。		\r\n\r\nしかし、**texlive-full**のBuildにかなり時間がかかりました。(30分超)	\r\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。	\r\n\r\n再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので**texlive-full**のインストールを**Dockerfile**ではなく**DockerImage**ないでインストールしておく**DockerImage**を作成。		\r\n作成した**DockerImage**をDockerHubへ登録しました。\r\n\r\n\r\n## 既存の Do*のckerImageからJupyterLabを構築\r\nネットからほぼコピペのDockerfileだと\r\n```\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\n\r\n\r\n\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n\r\n```',438,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/438-revision-v1/',0,'revision','',0);
INSERT INTO `wp_posts` VALUES (440,1,'2019-11-02 23:59:04','2019-11-02 14:59:04','','Screen Shot 2019-11-02 at 16.20.03','','inherit','closed','closed','','screen-shot-2019-11-02-at-16-20-03','','','2019-11-02 23:59:04','2019-11-02 14:59:04','',438,'https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-02-at-16.20.03.png',0,'attachment','image/png',0),(443,1,'2019-11-03 00:57:24','2019-11-02 15:57:24','<p>AIや機械学習のお勉強のため<strong>JupyterLab</strong>の環境をDockerで作りました。*JupyterLab<strong>は動いたのですがPDFやLetaxでダウンロードするには</strong>texlive-full**を追加しなければいけないことになった。       </p>\n<p>しかし、<strong>texlive-full</strong>のBuildにかなり時間がかかりました。(30分超)<br />\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。   </p>\n<p>再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので<strong>texlive-full</strong>のインストールを<strong>Dockerfile</strong>ではなく<strong>DockerImage</strong>ないでインストールしておく<strong>DockerImage</strong>を作成。<br />\n作成した<strong>DockerImage</strong>をDockerHubへ登録しました。</p>\n<h2>既存の Do*のckerImageからJupyterLabを構築</h2>\n<p>ネットからほぼコピペのDockerfileだと</p>\n<pre><code>FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>','JupyterLab on Docker でPDFやLatexでダウンロードできるまで','既存のDockerイメージ(python:3.7.3-slim-stretch)にtexlive-fullをインストールしDockerHubへPushするまで。','inherit','closed','closed','','438-revision-v1','','','2019-11-03 00:57:24','2019-11-02 15:57:24','AIや機械学習のお勉強のため**JupyterLab**の環境をDockerで作りました。*JupyterLab**は動いたのですがPDFやLetaxでダウンロードするには**texlive-full**を追加しなければいけないことになった。		\r\n\r\nしかし、**texlive-full**のBuildにかなり時間がかかりました。(30分超)	\r\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。	\r\n\r\n再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので**texlive-full**のインストールを**Dockerfile**ではなく**DockerImage**ないでインストールしておく**DockerImage**を作成。		\r\n作成した**DockerImage**をDockerHubへ登録しました。\r\n\r\n\r\n## 既存の Do*のckerImageからJupyterLabを構築\r\nネットからほぼコピペのDockerfileだと\r\n```\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```',438,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/438-revision-v1/',0,'revision','',0),(444,1,'2019-11-03 00:58:00','2019-11-02 15:58:00','<p>AIや機械学習のお勉強のため<strong>JupyterLab</strong>の環境をDockerで作りました。*JupyterLab<strong>は動いたのですがPDFやLetaxでダウンロードするには</strong>texlive-full**を追加しなければいけないことになった。       </p>\n<p>しかし、<strong>texlive-full</strong>のBuildにかなり時間がかかりました。(30分超)<br />\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。   </p>\n<p>再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので<strong>texlive-full</strong>のインストールを<strong>Dockerfile</strong>ではなく<strong>DockerImage</strong>ないでインストールしておく<strong>DockerImage</strong>を作成。<br />\n作成した<strong>DockerImage</strong>をDockerHubへ登録しました。</p>\n<h2>既存の DockerImageからJupyterLabを構築</h2>\n<p>ネットからほぼコピペのDockerfileだと</p>\n<pre><code>FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>','JupyterLab on Docker でPDFやLatexでダウンロードできるまで','既存のDockerイメージ(python:3.7.3-slim-stretch)にtexlive-fullをインストールしDockerHubへPushするまで。','inherit','closed','closed','','438-revision-v1','','','2019-11-03 00:58:00','2019-11-02 15:58:00','AIや機械学習のお勉強のため**JupyterLab**の環境をDockerで作りました。*JupyterLab**は動いたのですがPDFやLetaxでダウンロードするには**texlive-full**を追加しなければいけないことになった。		\r\n\r\nしかし、**texlive-full**のBuildにかなり時間がかかりました。(30分超)	\r\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。	\r\n\r\n再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので**texlive-full**のインストールを**Dockerfile**ではなく**DockerImage**ないでインストールしておく**DockerImage**を作成。		\r\n作成した**DockerImage**をDockerHubへ登録しました。\r\n\r\n\r\n## 既存の DockerImageからJupyterLabを構築\r\nネットからほぼコピペのDockerfileだと\r\n```\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```',438,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/438-revision-v1/',0,'revision','',0),(448,1,'2019-11-03 11:46:58','2019-11-03 02:46:58','','Screen Shot 2019-11-03 at 11.45.33','','inherit','closed','closed','','screen-shot-2019-11-03-at-11-45-33','','','2019-11-03 11:46:58','2019-11-03 02:46:58','',438,'https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-03-at-11.45.33.png',0,'attachment','image/png',0),(449,1,'2019-11-03 11:52:37','2019-11-03 02:52:37','<p>AIや機械学習で遊ぶため(お勉強)<strong>JupyterLab</strong>の環境をDockerで作りました。*JupyterLab<strong>は動いたのですがPDFやLetaxでダウンロードするには</strong>texlive-full**を追加しなければいけないことになった。        </p>\n<p>しかし、<strong>texlive-full</strong>のBuild(docker-composer buildとか)にかなり時間がかかりました。(30分超)\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。   </p>\n<p>再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので<strong>texlive-full</strong>のインストールを<strong>Dockerfile</strong>ではなく<strong>DockerImage</strong>ないでインストールしておく<strong>DockerImage</strong>を作成。<br />\n作成した<strong>DockerImage</strong>をDockerHubへ登録しました。</p>\n<h2>既存の DockerImageからJupyterLabを構築</h2>\n<p>ネットからほぼコピペのDockerfileだと</p>\n<pre><code>FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>\n<p>これでも<strong>JupyteLab</strong>自体動作しますが\n&quot;File -&gt; Export Nootebook as &quot;からPDFやLatexでダウンロードしようとするとエラーが発生。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-02-at-16.20.03.png\" alt=\"\" /></p>\n<p>調べたところ<strong>texlive-full</strong>をインストールすれば解決するらしい。\n*texlive-full<strong>のインストールを追記した</strong>Dockerfile**が以下。</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\n\nADD xelatex/packages.txt .\nRUN apt-get update &amp;&amp; \\\n    # Install packages\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\n    # Removing documentation packages *after* installing them is kind of hacky,\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\n    # Remove more unnecessary stuff\n    apt-get clean -y &amp;&amp; \\\n    # Create directory for iso690\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Change directory\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Clone repository\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\n    # Run texhash\n    texhash\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>\n<p>これでPDFやLatexでダウンロードできるようになりました。しかしbuildにかなり時間がかかります。(30分超)。\n最初の一回だけならまだいいのですがこのDockerfileだと</p>\n<pre><code class=\"language-bash\">COPY requirements.txt /tmp/requirements.txt\n...\n...\npip install -r /tmp/requirements.txt &amp;&amp; \\</code></pre>\n<p>この部分でpythonのパッケージをpipでインストールしています。\n<strong>pandas</strong>などのパッケージを追加する場合はrequirements.txtに<strong>pandas</strong>を追記してbuildするようになります。\nこのままだとライブラリを追加する度に30分以上かかり<span class=\"under_line\">めんどくさい</span>のでDockerfileは最小限にして<strong>JupyterLab</strong>,<strong>texlive-full</strong>のインストールはDockerImage側でするようなDockerImageを用意します。</p>\n<h2>JupyterLab,exlive-full 環境構築のためのDockerFile</h2>\n<p>DockerImageを作るためのDockerfileです。</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\n\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install jupyterlab\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nADD xelatex/packages.txt .\nRUN apt-get update &amp;&amp; \\\n    # Install packages\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\n    # Removing documentation packages *after* installing them is kind of hacky,\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\n    # Remove more unnecessary stuff\n    apt-get clean -y &amp;&amp; \\\n    # Create directory for iso690\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Change directory\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Clone repository\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\n    # Run texhash\n    texhash</code></pre>\n<p>docker-composer.yml</p>\n<pre><code class=\"language-bash\">version: &#039;3&#039;\n\nservices:\n  jupyterlab:\n    build: jupyterlab\n    hostname: jupyterlab\n    container_name: jupyterlab</code></pre>\n<p>このDockerfileでは</p>\n<pre><code class=\"language-bash\">pip install jupyterlab\n...\nRUN jupyter labextension install jupyterlab_vim\n...\napt-get install -y $(cat packages.txt)</code></pre>\n<ul>\n<li>Pythonパッケージは<strong>JupyterLab</strong>のみインストール</li>\n<li><strong>JupyterLab</strong>拡張機能のインストール</li>\n<li>*texlive-full**</li>\n</ul>\n<p>となってます。</p>\n<h2>DockerImageを生成しDockerHubへアップロード</h2>\n<ul>\n<li>DcokerHubでアカウント登録</li>\n<li>DockerHubでリポジトリの作成\n上記が前提です。<a href=\"https://hub.docker.com/\" target=\"_brank\" rel=\"noopener noreferrer\">Docker Hub</a></li>\n</ul>\n<p>DockerImageを生成</p>\n<pre><code class=\"language-bash\">$docker-compose build</code></pre>\n<p>時間がかかります。\n...\n生成されたDockerImageを確認</p>\n<pre><code class=\"language-bash\">$docker images</code></pre>\n<p>生成された<strong>DckerImage</strong>を確認できるかと思います。\n生成された<strong>DockerImage</strong>を<strong>DockerHub</strong>へPushします。\nまずはDockerHubへログイン</p>\n<pre><code class=\"language-bash\">$ docker login\n# パスワードを入力してログイン</code></pre>\n<p>新規<strong>DockerImage</strong>をCommit</p>\n<pre><code class=\"language-bash\">$docker commit -a &quot;webdimension&quot; -m &quot;jupyterlab and latex&quot; jupyterlab webdimension/jupyter-latex\n# docker commit -a &quot;作者名&quot; -m &quot;コメント&quot; 対象のイメージ名 DockerHubアカウント名/リポジトリ名</code></pre>\n<p>新規<strong>DockerImage</strong>をリポジトリへPush</p>\n<pre><code class=\"language-bash\">$docker push webdimension/jupyter-latex\n# docker push DockerHubアカウント名/jupyter-リポジトリ名</code></pre>\n<p>これまた時間がかかります。。。。\n無事Pushが完了すれば<a href=\"https://cloud.docker.com/repository/list\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubのレポジトリ</a>でも確認してみます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-03-at-11.45.33.png\" alt=\"\" /></p>\n<p>これで新規DockerImageをDockerHubへ登録できました。</p>\n<h2>DockerHubhw登録したDockerImageからJupyterLab環境を構築</h2>\n<p>docker-compose.yml</p>\n<pre><code class=\"language-bash\">version: &#039;3&#039;\n\nservices:\n  jupyterlab:\n    build: jupyterlab\n    hostname: jupyterlab\n    container_name: jupyterlab\n    ports:\n      - &quot;8888:8888&quot;\n    volumes:\n      - ../src:/opt/python/src\n      - ../jupyter:/opt/python/jupyter\n      - ./jupyterlab:/opt/python/jupyterlab\n      - ./jupyterlab/library:/opt/python/librar</code></pre>\n<p>Dockerfile</p>\n<pre><code class=\"language-bash\">FROM webdimension/jupyter-latex\nENV PYTHONPATH &quot;/opt/python/library&quot;\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/src &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\n</code></pre>','JupyterLab on Docker でPDFやLatexでダウンロードできるまで','既存のDockerイメージ(python:3.7.3-slim-stretch)にtexlive-fullをインストールしDockerHubへPushするまで。','inherit','closed','closed','','438-revision-v1','','','2019-11-03 11:52:37','2019-11-03 02:52:37','AIや機械学習で遊ぶため(お勉強)**JupyterLab**の環境をDockerで作りました。*JupyterLab**は動いたのですがPDFやLetaxでダウンロードするには**texlive-full**を追加しなければいけないことになった。		\r\n\r\nしかし、**texlive-full**のBuild(docker-composer buildとか)にかなり時間がかかりました。(30分超)	\r\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。	\r\n\r\n再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので**texlive-full**のインストールを**Dockerfile**ではなく**DockerImage**ないでインストールしておく**DockerImage**を作成。		\r\n作成した**DockerImage**をDockerHubへ登録しました。\r\n\r\n\r\n## 既存の DockerImageからJupyterLabを構築\r\nネットからほぼコピペのDockerfileだと\r\n```\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```\r\nこれでも**JupyteLab**自体動作しますが\r\n\"File -> Export Nootebook as \"からPDFやLatexでダウンロードしようとするとエラーが発生。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-02-at-16.20.03.png)\r\n\r\n調べたところ**texlive-full**をインストールすれば解決するらしい。\r\n*texlive-full**のインストールを追記した**Dockerfile**が以下。\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\n\r\nADD xelatex/packages.txt .\r\nRUN apt-get update &amp;&amp; \\\r\n    # Install packages\r\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\r\n    # Removing documentation packages *after* installing them is kind of hacky,\r\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\r\n    # Remove more unnecessary stuff\r\n    apt-get clean -y &amp;&amp; \\\r\n    # Create directory for iso690\r\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Change directory\r\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Clone repository\r\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\r\n    # Run texhash\r\n    texhash\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```\r\nこれでPDFやLatexでダウンロードできるようになりました。しかしbuildにかなり時間がかかります。(30分超)。\r\n最初の一回だけならまだいいのですがこのDockerfileだと\r\n```bash\r\nCOPY requirements.txt /tmp/requirements.txt\r\n...\r\n...\r\npip install -r /tmp/requirements.txt &amp;&amp; \\\r\n```\r\nこの部分でpythonのパッケージをpipでインストールしています。\r\n**pandas**などのパッケージを追加する場合はrequirements.txtに**pandas**を追記してbuildするようになります。\r\nこのままだとライブラリを追加する度に30分以上かかり<span class=\"under_line\">めんどくさい</span>のでDockerfileは最小限にして**JupyterLab**,**texlive-full**のインストールはDockerImage側でするようなDockerImageを用意します。\r\n\r\n## JupyterLab,exlive-full 環境構築のためのDockerFile\r\nDockerImageを作るためのDockerfileです。\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\n\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install jupyterlab\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nADD xelatex/packages.txt .\r\nRUN apt-get update &amp;&amp; \\\r\n    # Install packages\r\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\r\n    # Removing documentation packages *after* installing them is kind of hacky,\r\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\r\n    # Remove more unnecessary stuff\r\n    apt-get clean -y &amp;&amp; \\\r\n    # Create directory for iso690\r\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Change directory\r\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Clone repository\r\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\r\n    # Run texhash\r\n    texhash\r\n```\r\ndocker-composer.yml\r\n\r\n```bash\r\nversion: &#039;3&#039;\r\n\r\nservices:\r\n  jupyterlab:\r\n    build: jupyterlab\r\n    hostname: jupyterlab\r\n    container_name: jupyterlab\r\n```\r\nこのDockerfileでは\r\n```bash\r\npip install jupyterlab\r\n...\r\nRUN jupyter labextension install jupyterlab_vim\r\n...\r\napt-get install -y $(cat packages.txt)\r\n```\r\n- Pythonパッケージは**JupyterLab**のみインストール\r\n- **JupyterLab**拡張機能のインストール\r\n- *texlive-full**\r\n\r\nとなってます。\r\n\r\n## DockerImageを生成しDockerHubへアップロード\r\n- DcokerHubでアカウント登録\r\n- DockerHubでリポジトリの作成\r\n上記が前提です。<a href=\"https://hub.docker.com/\" target=\"_brank\" rel=\"noopener noreferrer\">Docker Hub</a>\r\n\r\nDockerImageを生成\r\n```bash\r\n$docker-compose build\r\n```\r\n時間がかかります。\r\n...\r\n生成されたDockerImageを確認\r\n```bash\r\n$docker images\r\n```\r\n生成された**DckerImage**を確認できるかと思います。\r\n生成された**DockerImage**を**DockerHub**へPushします。\r\nまずはDockerHubへログイン\r\n```bash\r\n$ docker login\r\n# パスワードを入力してログイン\r\n```\r\n新規**DockerImage**をCommit\r\n```bash\r\n$docker commit -a &quot;webdimension&quot; -m &quot;jupyterlab and latex&quot; jupyterlab webdimension/jupyter-latex\r\n# docker commit -a &quot;作者名&quot; -m &quot;コメント&quot; 対象のイメージ名 DockerHubアカウント名/リポジトリ名\r\n```\r\n新規**DockerImage**をリポジトリへPush\r\n```bash\r\n$docker push webdimension/jupyter-latex\r\n# docker push DockerHubアカウント名/jupyter-リポジトリ名\r\n```\r\nこれまた時間がかかります。。。。\r\n無事Pushが完了すれば<a href=\"https://cloud.docker.com/repository/list\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubのレポジトリ</a>でも確認してみます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-03-at-11.45.33.png)\r\n\r\nこれで新規DockerImageをDockerHubへ登録できました。\r\n\r\n## DockerHubhw登録したDockerImageからJupyterLab環境を構築\r\ndocker-compose.yml\r\n```bash\r\nversion: &#039;3&#039;\r\n\r\nservices:\r\n  jupyterlab:\r\n    build: jupyterlab\r\n    hostname: jupyterlab\r\n    container_name: jupyterlab\r\n    ports:\r\n      - &quot;8888:8888&quot;\r\n    volumes:\r\n      - ../src:/opt/python/src\r\n      - ../jupyter:/opt/python/jupyter\r\n      - ./jupyterlab:/opt/python/jupyterlab\r\n      - ./jupyterlab/library:/opt/python/librar\r\n```\r\n\r\n\r\nDockerfile\r\n```bash\r\nFROM webdimension/jupyter-latex\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/src &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n\r\n```\r\n',438,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/438-revision-v1/',0,'revision','',0),(450,1,'2019-11-03 12:04:22','2019-11-03 03:04:22','<p>AIや機械学習で遊ぶため(お勉強)<strong>JupyterLab</strong>の環境をDockerで作りました。\n*JupyterLab<strong>は動いたのですがPDFやLetaxでダウンロードするには</strong>texlive-full**を追加しなければいけないことになった。        </p>\n<p>しかし、<strong>texlive-full</strong>のBuild(docker-composer buildとか)にかなり時間がかかりました。(30分超)\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。   </p>\n<p>再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので<strong>texlive-full</strong>のインストールを<strong>Dockerfile</strong>ではなく<strong>DockerImage</strong>内でインストールしておく<strong>DockerImage</strong>を作成。<br />\n作成した<strong>DockerImage</strong>を<a href=\"https://cloud.docker.com/repository/docker/webdimension/jupyter-latex\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubへ、Sourceを<a href=\"https://gitlab.com/webdimension/python\" target=\"_blank\" rel=\"noopener noreferrer\">GitLab</a>へ登録しました。</p>\n<h2>既存の DockerImageからJupyterLabを構築</h2>\n<p>ネットからほぼコピペのDockerfileだと</p>\n<pre><code>FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>\n<p>これでも<strong>JupyteLab</strong>自体動作しますがメニューの\n&quot;File -&gt; Export Nootebook as &quot;からPDFやLatexでダウンロードしようとするとエラーが発生。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-02-at-16.20.03.png\" alt=\"\" /></p>\n<p>調べたところ<strong>texlive-full</strong>をインストールすれば解決するらしい。\n<strong>texlive-full</strong>のインストールを追記した<strong>Dockerfile</strong>が以下。</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\n\nADD xelatex/packages.txt .\nRUN apt-get update &amp;&amp; \\\n    # Install packages\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\n    # Removing documentation packages *after* installing them is kind of hacky,\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\n    # Remove more unnecessary stuff\n    apt-get clean -y &amp;&amp; \\\n    # Create directory for iso690\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Change directory\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Clone repository\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\n    # Run texhash\n    texhash\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>\n<p>これでPDFやLatexでダウンロードできるようになりました。しかしbuildにかなり時間がかかります。(30分超)。\n最初の一回だけならまだいいのですがこのDockerfileだと</p>\n<pre><code class=\"language-bash\">COPY requirements.txt /tmp/requirements.txt\n...\n...\npip install -r /tmp/requirements.txt &amp;&amp; \\</code></pre>\n<p>この部分でpythonのパッケージをpipでインストールしています。\n<strong>pandas</strong>などのパッケージを追加する場合はrequirements.txtに<strong>pandas</strong>を追記してbuildするようになります。\nこのままだとライブラリを追加する度に30分以上かかり<span class=\"under_line\">めんどくさい</span>のでDockerfileは最小限にして<strong>JupyterLab</strong>,<strong>texlive-full</strong>のインストールはDockerImage側でするようなDockerImageを用意します。</p>\n<h2>JupyterLab,exlive-full 環境構築のためのDockerFile</h2>\n<p>DockerImageを作るためのDockerfileです。</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\n\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install jupyterlab\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nADD xelatex/packages.txt .\nRUN apt-get update &amp;&amp; \\\n    # Install packages\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\n    # Removing documentation packages *after* installing them is kind of hacky,\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\n    # Remove more unnecessary stuff\n    apt-get clean -y &amp;&amp; \\\n    # Create directory for iso690\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Change directory\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Clone repository\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\n    # Run texhash\n    texhash</code></pre>\n<p>docker-composer.yml</p>\n<pre><code class=\"language-bash\">version: &#039;3&#039;\n\nservices:\n  jupyterlab:\n    build: jupyterlab\n    hostname: jupyterlab\n    container_name: jupyterlab</code></pre>\n<p>このDockerfileでは</p>\n<pre><code class=\"language-bash\">pip install jupyterlab\n...\nRUN jupyter labextension install jupyterlab_vim\n...\napt-get install -y $(cat packages.txt)</code></pre>\n<ul>\n<li>Pythonパッケージは<strong>JupyterLab</strong>のみインストール</li>\n<li><strong>JupyterLab</strong>拡張機能のインストール</li>\n<li>*texlive-full**</li>\n</ul>\n<p>となってます。</p>\n<h2>DockerImageを生成しDockerHubへアップロード</h2>\n<ul>\n<li>DcokerHubでアカウント登録</li>\n<li>DockerHubでリポジトリの作成\n上記が前提です。<a href=\"https://hub.docker.com/\" target=\"_brank\" rel=\"noopener noreferrer\">Docker Hub</a></li>\n</ul>\n<p>DockerImageを生成</p>\n<pre><code class=\"language-bash\">$docker-compose build</code></pre>\n<p>時間がかかります。\n...\n生成されたDockerImageを確認</p>\n<pre><code class=\"language-bash\">$docker images</code></pre>\n<p>生成された<strong>DckerImage</strong>を確認できるかと思います。\n生成された<strong>DockerImage</strong>を<strong>DockerHub</strong>へPushします。\nまずはDockerHubへログイン</p>\n<pre><code class=\"language-bash\">$ docker login\n# パスワードを入力してログイン</code></pre>\n<p>新規<strong>DockerImage</strong>をCommit</p>\n<pre><code class=\"language-bash\">$docker commit -a &quot;webdimension&quot; -m &quot;jupyterlab and latex&quot; jupyterlab webdimension/jupyter-latex\n# docker commit -a &quot;作者名&quot; -m &quot;コメント&quot; 対象のイメージ名 DockerHubアカウント名/リポジトリ名</code></pre>\n<p>新規<strong>DockerImage</strong>をリポジトリへPush</p>\n<pre><code class=\"language-bash\">$docker push webdimension/jupyter-latex\n# docker push DockerHubアカウント名/jupyter-リポジトリ名</code></pre>\n<p>これまた時間がかかります。。。。\n無事Pushが完了すれば<a href=\"https://cloud.docker.com/repository/list\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubのレポジトリ</a>でも確認してみます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-03-at-11.45.33.png\" alt=\"\" /></p>\n<p>これで新規DockerImageをDockerHubへ登録できました。</p>\n<h2>DockerHubhw登録したDockerImageからJupyterLab環境を構築</h2>\n<p>docker-compose.yml</p>\n<pre><code class=\"language-bash\">version: &#039;3&#039;\n\nservices:\n  jupyterlab:\n    build: jupyterlab\n    hostname: jupyterlab\n    container_name: jupyterlab\n    ports:\n      - &quot;8888:8888&quot;\n    volumes:\n      - ../src:/opt/python/src\n      - ../jupyter:/opt/python/jupyter\n      - ./jupyterlab:/opt/python/jupyterlab\n      - ./jupyterlab/library:/opt/python/librar</code></pre>\n<p>Dockerfile</p>\n<pre><code class=\"language-bash\">FROM webdimension/jupyter-latex\nENV PYTHONPATH &quot;/opt/python/library&quot;\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/src &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\n</code></pre>\n<p>Buildは</p>\n<ul>\n<li>Pythonパッケージのインストール</li>\n<li>JupyterLabの設定</li>\n</ul>\n<p>とシンプルになりとBuild時間も数秒になりました。</p>','JupyterLab on Docker でPDFやLatexでダウンロードできるまで','既存のDockerイメージ(python:3.7.3-slim-stretch)にtexlive-fullをインストールしDockerHubへPushするまで。','inherit','closed','closed','','438-revision-v1','','','2019-11-03 12:04:22','2019-11-03 03:04:22','AIや機械学習で遊ぶため(お勉強)**JupyterLab**の環境をDockerで作りました。\r\n*JupyterLab**は動いたのですがPDFやLetaxでダウンロードするには**texlive-full**を追加しなければいけないことになった。		\r\n\r\nしかし、**texlive-full**のBuild(docker-composer buildとか)にかなり時間がかかりました。(30分超)	\r\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。	\r\n\r\n再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので**texlive-full**のインストールを**Dockerfile**ではなく**DockerImage**内でインストールしておく**DockerImage**を作成。		\r\n作成した**DockerImage**を<a href=\"https://cloud.docker.com/repository/docker/webdimension/jupyter-latex\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubへ、Sourceを<a href=\"https://gitlab.com/webdimension/python\" target=\"_blank\" rel=\"noopener noreferrer\">GitLab</a>へ登録しました。\r\n\r\n\r\n## 既存の DockerImageからJupyterLabを構築\r\nネットからほぼコピペのDockerfileだと\r\n```\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\n\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```\r\nこれでも**JupyteLab**自体動作しますがメニューの\r\n\"File -> Export Nootebook as \"からPDFやLatexでダウンロードしようとするとエラーが発生。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-02-at-16.20.03.png)\r\n\r\n調べたところ**texlive-full**をインストールすれば解決するらしい。\r\n**texlive-full**のインストールを追記した**Dockerfile**が以下。\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\n\r\nADD xelatex/packages.txt .\r\nRUN apt-get update &amp;&amp; \\\r\n    # Install packages\r\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\r\n    # Removing documentation packages *after* installing them is kind of hacky,\r\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\r\n    # Remove more unnecessary stuff\r\n    apt-get clean -y &amp;&amp; \\\r\n    # Create directory for iso690\r\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Change directory\r\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Clone repository\r\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\r\n    # Run texhash\r\n    texhash\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```\r\nこれでPDFやLatexでダウンロードできるようになりました。しかしbuildにかなり時間がかかります。(30分超)。\r\n最初の一回だけならまだいいのですがこのDockerfileだと\r\n```bash\r\nCOPY requirements.txt /tmp/requirements.txt\r\n...\r\n...\r\npip install -r /tmp/requirements.txt &amp;&amp; \\\r\n```\r\nこの部分でpythonのパッケージをpipでインストールしています。\r\n**pandas**などのパッケージを追加する場合はrequirements.txtに**pandas**を追記してbuildするようになります。\r\nこのままだとライブラリを追加する度に30分以上かかり<span class=\"under_line\">めんどくさい</span>のでDockerfileは最小限にして**JupyterLab**,**texlive-full**のインストールはDockerImage側でするようなDockerImageを用意します。\r\n\r\n## JupyterLab,exlive-full 環境構築のためのDockerFile\r\nDockerImageを作るためのDockerfileです。\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\n\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install jupyterlab\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nADD xelatex/packages.txt .\r\nRUN apt-get update &amp;&amp; \\\r\n    # Install packages\r\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\r\n    # Removing documentation packages *after* installing them is kind of hacky,\r\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\r\n    # Remove more unnecessary stuff\r\n    apt-get clean -y &amp;&amp; \\\r\n    # Create directory for iso690\r\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Change directory\r\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Clone repository\r\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\r\n    # Run texhash\r\n    texhash\r\n```\r\ndocker-composer.yml\r\n\r\n```bash\r\nversion: &#039;3&#039;\r\n\r\nservices:\r\n  jupyterlab:\r\n    build: jupyterlab\r\n    hostname: jupyterlab\r\n    container_name: jupyterlab\r\n```\r\nこのDockerfileでは\r\n```bash\r\npip install jupyterlab\r\n...\r\nRUN jupyter labextension install jupyterlab_vim\r\n...\r\napt-get install -y $(cat packages.txt)\r\n```\r\n- Pythonパッケージは**JupyterLab**のみインストール\r\n- **JupyterLab**拡張機能のインストール\r\n- *texlive-full**\r\n\r\nとなってます。\r\n\r\n## DockerImageを生成しDockerHubへアップロード\r\n- DcokerHubでアカウント登録\r\n- DockerHubでリポジトリの作成\r\n上記が前提です。<a href=\"https://hub.docker.com/\" target=\"_brank\" rel=\"noopener noreferrer\">Docker Hub</a>\r\n\r\nDockerImageを生成\r\n```bash\r\n$docker-compose build\r\n```\r\n時間がかかります。\r\n...\r\n生成されたDockerImageを確認\r\n```bash\r\n$docker images\r\n```\r\n生成された**DckerImage**を確認できるかと思います。\r\n生成された**DockerImage**を**DockerHub**へPushします。\r\nまずはDockerHubへログイン\r\n```bash\r\n$ docker login\r\n# パスワードを入力してログイン\r\n```\r\n新規**DockerImage**をCommit\r\n```bash\r\n$docker commit -a &quot;webdimension&quot; -m &quot;jupyterlab and latex&quot; jupyterlab webdimension/jupyter-latex\r\n# docker commit -a &quot;作者名&quot; -m &quot;コメント&quot; 対象のイメージ名 DockerHubアカウント名/リポジトリ名\r\n```\r\n新規**DockerImage**をリポジトリへPush\r\n```bash\r\n$docker push webdimension/jupyter-latex\r\n# docker push DockerHubアカウント名/jupyter-リポジトリ名\r\n```\r\nこれまた時間がかかります。。。。\r\n無事Pushが完了すれば<a href=\"https://cloud.docker.com/repository/list\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubのレポジトリ</a>でも確認してみます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-03-at-11.45.33.png)\r\n\r\nこれで新規DockerImageをDockerHubへ登録できました。\r\n\r\n## DockerHubhw登録したDockerImageからJupyterLab環境を構築\r\ndocker-compose.yml\r\n```bash\r\nversion: &#039;3&#039;\r\n\r\nservices:\r\n  jupyterlab:\r\n    build: jupyterlab\r\n    hostname: jupyterlab\r\n    container_name: jupyterlab\r\n    ports:\r\n      - &quot;8888:8888&quot;\r\n    volumes:\r\n      - ../src:/opt/python/src\r\n      - ../jupyter:/opt/python/jupyter\r\n      - ./jupyterlab:/opt/python/jupyterlab\r\n      - ./jupyterlab/library:/opt/python/librar\r\n```\r\n\r\n\r\nDockerfile\r\n```bash\r\nFROM webdimension/jupyter-latex\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/src &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n\r\n```\r\nBuildは\r\n- Pythonパッケージのインストール\r\n- JupyterLabの設定\r\n\r\nとシンプルになりとBuild時間も数秒になりました。\r\n',438,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/438-revision-v1/',0,'revision','',0),(451,1,'2019-11-03 12:05:00','2019-11-03 03:05:00','<p>AIや機械学習で遊ぶため(お勉強)<strong>JupyterLab</strong>の環境をDockerで作りました。\n<strong>JupyterLab</strong>は動いたのですがPDFやLetaxでダウンロードするには<strong>texlive-full</strong>を追加しなければいけないことになった。       </p>\n<p>しかし、<strong>texlive-full</strong>のBuild(docker-composer buildとか)にかなり時間がかかりました。(30分超)\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。   </p>\n<p>再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので<strong>texlive-full</strong>のインストールを<strong>Dockerfile</strong>ではなく<strong>DockerImage</strong>内でインストールしておく<strong>DockerImage</strong>を作成。<br />\n作成した<strong>DockerImage</strong>を<a href=\"https://cloud.docker.com/repository/docker/webdimension/jupyter-latex\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubへ、Sourceを<a href=\"https://gitlab.com/webdimension/python\" target=\"_blank\" rel=\"noopener noreferrer\">GitLab</a>へ登録しました。</p>\n<h2>既存の DockerImageからJupyterLabを構築</h2>\n<p>ネットからほぼコピペのDockerfileだと</p>\n<pre><code>FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>\n<p>これでも<strong>JupyteLab</strong>自体動作しますがメニューの\n&quot;File -&gt; Export Nootebook as &quot;からPDFやLatexでダウンロードしようとするとエラーが発生。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-02-at-16.20.03.png\" alt=\"\" /></p>\n<p>調べたところ<strong>texlive-full</strong>をインストールすれば解決するらしい。\n<strong>texlive-full</strong>のインストールを追記した<strong>Dockerfile</strong>が以下。</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\n\nADD xelatex/packages.txt .\nRUN apt-get update &amp;&amp; \\\n    # Install packages\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\n    # Removing documentation packages *after* installing them is kind of hacky,\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\n    # Remove more unnecessary stuff\n    apt-get clean -y &amp;&amp; \\\n    # Create directory for iso690\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Change directory\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Clone repository\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\n    # Run texhash\n    texhash\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>\n<p>これでPDFやLatexでダウンロードできるようになりました。しかしbuildにかなり時間がかかります。(30分超)。\n最初の一回だけならまだいいのですがこのDockerfileだと</p>\n<pre><code class=\"language-bash\">COPY requirements.txt /tmp/requirements.txt\n...\n...\npip install -r /tmp/requirements.txt &amp;&amp; \\</code></pre>\n<p>この部分でpythonのパッケージをpipでインストールしています。\n<strong>pandas</strong>などのパッケージを追加する場合はrequirements.txtに<strong>pandas</strong>を追記してbuildするようになります。\nこのままだとライブラリを追加する度に30分以上かかり<span class=\"under_line\">めんどくさい</span>のでDockerfileは最小限にして<strong>JupyterLab</strong>,<strong>texlive-full</strong>のインストールはDockerImage側でするようなDockerImageを用意します。</p>\n<h2>JupyterLab,exlive-full 環境構築のためのDockerFile</h2>\n<p>DockerImageを作るためのDockerfileです。</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\n\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install jupyterlab\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nADD xelatex/packages.txt .\nRUN apt-get update &amp;&amp; \\\n    # Install packages\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\n    # Removing documentation packages *after* installing them is kind of hacky,\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\n    # Remove more unnecessary stuff\n    apt-get clean -y &amp;&amp; \\\n    # Create directory for iso690\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Change directory\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Clone repository\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\n    # Run texhash\n    texhash</code></pre>\n<p>docker-composer.yml</p>\n<pre><code class=\"language-bash\">version: &#039;3&#039;\n\nservices:\n  jupyterlab:\n    build: jupyterlab\n    hostname: jupyterlab\n    container_name: jupyterlab</code></pre>\n<p>このDockerfileでは</p>\n<pre><code class=\"language-bash\">pip install jupyterlab\n...\nRUN jupyter labextension install jupyterlab_vim\n...\napt-get install -y $(cat packages.txt)</code></pre>\n<ul>\n<li>Pythonパッケージは<strong>JupyterLab</strong>のみインストール</li>\n<li><strong>JupyterLab</strong>拡張機能のインストール</li>\n<li>*texlive-full**</li>\n</ul>\n<p>となってます。</p>\n<h2>DockerImageを生成しDockerHubへアップロード</h2>\n<ul>\n<li>DcokerHubでアカウント登録</li>\n<li>DockerHubでリポジトリの作成\n上記が前提です。<a href=\"https://hub.docker.com/\" target=\"_brank\" rel=\"noopener noreferrer\">Docker Hub</a></li>\n</ul>\n<p>DockerImageを生成</p>\n<pre><code class=\"language-bash\">$docker-compose build</code></pre>\n<p>時間がかかります。\n...\n生成されたDockerImageを確認</p>\n<pre><code class=\"language-bash\">$docker images</code></pre>\n<p>生成された<strong>DckerImage</strong>を確認できるかと思います。\n生成された<strong>DockerImage</strong>を<strong>DockerHub</strong>へPushします。\nまずはDockerHubへログイン</p>\n<pre><code class=\"language-bash\">$ docker login\n# パスワードを入力してログイン</code></pre>\n<p>新規<strong>DockerImage</strong>をCommit</p>\n<pre><code class=\"language-bash\">$docker commit -a &quot;webdimension&quot; -m &quot;jupyterlab and latex&quot; jupyterlab webdimension/jupyter-latex\n# docker commit -a &quot;作者名&quot; -m &quot;コメント&quot; 対象のイメージ名 DockerHubアカウント名/リポジトリ名</code></pre>\n<p>新規<strong>DockerImage</strong>をリポジトリへPush</p>\n<pre><code class=\"language-bash\">$docker push webdimension/jupyter-latex\n# docker push DockerHubアカウント名/jupyter-リポジトリ名</code></pre>\n<p>これまた時間がかかります。。。。\n無事Pushが完了すれば<a href=\"https://cloud.docker.com/repository/list\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubのレポジトリ</a>でも確認してみます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-03-at-11.45.33.png\" alt=\"\" /></p>\n<p>これで新規DockerImageをDockerHubへ登録できました。</p>\n<h2>DockerHubhw登録したDockerImageからJupyterLab環境を構築</h2>\n<p>docker-compose.yml</p>\n<pre><code class=\"language-bash\">version: &#039;3&#039;\n\nservices:\n  jupyterlab:\n    build: jupyterlab\n    hostname: jupyterlab\n    container_name: jupyterlab\n    ports:\n      - &quot;8888:8888&quot;\n    volumes:\n      - ../src:/opt/python/src\n      - ../jupyter:/opt/python/jupyter\n      - ./jupyterlab:/opt/python/jupyterlab\n      - ./jupyterlab/library:/opt/python/librar</code></pre>\n<p>Dockerfile</p>\n<pre><code class=\"language-bash\">FROM webdimension/jupyter-latex\nENV PYTHONPATH &quot;/opt/python/library&quot;\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/src &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\n</code></pre>\n<p>Buildは</p>\n<ul>\n<li>Pythonパッケージのインストール</li>\n<li>JupyterLabの設定</li>\n</ul>\n<p>とシンプルになりとBuild時間も数秒になりました。</p>','JupyterLab on Docker でPDFやLatexでダウンロードできるまで','既存のDockerイメージ(python:3.7.3-slim-stretch)にtexlive-fullをインストールしDockerHubへPushするまで。','inherit','closed','closed','','438-revision-v1','','','2019-11-03 12:05:00','2019-11-03 03:05:00','AIや機械学習で遊ぶため(お勉強)**JupyterLab**の環境をDockerで作りました。\r\n**JupyterLab**は動いたのですがPDFやLetaxでダウンロードするには**texlive-full**を追加しなければいけないことになった。		\r\n\r\nしかし、**texlive-full**のBuild(docker-composer buildとか)にかなり時間がかかりました。(30分超)	\r\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。	\r\n\r\n再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので**texlive-full**のインストールを**Dockerfile**ではなく**DockerImage**内でインストールしておく**DockerImage**を作成。		\r\n作成した**DockerImage**を<a href=\"https://cloud.docker.com/repository/docker/webdimension/jupyter-latex\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubへ、Sourceを<a href=\"https://gitlab.com/webdimension/python\" target=\"_blank\" rel=\"noopener noreferrer\">GitLab</a>へ登録しました。\r\n\r\n\r\n## 既存の DockerImageからJupyterLabを構築\r\nネットからほぼコピペのDockerfileだと\r\n```\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\n\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```\r\nこれでも**JupyteLab**自体動作しますがメニューの\r\n\"File -> Export Nootebook as \"からPDFやLatexでダウンロードしようとするとエラーが発生。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-02-at-16.20.03.png)\r\n\r\n調べたところ**texlive-full**をインストールすれば解決するらしい。\r\n**texlive-full**のインストールを追記した**Dockerfile**が以下。\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\n\r\nADD xelatex/packages.txt .\r\nRUN apt-get update &amp;&amp; \\\r\n    # Install packages\r\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\r\n    # Removing documentation packages *after* installing them is kind of hacky,\r\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\r\n    # Remove more unnecessary stuff\r\n    apt-get clean -y &amp;&amp; \\\r\n    # Create directory for iso690\r\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Change directory\r\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Clone repository\r\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\r\n    # Run texhash\r\n    texhash\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```\r\nこれでPDFやLatexでダウンロードできるようになりました。しかしbuildにかなり時間がかかります。(30分超)。\r\n最初の一回だけならまだいいのですがこのDockerfileだと\r\n```bash\r\nCOPY requirements.txt /tmp/requirements.txt\r\n...\r\n...\r\npip install -r /tmp/requirements.txt &amp;&amp; \\\r\n```\r\nこの部分でpythonのパッケージをpipでインストールしています。\r\n**pandas**などのパッケージを追加する場合はrequirements.txtに**pandas**を追記してbuildするようになります。\r\nこのままだとライブラリを追加する度に30分以上かかり<span class=\"under_line\">めんどくさい</span>のでDockerfileは最小限にして**JupyterLab**,**texlive-full**のインストールはDockerImage側でするようなDockerImageを用意します。\r\n\r\n## JupyterLab,exlive-full 環境構築のためのDockerFile\r\nDockerImageを作るためのDockerfileです。\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\n\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install jupyterlab\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nADD xelatex/packages.txt .\r\nRUN apt-get update &amp;&amp; \\\r\n    # Install packages\r\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\r\n    # Removing documentation packages *after* installing them is kind of hacky,\r\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\r\n    # Remove more unnecessary stuff\r\n    apt-get clean -y &amp;&amp; \\\r\n    # Create directory for iso690\r\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Change directory\r\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Clone repository\r\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\r\n    # Run texhash\r\n    texhash\r\n```\r\ndocker-composer.yml\r\n\r\n```bash\r\nversion: &#039;3&#039;\r\n\r\nservices:\r\n  jupyterlab:\r\n    build: jupyterlab\r\n    hostname: jupyterlab\r\n    container_name: jupyterlab\r\n```\r\nこのDockerfileでは\r\n```bash\r\npip install jupyterlab\r\n...\r\nRUN jupyter labextension install jupyterlab_vim\r\n...\r\napt-get install -y $(cat packages.txt)\r\n```\r\n- Pythonパッケージは**JupyterLab**のみインストール\r\n- **JupyterLab**拡張機能のインストール\r\n- *texlive-full**\r\n\r\nとなってます。\r\n\r\n## DockerImageを生成しDockerHubへアップロード\r\n- DcokerHubでアカウント登録\r\n- DockerHubでリポジトリの作成\r\n上記が前提です。<a href=\"https://hub.docker.com/\" target=\"_brank\" rel=\"noopener noreferrer\">Docker Hub</a>\r\n\r\nDockerImageを生成\r\n```bash\r\n$docker-compose build\r\n```\r\n時間がかかります。\r\n...\r\n生成されたDockerImageを確認\r\n```bash\r\n$docker images\r\n```\r\n生成された**DckerImage**を確認できるかと思います。\r\n生成された**DockerImage**を**DockerHub**へPushします。\r\nまずはDockerHubへログイン\r\n```bash\r\n$ docker login\r\n# パスワードを入力してログイン\r\n```\r\n新規**DockerImage**をCommit\r\n```bash\r\n$docker commit -a &quot;webdimension&quot; -m &quot;jupyterlab and latex&quot; jupyterlab webdimension/jupyter-latex\r\n# docker commit -a &quot;作者名&quot; -m &quot;コメント&quot; 対象のイメージ名 DockerHubアカウント名/リポジトリ名\r\n```\r\n新規**DockerImage**をリポジトリへPush\r\n```bash\r\n$docker push webdimension/jupyter-latex\r\n# docker push DockerHubアカウント名/jupyter-リポジトリ名\r\n```\r\nこれまた時間がかかります。。。。\r\n無事Pushが完了すれば<a href=\"https://cloud.docker.com/repository/list\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubのレポジトリ</a>でも確認してみます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-03-at-11.45.33.png)\r\n\r\nこれで新規DockerImageをDockerHubへ登録できました。\r\n\r\n## DockerHubhw登録したDockerImageからJupyterLab環境を構築\r\ndocker-compose.yml\r\n```bash\r\nversion: &#039;3&#039;\r\n\r\nservices:\r\n  jupyterlab:\r\n    build: jupyterlab\r\n    hostname: jupyterlab\r\n    container_name: jupyterlab\r\n    ports:\r\n      - &quot;8888:8888&quot;\r\n    volumes:\r\n      - ../src:/opt/python/src\r\n      - ../jupyter:/opt/python/jupyter\r\n      - ./jupyterlab:/opt/python/jupyterlab\r\n      - ./jupyterlab/library:/opt/python/librar\r\n```\r\n\r\n\r\nDockerfile\r\n```bash\r\nFROM webdimension/jupyter-latex\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/src &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n\r\n```\r\nBuildは\r\n- Pythonパッケージのインストール\r\n- JupyterLabの設定\r\n\r\nとシンプルになりとBuild時間も数秒になりました。\r\n',438,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/438-revision-v1/',0,'revision','',0),(452,1,'2019-11-03 12:06:57','2019-11-03 03:06:57','<p>AIや機械学習で遊ぶため(お勉強)<strong>JupyterLab</strong>の環境をDockerで作りました。\n<strong>JupyterLab</strong>は動いたのですがPDFやLetaxでダウンロードするには<strong>texlive-full</strong>を追加しなければいけないことになった。       </p>\n<p>しかし、<strong>texlive-full</strong>のBuild(docker-composer buildとか)にかなり時間がかかりました。(30分超)\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。   </p>\n<p>再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので<strong>texlive-full</strong>のインストールを<strong>Dockerfile</strong>ではなく<strong>DockerImage</strong>内でインストールしておく<strong>DockerImage</strong>を作成。<br />\n作成した<strong>DockerImage</strong>を<a href=\"https://cloud.docker.com/repository/docker/webdimension/jupyter-latex\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHub</a>へ、Sourceを<a href=\"https://gitlab.com/webdimension/python\" target=\"_blank\" rel=\"noopener noreferrer\">GitLab</a>へ登録しました。</p>\n<h2>既存の DockerImageからJupyterLabを構築</h2>\n<p>ネットからほぼコピペのDockerfileだと</p>\n<pre><code>FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>\n<p>これでも<strong>JupyteLab</strong>自体動作しますがメニューの\n&quot;File -&gt; Export Nootebook as &quot;からPDFやLatexでダウンロードしようとするとエラーが発生。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-02-at-16.20.03.png\" alt=\"\" /></p>\n<p>調べたところ<strong>texlive-full</strong>をインストールすれば解決するらしい。\n<strong>texlive-full</strong>のインストールを追記した<strong>Dockerfile</strong>が以下。</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\n\nADD xelatex/packages.txt .\nRUN apt-get update &amp;&amp; \\\n    # Install packages\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\n    # Removing documentation packages *after* installing them is kind of hacky,\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\n    # Remove more unnecessary stuff\n    apt-get clean -y &amp;&amp; \\\n    # Create directory for iso690\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Change directory\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Clone repository\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\n    # Run texhash\n    texhash\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>\n<p>これでPDFやLatexでダウンロードできるようになりました。しかしbuildにかなり時間がかかります。(30分超)。\n最初の一回だけならまだいいのですがこのDockerfileだと</p>\n<pre><code class=\"language-bash\">COPY requirements.txt /tmp/requirements.txt\n...\n...\npip install -r /tmp/requirements.txt &amp;&amp; \\</code></pre>\n<p>この部分でpythonのパッケージをpipでインストールしています。\n<strong>pandas</strong>などのパッケージを追加する場合はrequirements.txtに<strong>pandas</strong>を追記してbuildするようになります。\nこのままだとライブラリを追加する度に30分以上かかり<span class=\"under_line\">めんどくさい</span>のでDockerfileは最小限にして<strong>JupyterLab</strong>,<strong>texlive-full</strong>のインストールはDockerImage側でするようなDockerImageを用意します。</p>\n<h2>JupyterLab,exlive-full 環境構築のためのDockerFile</h2>\n<p>DockerImageを作るためのDockerfileです。</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\n\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install jupyterlab\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nADD xelatex/packages.txt .\nRUN apt-get update &amp;&amp; \\\n    # Install packages\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\n    # Removing documentation packages *after* installing them is kind of hacky,\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\n    # Remove more unnecessary stuff\n    apt-get clean -y &amp;&amp; \\\n    # Create directory for iso690\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Change directory\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Clone repository\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\n    # Run texhash\n    texhash</code></pre>\n<p>docker-composer.yml</p>\n<pre><code class=\"language-bash\">version: &#039;3&#039;\n\nservices:\n  jupyterlab:\n    build: jupyterlab\n    hostname: jupyterlab\n    container_name: jupyterlab</code></pre>\n<p>このDockerfileでは</p>\n<pre><code class=\"language-bash\">pip install jupyterlab\n...\nRUN jupyter labextension install jupyterlab_vim\n...\napt-get install -y $(cat packages.txt)</code></pre>\n<ul>\n<li>Pythonパッケージは<strong>JupyterLab</strong>のみインストール</li>\n<li><strong>JupyterLab</strong>拡張機能のインストール</li>\n<li>*texlive-full**</li>\n</ul>\n<p>となってます。</p>\n<h2>DockerImageを生成しDockerHubへアップロード</h2>\n<ul>\n<li>DcokerHubでアカウント登録</li>\n<li>DockerHubでリポジトリの作成\n上記が前提です。<a href=\"https://hub.docker.com/\" target=\"_brank\" rel=\"noopener noreferrer\">Docker Hub</a></li>\n</ul>\n<p>DockerImageを生成</p>\n<pre><code class=\"language-bash\">$docker-compose build</code></pre>\n<p>時間がかかります。\n...\n生成されたDockerImageを確認</p>\n<pre><code class=\"language-bash\">$docker images</code></pre>\n<p>生成された<strong>DckerImage</strong>を確認できるかと思います。\n生成された<strong>DockerImage</strong>を<strong>DockerHub</strong>へPushします。\nまずはDockerHubへログイン</p>\n<pre><code class=\"language-bash\">$ docker login\n# パスワードを入力してログイン</code></pre>\n<p>新規<strong>DockerImage</strong>をCommit</p>\n<pre><code class=\"language-bash\">$docker commit -a &quot;webdimension&quot; -m &quot;jupyterlab and latex&quot; jupyterlab webdimension/jupyter-latex\n# docker commit -a &quot;作者名&quot; -m &quot;コメント&quot; 対象のイメージ名 DockerHubアカウント名/リポジトリ名</code></pre>\n<p>新規<strong>DockerImage</strong>をリポジトリへPush</p>\n<pre><code class=\"language-bash\">$docker push webdimension/jupyter-latex\n# docker push DockerHubアカウント名/jupyter-リポジトリ名</code></pre>\n<p>これまた時間がかかります。。。。\n無事Pushが完了すれば<a href=\"https://cloud.docker.com/repository/list\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubのレポジトリ</a>でも確認してみます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-03-at-11.45.33.png\" alt=\"\" /></p>\n<p>これで新規DockerImageをDockerHubへ登録できました。</p>\n<h2>DockerHubhw登録したDockerImageからJupyterLab環境を構築</h2>\n<p>docker-compose.yml</p>\n<pre><code class=\"language-bash\">version: &#039;3&#039;\n\nservices:\n  jupyterlab:\n    build: jupyterlab\n    hostname: jupyterlab\n    container_name: jupyterlab\n    ports:\n      - &quot;8888:8888&quot;\n    volumes:\n      - ../src:/opt/python/src\n      - ../jupyter:/opt/python/jupyter\n      - ./jupyterlab:/opt/python/jupyterlab\n      - ./jupyterlab/library:/opt/python/librar</code></pre>\n<p>Dockerfile</p>\n<pre><code class=\"language-bash\">FROM webdimension/jupyter-latex\nENV PYTHONPATH &quot;/opt/python/library&quot;\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/src &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\n</code></pre>\n<p>Buildは</p>\n<ul>\n<li>Pythonパッケージのインストール</li>\n<li>JupyterLabの設定</li>\n</ul>\n<p>とシンプルになりとBuild時間も数秒になりました。</p>','JupyterLab on Docker でPDFやLatexでダウンロードできるまで','既存のDockerイメージ(python:3.7.3-slim-stretch)にtexlive-fullをインストールしDockerHubへPushするまで。','inherit','closed','closed','','438-revision-v1','','','2019-11-03 12:06:57','2019-11-03 03:06:57','AIや機械学習で遊ぶため(お勉強)**JupyterLab**の環境をDockerで作りました。\r\n**JupyterLab**は動いたのですがPDFやLetaxでダウンロードするには**texlive-full**を追加しなければいけないことになった。		\r\n\r\nしかし、**texlive-full**のBuild(docker-composer buildとか)にかなり時間がかかりました。(30分超)	\r\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。	\r\n\r\n再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので**texlive-full**のインストールを**Dockerfile**ではなく**DockerImage**内でインストールしておく**DockerImage**を作成。		\r\n作成した**DockerImage**を<a href=\"https://cloud.docker.com/repository/docker/webdimension/jupyter-latex\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHub</a>へ、Sourceを<a href=\"https://gitlab.com/webdimension/python\" target=\"_blank\" rel=\"noopener noreferrer\">GitLab</a>へ登録しました。\r\n\r\n\r\n## 既存の DockerImageからJupyterLabを構築\r\nネットからほぼコピペのDockerfileだと\r\n\r\n```\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\n\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```\r\nこれでも**JupyteLab**自体動作しますがメニューの\r\n\"File -> Export Nootebook as \"からPDFやLatexでダウンロードしようとするとエラーが発生。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-02-at-16.20.03.png)\r\n\r\n調べたところ**texlive-full**をインストールすれば解決するらしい。\r\n**texlive-full**のインストールを追記した**Dockerfile**が以下。\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\n\r\nADD xelatex/packages.txt .\r\nRUN apt-get update &amp;&amp; \\\r\n    # Install packages\r\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\r\n    # Removing documentation packages *after* installing them is kind of hacky,\r\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\r\n    # Remove more unnecessary stuff\r\n    apt-get clean -y &amp;&amp; \\\r\n    # Create directory for iso690\r\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Change directory\r\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Clone repository\r\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\r\n    # Run texhash\r\n    texhash\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```\r\nこれでPDFやLatexでダウンロードできるようになりました。しかしbuildにかなり時間がかかります。(30分超)。\r\n最初の一回だけならまだいいのですがこのDockerfileだと\r\n```bash\r\nCOPY requirements.txt /tmp/requirements.txt\r\n...\r\n...\r\npip install -r /tmp/requirements.txt &amp;&amp; \\\r\n```\r\nこの部分でpythonのパッケージをpipでインストールしています。\r\n**pandas**などのパッケージを追加する場合はrequirements.txtに**pandas**を追記してbuildするようになります。\r\nこのままだとライブラリを追加する度に30分以上かかり<span class=\"under_line\">めんどくさい</span>のでDockerfileは最小限にして**JupyterLab**,**texlive-full**のインストールはDockerImage側でするようなDockerImageを用意します。\r\n\r\n## JupyterLab,exlive-full 環境構築のためのDockerFile\r\nDockerImageを作るためのDockerfileです。\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\n\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install jupyterlab\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nADD xelatex/packages.txt .\r\nRUN apt-get update &amp;&amp; \\\r\n    # Install packages\r\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\r\n    # Removing documentation packages *after* installing them is kind of hacky,\r\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\r\n    # Remove more unnecessary stuff\r\n    apt-get clean -y &amp;&amp; \\\r\n    # Create directory for iso690\r\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Change directory\r\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Clone repository\r\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\r\n    # Run texhash\r\n    texhash\r\n```\r\ndocker-composer.yml\r\n\r\n```bash\r\nversion: &#039;3&#039;\r\n\r\nservices:\r\n  jupyterlab:\r\n    build: jupyterlab\r\n    hostname: jupyterlab\r\n    container_name: jupyterlab\r\n```\r\nこのDockerfileでは\r\n```bash\r\npip install jupyterlab\r\n...\r\nRUN jupyter labextension install jupyterlab_vim\r\n...\r\napt-get install -y $(cat packages.txt)\r\n```\r\n- Pythonパッケージは**JupyterLab**のみインストール\r\n- **JupyterLab**拡張機能のインストール\r\n- *texlive-full**\r\n\r\nとなってます。\r\n\r\n## DockerImageを生成しDockerHubへアップロード\r\n- DcokerHubでアカウント登録\r\n- DockerHubでリポジトリの作成\r\n上記が前提です。<a href=\"https://hub.docker.com/\" target=\"_brank\" rel=\"noopener noreferrer\">Docker Hub</a>\r\n\r\nDockerImageを生成\r\n```bash\r\n$docker-compose build\r\n```\r\n時間がかかります。\r\n...\r\n生成されたDockerImageを確認\r\n```bash\r\n$docker images\r\n```\r\n生成された**DckerImage**を確認できるかと思います。\r\n生成された**DockerImage**を**DockerHub**へPushします。\r\nまずはDockerHubへログイン\r\n```bash\r\n$ docker login\r\n# パスワードを入力してログイン\r\n```\r\n新規**DockerImage**をCommit\r\n```bash\r\n$docker commit -a &quot;webdimension&quot; -m &quot;jupyterlab and latex&quot; jupyterlab webdimension/jupyter-latex\r\n# docker commit -a &quot;作者名&quot; -m &quot;コメント&quot; 対象のイメージ名 DockerHubアカウント名/リポジトリ名\r\n```\r\n新規**DockerImage**をリポジトリへPush\r\n```bash\r\n$docker push webdimension/jupyter-latex\r\n# docker push DockerHubアカウント名/jupyter-リポジトリ名\r\n```\r\nこれまた時間がかかります。。。。\r\n無事Pushが完了すれば<a href=\"https://cloud.docker.com/repository/list\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubのレポジトリ</a>でも確認してみます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-03-at-11.45.33.png)\r\n\r\nこれで新規DockerImageをDockerHubへ登録できました。\r\n\r\n## DockerHubhw登録したDockerImageからJupyterLab環境を構築\r\ndocker-compose.yml\r\n```bash\r\nversion: &#039;3&#039;\r\n\r\nservices:\r\n  jupyterlab:\r\n    build: jupyterlab\r\n    hostname: jupyterlab\r\n    container_name: jupyterlab\r\n    ports:\r\n      - &quot;8888:8888&quot;\r\n    volumes:\r\n      - ../src:/opt/python/src\r\n      - ../jupyter:/opt/python/jupyter\r\n      - ./jupyterlab:/opt/python/jupyterlab\r\n      - ./jupyterlab/library:/opt/python/librar\r\n```\r\n\r\n\r\nDockerfile\r\n```bash\r\nFROM webdimension/jupyter-latex\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/src &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n\r\n```\r\nBuildは\r\n- Pythonパッケージのインストール\r\n- JupyterLabの設定\r\n\r\nとシンプルになりとBuild時間も数秒になりました。\r\n',438,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/438-revision-v1/',0,'revision','',0),(453,1,'2019-11-03 12:07:58','2019-11-03 03:07:58','<p>AIや機械学習で遊ぶため(お勉強)<strong>JupyterLab</strong>の環境をDockerで作りました。\n<strong>JupyterLab</strong>は動いたのですがPDFやLetaxでダウンロードするには<strong>texlive-full</strong>を追加しなければいけないことになった。       </p>\n<p>しかし、<strong>texlive-full</strong>のBuild(docker-composer buildとか)にかなり時間がかかりました。(30分超)\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。   </p>\n<p>再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので<strong>texlive-full</strong>のインストールを<strong>Dockerfile</strong>ではなく<strong>DockerImage</strong>内でインストールしておく<strong>DockerImage</strong>を作成。<br />\n作成した<strong>DockerImage</strong>を<a href=\"https://cloud.docker.com/repository/docker/webdimension/jupyter-latex\" target=\"_blank\" rel=\"noopener noreferrer\">DockerHub</a>へ、Sourceを<a href=\"https://gitlab.com/webdimension/python\" target=\"_blank\" rel=\"noopener noreferrer\">GitLab</a>へ登録しました。</p>\n<h2>既存の DockerImageからJupyterLabを構築</h2>\n<p>ネットからほぼコピペのDockerfileだと</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>\n<p>これでも<strong>JupyteLab</strong>自体動作しますがメニューの\n&quot;File -&gt; Export Nootebook as &quot;からPDFやLatexでダウンロードしようとするとエラーが発生。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-02-at-16.20.03.png\" alt=\"\" /></p>\n<p>調べたところ<strong>texlive-full</strong>をインストールすれば解決するらしい。\n<strong>texlive-full</strong>のインストールを追記した<strong>Dockerfile</strong>が以下。</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\n\nADD xelatex/packages.txt .\nRUN apt-get update &amp;&amp; \\\n    # Install packages\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\n    # Removing documentation packages *after* installing them is kind of hacky,\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\n    # Remove more unnecessary stuff\n    apt-get clean -y &amp;&amp; \\\n    # Create directory for iso690\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Change directory\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Clone repository\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\n    # Run texhash\n    texhash\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>\n<p>これでPDFやLatexでダウンロードできるようになりました。しかしbuildにかなり時間がかかります。(30分超)。\n最初の一回だけならまだいいのですがこのDockerfileだと</p>\n<pre><code class=\"language-bash\">COPY requirements.txt /tmp/requirements.txt\n...\n...\npip install -r /tmp/requirements.txt &amp;&amp; \\</code></pre>\n<p>この部分でpythonのパッケージをpipでインストールしています。\n<strong>pandas</strong>などのパッケージを追加する場合はrequirements.txtに<strong>pandas</strong>を追記してbuildするようになります。\nこのままだとライブラリを追加する度に30分以上かかり<span class=\"under_line\">めんどくさい</span>のでDockerfileは最小限にして<strong>JupyterLab</strong>,<strong>texlive-full</strong>のインストールはDockerImage側でするようなDockerImageを用意します。</p>\n<h2>JupyterLab,exlive-full 環境構築のためのDockerFile</h2>\n<p>DockerImageを作るためのDockerfileです。</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\n\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install jupyterlab\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nADD xelatex/packages.txt .\nRUN apt-get update &amp;&amp; \\\n    # Install packages\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\n    # Removing documentation packages *after* installing them is kind of hacky,\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\n    # Remove more unnecessary stuff\n    apt-get clean -y &amp;&amp; \\\n    # Create directory for iso690\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Change directory\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Clone repository\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\n    # Run texhash\n    texhash</code></pre>\n<p>docker-composer.yml</p>\n<pre><code class=\"language-bash\">version: &#039;3&#039;\n\nservices:\n  jupyterlab:\n    build: jupyterlab\n    hostname: jupyterlab\n    container_name: jupyterlab</code></pre>\n<p>このDockerfileでは</p>\n<pre><code class=\"language-bash\">pip install jupyterlab\n...\nRUN jupyter labextension install jupyterlab_vim\n...\napt-get install -y $(cat packages.txt)</code></pre>\n<ul>\n<li>Pythonパッケージは<strong>JupyterLab</strong>のみインストール</li>\n<li><strong>JupyterLab</strong>拡張機能のインストール</li>\n<li>*texlive-full**</li>\n</ul>\n<p>となってます。</p>\n<h2>DockerImageを生成しDockerHubへアップロード</h2>\n<ul>\n<li>DcokerHubでアカウント登録</li>\n<li>DockerHubでリポジトリの作成\n上記が前提です。<a href=\"https://hub.docker.com/\" target=\"_brank\" rel=\"noopener noreferrer\">Docker Hub</a></li>\n</ul>\n<p>DockerImageを生成</p>\n<pre><code class=\"language-bash\">$docker-compose build</code></pre>\n<p>時間がかかります。\n...\n生成されたDockerImageを確認</p>\n<pre><code class=\"language-bash\">$docker images</code></pre>\n<p>生成された<strong>DckerImage</strong>を確認できるかと思います。\n生成された<strong>DockerImage</strong>を<strong>DockerHub</strong>へPushします。\nまずはDockerHubへログイン</p>\n<pre><code class=\"language-bash\">$ docker login\n# パスワードを入力してログイン</code></pre>\n<p>新規<strong>DockerImage</strong>をCommit</p>\n<pre><code class=\"language-bash\">$docker commit -a &quot;webdimension&quot; -m &quot;jupyterlab and latex&quot; jupyterlab webdimension/jupyter-latex\n# docker commit -a &quot;作者名&quot; -m &quot;コメント&quot; 対象のイメージ名 DockerHubアカウント名/リポジトリ名</code></pre>\n<p>新規<strong>DockerImage</strong>をリポジトリへPush</p>\n<pre><code class=\"language-bash\">$docker push webdimension/jupyter-latex\n# docker push DockerHubアカウント名/jupyter-リポジトリ名</code></pre>\n<p>これまた時間がかかります。。。。\n無事Pushが完了すれば<a href=\"https://cloud.docker.com/repository/list\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubのレポジトリ</a>でも確認してみます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-03-at-11.45.33.png\" alt=\"\" /></p>\n<p>これで新規DockerImageをDockerHubへ登録できました。</p>\n<h2>DockerHubhw登録したDockerImageからJupyterLab環境を構築</h2>\n<p>docker-compose.yml</p>\n<pre><code class=\"language-bash\">version: &#039;3&#039;\n\nservices:\n  jupyterlab:\n    build: jupyterlab\n    hostname: jupyterlab\n    container_name: jupyterlab\n    ports:\n      - &quot;8888:8888&quot;\n    volumes:\n      - ../src:/opt/python/src\n      - ../jupyter:/opt/python/jupyter\n      - ./jupyterlab:/opt/python/jupyterlab\n      - ./jupyterlab/library:/opt/python/librar</code></pre>\n<p>Dockerfile</p>\n<pre><code class=\"language-bash\">FROM webdimension/jupyter-latex\nENV PYTHONPATH &quot;/opt/python/library&quot;\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/src &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\n</code></pre>\n<p>Buildは</p>\n<ul>\n<li>Pythonパッケージのインストール</li>\n<li>JupyterLabの設定</li>\n</ul>\n<p>とシンプルになりとBuild時間も数秒になりました。</p>','JupyterLab on Docker でPDFやLatexでダウンロードできるまで','既存のDockerイメージ(python:3.7.3-slim-stretch)にtexlive-fullをインストールしDockerHubへPushするまで。','inherit','closed','closed','','438-revision-v1','','','2019-11-03 12:07:58','2019-11-03 03:07:58','AIや機械学習で遊ぶため(お勉強)**JupyterLab**の環境をDockerで作りました。\r\n**JupyterLab**は動いたのですがPDFやLetaxでダウンロードするには**texlive-full**を追加しなければいけないことになった。		\r\n\r\nしかし、**texlive-full**のBuild(docker-composer buildとか)にかなり時間がかかりました。(30分超)	\r\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。	\r\n\r\n再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので**texlive-full**のインストールを**Dockerfile**ではなく**DockerImage**内でインストールしておく**DockerImage**を作成。		\r\n作成した**DockerImage**を<a href=\"https://cloud.docker.com/repository/docker/webdimension/jupyter-latex\" target=\"_blank\" rel=\"noopener noreferrer\">DockerHub</a>へ、Sourceを<a href=\"https://gitlab.com/webdimension/python\" target=\"_blank\" rel=\"noopener noreferrer\">GitLab</a>へ登録しました。\r\n\r\n\r\n## 既存の DockerImageからJupyterLabを構築\r\nネットからほぼコピペのDockerfileだと\r\n\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\n\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```\r\nこれでも**JupyteLab**自体動作しますがメニューの\r\n\"File -> Export Nootebook as \"からPDFやLatexでダウンロードしようとするとエラーが発生。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-02-at-16.20.03.png)\r\n\r\n調べたところ**texlive-full**をインストールすれば解決するらしい。\r\n**texlive-full**のインストールを追記した**Dockerfile**が以下。\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\n\r\nADD xelatex/packages.txt .\r\nRUN apt-get update &amp;&amp; \\\r\n    # Install packages\r\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\r\n    # Removing documentation packages *after* installing them is kind of hacky,\r\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\r\n    # Remove more unnecessary stuff\r\n    apt-get clean -y &amp;&amp; \\\r\n    # Create directory for iso690\r\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Change directory\r\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Clone repository\r\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\r\n    # Run texhash\r\n    texhash\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```\r\nこれでPDFやLatexでダウンロードできるようになりました。しかしbuildにかなり時間がかかります。(30分超)。\r\n最初の一回だけならまだいいのですがこのDockerfileだと\r\n```bash\r\nCOPY requirements.txt /tmp/requirements.txt\r\n...\r\n...\r\npip install -r /tmp/requirements.txt &amp;&amp; \\\r\n```\r\nこの部分でpythonのパッケージをpipでインストールしています。\r\n**pandas**などのパッケージを追加する場合はrequirements.txtに**pandas**を追記してbuildするようになります。\r\nこのままだとライブラリを追加する度に30分以上かかり<span class=\"under_line\">めんどくさい</span>のでDockerfileは最小限にして**JupyterLab**,**texlive-full**のインストールはDockerImage側でするようなDockerImageを用意します。\r\n\r\n## JupyterLab,exlive-full 環境構築のためのDockerFile\r\nDockerImageを作るためのDockerfileです。\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\n\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install jupyterlab\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nADD xelatex/packages.txt .\r\nRUN apt-get update &amp;&amp; \\\r\n    # Install packages\r\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\r\n    # Removing documentation packages *after* installing them is kind of hacky,\r\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\r\n    # Remove more unnecessary stuff\r\n    apt-get clean -y &amp;&amp; \\\r\n    # Create directory for iso690\r\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Change directory\r\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Clone repository\r\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\r\n    # Run texhash\r\n    texhash\r\n```\r\ndocker-composer.yml\r\n\r\n```bash\r\nversion: &#039;3&#039;\r\n\r\nservices:\r\n  jupyterlab:\r\n    build: jupyterlab\r\n    hostname: jupyterlab\r\n    container_name: jupyterlab\r\n```\r\nこのDockerfileでは\r\n```bash\r\npip install jupyterlab\r\n...\r\nRUN jupyter labextension install jupyterlab_vim\r\n...\r\napt-get install -y $(cat packages.txt)\r\n```\r\n- Pythonパッケージは**JupyterLab**のみインストール\r\n- **JupyterLab**拡張機能のインストール\r\n- *texlive-full**\r\n\r\nとなってます。\r\n\r\n## DockerImageを生成しDockerHubへアップロード\r\n- DcokerHubでアカウント登録\r\n- DockerHubでリポジトリの作成\r\n上記が前提です。<a href=\"https://hub.docker.com/\" target=\"_brank\" rel=\"noopener noreferrer\">Docker Hub</a>\r\n\r\nDockerImageを生成\r\n```bash\r\n$docker-compose build\r\n```\r\n時間がかかります。\r\n...\r\n生成されたDockerImageを確認\r\n```bash\r\n$docker images\r\n```\r\n生成された**DckerImage**を確認できるかと思います。\r\n生成された**DockerImage**を**DockerHub**へPushします。\r\nまずはDockerHubへログイン\r\n```bash\r\n$ docker login\r\n# パスワードを入力してログイン\r\n```\r\n新規**DockerImage**をCommit\r\n```bash\r\n$docker commit -a &quot;webdimension&quot; -m &quot;jupyterlab and latex&quot; jupyterlab webdimension/jupyter-latex\r\n# docker commit -a &quot;作者名&quot; -m &quot;コメント&quot; 対象のイメージ名 DockerHubアカウント名/リポジトリ名\r\n```\r\n新規**DockerImage**をリポジトリへPush\r\n```bash\r\n$docker push webdimension/jupyter-latex\r\n# docker push DockerHubアカウント名/jupyter-リポジトリ名\r\n```\r\nこれまた時間がかかります。。。。\r\n無事Pushが完了すれば<a href=\"https://cloud.docker.com/repository/list\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubのレポジトリ</a>でも確認してみます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-03-at-11.45.33.png)\r\n\r\nこれで新規DockerImageをDockerHubへ登録できました。\r\n\r\n## DockerHubhw登録したDockerImageからJupyterLab環境を構築\r\ndocker-compose.yml\r\n```bash\r\nversion: &#039;3&#039;\r\n\r\nservices:\r\n  jupyterlab:\r\n    build: jupyterlab\r\n    hostname: jupyterlab\r\n    container_name: jupyterlab\r\n    ports:\r\n      - &quot;8888:8888&quot;\r\n    volumes:\r\n      - ../src:/opt/python/src\r\n      - ../jupyter:/opt/python/jupyter\r\n      - ./jupyterlab:/opt/python/jupyterlab\r\n      - ./jupyterlab/library:/opt/python/librar\r\n```\r\n\r\n\r\nDockerfile\r\n```bash\r\nFROM webdimension/jupyter-latex\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/src &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n\r\n```\r\nBuildは\r\n- Pythonパッケージのインストール\r\n- JupyterLabの設定\r\n\r\nとシンプルになりとBuild時間も数秒になりました。\r\n',438,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/438-revision-v1/',0,'revision','',0),(454,1,'2019-11-03 12:10:23','2019-11-03 03:10:23','<p>AIや機械学習で遊ぶため(お勉強)<strong>JupyterLab</strong>の環境をDockerで作りました。\n<strong>JupyterLab</strong>は動いたのですがPDFやLetaxでダウンロードするには<strong>texlive-full</strong>を追加しなければいけないことになった。       </p>\n<p>しかし、<strong>texlive-full</strong>のBuild(docker-composer buildとか)にかなり時間がかかりました。(30分超)\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。   </p>\n<p>再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので<strong>texlive-full</strong>のインストールを<strong>Dockerfile</strong>ではなく<strong>DockerImage</strong>内でインストールしておく<strong>DockerImage</strong>を作成。<br />\n作成した<strong>DockerImage</strong>を<a href=\"https://cloud.docker.com/repository/docker/webdimension/jupyter-latex\" target=\"_blank\" rel=\"noopener noreferrer\">DockerHub</a>へ、Sourceを<a href=\"https://gitlab.com/webdimension/python\" target=\"_blank\" rel=\"noopener noreferrer\">GitLab</a>へ登録しました。</p>\n<h2>既存の DockerImageからJupyterLabを構築</h2>\n<p>ネットからほぼコピペのDockerfileだと</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>\n<p>これでも<strong>JupyteLab</strong>自体動作しますがメニューの\n&quot;File -&gt; Export Nootebook as &quot;からPDFやLatexでダウンロードしようとするとエラーが発生。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-02-at-16.20.03.png\" alt=\"\" /></p>\n<p>調べたところ<strong>texlive-full</strong>をインストールすれば解決するらしい。\n<strong>texlive-full</strong>のインストールを追記した<strong>Dockerfile</strong>が以下。</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nENV PYTHONPATH &quot;/opt/python/library&quot;\n\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    mkdir ~/.src &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nEXPOSE 8888\n\nADD xelatex/packages.txt .\nRUN apt-get update &amp;&amp; \\\n    # Install packages\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\n    # Removing documentation packages *after* installing them is kind of hacky,\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\n    # Remove more unnecessary stuff\n    apt-get clean -y &amp;&amp; \\\n    # Create directory for iso690\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Change directory\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Clone repository\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\n    # Run texhash\n    texhash\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]</code></pre>\n<p>これでPDFやLatexでダウンロードできるようになりました。しかしbuildにかなり時間がかかります。(30分超)。\n最初の一回だけならまだいいのですがこのDockerfileだと</p>\n<pre><code class=\"language-bash\">COPY requirements.txt /tmp/requirements.txt\n...\n...\npip install -r /tmp/requirements.txt &amp;&amp; \\</code></pre>\n<p>この部分でpythonのパッケージをpipでインストールしています。\n<strong>pandas</strong>などのパッケージを追加する場合はrequirements.txtに<strong>pandas</strong>を追記してbuildするようになります。\nこのままだとライブラリを追加する度に30分以上かかり<span class=\"under_line\">めんどくさい</span>のでDockerfileは最小限にして<strong>JupyterLab</strong>,<strong>texlive-full</strong>のインストールはDockerImage側でするようなDockerImageを用意します。</p>\n<h2>JupyterLab,exlive-full 環境構築のためのDockerFile</h2>\n<p>DockerImageを作るためのDockerfileです。</p>\n<pre><code class=\"language-bash\">FROM python:3.7.3-slim-stretch\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade\nRUN apt-get install -y \\\n    curl \\\n    gnupg \\\n    pandoc\n\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install jupyterlab\n\nRUN jupyter labextension install jupyterlab_vim \\\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\n      &amp;&amp; jupyter labextension install jupyterlab-recents\n\nADD xelatex/packages.txt .\nRUN apt-get update &amp;&amp; \\\n    # Install packages\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\n    # Removing documentation packages *after* installing them is kind of hacky,\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\n    # Remove more unnecessary stuff\n    apt-get clean -y &amp;&amp; \\\n    # Create directory for iso690\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Change directory\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\n    # Clone repository\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\n    # Run texhash\n    texhash</code></pre>\n<p>docker-composer.yml</p>\n<pre><code class=\"language-bash\">version: &#039;3&#039;\n\nservices:\n  jupyterlab:\n    build: jupyterlab\n    hostname: jupyterlab\n    container_name: jupyterlab</code></pre>\n<p>このDockerfileでは</p>\n<pre><code class=\"language-bash\">pip install jupyterlab\n...\nRUN jupyter labextension install jupyterlab_vim\n...\napt-get install -y $(cat packages.txt)</code></pre>\n<ul>\n<li>Pythonパッケージは<strong>JupyterLab</strong>のみインストール</li>\n<li><strong>JupyterLab</strong>拡張機能のインストール</li>\n<li>*texlive-full**</li>\n</ul>\n<p>となってます。</p>\n<h2>DockerImageを生成しDockerHubへアップロード</h2>\n<ul>\n<li>DcokerHubでアカウント登録</li>\n<li>DockerHubでリポジトリの作成\n上記が前提です。<a href=\"https://hub.docker.com/\" target=\"_brank\" rel=\"noopener noreferrer\">Docker Hub</a></li>\n</ul>\n<p>DockerImageを生成</p>\n<pre><code class=\"language-bash\">$docker-compose build</code></pre>\n<p>時間がかかります。\n...\n生成されたDockerImageを確認</p>\n<pre><code class=\"language-bash\">$docker images</code></pre>\n<p>生成された<strong>DckerImage</strong>を確認できるかと思います。\n生成された<strong>DockerImage</strong>を<strong>DockerHub</strong>へPushします。\nまずはDockerHubへログイン</p>\n<pre><code class=\"language-bash\">$ docker login\n# パスワードを入力してログイン</code></pre>\n<p>新規<strong>DockerImage</strong>をCommit</p>\n<pre><code class=\"language-bash\">$docker commit -a &quot;webdimension&quot; -m &quot;jupyterlab and latex&quot; jupyterlab webdimension/jupyter-latex\n# docker commit -a &quot;作者名&quot; -m &quot;コメント&quot; 対象のイメージ名 DockerHubアカウント名/リポジトリ名</code></pre>\n<p>新規<strong>DockerImage</strong>をリポジトリへPush</p>\n<pre><code class=\"language-bash\">$docker push webdimension/jupyter-latex\n# docker push DockerHubアカウント名/jupyter-リポジトリ名</code></pre>\n<p>これまた時間がかかります。。。。\n無事Pushが完了すれば<a href=\"https://cloud.docker.com/repository/list\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubのレポジトリ</a>でも確認してみます。</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-03-at-11.45.33.png\" alt=\"\" /></p>\n<p>これで新規DockerImageをDockerHubへ登録できました。</p>\n<h2>DockerHubへ登録したDockerImageからJupyterLab環境を構築</h2>\n<p>docker-compose.yml</p>\n<pre><code class=\"language-bash\">version: &#039;3&#039;\n\nservices:\n  jupyterlab:\n    build: jupyterlab\n    hostname: jupyterlab\n    container_name: jupyterlab\n    ports:\n      - &quot;8888:8888&quot;\n    volumes:\n      - ../src:/opt/python/src\n      - ../jupyter:/opt/python/jupyter\n      - ./jupyterlab:/opt/python/jupyterlab\n      - ./jupyterlab/library:/opt/python/librar</code></pre>\n<p>Dockerfile</p>\n<pre><code class=\"language-bash\">FROM webdimension/jupyter-latex\nENV PYTHONPATH &quot;/opt/python/library&quot;\nCOPY requirements.txt /tmp/requirements.txt\n\nRUN set -x &amp;&amp; \\\n    pip install -U pip &amp;&amp; \\\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\n    mkdir -p /opt/python/src &amp;&amp; \\\n    mkdir -p /opt/python/library &amp;&amp; \\\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\n    mkdir ~/.jupyter &amp;&amp; \\\n    rm /tmp/requirements.txt\n\nCOPY jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\n\nEXPOSE 8888\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\n</code></pre>\n<p>Buildは</p>\n<ul>\n<li>Pythonパッケージのインストール</li>\n<li>JupyterLabの設定</li>\n</ul>\n<p>とシンプルになりとBuild時間も数秒になりました。</p>','JupyterLab on Docker でPDFやLatexでダウンロードできるまで','既存のDockerイメージ(python:3.7.3-slim-stretch)にtexlive-fullをインストールしDockerHubへPushするまで。','inherit','closed','closed','','438-revision-v1','','','2019-11-03 12:10:23','2019-11-03 03:10:23','AIや機械学習で遊ぶため(お勉強)**JupyterLab**の環境をDockerで作りました。\r\n**JupyterLab**は動いたのですがPDFやLetaxでダウンロードするには**texlive-full**を追加しなければいけないことになった。		\r\n\r\nしかし、**texlive-full**のBuild(docker-composer buildとか)にかなり時間がかかりました。(30分超)	\r\n最初の一回だけならいいのですがPythonのライブラリを追加した場合などは再Buildすることになります。	\r\n\r\n再Buildの度に30分超の時間は<span class=\"under_line\">めんどくさい</span>ので**texlive-full**のインストールを**Dockerfile**ではなく**DockerImage**内でインストールしておく**DockerImage**を作成。		\r\n作成した**DockerImage**を<a href=\"https://cloud.docker.com/repository/docker/webdimension/jupyter-latex\" target=\"_blank\" rel=\"noopener noreferrer\">DockerHub</a>へ、Sourceを<a href=\"https://gitlab.com/webdimension/python\" target=\"_blank\" rel=\"noopener noreferrer\">GitLab</a>へ登録しました。\r\n\r\n\r\n## 既存の DockerImageからJupyterLabを構築\r\nネットからほぼコピペのDockerfileだと\r\n\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\n\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```\r\nこれでも**JupyteLab**自体動作しますがメニューの\r\n\"File -> Export Nootebook as \"からPDFやLatexでダウンロードしようとするとエラーが発生。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-02-at-16.20.03.png)\r\n\r\n調べたところ**texlive-full**をインストールすれば解決するらしい。\r\n**texlive-full**のインストールを追記した**Dockerfile**が以下。\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\n\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    mkdir ~/.src &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter/jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nEXPOSE 8888\r\n\r\nADD xelatex/packages.txt .\r\nRUN apt-get update &amp;&amp; \\\r\n    # Install packages\r\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\r\n    # Removing documentation packages *after* installing them is kind of hacky,\r\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\r\n    # Remove more unnecessary stuff\r\n    apt-get clean -y &amp;&amp; \\\r\n    # Create directory for iso690\r\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Change directory\r\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Clone repository\r\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\r\n    # Run texhash\r\n    texhash\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n```\r\nこれでPDFやLatexでダウンロードできるようになりました。しかしbuildにかなり時間がかかります。(30分超)。\r\n最初の一回だけならまだいいのですがこのDockerfileだと\r\n```bash\r\nCOPY requirements.txt /tmp/requirements.txt\r\n...\r\n...\r\npip install -r /tmp/requirements.txt &amp;&amp; \\\r\n```\r\nこの部分でpythonのパッケージをpipでインストールしています。\r\n**pandas**などのパッケージを追加する場合はrequirements.txtに**pandas**を追記してbuildするようになります。\r\nこのままだとライブラリを追加する度に30分以上かかり<span class=\"under_line\">めんどくさい</span>のでDockerfileは最小限にして**JupyterLab**,**texlive-full**のインストールはDockerImage側でするようなDockerImageを用意します。\r\n\r\n## JupyterLab,exlive-full 環境構築のためのDockerFile\r\nDockerImageを作るためのDockerfileです。\r\n```bash\r\nFROM python:3.7.3-slim-stretch\r\n\r\nRUN apt-get update &amp;&amp; apt-get -y upgrade\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg \\\r\n    pandoc\r\n\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install jupyterlab\r\n\r\nRUN jupyter labextension install jupyterlab_vim \\\r\n      &amp;&amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager \\\r\n      &amp;&amp; jupyter labextension install @jupyterlab/toc \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-favorites \\\r\n      &amp;&amp; jupyter labextension install jupyterlab-recents\r\n\r\nADD xelatex/packages.txt .\r\nRUN apt-get update &amp;&amp; \\\r\n    # Install packages\r\n    apt-get install -y $(cat packages.txt) &amp;&amp; \\\r\n    # Removing documentation packages *after* installing them is kind of hacky,\r\n    apt-get --purge remove -y .\\*-doc$ &amp;&amp; \\\r\n    # Remove more unnecessary stuff\r\n    apt-get clean -y &amp;&amp; \\\r\n    # Create directory for iso690\r\n    mkdir -p &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Change directory\r\n    cd &quot;$(kpsewhich -var-value TEXMFHOME)&quot; &amp;&amp; \\\r\n    # Clone repository\r\n    git clone https://github.com/michal-h21/biblatex-iso690.git &amp;&amp; \\\r\n    # Run texhash\r\n    texhash\r\n```\r\ndocker-composer.yml\r\n\r\n```bash\r\nversion: &#039;3&#039;\r\n\r\nservices:\r\n  jupyterlab:\r\n    build: jupyterlab\r\n    hostname: jupyterlab\r\n    container_name: jupyterlab\r\n```\r\nこのDockerfileでは\r\n```bash\r\npip install jupyterlab\r\n...\r\nRUN jupyter labextension install jupyterlab_vim\r\n...\r\napt-get install -y $(cat packages.txt)\r\n```\r\n- Pythonパッケージは**JupyterLab**のみインストール\r\n- **JupyterLab**拡張機能のインストール\r\n- *texlive-full**\r\n\r\nとなってます。\r\n\r\n## DockerImageを生成しDockerHubへアップロード\r\n- DcokerHubでアカウント登録\r\n- DockerHubでリポジトリの作成\r\n上記が前提です。<a href=\"https://hub.docker.com/\" target=\"_brank\" rel=\"noopener noreferrer\">Docker Hub</a>\r\n\r\nDockerImageを生成\r\n```bash\r\n$docker-compose build\r\n```\r\n時間がかかります。\r\n...\r\n生成されたDockerImageを確認\r\n```bash\r\n$docker images\r\n```\r\n生成された**DckerImage**を確認できるかと思います。\r\n生成された**DockerImage**を**DockerHub**へPushします。\r\nまずはDockerHubへログイン\r\n```bash\r\n$ docker login\r\n# パスワードを入力してログイン\r\n```\r\n新規**DockerImage**をCommit\r\n```bash\r\n$docker commit -a &quot;webdimension&quot; -m &quot;jupyterlab and latex&quot; jupyterlab webdimension/jupyter-latex\r\n# docker commit -a &quot;作者名&quot; -m &quot;コメント&quot; 対象のイメージ名 DockerHubアカウント名/リポジトリ名\r\n```\r\n新規**DockerImage**をリポジトリへPush\r\n```bash\r\n$docker push webdimension/jupyter-latex\r\n# docker push DockerHubアカウント名/jupyter-リポジトリ名\r\n```\r\nこれまた時間がかかります。。。。\r\n無事Pushが完了すれば<a href=\"https://cloud.docker.com/repository/list\" target=\"_brank\" rel=\"noopener noreferrer\">DockerHubのレポジトリ</a>でも確認してみます。\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2019/11/Screen-Shot-2019-11-03-at-11.45.33.png)\r\n\r\nこれで新規DockerImageをDockerHubへ登録できました。\r\n\r\n## DockerHubへ登録したDockerImageからJupyterLab環境を構築\r\ndocker-compose.yml\r\n```bash\r\nversion: &#039;3&#039;\r\n\r\nservices:\r\n  jupyterlab:\r\n    build: jupyterlab\r\n    hostname: jupyterlab\r\n    container_name: jupyterlab\r\n    ports:\r\n      - &quot;8888:8888&quot;\r\n    volumes:\r\n      - ../src:/opt/python/src\r\n      - ../jupyter:/opt/python/jupyter\r\n      - ./jupyterlab:/opt/python/jupyterlab\r\n      - ./jupyterlab/library:/opt/python/librar\r\n```\r\n\r\n\r\nDockerfile\r\n```bash\r\nFROM webdimension/jupyter-latex\r\nENV PYTHONPATH &quot;/opt/python/library&quot;\r\nCOPY requirements.txt /tmp/requirements.txt\r\n\r\n\r\nRUN set -x &amp;&amp; \\\r\n    pip install -U pip &amp;&amp; \\\r\n    pip install -r /tmp/requirements.txt &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyter &amp;&amp; \\\r\n    mkdir -p /opt/python/src &amp;&amp; \\\r\n    mkdir -p /opt/python/library &amp;&amp; \\\r\n    mkdir -p /opt/python/jupyterlab &amp;&amp; \\\r\n    mkdir ~/.jupyter &amp;&amp; \\\r\n    rm /tmp/requirements.txt\r\n\r\nCOPY jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py\r\n\r\nEXPOSE 8888\r\nCMD [&quot;jupyter&quot;, &quot;lab&quot;, &quot;--allow-root&quot;]\r\n\r\n```\r\nBuildは\r\n- Pythonパッケージのインストール\r\n- JupyterLabの設定\r\n\r\nとシンプルになりとBuild時間も数秒になりました。\r\n',438,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/438-revision-v1/',0,'revision','',0),(455,1,'2019-11-03 12:48:03','2019-11-03 03:48:03','','jupyterlab_logo','','inherit','closed','closed','','jupyterlab_logo','','','2019-11-03 12:48:03','2019-11-03 03:48:03','',438,'https://blog.webdimension.jp/wp-content/uploads/2019/11/jupyterlab_logo.png',0,'attachment','image/png',0),(456,1,'2019-11-06 19:26:54','2019-11-06 10:26:54','<p>sshログインをパスワード認証ではなく鍵認証にして ~/ssh/config に</p>\n<pre><code class=\"language-bash\">host vagrant.local\nHostName 192.168.33.11\nUser vagrant\nPort 22\nIdentityFile ~/.ssh/id_rsa</code></pre>\n<p>の様に設定を追加して</p>\n<pre><code class=\"language-bash\">ssh vagrant.local</code></pre>\n<p>でログイン。</p>\n<p>これはこれで大変便利なのですが、Hostの数が多くなるとHost名を覚えるのが<span class=\"under_line\">めんどくさい</span>。\n記憶力との戦いになる。戦わなくていい相手。</p>\n<p>Host一覧をプルダウンで表示させるスクリプトを考えてみた。\n(チョー簡単な内容です)</p>\n<pre><code class=\"language-bash\"> #!/bin/bash\n# grep host ~/.ssh/config | awk \'{print $2}\'\nssh_dir=$HOME/.ssh\nchmod 700  $ssh_dir\nchmod 600 $ssh_dir/*\narray=(<code>grep ^host $ssh_dir/config | awk &#039;{print $2}&#039;</code>)\narray_size=${#array[@]}\n# echo \"array size = $array_size\"\n\nn=0\nwhile [ $n -lt $array_size ] ;do\n     # eval echo \"\'[\'$n\']\'  ${array[$n]}\"\n      echo -e $\'\\e[96m\' \"[$n] ${array[$n]}\"\n    n=<code>expr $n + 1</code>\ndone\n\nread -p $\'\\e[93mEnter Number:\\e[0m\' number\nssh  ${array[$number]}</code></pre>\n<p>を sshs (仮)で保存および実行権限付与。</p>\n<p>~/.ssh/config が下記の場合</p>\n<pre><code class=\"language-bash\">host aaa.com\nHostName 192.168.33.1\nUser vagrant\nPort 22\nIdentityFile ~/.ssh/id_rsa\n\nhost bbb.com\nHostName 192.168.33.2\nUser vagrant\nPort 22\nIdentityFile ~/.ssh/id_rsa\n\nhost ccc.com\nHostName 192.168.33.3\nUser vagrant\nPort 22\nIdentityFile ~/.ssh/id_rsa</code></pre>\n<p>sshsの実行</p>\n<pre><code class=\"language-bash\">○ → sshs\n [0] aaa.com\n [1] bbb.com\n [2] ccc.com\nEnter Number:</code></pre>\n<p>目的のHostの番号を入力しエンター。</p>\n<p>たったこれだけですが非常に快適です。</p>','sshでのログインを快適に','sshでログインの際の手続きをちょっとのスクリプトで楽をする。記憶力とは戦わない。\r\n','inherit','closed','closed','','369-revision-v1','','','2019-11-06 19:26:54','2019-11-06 10:26:54','sshログインをパスワード認証ではなく鍵認証にして ~/ssh/config に\r\n\r\n```bash\r\nhost vagrant.local\r\nHostName 192.168.33.11\r\nUser vagrant\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n```\r\nの様に設定を追加して\r\n```bash\r\nssh vagrant.local\r\n```\r\nでログイン。\r\n\r\nこれはこれで大変便利なのですが、Hostの数が多くなるとHost名を覚えるのが<span class=\"under_line\">めんどくさい</span>。\r\n記憶力との戦いになる。戦わなくていい相手。\r\n\r\n Host一覧をプルダウンで表示させるスクリプトを考えてみた。\r\n (チョー簡単な内容です)\r\n \r\n ```bash\r\n #!/bin/bash\r\n# grep host ~/.ssh/config | awk \'{print $2}\'\r\nssh_dir=$HOME/.ssh\r\nchmod 700  $ssh_dir\r\nchmod 600 $ssh_dir/*\r\narray=(`grep ^host $ssh_dir/config | awk \'{print $2}\'`)\r\narray_size=${#array[@]}\r\n# echo \"array size = $array_size\"\r\n\r\nn=0\r\nwhile [ $n -lt $array_size ] ;do\r\n     # eval echo \"\'[\'$n\']\'  ${array[$n]}\"\r\n      echo -e $\'\\e[96m\' \"[$n] ${array[$n]}\"\r\n    n=`expr $n + 1`\r\ndone\r\n\r\nread -p $\'\\e[93mEnter Number:\\e[0m\' number\r\nssh  ${array[$number]}\r\n ```\r\n を sshs (仮)で保存および実行権限付与。\r\n \r\n~/.ssh/config が下記の場合\r\n```bash\r\nhost aaa.com\r\nHostName 192.168.33.1\r\nUser vagrant\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n\r\nhost bbb.com\r\nHostName 192.168.33.2\r\nUser vagrant\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n\r\nhost ccc.com\r\nHostName 192.168.33.3\r\nUser vagrant\r\nPort 22\r\nIdentityFile ~/.ssh/id_rsa\r\n```\r\n\r\nsshsの実行\r\n```bash\r\n○ → sshs\r\n [0] aaa.com\r\n [1] bbb.com\r\n [2] ccc.com\r\nEnter Number:\r\n```\r\n\r\n目的のHostの番号を入力しエンター。\r\n\r\nたったこれだけですが非常に快適です。\r\n\r\n',369,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/369-revision-v1/',0,'revision','',0),(461,1,'2020-02-14 13:10:22','0000-00-00 00:00:00','','Laravel on Docker','','draft','closed','open','','','','','2020-02-14 13:10:22','2020-02-14 04:10:22','',0,'https://blog.webdimension.jp/?p=461',0,'post','',0),(462,1,'2020-02-14 13:10:22','2020-02-14 04:10:22','','Laravel on Docker','','inherit','closed','closed','','461-revision-v1','','','2020-02-14 13:10:22','2020-02-14 04:10:22','',461,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/461-revision-v1/',0,'revision','',0),(463,1,'2020-02-15 15:48:05','2020-02-15 06:48:05','<h2>php-cs-fixer を設定する</h2>\n<h3>php-cs-fixer Install</h3>\n<pre><code class=\"language-bash\">composer install php-cs-fixer</code></pre>\n<h3>composer.jsonへScriptとして登録</h3>\n<p>vim composer.json\ncomposer fix-diff でrule違反箇所を確認\ncomposer fix でrule違反箇所を整形</p>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n        &quot;post-autoload-dump&quot;: [\n            &quot;Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump&quot;,\n            &quot;@php artisan package:discover --ansi&quot;\n        ],\n        &quot;post-root-package-install&quot;: [\n            &quot;@php -r \\&quot;file_exists(&#039;.env&#039;) || copy(&#039;.env.example&#039;, &#039;.env&#039;);\\&quot;&quot;\n        ],\n        &quot;post-create-project-cmd&quot;: [\n            &quot;@php artisan key:generate --ansi&quot;\n        ],\n        &quot;fix-diff&quot;: [\n            &quot;./vendor/bin/php-cs-fixer fix  --dry-run --diff&quot;\n        ],\n        &quot;fix&quot;: [\n            &quot;./vendor/bin/php-cs-fixer fix&quot;\n        ]\n    }</code></pre>\n<h3>IDEへの設定</h3>\n<p>例) Intelij idea</p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Quality Tools</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-15.18.48.png\" alt=\"\" /></p>\n<p>ルール違反箇所</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-15.21.18.png\" alt=\"\" /></p>\n<p><kbd>option</kbd> + <kbd>CR</kbd>\nで自動整形</p>\n<h3>php-cs-fixer 詳細設定</h3>\n<p>プロジェクトルートへ.php_cs.dist or .php_cs</p>\n<pre><code class=\"language-bash\">\n&lt;?php\n$finder = PhpCsFixer\\Finder::create()\n    -&gt;exclude(&#039;bootstrap&#039;)\n    -&gt;exclude(&#039;vendor&#039;)\n    -&gt;exclude(&#039;storage&#039;)\n    -&gt;exclude(&#039;node_module&#039;)\n    -&gt;exclude(&#039;public&#039;)\n    -&gt;exclude(&#039;resources&#039;)\n    -&gt;exclude(&#039;server.php&#039;)\n    -&gt;exclude(&#039;app/Console/Kernel.php&#039;)\n    -&gt;exclude(&#039;tests/CreatesApplication.php&#039;)\n    -&gt;in(__DIR__)\n    -&gt;name(&#039;*.php&#039;)\n    -&gt;notName(&#039;.php_cs&#039;)\n    -&gt;notName(&#039;*.blade.php&#039;)\n    -&gt;ignoreDotFiles(true)\n    -&gt;ignoreVCS(true)\n;\nreturn PhpCsFixer\\Config::create()\n    -&gt;setRiskyAllowed(true)\n    -&gt;setRules([\n        &#039;@PSR2&#039; =&gt; true,\n    //    &#039;align_multiline_comment&#039; =&gt; true,\n        &#039;array_syntax&#039; =&gt; [&#039;syntax&#039; =&gt; &#039;short&#039;],\n    //    &#039;binary_operator_spaces&#039; =&gt; true,\n    //    &#039;blank_line_after_opening_tag&#039; =&gt; true,\n    //    &#039;blank_line_before_statement&#039; =&gt; [&#039;statements&#039; =&gt; [&#039;declare&#039;, &#039;do&#039;, &#039;for&#039;, &#039;foreach&#039;, &#039;if&#039;, &#039;switch&#039;, &#039;try&#039;]],\n    //    &#039;cast_spaces&#039; =&gt; true,\n    //    &#039;class_attributes_separation&#039; =&gt; true,\n    //    &#039;combine_consecutive_issets&#039; =&gt; true,\n    //    &#039;combine_consecutive_unsets&#039; =&gt; true,\n    //    &#039;compact_nullable_typehint&#039; =&gt; true,\n    //    &#039;concat_space&#039; =&gt; [&#039;spacing&#039; =&gt; &#039;one&#039;],\n    //    &#039;declare_equal_normalize&#039; =&gt; true,\n    //    &#039;declare_strict_types&#039; =&gt; true,\n    //    &#039;dir_constant&#039; =&gt; true,\n    //    &#039;ereg_to_preg&#039; =&gt; true,\n    //    &#039;escape_implicit_backslashes&#039; =&gt; true,\n    //    &#039;explicit_indirect_variable&#039; =&gt; true,\n    //    &#039;explicit_string_variable&#039; =&gt; true,\n    //    &#039;final_internal_class&#039; =&gt; true,\n    //    &#039;function_to_constant&#039; =&gt; true,\n    //    &#039;function_typehint_space&#039; =&gt; true,\n    //    &#039;general_phpdoc_annotation_remove&#039; =&gt; [&#039;annotations&#039; =&gt; [&#039;class&#039;, &#039;package&#039;, &#039;author&#039;]],\n    //    &#039;hash_to_slash_comment&#039; =&gt; true,\n    //    &#039;heredoc_to_nowdoc&#039; =&gt; true,\n    //    &#039;include&#039; =&gt; true,\n    //    &#039;is_null&#039; =&gt; [&#039;use_yoda_style&#039; =&gt; false],\n    //    &#039;linebreak_after_opening_tag&#039; =&gt; true,\n    //    &#039;list_syntax&#039; =&gt; true,\n    //    &#039;lowercase_cast&#039; =&gt; true,\n    //    &#039;magic_constant_casing&#039; =&gt; true,\n    //    &#039;method_chaining_indentation&#039; =&gt; true,\n    //    &#039;method_separation&#039; =&gt; true,\n    //    &#039;modernize_types_casting&#039; =&gt; true,\n    //    &#039;native_function_casing&#039; =&gt; true,\n    //    &#039;no_alias_functions&#039; =&gt; true,\n    //    &#039;no_blank_lines_after_class_opening&#039; =&gt; true,\n    //    &#039;no_blank_lines_after_phpdoc&#039; =&gt; true,\n    //    &#039;no_empty_comment&#039; =&gt; true,\n    //    &#039;no_empty_phpdoc&#039; =&gt; true,\n    //    &#039;no_empty_statement&#039; =&gt; true,\n    //    &#039;no_extra_consecutive_blank_lines&#039; =&gt; [&#039;tokens&#039; =&gt; [&#039;break&#039;, &#039;continue&#039;, &#039;extra&#039;, &#039;return&#039;, &#039;throw&#039;, &#039;use&#039;, &#039;parenthesis_brace_block&#039;, &#039;square_brace_block&#039;, &#039;curly_brace_block&#039;]],\n    //    &#039;no_homoglyph_names&#039; =&gt; true,\n    //    &#039;no_leading_import_slash&#039; =&gt; true,\n    //    &#039;no_leading_namespace_whitespace&#039; =&gt; true,\n    //    &#039;no_mixed_echo_print&#039; =&gt; true,\n    //    &#039;no_multiline_whitespace_around_double_arrow&#039; =&gt; true,\n    //    &#039;no_multiline_whitespace_before_semicolons&#039; =&gt; true,\n    //    &#039;no_null_property_initialization&#039; =&gt; true,\n    //    &#039;no_php4_constructor&#039; =&gt; true,\n    //    &#039;no_short_bool_cast&#039; =&gt; true,\n    //    &#039;no_singleline_whitespace_before_semicolons&#039; =&gt; true,\n    //    &#039;no_spaces_around_offset&#039; =&gt; true,\n    //    &#039;no_trailing_comma_in_list_call&#039; =&gt; true,\n    //    &#039;no_trailing_comma_in_singleline_array&#039; =&gt; true,\n    //    &#039;no_unneeded_control_parentheses&#039; =&gt; true,\n    //    &#039;no_unneeded_curly_braces&#039; =&gt; true,\n    //    &#039;no_unneeded_final_method&#039; =&gt; true,\n    //    &#039;no_unreachable_default_argument_value&#039; =&gt; true,\n    //    &#039;no_unused_imports&#039; =&gt; true,\n    //    &#039;no_useless_else&#039; =&gt; true,\n    //    &#039;no_useless_return&#039; =&gt; true,\n    //    &#039;no_whitespace_before_comma_in_array&#039; =&gt; true,\n    //    &#039;no_whitespace_in_blank_line&#039; =&gt; true,\n    //    &#039;normalize_index_brace&#039; =&gt; true,\n    //    &#039;object_operator_without_whitespace&#039; =&gt; true,\n    //    &#039;ordered_class_elements&#039; =&gt; true,\n    //    &#039;ordered_imports&#039; =&gt; true,\n    //    &#039;php_unit_construct&#039; =&gt; true,\n    //    &#039;php_unit_dedicate_assert&#039; =&gt; true,\n    //    &#039;php_unit_mock&#039; =&gt; true,\n    //    &#039;php_unit_namespaced&#039; =&gt; true,\n    //    &#039;phpdoc_add_missing_param_annotation&#039; =&gt; [&#039;only_untyped&#039; =&gt; false],\n    //    &#039;phpdoc_align&#039; =&gt; [&#039;tags&#039; =&gt; [&#039;param&#039;]],\n    //    &#039;phpdoc_annotation_without_dot&#039; =&gt; true,\n    //    &#039;phpdoc_indent&#039; =&gt; true,\n    //    &#039;phpdoc_inline_tag&#039; =&gt; true,\n    //    &#039;phpdoc_no_access&#039; =&gt; true,\n    //    &#039;phpdoc_no_empty_return&#039; =&gt; true,\n    //    &#039;phpdoc_no_package&#039; =&gt; true,\n    //    &#039;phpdoc_order&#039; =&gt; true,\n    //    &#039;phpdoc_return_self_reference&#039; =&gt; true,\n    //    &#039;phpdoc_scalar&#039; =&gt; true,\n    //    &#039;phpdoc_single_line_var_spacing&#039; =&gt; true,\n    //    &#039;phpdoc_summary&#039; =&gt; true,\n    //    &#039;phpdoc_to_comment&#039; =&gt; true,\n    //    &#039;phpdoc_trim&#039; =&gt; true,\n    //    &#039;phpdoc_types&#039; =&gt; true,\n    //    &#039;phpdoc_types_order&#039; =&gt; true,\n    //    &#039;phpdoc_var_without_name&#039; =&gt; true,\n    //    &#039;pow_to_exponentiation&#039; =&gt; true,\n    //    &#039;protected_to_private&#039; =&gt; true,\n    //    &#039;random_api_migration&#039; =&gt; true,\n    //    &#039;return_type_declaration&#039; =&gt; true,\n    //    &#039;self_accessor&#039; =&gt; true,\n    //    &#039;semicolon_after_instruction&#039; =&gt; true,\n    //    &#039;short_scalar_cast&#039; =&gt; true,\n    //    &#039;simplified_null_return&#039; =&gt; true,\n    //    &#039;single_blank_line_before_namespace&#039; =&gt; true,\n    //    &#039;single_line_comment_style&#039; =&gt; true,\n    //    &#039;single_quote&#039; =&gt; true,\n    //    &#039;space_after_semicolon&#039; =&gt; [&#039;remove_in_empty_for_expressions&#039; =&gt; true],\n    //    &#039;standardize_not_equals&#039; =&gt; true,\n    //    &#039;ternary_operator_spaces&#039; =&gt; true,\n    //    &#039;ternary_to_null_coalescing&#039; =&gt; true,\n    //    &#039;trailing_comma_in_multiline_array&#039; =&gt; true,\n    //    &#039;trim_array_spaces&#039; =&gt; true,\n    //    &#039;unary_operator_spaces&#039; =&gt; true,\n    //    &#039;void_return&#039; =&gt; true,\n    //    &#039;whitespace_after_comma_in_array&#039; =&gt; true,\n    //    &#039;yoda_style&#039; =&gt; [&#039;equal&#039; =&gt; false, &#039;identical&#039; =&gt; false],\n    ])\n    -&gt;setFinder($finder);</code></pre>','php-cs-fixer - Laravelでの開発の前準備2','php-cs-fixerを導入しコーディングルールを設定。\r\nIDEに設定すればルール違反をリアルタイムで指摘してくれる。','publish','closed','open','','php-cs-fixer','','','2020-02-15 16:24:52','2020-02-15 07:24:52','## php-cs-fixer を設定する\r\n### php-cs-fixer Install\r\n```bash\r\ncomposer install php-cs-fixer\r\n```\r\n### composer.jsonへScriptとして登録\r\nvim composer.json\r\ncomposer fix-diff でrule違反箇所を確認\r\ncomposer fix でrule違反箇所を整形\r\n```bash\r\n    &quot;scripts&quot;: {\r\n        &quot;post-autoload-dump&quot;: [\r\n            &quot;Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump&quot;,\r\n            &quot;@php artisan package:discover --ansi&quot;\r\n        ],\r\n        &quot;post-root-package-install&quot;: [\r\n            &quot;@php -r \\&quot;file_exists(&#039;.env&#039;) || copy(&#039;.env.example&#039;, &#039;.env&#039;);\\&quot;&quot;\r\n        ],\r\n        &quot;post-create-project-cmd&quot;: [\r\n            &quot;@php artisan key:generate --ansi&quot;\r\n        ],\r\n        &quot;fix-diff&quot;: [\r\n            &quot;./vendor/bin/php-cs-fixer fix  --dry-run --diff&quot;\r\n        ],\r\n        &quot;fix&quot;: [\r\n            &quot;./vendor/bin/php-cs-fixer fix&quot;\r\n        ]\r\n    }\r\n```\r\n### IDEへの設定\r\n例) Intelij idea\r\n\r\nPreferences | Languages & Frameworks | PHP | Quality Tools\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-15.18.48.png)\r\n\r\nルール違反箇所\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-15.21.18.png)\r\n\r\n<kbd>option</kbd> + <kbd>CR</kbd>\r\nで自動整形\r\n### php-cs-fixer 詳細設定\r\nプロジェクトルートへ.php_cs.dist or .php_cs\r\n```bash\r\n\r\n&lt;?php\r\n$finder = PhpCsFixer\\Finder::create()\r\n    -&gt;exclude(&#039;bootstrap&#039;)\r\n    -&gt;exclude(&#039;vendor&#039;)\r\n    -&gt;exclude(&#039;storage&#039;)\r\n    -&gt;exclude(&#039;node_module&#039;)\r\n    -&gt;exclude(&#039;public&#039;)\r\n    -&gt;exclude(&#039;resources&#039;)\r\n    -&gt;exclude(&#039;server.php&#039;)\r\n    -&gt;exclude(&#039;app/Console/Kernel.php&#039;)\r\n    -&gt;exclude(&#039;tests/CreatesApplication.php&#039;)\r\n    -&gt;in(__DIR__)\r\n    -&gt;name(&#039;*.php&#039;)\r\n    -&gt;notName(&#039;.php_cs&#039;)\r\n    -&gt;notName(&#039;*.blade.php&#039;)\r\n    -&gt;ignoreDotFiles(true)\r\n    -&gt;ignoreVCS(true)\r\n;\r\nreturn PhpCsFixer\\Config::create()\r\n    -&gt;setRiskyAllowed(true)\r\n    -&gt;setRules([\r\n        &#039;@PSR2&#039; =&gt; true,\r\n    //    &#039;align_multiline_comment&#039; =&gt; true,\r\n        &#039;array_syntax&#039; =&gt; [&#039;syntax&#039; =&gt; &#039;short&#039;],\r\n    //    &#039;binary_operator_spaces&#039; =&gt; true,\r\n    //    &#039;blank_line_after_opening_tag&#039; =&gt; true,\r\n    //    &#039;blank_line_before_statement&#039; =&gt; [&#039;statements&#039; =&gt; [&#039;declare&#039;, &#039;do&#039;, &#039;for&#039;, &#039;foreach&#039;, &#039;if&#039;, &#039;switch&#039;, &#039;try&#039;]],\r\n    //    &#039;cast_spaces&#039; =&gt; true,\r\n    //    &#039;class_attributes_separation&#039; =&gt; true,\r\n    //    &#039;combine_consecutive_issets&#039; =&gt; true,\r\n    //    &#039;combine_consecutive_unsets&#039; =&gt; true,\r\n    //    &#039;compact_nullable_typehint&#039; =&gt; true,\r\n    //    &#039;concat_space&#039; =&gt; [&#039;spacing&#039; =&gt; &#039;one&#039;],\r\n    //    &#039;declare_equal_normalize&#039; =&gt; true,\r\n    //    &#039;declare_strict_types&#039; =&gt; true,\r\n    //    &#039;dir_constant&#039; =&gt; true,\r\n    //    &#039;ereg_to_preg&#039; =&gt; true,\r\n    //    &#039;escape_implicit_backslashes&#039; =&gt; true,\r\n    //    &#039;explicit_indirect_variable&#039; =&gt; true,\r\n    //    &#039;explicit_string_variable&#039; =&gt; true,\r\n    //    &#039;final_internal_class&#039; =&gt; true,\r\n    //    &#039;function_to_constant&#039; =&gt; true,\r\n    //    &#039;function_typehint_space&#039; =&gt; true,\r\n    //    &#039;general_phpdoc_annotation_remove&#039; =&gt; [&#039;annotations&#039; =&gt; [&#039;class&#039;, &#039;package&#039;, &#039;author&#039;]],\r\n    //    &#039;hash_to_slash_comment&#039; =&gt; true,\r\n    //    &#039;heredoc_to_nowdoc&#039; =&gt; true,\r\n    //    &#039;include&#039; =&gt; true,\r\n    //    &#039;is_null&#039; =&gt; [&#039;use_yoda_style&#039; =&gt; false],\r\n    //    &#039;linebreak_after_opening_tag&#039; =&gt; true,\r\n    //    &#039;list_syntax&#039; =&gt; true,\r\n    //    &#039;lowercase_cast&#039; =&gt; true,\r\n    //    &#039;magic_constant_casing&#039; =&gt; true,\r\n    //    &#039;method_chaining_indentation&#039; =&gt; true,\r\n    //    &#039;method_separation&#039; =&gt; true,\r\n    //    &#039;modernize_types_casting&#039; =&gt; true,\r\n    //    &#039;native_function_casing&#039; =&gt; true,\r\n    //    &#039;no_alias_functions&#039; =&gt; true,\r\n    //    &#039;no_blank_lines_after_class_opening&#039; =&gt; true,\r\n    //    &#039;no_blank_lines_after_phpdoc&#039; =&gt; true,\r\n    //    &#039;no_empty_comment&#039; =&gt; true,\r\n    //    &#039;no_empty_phpdoc&#039; =&gt; true,\r\n    //    &#039;no_empty_statement&#039; =&gt; true,\r\n    //    &#039;no_extra_consecutive_blank_lines&#039; =&gt; [&#039;tokens&#039; =&gt; [&#039;break&#039;, &#039;continue&#039;, &#039;extra&#039;, &#039;return&#039;, &#039;throw&#039;, &#039;use&#039;, &#039;parenthesis_brace_block&#039;, &#039;square_brace_block&#039;, &#039;curly_brace_block&#039;]],\r\n    //    &#039;no_homoglyph_names&#039; =&gt; true,\r\n    //    &#039;no_leading_import_slash&#039; =&gt; true,\r\n    //    &#039;no_leading_namespace_whitespace&#039; =&gt; true,\r\n    //    &#039;no_mixed_echo_print&#039; =&gt; true,\r\n    //    &#039;no_multiline_whitespace_around_double_arrow&#039; =&gt; true,\r\n    //    &#039;no_multiline_whitespace_before_semicolons&#039; =&gt; true,\r\n    //    &#039;no_null_property_initialization&#039; =&gt; true,\r\n    //    &#039;no_php4_constructor&#039; =&gt; true,\r\n    //    &#039;no_short_bool_cast&#039; =&gt; true,\r\n    //    &#039;no_singleline_whitespace_before_semicolons&#039; =&gt; true,\r\n    //    &#039;no_spaces_around_offset&#039; =&gt; true,\r\n    //    &#039;no_trailing_comma_in_list_call&#039; =&gt; true,\r\n    //    &#039;no_trailing_comma_in_singleline_array&#039; =&gt; true,\r\n    //    &#039;no_unneeded_control_parentheses&#039; =&gt; true,\r\n    //    &#039;no_unneeded_curly_braces&#039; =&gt; true,\r\n    //    &#039;no_unneeded_final_method&#039; =&gt; true,\r\n    //    &#039;no_unreachable_default_argument_value&#039; =&gt; true,\r\n    //    &#039;no_unused_imports&#039; =&gt; true,\r\n    //    &#039;no_useless_else&#039; =&gt; true,\r\n    //    &#039;no_useless_return&#039; =&gt; true,\r\n    //    &#039;no_whitespace_before_comma_in_array&#039; =&gt; true,\r\n    //    &#039;no_whitespace_in_blank_line&#039; =&gt; true,\r\n    //    &#039;normalize_index_brace&#039; =&gt; true,\r\n    //    &#039;object_operator_without_whitespace&#039; =&gt; true,\r\n    //    &#039;ordered_class_elements&#039; =&gt; true,\r\n    //    &#039;ordered_imports&#039; =&gt; true,\r\n    //    &#039;php_unit_construct&#039; =&gt; true,\r\n    //    &#039;php_unit_dedicate_assert&#039; =&gt; true,\r\n    //    &#039;php_unit_mock&#039; =&gt; true,\r\n    //    &#039;php_unit_namespaced&#039; =&gt; true,\r\n    //    &#039;phpdoc_add_missing_param_annotation&#039; =&gt; [&#039;only_untyped&#039; =&gt; false],\r\n    //    &#039;phpdoc_align&#039; =&gt; [&#039;tags&#039; =&gt; [&#039;param&#039;]],\r\n    //    &#039;phpdoc_annotation_without_dot&#039; =&gt; true,\r\n    //    &#039;phpdoc_indent&#039; =&gt; true,\r\n    //    &#039;phpdoc_inline_tag&#039; =&gt; true,\r\n    //    &#039;phpdoc_no_access&#039; =&gt; true,\r\n    //    &#039;phpdoc_no_empty_return&#039; =&gt; true,\r\n    //    &#039;phpdoc_no_package&#039; =&gt; true,\r\n    //    &#039;phpdoc_order&#039; =&gt; true,\r\n    //    &#039;phpdoc_return_self_reference&#039; =&gt; true,\r\n    //    &#039;phpdoc_scalar&#039; =&gt; true,\r\n    //    &#039;phpdoc_single_line_var_spacing&#039; =&gt; true,\r\n    //    &#039;phpdoc_summary&#039; =&gt; true,\r\n    //    &#039;phpdoc_to_comment&#039; =&gt; true,\r\n    //    &#039;phpdoc_trim&#039; =&gt; true,\r\n    //    &#039;phpdoc_types&#039; =&gt; true,\r\n    //    &#039;phpdoc_types_order&#039; =&gt; true,\r\n    //    &#039;phpdoc_var_without_name&#039; =&gt; true,\r\n    //    &#039;pow_to_exponentiation&#039; =&gt; true,\r\n    //    &#039;protected_to_private&#039; =&gt; true,\r\n    //    &#039;random_api_migration&#039; =&gt; true,\r\n    //    &#039;return_type_declaration&#039; =&gt; true,\r\n    //    &#039;self_accessor&#039; =&gt; true,\r\n    //    &#039;semicolon_after_instruction&#039; =&gt; true,\r\n    //    &#039;short_scalar_cast&#039; =&gt; true,\r\n    //    &#039;simplified_null_return&#039; =&gt; true,\r\n    //    &#039;single_blank_line_before_namespace&#039; =&gt; true,\r\n    //    &#039;single_line_comment_style&#039; =&gt; true,\r\n    //    &#039;single_quote&#039; =&gt; true,\r\n    //    &#039;space_after_semicolon&#039; =&gt; [&#039;remove_in_empty_for_expressions&#039; =&gt; true],\r\n    //    &#039;standardize_not_equals&#039; =&gt; true,\r\n    //    &#039;ternary_operator_spaces&#039; =&gt; true,\r\n    //    &#039;ternary_to_null_coalescing&#039; =&gt; true,\r\n    //    &#039;trailing_comma_in_multiline_array&#039; =&gt; true,\r\n    //    &#039;trim_array_spaces&#039; =&gt; true,\r\n    //    &#039;unary_operator_spaces&#039; =&gt; true,\r\n    //    &#039;void_return&#039; =&gt; true,\r\n    //    &#039;whitespace_after_comma_in_array&#039; =&gt; true,\r\n    //    &#039;yoda_style&#039; =&gt; [&#039;equal&#039; =&gt; false, &#039;identical&#039; =&gt; false],\r\n    ])\r\n    -&gt;setFinder($finder);\r\n```\r\n',0,'https://blog.webdimension.jp/?p=463',0,'post','',0),(464,1,'2020-02-14 13:12:21','2020-02-14 04:12:21','','Laravelでの開発の前準備','','inherit','closed','closed','','463-revision-v1','','','2020-02-14 13:12:21','2020-02-14 04:12:21','',463,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/463-revision-v1/',0,'revision','',0),(465,1,'2020-02-14 13:15:08','2020-02-14 04:15:08','','php-cs-fixer - Laravelでの開発の前準備','','inherit','closed','closed','','463-revision-v1','','','2020-02-14 13:15:08','2020-02-14 04:15:08','',463,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/463-revision-v1/',0,'revision','',0),(467,1,'2020-02-15 16:23:44','2020-02-15 07:23:44','<h1>Eslint</h1>\n<h2>Install</h2>\n<pre><code class=\"language-bash\">$ npm install babel-eslint eslint eslint-config-prettier eslint-config-standard eslint-friendly-formatter eslint-loader eslint-plugin-html eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise eslint-plugin-standard eslint-plugin-vue laravel-mix-eslint --save-dev</code></pre>\n<h3>package.jsonへScriptとして登録</h3>\n<p>vim composer.json\nnpm run eslint でrule違反箇所を確認\nnpm run eslint-fix でrule違反箇所を整形</p>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n    ...\n    ...\n    ...\n     +   &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\n     +   &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\n    },</code></pre>\n<h3>IDEへの設定</h3>\n<p>例) Intelij idea</p>\n<p>Preferences | Languages &amp; Frameworks | JavaScript | Code Quality Tools | ESLint</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.00.39.png\" alt=\"\" /></p>\n<p>ルール違反箇所</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.01.06.png\" alt=\"\" /></p>\n<p><kbd>option</kbd> + <kbd>CR</kbd>\nで自動整形</p>\n<h2>設定ファイル</h2>\n<p>プロジェクトルートへ.eslintrc.js</p>\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n    root: true,\n    globals: {\n        &#039;_&#039;: true, // lodash\n        &#039;Enumerable&#039;: true, // linq\n        Vue: true\n    },\n    parserOptions: {\n        parser: &#039;babel-eslint&#039;\n    },\n    env: {\n        &#039;browser&#039;: true,\n        &#039;jquery&#039; : true,\n        &quot;mocha&quot;: true\n    },\n    extends: [\n        &quot;prettier&quot;,\n        &#039;standard&#039;, // https://github.com/standard/standard/blob/master/docs/RULES-en.md,\n        &#039;eslint:recommended&#039;,\n        // &quot;plugin:vue-i18n/recommended&quot;,\n        // &#039;plugin:vue/essential&#039;\n        // &quot;plugin:vue/strongly-recommended&quot;\n        &#039;plugin:vue/recommended&#039;\n\n    ],\n    // required to lint *.vue files\n    plugins: [\n        &#039;vue&#039;,\n        &quot;prettier&quot;\n    ],\n    // add your custom rules here\n    rules: {\n        // allow async-await\n        &#039;generator-star-spacing&#039;: &#039;off&#039;,\n        &quot;indent&quot;: [&quot;error&quot;, 2],\n        &quot;object-shorthand&quot;: [0,&quot;always&quot;]\n\n    },\n}</code></pre>','Eslint (vue)  - Laravelでの開発の前準備3','Eslintを導入しコーディングルールを設定。 IDEに設定すればルール違反をリアルタイムで指摘してくれる。','publish','closed','open','','es-lint','','','2020-02-15 20:06:18','2020-02-15 11:06:18','# Eslint\r\n## Install\r\n```bash\r\n$ npm install babel-eslint eslint eslint-config-prettier eslint-config-standard eslint-friendly-formatter eslint-loader eslint-plugin-html eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise eslint-plugin-standard eslint-plugin-vue laravel-mix-eslint --save-dev\r\n```\r\n### package.jsonへScriptとして登録\r\nvim composer.json\r\nnpm run eslint でrule違反箇所を確認\r\nnpm run eslint-fix でrule違反箇所を整形\r\n\r\n```bash\r\n    &quot;scripts&quot;: {\r\n    ...\r\n    ...\r\n    ...\r\n     +   &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\r\n     +   &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\r\n    },\r\n```\r\n### IDEへの設定\r\n例) Intelij idea\r\n\r\nPreferences | Languages & Frameworks | JavaScript | Code Quality Tools | ESLint\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.00.39.png)\r\n\r\nルール違反箇所\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.01.06.png)\r\n\r\n<kbd>option</kbd> + <kbd>CR</kbd>\r\nで自動整形\r\n\r\n## 設定ファイル\r\nプロジェクトルートへ.eslintrc.js\r\n```javascript\r\n\r\nmodule.exports = {\r\n    root: true,\r\n    globals: {\r\n        &#039;_&#039;: true, // lodash\r\n        &#039;Enumerable&#039;: true, // linq\r\n        Vue: true\r\n    },\r\n    parserOptions: {\r\n        parser: &#039;babel-eslint&#039;\r\n    },\r\n    env: {\r\n        &#039;browser&#039;: true,\r\n        &#039;jquery&#039; : true,\r\n        &quot;mocha&quot;: true\r\n    },\r\n    extends: [\r\n        &quot;prettier&quot;,\r\n        &#039;standard&#039;, // https://github.com/standard/standard/blob/master/docs/RULES-en.md,\r\n        &#039;eslint:recommended&#039;,\r\n        // &quot;plugin:vue-i18n/recommended&quot;,\r\n        // &#039;plugin:vue/essential&#039;\r\n        // &quot;plugin:vue/strongly-recommended&quot;\r\n        &#039;plugin:vue/recommended&#039;\r\n\r\n    ],\r\n    // required to lint *.vue files\r\n    plugins: [\r\n        &#039;vue&#039;,\r\n        &quot;prettier&quot;\r\n    ],\r\n    // add your custom rules here\r\n    rules: {\r\n        // allow async-await\r\n        &#039;generator-star-spacing&#039;: &#039;off&#039;,\r\n        &quot;indent&quot;: [&quot;error&quot;, 2],\r\n        &quot;object-shorthand&quot;: [0,&quot;always&quot;]\r\n\r\n    },\r\n}\r\n```\r\n\r\n',0,'https://blog.webdimension.jp/?p=467',0,'post','',0),(468,1,'2020-02-14 13:16:48','2020-02-14 04:16:48','','Eslint (vue)  - Laravelでの開発の前準備','','inherit','closed','closed','','467-revision-v1','','','2020-02-14 13:16:48','2020-02-14 04:16:48','',467,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/467-revision-v1/',0,'revision','',0),(469,1,'2020-02-15 18:23:36','2020-02-15 09:23:36','<h2>Vue.js Unittestを導入する</h2>\n<h3>vue test-utils install</h3>\n<pre><code class=\"language-bash\">npm install --save-dev @vue/test-utils mocha jsdom jsdom-global expect</code></pre>\n<p>しかしこれではうまく動かない。</p>\n<pre><code class=\"language-bash\">Error: Chunk.parents: Use ChunkGroup.getParents() instead</code></pre>\n<p>package.jsonを変更</p>\n<pre><code class=\"language-bash\"> &quot;mocha-webpack&quot;: &quot;^2.0.0-beta.0&quot;,</code></pre>\n<p>再度</p>\n<pre><code class=\"language-bash\">npm install</code></pre>\n<h2>vue.js テストを設置</h2>\n<p>javascriptのテスト用ディレクトリを作成</p>\n<pre><code class=\"language-bash\">mkdir tests/Javascript</code></pre>\n<p>test用setup.js作成(公式に準ずる)</p>\n<pre><code class=\"language-bash\">vim tests/Javascript/setup.js</code></pre>\n<p>tests/Javascript/setup.js</p>\n<pre><code class=\"language-bash\">require(&#039;jsdom-global&#039;)()\n\nglobal.expect = require(&#039;expect&#039;)</code></pre>\n<h2>testunitを作る</h2>\n<h3>testunit (テストする方)</h3>\n<p>tests/Javascript/VueTestComponent.spec.js</p>\n<pre><code class=\"language-bash\">import { shallowMount } from &#039;@vue/test-utils&#039;\nimport ProjectImageUploadComponent from &#039;../../resources/js/components/VueTestComponent.vue&#039;\n\ndescribe(&#039;VueTestComponent.vue&#039;, () =&gt; {\n  it(&#039;props test&#039;, () =&gt; {\n    const wrapper = shallowMount(VueTestComponent)\n    const paramName = &#039;vuetest&#039;\n    wrapper.setProps({\n      TestParam: paramName\n    })\n    // eslint-disable-next-line no-undef\n    expect(wrapper.vm.$props.paramName).toBe(paramName)\n  })\n})</code></pre>\n<h3>vue component (テストされる方)</h3>\n<p>../../resources/js/components/VueTestComponent.vue</p>\n<pre><code class=\"language-bash\">\n&lt;template&gt;\n  &lt;div&gt; {{ testParam: }}&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    testParam: {\n      type: String,\n      default: &#039;&#039;\n    },\n  },\n\n}\n&lt;/script&gt;\n</code></pre>\n<h2>packege.jsonにscript登録</h2>\n<pre><code class=\"language-bash\">npm run test</code></pre>\n<p>で実行できるようにする</p>\n<p>package.json</p>\n<pre><code class=\"language-bash\">\n    &quot;scripts&quot;: {\n        ...\n        ...\n        ...\n        ...\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\n    },</code></pre>\n<h2>vue unittestを実行</h2>\n<pre><code class=\"language-bash\">npm test</code></pre>\n<p>このような結果だと成功</p>\n<pre><code class=\"language-bash\"> WEBPACK  Compiled successfully in 3370ms\n\n MOCHA  Testing...\n\n  ProjectImageUploadComponent.vue\n    ✓ increments count when button is clicked (64ms)\n\n  1 passing (210ms)\n\n MOCHA  Tests completed successfully</code></pre>\n<h2>IDEからtest実行</h2>\n<p>例 Intellij idea\nPreferences | Languages &amp; Frameworks | Node.js and NPM</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.04.51.png\" alt=\"\" /></p>\n<p><kbd>optin</kbd> + <kbd>F11</kbd>\nでnpm script をPopup表示</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.06.52.png\" alt=\"\" /></p>\n<p>testを選択して実行</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.07.53.png\" alt=\"\" /></p>\n<p>test成功</p>','vue.js テスト環境  - Laravelでの開発の前準備5','Laravel上でのVue.jsにUnittestを導入。npm scriptに追加','publish','closed','open','','vue-test','','','2020-02-15 20:05:24','2020-02-15 11:05:24','## Vue.js Unittestを導入する\r\n### vue test-utils install\r\n\r\n```bash\r\nnpm install --save-dev @vue/test-utils mocha jsdom jsdom-global expect\r\n```\r\n\r\nしかしこれではうまく動かない。\r\n\r\n```bash\r\nError: Chunk.parents: Use ChunkGroup.getParents() instead\r\n```\r\n\r\npackage.jsonを変更\r\n\r\n```bash\r\n &quot;mocha-webpack&quot;: &quot;^2.0.0-beta.0&quot;,\r\n```\r\n\r\n再度\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\n## vue.js テストを設置\r\njavascriptのテスト用ディレクトリを作成\r\n```bash\r\nmkdir tests/Javascript\r\n```\r\ntest用setup.js作成(公式に準ずる)\r\n```bash\r\nvim tests/Javascript/setup.js\r\n```\r\ntests/Javascript/setup.js\r\n```bash\r\nrequire(&#039;jsdom-global&#039;)()\r\n\r\nglobal.expect = require(&#039;expect&#039;)\r\n```\r\n\r\n## testunitを作る\r\n### testunit (テストする方)\r\ntests/Javascript/VueTestComponent.spec.js\r\n```bash\r\nimport { shallowMount } from &#039;@vue/test-utils&#039;\r\nimport ProjectImageUploadComponent from &#039;../../resources/js/components/VueTestComponent.vue&#039;\r\n\r\ndescribe(&#039;VueTestComponent.vue&#039;, () =&gt; {\r\n  it(&#039;props test&#039;, () =&gt; {\r\n    const wrapper = shallowMount(VueTestComponent)\r\n    const paramName = &#039;vuetest&#039;\r\n    wrapper.setProps({\r\n      TestParam: paramName\r\n    })\r\n    // eslint-disable-next-line no-undef\r\n    expect(wrapper.vm.$props.paramName).toBe(paramName)\r\n  })\r\n})\r\n```\r\n\r\n### vue component (テストされる方)\r\n../../resources/js/components/VueTestComponent.vue\r\n```bash\r\n\r\n&lt;template&gt;\r\n  &lt;div&gt; {{ testParam: }}&lt;/div&gt;\r\n&lt;/template&gt;\r\n\r\n&lt;script&gt;\r\nexport default {\r\n  props: {\r\n    testParam: {\r\n      type: String,\r\n      default: &#039;&#039;\r\n    },\r\n  },\r\n\r\n}\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\n## packege.jsonにscript登録\r\n```bash\r\nnpm run test\r\n```\r\nで実行できるようにする\r\n\r\npackage.json\r\n```bash\r\n\r\n    &quot;scripts&quot;: {\r\n        ...\r\n        ...\r\n        ...\r\n        ...\r\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\r\n    },\r\n```\r\n\r\n## vue unittestを実行\r\n```bash\r\nnpm test\r\n```\r\nこのような結果だと成功\r\n```bash\r\n WEBPACK  Compiled successfully in 3370ms\r\n\r\n MOCHA  Testing...\r\n\r\n\r\n\r\n  ProjectImageUploadComponent.vue\r\n    ✓ increments count when button is clicked (64ms)\r\n\r\n\r\n  1 passing (210ms)\r\n\r\n MOCHA  Tests completed successfully\r\n```\r\n\r\n## IDEからtest実行\r\n例 Intellij idea\r\nPreferences | Languages & Frameworks | Node.js and NPM\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.04.51.png)\r\n\r\n<kbd>optin</kbd> + <kbd>F11</kbd>\r\nでnpm script をPopup表示\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.06.52.png)\r\n\r\ntestを選択して実行\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.07.53.png)\r\n\r\ntest成功\r\n\r\n',0,'https://blog.webdimension.jp/?p=469',0,'post','',0),(470,1,'2020-02-14 13:18:42','2020-02-14 04:18:42','','vue.js テスト環境  - Laravelでの開発の前準備','','inherit','closed','closed','','469-revision-v1','','','2020-02-14 13:18:42','2020-02-14 04:18:42','',469,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/469-revision-v1/',0,'revision','',0),(471,1,'2020-02-15 15:02:23','2020-02-15 06:02:23','<h2>Laravel6.x で Bootstrap4, Vue.js を導入</h2>\n<h3>laravel/ui導入</h3>\n<pre><code class=\"language-bash\">composer require laravel/ui</code></pre>\n<h3>Bootstrap 導入</h3>\n<pre><code class=\"language-bash\">php artisan ui bootstrap</code></pre>\n<h3>Vue.js 導入</h3>\n<pre><code class=\"language-bash\">php artisan ui vue </code></pre>','Laravelでの開発の前準備その１','Laravel6へBootstrap4 vue.js を導入','publish','closed','open','','laravel-preparation-01','','','2020-02-15 15:02:23','2020-02-15 06:02:23','## Laravel6.x で Bootstrap4, Vue.js を導入\r\n### laravel/ui導入\r\n```bash\r\ncomposer require laravel/ui\r\n```\r\n### Bootstrap 導入\r\n```bash\r\nphp artisan ui bootstrap\r\n```\r\n\r\n### Vue.js 導入\r\n```bash\r\nphp artisan ui vue \r\n```\r\n\r\n',0,'https://blog.webdimension.jp/?p=471',0,'post','',0),(472,1,'2020-02-14 13:19:18','2020-02-14 04:19:18','','Bootstrap4  - Laravelでの開発の前準備','','inherit','closed','closed','','471-revision-v1','','','2020-02-14 13:19:18','2020-02-14 04:19:18','',471,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/471-revision-v1/',0,'revision','',0),(473,1,'2020-02-15 19:14:52','2020-02-15 10:14:52','<h2>Laravel mix (webpack) をざっくり理解する</h2>\n<p>設定ファイルはwebpack.js</p>\n<pre><code class=\"language-bash\">\n(&#039;resources/js/app.js&#039;, &#039;public/js&#039;)\n  .sass(&#039;resources/sass/app.scss&#039;, &#039;public/css&#039;);\n</code></pre>\n<ul>\n<li>resources/js/app.js をBuildしてpublic/js に配置\n(pblic/js/app.js)</li>\n<li>resources/sass/app.scss をbuildしてpublic/cssに配置\n(pblic/css/app.css)</li>\n</ul>\n<h3>ファイルを追加する場合</h3>\n<pre><code class=\"language-bash\">(&#039;resources/js/app.js&#039;, &#039;public/js&#039;)\n  .sass(&#039;resources/sass/app.scss&#039;, &#039;public/css&#039;);\n  mix.js(&#039;resources/js/admin.js&#039;, &#039;public/js&#039;)\n    .sass(&#039;resources/sass/admin.scss&#039;, &#039;public/css&#039;);</code></pre>\n<ul>\n<li>pblic/js/admin.js</li>\n<li>pblic/css/admin.css</li>\n</ul>\n<p>が生成される。</p>\n<h2>package.json　を見てみる</h2>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n        &quot;dev&quot;: &quot;npm run development&quot;,\n        &quot;development&quot;: &quot;cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\n        &quot;watch&quot;: &quot;npm run development -- --watch&quot;,\n        &quot;watch-poll&quot;: &quot;npm run watch -- --watch-poll&quot;,\n        &quot;hot&quot;: &quot;cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\n        &quot;prod&quot;: &quot;npm run production&quot;,\n        &quot;production&quot;: &quot;cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\n        &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\n        &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\n        &quot;stylelint&quot;: &quot;stylelint ./resources/sass/player.scss ./resources/sass/admin.scss&quot;,\n        &quot;stylelint-fix&quot;: &quot;stylelint ./resources/sass/player.scss ./resources/sass/admin.scss --fix&quot;,\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\n    },</code></pre>\n<pre><code class=\"language-bash\">npm run dev</code></pre>\n<p>\'npm run development\'へのalias</p>\n<pre><code class=\"language-bash\">npm run development</code></pre>\n<p>開発モードでBuild</p>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>ファイルに変更があれば変更を感知し開発モードでBuild\nフロント作業はほぼ実行しっぱなし。</p>\n<pre><code class=\"language-bash\">npm run watch-poll</code></pre>\n<p>上記 npm watch をvagrantなどVirtualBox上で行う場合はこちら\n(パーミッションなどの問題らしい)</p>\n<pre><code class=\"language-bash\">npm run prod</code></pre>\n<p>\'npm run production\'へのalias</p>\n<pre><code class=\"language-bash\">npm run production</code></pre>\n<p>プロダクトモードでBuild\n(ガチなBuild)</p>\n<pre><code class=\"language-bash\">npm run hot</code></pre>\n<p>使ったことない。</p>\n<p>開発のモードのBuildとプロダクトモードの違いは生成されるjs,cssをみれば一目瞭然。</p>\n<h2>npm run watch 実行してみる</h2>\n<h3>Commandから実行</h3>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>結果 成功例</p>\n<pre><code class=\"language-bash\">\n DONE  Compiled successfully in 18120ms                                                                                                                                                                                         19:02:47\n\n          Asset      Size      Chunks             Chunk Names\n   /css/app.css   196 KiB     /js/app  [emitted]  /js/app\n     /js/app.js  1.39 MiB     /js/app  [emitted]  /js/app</code></pre>\n<h3>IDEで実行</h3>\n<p>例 Intellij IDEA</p>\n<p><kbd>option</kbd> + <kbd>F11</kbd></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.08.22.png\" alt=\"\" /></p>\n<p>実行結果</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.07.26.png\" alt=\"\" /></p>','webpack  - Laravelでの開発の前準備6','Laravel-mix (webpack)　で Build, Watch をしてみる','publish','closed','open','','laravel-mix','','','2020-02-15 20:04:00','2020-02-15 11:04:00','## Laravel mix (webpack) をざっくり理解する\r\n設定ファイルはwebpack.js\r\n```bash\r\n\r\n(&#039;resources/js/app.js&#039;, &#039;public/js&#039;)\r\n  .sass(&#039;resources/sass/app.scss&#039;, &#039;public/css&#039;);\r\n\r\n```\r\n- resources/js/app.js をBuildしてpublic/js に配置\r\n    (pblic/js/app.js)\r\n- resources/sass/app.scss をbuildしてpublic/cssに配置\r\n    (pblic/css/app.css)\r\n\r\n\r\n### ファイルを追加する場合\r\n```bash\r\n(&#039;resources/js/app.js&#039;, &#039;public/js&#039;)\r\n  .sass(&#039;resources/sass/app.scss&#039;, &#039;public/css&#039;);\r\n  mix.js(&#039;resources/js/admin.js&#039;, &#039;public/js&#039;)\r\n    .sass(&#039;resources/sass/admin.scss&#039;, &#039;public/css&#039;);\r\n```\r\n\r\n- pblic/js/admin.js\r\n- pblic/css/admin.css\r\n\r\nが生成される。\r\n\r\n## package.json　を見てみる\r\n```bash\r\n    &quot;scripts&quot;: {\r\n        &quot;dev&quot;: &quot;npm run development&quot;,\r\n        &quot;development&quot;: &quot;cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\r\n        &quot;watch&quot;: &quot;npm run development -- --watch&quot;,\r\n        &quot;watch-poll&quot;: &quot;npm run watch -- --watch-poll&quot;,\r\n        &quot;hot&quot;: &quot;cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\r\n        &quot;prod&quot;: &quot;npm run production&quot;,\r\n        &quot;production&quot;: &quot;cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\r\n        &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\r\n        &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\r\n        &quot;stylelint&quot;: &quot;stylelint ./resources/sass/player.scss ./resources/sass/admin.scss&quot;,\r\n        &quot;stylelint-fix&quot;: &quot;stylelint ./resources/sass/player.scss ./resources/sass/admin.scss --fix&quot;,\r\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\r\n    },\r\n```\r\n\r\n```bash\r\nnpm run dev\r\n```\r\n\'npm run development\'へのalias\r\n\r\n\r\n```bash\r\nnpm run development\r\n```\r\n開発モードでBuild\r\n\r\n\r\n```bash\r\nnpm run watch\r\n```\r\nファイルに変更があれば変更を感知し開発モードでBuild\r\nフロント作業はほぼ実行しっぱなし。\r\n\r\n\r\n```bash\r\nnpm run watch-poll\r\n```\r\n上記 npm watch をvagrantなどVirtualBox上で行う場合はこちら\r\n(パーミッションなどの問題らしい)\r\n\r\n\r\n```bash\r\nnpm run prod\r\n```\r\n\'npm run production\'へのalias\r\n\r\n\r\n```bash\r\nnpm run production\r\n```\r\nプロダクトモードでBuild\r\n(ガチなBuild)\r\n\r\n```bash\r\nnpm run hot\r\n```\r\n使ったことない。\r\n\r\n\r\n開発のモードのBuildとプロダクトモードの違いは生成されるjs,cssをみれば一目瞭然。\r\n\r\n\r\n## npm run watch 実行してみる\r\n### Commandから実行\r\n```bash\r\nnpm run watch\r\n```\r\n結果 成功例\r\n```bash\r\n\r\n DONE  Compiled successfully in 18120ms                                                                                                                                                                                         19:02:47\r\n\r\n          Asset      Size      Chunks             Chunk Names\r\n   /css/app.css   196 KiB     /js/app  [emitted]  /js/app\r\n     /js/app.js  1.39 MiB     /js/app  [emitted]  /js/app\r\n```\r\n### IDEで実行\r\n例 Intellij IDEA\r\n\r\n<kbd>option</kbd> + <kbd>F11</kbd>\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.08.22.png)\r\n\r\n実行結果\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.07.26.png)\r\n\r\n\r\n\r\n',0,'https://blog.webdimension.jp/?p=473',0,'post','',0),(474,1,'2020-02-14 13:19:56','2020-02-14 04:19:56','','webpack  - Laravelでの開発の前準備','','inherit','closed','closed','','473-revision-v1','','','2020-02-14 13:19:56','2020-02-14 04:19:56','',473,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/473-revision-v1/',0,'revision','',0),(475,1,'2020-02-15 20:33:52','2020-02-15 11:33:52','<h2>webpack (laravel-mix) への設定追加</h2>\n<p>webpack.mix.js</p>\n<pre><code class=\"language-bash\">const styleLintPlugin = require(&#039;stylelint-webpack-plugin&#039;);\n\nif (!mix.inProduction()) {\n  mix.webpackConfig({\n    plugins: [\n      // eslint-disable-next-line new-cap\n      new styleLintPlugin({\n        files: [\n          &#039;./resources/sass/app.scss&#039;,\n        ],\n        // eslint-disable-next-line no-undef\n        configFile: path.join(__dirname, &#039;.stylelintrc&#039;),\n        syntax: &#039;scss&#039;,\n        options: {\n          fix: false\n        }\n      }),\n    ],\n    module: {\n      rules: [\n        {\n          enforce: &#039;pre&#039;,\n          exclude: /node_modules/,\n          loader: &#039;eslint-loader&#039;,\n          test: /\\.(js|vue)?$/,\n          options: {\n            fix: false\n          }\n        }\n      ]\n    }\n  })\n}</code></pre>\n<p>対象のファイルcss</p>\n<pre><code class=\"language-bash\">\n        files: [\n          &#039;./resources/sass/app.scss&#039;,\n        ],</code></pre>\n<p>対象のjsファイル(.js, .vue を指定)</p>\n<pre><code class=\"language-bash\">\n          test: /\\.(js|vue)?$/,</code></pre>\n<p>警告を出すだけで自動整形はしない\n\'true\'にすれば自動整形</p>\n<pre><code class=\"language-bash\">\n          options: {\n            fix: false\n          }</code></pre>\n<p>Build時の自動整形はなんか怖いので自動整形しない設定にしてます。</p>\n<p>漏れなくコーディングチェックできます。</p>','npm run watch(build時) でLint実行  - Laravelでの開発の前準備8','npm run xxx の Build時に Eslint, Stylelintも実行しスパルタンな設定をしてみる。','publish','closed','open','','npm-build-lint','','','2020-02-15 20:33:52','2020-02-15 11:33:52','## webpack (laravel-mix) への設定追加\r\nwebpack.mix.js\r\n```bash\r\nconst styleLintPlugin = require(&#039;stylelint-webpack-plugin&#039;);\r\n\r\nif (!mix.inProduction()) {\r\n  mix.webpackConfig({\r\n    plugins: [\r\n      // eslint-disable-next-line new-cap\r\n      new styleLintPlugin({\r\n        files: [\r\n          &#039;./resources/sass/app.scss&#039;,\r\n        ],\r\n        // eslint-disable-next-line no-undef\r\n        configFile: path.join(__dirname, &#039;.stylelintrc&#039;),\r\n        syntax: &#039;scss&#039;,\r\n        options: {\r\n          fix: false\r\n        }\r\n      }),\r\n    ],\r\n    module: {\r\n      rules: [\r\n        {\r\n          enforce: &#039;pre&#039;,\r\n          exclude: /node_modules/,\r\n          loader: &#039;eslint-loader&#039;,\r\n          test: /\\.(js|vue)?$/,\r\n          options: {\r\n            fix: false\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  })\r\n}\r\n```\r\n\r\n対象のファイルcss\r\n```bash\r\n\r\n        files: [\r\n          &#039;./resources/sass/app.scss&#039;,\r\n        ],\r\n```\r\n対象のjsファイル(.js, .vue を指定)\r\n```bash\r\n\r\n          test: /\\.(js|vue)?$/,\r\n```\r\n警告を出すだけで自動整形はしない\r\n\'true\'にすれば自動整形\r\n```bash\r\n\r\n          options: {\r\n            fix: false\r\n          }\r\n```\r\nBuild時の自動整形はなんか怖いので自動整形しない設定にしてます。\r\n\r\n漏れなくコーディングチェックできます。\r\n',0,'https://blog.webdimension.jp/?p=475',0,'post','',0),(476,1,'2020-02-14 13:21:29','2020-02-14 04:21:29','','npm watch でLint系実行  - Laravelでの開発の前準備','','inherit','closed','closed','','475-revision-v1','','','2020-02-14 13:21:29','2020-02-14 04:21:29','',475,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/475-revision-v1/',0,'revision','',0),(477,1,'2020-02-15 17:11:36','2020-02-15 08:11:36','<h2>phpunit を実行してみる</h2>\n<p>LaravelにはデフォルトでTestが導入されている。\n実行してみる</p>\n<pre><code class=\"language-bash\"> ./vendor/bin/phpunit </code></pre>\n<pre><code class=\"language-bash\">Time: 669 ms, Memory: 22.00 MB\n\nOK (1 tests, 1 assertions)</code></pre>\n<p>このようにOKがでれば　テスト成功</p>\n<h3>composer.json のscriptに追加</h3>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n        ...\n        ...\n        ...\n        ...\n        &quot;test&quot;: [\n            &quot;./vendor/bin/phpunit&quot;\n        ]\n        ...\n        ...\n        ...</code></pre>\n<pre><code class=\"language-bash\">composer test</code></pre>\n<p>で実行できるようになる。</p>\n<h3>IDEからTestunit実行</h3>\n<p>参考:<a href=\"https://blog.webdimension.jp/linux/docke-on-vagrant/\">Docker on Vagrant をがんばってみた</a></p>\n<p>この例ではVagrant上のDockerで動いているPHPをテストしています。</p>','PHP UnitTest  - Laravelでの開発の前準備4','Laravelデフォルトのphpunitを実行。\r\ncomposer.json へスクリプト登録','publish','closed','open','','phpunit','','','2020-02-15 18:29:30','2020-02-15 09:29:30','## phpunit を実行してみる\r\nLaravelにはデフォルトでTestが導入されている。\r\n実行してみる\r\n\r\n```bash\r\n ./vendor/bin/phpunit \r\n```\r\n\r\n```bash\r\nTime: 669 ms, Memory: 22.00 MB\r\n\r\nOK (1 tests, 1 assertions)\r\n```\r\nこのようにOKがでれば　テスト成功\r\n\r\n### composer.json のscriptに追加\r\n```bash\r\n    &quot;scripts&quot;: {\r\n        ...\r\n        ...\r\n        ...\r\n        ...\r\n        &quot;test&quot;: [\r\n            &quot;./vendor/bin/phpunit&quot;\r\n        ]\r\n        ...\r\n        ...\r\n        ...\r\n```\r\n\r\n```bash\r\ncomposer test\r\n```\r\nで実行できるようになる。\r\n\r\n### IDEからTestunit実行\r\n参考:<a href=\"https://blog.webdimension.jp/linux/docke-on-vagrant/\">Docker on Vagrant をがんばってみた</a>\r\n\r\nこの例ではVagrant上のDockerで動いているPHPをテストしています。\r\n',0,'https://blog.webdimension.jp/?p=477',0,'post','',0),(478,1,'2020-02-14 13:22:08','2020-02-14 04:22:08','','PHP UnitTest  - Laravelでの開発の前準備','','inherit','closed','closed','','477-revision-v1','','','2020-02-14 13:22:08','2020-02-14 04:22:08','',477,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/477-revision-v1/',0,'revision','',0),(479,1,'2020-02-14 14:13:15','0000-00-00 00:00:00','<p>middel waer 利用でのrouter</p>','Laravel Routerの設定','','draft','closed','open','','','','','2020-02-14 14:13:15','2020-02-14 05:13:15','middel waer 利用でのrouter',0,'https://blog.webdimension.jp/?p=479',0,'post','',0),(480,1,'2020-02-14 13:23:39','2020-02-14 04:23:39','','Laravel Routerの設定','','inherit','closed','closed','','479-revision-v1','','','2020-02-14 13:23:39','2020-02-14 04:23:39','',479,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/479-revision-v1/',0,'revision','',0),(481,1,'2020-02-14 14:14:04','0000-00-00 00:00:00','<p>defaut auth login form, passwordfoggoten regster</p>','Laravel Auth　ユーザー認証','','draft','closed','open','','','','','2020-02-14 14:14:04','2020-02-14 05:14:04','defaut auth login form, passwordfoggoten regster',0,'https://blog.webdimension.jp/?p=481',0,'post','',0),(482,1,'2020-02-14 13:25:23','2020-02-14 04:25:23','','Laravel Auth　ユーザー認証','','inherit','closed','closed','','481-revision-v1','','','2020-02-14 13:25:23','2020-02-14 04:25:23','',481,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/481-revision-v1/',0,'revision','',0),(483,1,'2020-02-14 13:54:06','0000-00-00 00:00:00','<p>fDB 命名規則\n例外時の対応</p>\n<p>facker\nseed\nmigrate</p>','Laravel でデータベース、テーブル作成','','draft','closed','open','','','','','2020-02-14 13:54:06','2020-02-14 04:54:06','fDB 命名規則\r\n例外時の対応\r\n\r\nfacker\r\nseed\r\nmigrate',0,'https://blog.webdimension.jp/?p=483',0,'post','',0),(484,1,'2020-02-14 13:27:51','2020-02-14 04:27:51','','Laravel でデータベース、テーブル作成','','inherit','closed','closed','','483-revision-v1','','','2020-02-14 13:27:51','2020-02-14 04:27:51','',483,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/483-revision-v1/',0,'revision','',0),(485,1,'2020-02-14 13:50:38','2020-02-14 04:50:38','<p>DB 命名規則\n例外時の対応</p>','Laravel でデータベース、テーブル作成','','inherit','closed','closed','','483-revision-v1','','','2020-02-14 13:50:38','2020-02-14 04:50:38','DB 命名規則\r\n例外時の対応',483,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/483-revision-v1/',0,'revision','',0),(486,1,'2020-02-14 13:52:53','0000-00-00 00:00:00','<p>fillable guard sofrdelete</p>','Laravel Eloquent','','draft','closed','open','','','','','2020-02-14 13:52:53','2020-02-14 04:52:53','fillable guard sofrdelete',0,'https://blog.webdimension.jp/?p=486',0,'post','',0),(487,1,'2020-02-14 13:52:53','2020-02-14 04:52:53','<p>fillable guard sofrdelete</p>','Laravel Eloquent','','inherit','closed','closed','','486-revision-v1','','','2020-02-14 13:52:53','2020-02-14 04:52:53','fillable guard sofrdelete',486,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/486-revision-v1/',0,'revision','',0),(489,1,'2020-02-14 13:53:47','2020-02-14 04:53:47','<p>DB 命名規則\n例外時の対応</p>\n<p>facker\nseed\nmigrate</p>','Laravel でデータベース、テーブル作成','','inherit','closed','closed','','483-revision-v1','','','2020-02-14 13:53:47','2020-02-14 04:53:47','DB 命名規則\r\n例外時の対応\r\n\r\nfacker\r\nseed\r\nmigrate',483,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/483-revision-v1/',0,'revision','',0),(490,1,'2020-02-14 13:54:06','2020-02-14 04:54:06','<p>fDB 命名規則\n例外時の対応</p>\n<p>facker\nseed\nmigrate</p>','Laravel でデータベース、テーブル作成','','inherit','closed','closed','','483-revision-v1','','','2020-02-14 13:54:06','2020-02-14 04:54:06','fDB 命名規則\r\n例外時の対応\r\n\r\nfacker\r\nseed\r\nmigrate',483,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/483-revision-v1/',0,'revision','',0),(491,1,'2020-02-14 13:55:31','0000-00-00 00:00:00','<p>fcache clear</p>','Laravel cache','','draft','closed','open','','','','','2020-02-14 13:55:31','2020-02-14 04:55:31','fcache clear',0,'https://blog.webdimension.jp/?p=491',0,'post','',0),(492,1,'2020-02-14 13:54:54','2020-02-14 04:54:54','<p>cache clear</p>','Laravel cache','','inherit','closed','closed','','491-revision-v1','','','2020-02-14 13:54:54','2020-02-14 04:54:54','cache clear',491,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/491-revision-v1/',0,'revision','',0),(493,1,'2020-02-14 13:55:31','2020-02-14 04:55:31','<p>fcache clear</p>','Laravel cache','','inherit','closed','closed','','491-revision-v1','','','2020-02-14 13:55:31','2020-02-14 04:55:31','fcache clear',491,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/491-revision-v1/',0,'revision','',0),(494,1,'2020-02-14 13:56:26','0000-00-00 00:00:00','<p>crud</p>','Laravel でのCRUD','','draft','closed','open','','','','','2020-02-14 13:56:26','2020-02-14 04:56:26','crud',0,'https://blog.webdimension.jp/?p=494',0,'post','',0),(495,1,'2020-02-14 13:56:08','2020-02-14 04:56:08','<p>crud</p>','Laravel でのCRUD','','inherit','closed','closed','','494-revision-v1','','','2020-02-14 13:56:08','2020-02-14 04:56:08','crud',494,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/494-revision-v1/',0,'revision','',0),(496,1,'2020-02-14 13:57:28','0000-00-00 00:00:00','<p>pagenation</p>','LaravelのPagenation','','draft','closed','open','','','','','2020-02-14 13:57:28','2020-02-14 04:57:28','pagenation',0,'https://blog.webdimension.jp/?p=496',0,'post','',0),(497,1,'2020-02-14 13:57:12','2020-02-14 04:57:12','<p>pagenation</p>','LaravelのPagenation','','inherit','closed','closed','','496-revision-v1','','','2020-02-14 13:57:12','2020-02-14 04:57:12','pagenation',496,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/496-revision-v1/',0,'revision','',0),(498,1,'2020-02-14 13:58:38','0000-00-00 00:00:00','<p>form facade</p>','Laravel のForm facade','','draft','closed','open','','','','','2020-02-14 13:58:38','2020-02-14 04:58:38','form facade',0,'https://blog.webdimension.jp/?p=498',0,'post','',0),(499,1,'2020-02-14 13:58:17','2020-02-14 04:58:17','<p>form facade</p>','Laravel のForm facade','','inherit','closed','closed','','498-revision-v1','','','2020-02-14 13:58:17','2020-02-14 04:58:17','form facade',498,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/498-revision-v1/',0,'revision','',0),(504,1,'2020-02-14 14:02:20','0000-00-00 00:00:00','<p>file = true</p>','Laravelでのファイルアップロード','','draft','closed','open','','','','','2020-02-14 14:02:20','2020-02-14 05:02:20','file = true',0,'https://blog.webdimension.jp/?p=504',0,'post','',0),(505,1,'2020-02-14 14:01:58','2020-02-14 05:01:58','<p>file = true</p>','Laravelでのファイルアップロード','','inherit','closed','closed','','504-revision-v1','','','2020-02-14 14:01:58','2020-02-14 05:01:58','file = true',504,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/504-revision-v1/',0,'revision','',0),(506,1,'2020-02-14 14:03:25','0000-00-00 00:00:00','<p>finclude section extend\nforearch</p>','Laravel Bladeテンプレート','','draft','closed','open','','','','','2020-02-14 14:03:25','2020-02-14 05:03:25','finclude section extend\r\nforearch',0,'https://blog.webdimension.jp/?p=506',0,'post','',0),(507,1,'2020-02-14 14:03:12','2020-02-14 05:03:12','<p>include section extend\nforearch</p>','Laravel Bladeテンプレート','','inherit','closed','closed','','506-revision-v1','','','2020-02-14 14:03:12','2020-02-14 05:03:12','include section extend\r\nforearch',506,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/506-revision-v1/',0,'revision','',0),(508,1,'2020-02-14 14:03:25','2020-02-14 05:03:25','<p>finclude section extend\nforearch</p>','Laravel Bladeテンプレート','','inherit','closed','closed','','506-revision-v1','','','2020-02-14 14:03:25','2020-02-14 05:03:25','finclude section extend\r\nforearch',506,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/506-revision-v1/',0,'revision','',0),(509,1,'2020-02-14 14:04:47','0000-00-00 00:00:00','<p>Varidation\nmake\nvaridation 追加</p>','Laravel でのVaridation','','draft','closed','open','','','','','2020-02-14 14:04:47','2020-02-14 05:04:47','Varidation \r\nmake \r\nvaridation 追加',0,'https://blog.webdimension.jp/?p=509',0,'post','',0),(510,1,'2020-02-14 14:04:47','2020-02-14 05:04:47','<p>Varidation\nmake\nvaridation 追加</p>','Laravel でのVaridation','','inherit','closed','closed','','509-revision-v1','','','2020-02-14 14:04:47','2020-02-14 05:04:47','Varidation \r\nmake \r\nvaridation 追加',509,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/509-revision-v1/',0,'revision','',0),(511,1,'2020-02-14 14:05:43','0000-00-00 00:00:00','<p>.env config(\'\',\'\')</p>','Laravelで.envの値を取得','','draft','closed','open','','','','','2020-02-14 14:05:43','2020-02-14 05:05:43','.env config(\'\',\'\')',0,'https://blog.webdimension.jp/?p=511',0,'post','',0),(512,1,'2020-02-14 14:05:43','2020-02-14 05:05:43','<p>.env config(\'\',\'\')</p>','Laravelで.envの値を取得','','inherit','closed','closed','','511-revision-v1','','','2020-02-14 14:05:43','2020-02-14 05:05:43','.env config(\'\',\'\')',511,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/511-revision-v1/',0,'revision','',0),(516,1,'2020-02-14 14:10:25','2020-02-14 05:10:25','<p>composer install php-cs-fixer\nidea設定\nrule</p>','php-cs-fixer - Laravelでの開発の前準備','','inherit','closed','closed','','463-revision-v1','','','2020-02-14 14:10:25','2020-02-14 05:10:25','composer install php-cs-fixer\r\nidea設定\r\nrule',463,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/463-revision-v1/',0,'revision','',0),(517,1,'2020-02-14 14:11:51','2020-02-14 05:11:51','<p>moca</p>','vue.js テスト環境  - Laravelでの開発の前準備','','inherit','closed','closed','','469-revision-v1','','','2020-02-14 14:11:51','2020-02-14 05:11:51','moca',469,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/469-revision-v1/',0,'revision','',0),(518,1,'2020-02-14 14:12:31','2020-02-14 05:12:31','<p>js,scssの設定\noutput dir</p>','webpack  - Laravelでの開発の前準備','','inherit','closed','closed','','473-revision-v1','','','2020-02-14 14:12:31','2020-02-14 05:12:31','js,scssの設定\r\noutput dir',473,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/473-revision-v1/',0,'revision','',0),(519,1,'2020-02-14 14:13:15','2020-02-14 05:13:15','<p>middel waer 利用でのrouter</p>','Laravel Routerの設定','','inherit','closed','closed','','479-revision-v1','','','2020-02-14 14:13:15','2020-02-14 05:13:15','middel waer 利用でのrouter',479,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/479-revision-v1/',0,'revision','',0),(520,1,'2020-02-14 14:14:04','2020-02-14 05:14:04','<p>defaut auth login form, passwordfoggoten regster</p>','Laravel Auth　ユーザー認証','','inherit','closed','closed','','481-revision-v1','','','2020-02-14 14:14:04','2020-02-14 05:14:04','defaut auth login form, passwordfoggoten regster',481,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/481-revision-v1/',0,'revision','',0),(521,1,'2020-02-14 14:15:47','2020-02-14 05:15:47','<p>webpack.configへ追加設定</p>','npm watch でLint系実行  - Laravelでの開発の前準備','','inherit','closed','closed','','475-revision-v1','','','2020-02-14 14:15:47','2020-02-14 05:15:47','webpack.configへ追加設定',475,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/475-revision-v1/',0,'revision','',0),(522,1,'2020-02-14 14:16:57','2020-02-14 05:16:57','<p>status login logout...</p>','PHP UnitTest  - Laravelでの開発の前準備','','inherit','closed','closed','','477-revision-v1','','','2020-02-14 14:16:57','2020-02-14 05:16:57','status login logout...',477,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/477-revision-v1/',0,'revision','',0),(525,1,'2020-02-15 14:22:32','2020-02-15 05:22:32','','nginx-proxy','','inherit','closed','closed','','nginx-proxy-2','','','2020-02-15 14:22:32','2020-02-15 05:22:32','',0,'https://blog.webdimension.jp/wp-content/uploads/2020/02/nginx-proxy.png',0,'attachment','image/png',0),(526,1,'2020-02-15 14:44:30','2020-02-15 05:44:30','<h2>Laravel6.x でBootstrap4を導入</h2>\n<h2>laravel/ui導入</h2>\n<pre><code class=\"language-bash\">composer require laravel/ui</code></pre>\n<h3>Bootstrap 導入</h3>\n<pre><code class=\"language-bash\">php artisan ui bootstrap</code></pre>\n<h3>Vue.js 導入</h3>\n<pre><code class=\"language-bash\">php artisan ui vue </code></pre>','Laravelでの開発の前準備その１','Laravel6へBootstrap4 vue.js を導入','inherit','closed','closed','','471-revision-v1','','','2020-02-15 14:44:30','2020-02-15 05:44:30','## Laravel6.x でBootstrap4を導入\r\n## laravel/ui導入\r\n```bash\r\ncomposer require laravel/ui\r\n```\r\n### Bootstrap 導入\r\n```bash\r\nphp artisan ui bootstrap\r\n```\r\n\r\n### Vue.js 導入\r\n```bash\r\nphp artisan ui vue \r\n```\r\n\r\n',471,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/471-revision-v1/',0,'revision','',0),(527,1,'2020-02-15 14:46:29','2020-02-15 05:46:29','<h2>Laravel6.x で Bootstrap4, Vue.js を導入</h2>\n<h2>laravel/ui導入</h2>\n<pre><code class=\"language-bash\">composer require laravel/ui</code></pre>\n<h3>Bootstrap 導入</h3>\n<pre><code class=\"language-bash\">php artisan ui bootstrap</code></pre>\n<h3>Vue.js 導入</h3>\n<pre><code class=\"language-bash\">php artisan ui vue </code></pre>','Laravelでの開発の前準備その１','Laravel6へBootstrap4 vue.js を導入','inherit','closed','closed','','471-revision-v1','','','2020-02-15 14:46:29','2020-02-15 05:46:29','## Laravel6.x で Bootstrap4, Vue.js を導入\r\n## laravel/ui導入\r\n```bash\r\ncomposer require laravel/ui\r\n```\r\n### Bootstrap 導入\r\n```bash\r\nphp artisan ui bootstrap\r\n```\r\n\r\n### Vue.js 導入\r\n```bash\r\nphp artisan ui vue \r\n```\r\n\r\n',471,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/471-revision-v1/',0,'revision','',0),(528,1,'2020-02-15 14:46:54','2020-02-15 05:46:54','<h2>Laravel6.x で Bootstrap4, Vue.js を導入</h2>\n<h3>laravel/ui導入</h3>\n<pre><code class=\"language-bash\">composer require laravel/ui</code></pre>\n<h3>Bootstrap 導入</h3>\n<pre><code class=\"language-bash\">php artisan ui bootstrap</code></pre>\n<h3>Vue.js 導入</h3>\n<pre><code class=\"language-bash\">php artisan ui vue </code></pre>','Laravelでの開発の前準備その１','Laravel6へBootstrap4 vue.js を導入','inherit','closed','closed','','471-revision-v1','','','2020-02-15 14:46:54','2020-02-15 05:46:54','## Laravel6.x で Bootstrap4, Vue.js を導入\r\n### laravel/ui導入\r\n```bash\r\ncomposer require laravel/ui\r\n```\r\n### Bootstrap 導入\r\n```bash\r\nphp artisan ui bootstrap\r\n```\r\n\r\n### Vue.js 導入\r\n```bash\r\nphp artisan ui vue \r\n```\r\n\r\n',471,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/471-revision-v1/',0,'revision','',0),(529,1,'2020-02-15 15:01:21','2020-02-15 06:01:21','','laravel-pre-01','','inherit','closed','closed','','laravel-pre-01','','','2020-02-15 15:01:21','2020-02-15 06:01:21','',471,'https://blog.webdimension.jp/wp-content/uploads/2020/02/laravel-pre-01.png',0,'attachment','image/png',0),(533,1,'2020-02-15 15:31:53','2020-02-15 06:31:53','<h2>php-cs-fixer を設定する</h2>\n<h2>php-cs-fixer Install</h2>\n<pre><code class=\"language-bash\">composer install php-cs-fixer</code></pre>\n<h3>composer.jsonへScriptとして登録</h3>\n<p>vim composer.json\ncomposer fix-diff でrule違反箇所を確認\ncomposer fix でrule違反箇所を整形</p>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n        &quot;post-autoload-dump&quot;: [\n            &quot;Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump&quot;,\n            &quot;@php artisan package:discover --ansi&quot;\n        ],\n        &quot;post-root-package-install&quot;: [\n            &quot;@php -r \\&quot;file_exists(&#039;.env&#039;) || copy(&#039;.env.example&#039;, &#039;.env&#039;);\\&quot;&quot;\n        ],\n        &quot;post-create-project-cmd&quot;: [\n            &quot;@php artisan key:generate --ansi&quot;\n        ],\n        &quot;fix-diff&quot;: [\n            &quot;./vendor/bin/php-cs-fixer fix  --dry-run --diff&quot;\n        ],\n        &quot;fix&quot;: [\n            &quot;./vendor/bin/php-cs-fixer fix&quot;\n        ]\n    }</code></pre>\n<h3>IDEへの設定</h3>\n<p>例) Intelij idea</p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Quality Tools</p>\n<p>[画像]</p>\n<p>ルール違反箇所</p>\n<p>[画像]</p>\n<p><kbd>option</kbd> + <kbd>CR</kbd>\nで自動整形</p>\n<h3>php-cs-fixer 詳細設定</h3>\n<p>プロジェクトルートへ.php_cs.dist or .php_cs</p>\n<pre><code class=\"language-bash\">\n&lt;?php\n$finder = PhpCsFixer\\Finder::create()\n    -&gt;exclude(&#039;bootstrap&#039;)\n    -&gt;exclude(&#039;vendor&#039;)\n    -&gt;exclude(&#039;storage&#039;)\n    -&gt;exclude(&#039;node_module&#039;)\n    -&gt;exclude(&#039;public&#039;)\n    -&gt;exclude(&#039;resources&#039;)\n    -&gt;exclude(&#039;server.php&#039;)\n    -&gt;exclude(&#039;app/Console/Kernel.php&#039;)\n    -&gt;exclude(&#039;tests/CreatesApplication.php&#039;)\n    -&gt;in(__DIR__)\n    -&gt;name(&#039;*.php&#039;)\n    -&gt;notName(&#039;.php_cs&#039;)\n    -&gt;notName(&#039;*.blade.php&#039;)\n    -&gt;ignoreDotFiles(true)\n    -&gt;ignoreVCS(true)\n;\nreturn PhpCsFixer\\Config::create()\n    -&gt;setRiskyAllowed(true)\n    -&gt;setRules([\n        &#039;@PSR2&#039; =&gt; true,\n    //    &#039;align_multiline_comment&#039; =&gt; true,\n        &#039;array_syntax&#039; =&gt; [&#039;syntax&#039; =&gt; &#039;short&#039;],\n    //    &#039;binary_operator_spaces&#039; =&gt; true,\n    //    &#039;blank_line_after_opening_tag&#039; =&gt; true,\n    //    &#039;blank_line_before_statement&#039; =&gt; [&#039;statements&#039; =&gt; [&#039;declare&#039;, &#039;do&#039;, &#039;for&#039;, &#039;foreach&#039;, &#039;if&#039;, &#039;switch&#039;, &#039;try&#039;]],\n    //    &#039;cast_spaces&#039; =&gt; true,\n    //    &#039;class_attributes_separation&#039; =&gt; true,\n    //    &#039;combine_consecutive_issets&#039; =&gt; true,\n    //    &#039;combine_consecutive_unsets&#039; =&gt; true,\n    //    &#039;compact_nullable_typehint&#039; =&gt; true,\n    //    &#039;concat_space&#039; =&gt; [&#039;spacing&#039; =&gt; &#039;one&#039;],\n    //    &#039;declare_equal_normalize&#039; =&gt; true,\n    //    &#039;declare_strict_types&#039; =&gt; true,\n    //    &#039;dir_constant&#039; =&gt; true,\n    //    &#039;ereg_to_preg&#039; =&gt; true,\n    //    &#039;escape_implicit_backslashes&#039; =&gt; true,\n    //    &#039;explicit_indirect_variable&#039; =&gt; true,\n    //    &#039;explicit_string_variable&#039; =&gt; true,\n    //    &#039;final_internal_class&#039; =&gt; true,\n    //    &#039;function_to_constant&#039; =&gt; true,\n    //    &#039;function_typehint_space&#039; =&gt; true,\n    //    &#039;general_phpdoc_annotation_remove&#039; =&gt; [&#039;annotations&#039; =&gt; [&#039;class&#039;, &#039;package&#039;, &#039;author&#039;]],\n    //    &#039;hash_to_slash_comment&#039; =&gt; true,\n    //    &#039;heredoc_to_nowdoc&#039; =&gt; true,\n    //    &#039;include&#039; =&gt; true,\n    //    &#039;is_null&#039; =&gt; [&#039;use_yoda_style&#039; =&gt; false],\n    //    &#039;linebreak_after_opening_tag&#039; =&gt; true,\n    //    &#039;list_syntax&#039; =&gt; true,\n    //    &#039;lowercase_cast&#039; =&gt; true,\n    //    &#039;magic_constant_casing&#039; =&gt; true,\n    //    &#039;method_chaining_indentation&#039; =&gt; true,\n    //    &#039;method_separation&#039; =&gt; true,\n    //    &#039;modernize_types_casting&#039; =&gt; true,\n    //    &#039;native_function_casing&#039; =&gt; true,\n    //    &#039;no_alias_functions&#039; =&gt; true,\n    //    &#039;no_blank_lines_after_class_opening&#039; =&gt; true,\n    //    &#039;no_blank_lines_after_phpdoc&#039; =&gt; true,\n    //    &#039;no_empty_comment&#039; =&gt; true,\n    //    &#039;no_empty_phpdoc&#039; =&gt; true,\n    //    &#039;no_empty_statement&#039; =&gt; true,\n    //    &#039;no_extra_consecutive_blank_lines&#039; =&gt; [&#039;tokens&#039; =&gt; [&#039;break&#039;, &#039;continue&#039;, &#039;extra&#039;, &#039;return&#039;, &#039;throw&#039;, &#039;use&#039;, &#039;parenthesis_brace_block&#039;, &#039;square_brace_block&#039;, &#039;curly_brace_block&#039;]],\n    //    &#039;no_homoglyph_names&#039; =&gt; true,\n    //    &#039;no_leading_import_slash&#039; =&gt; true,\n    //    &#039;no_leading_namespace_whitespace&#039; =&gt; true,\n    //    &#039;no_mixed_echo_print&#039; =&gt; true,\n    //    &#039;no_multiline_whitespace_around_double_arrow&#039; =&gt; true,\n    //    &#039;no_multiline_whitespace_before_semicolons&#039; =&gt; true,\n    //    &#039;no_null_property_initialization&#039; =&gt; true,\n    //    &#039;no_php4_constructor&#039; =&gt; true,\n    //    &#039;no_short_bool_cast&#039; =&gt; true,\n    //    &#039;no_singleline_whitespace_before_semicolons&#039; =&gt; true,\n    //    &#039;no_spaces_around_offset&#039; =&gt; true,\n    //    &#039;no_trailing_comma_in_list_call&#039; =&gt; true,\n    //    &#039;no_trailing_comma_in_singleline_array&#039; =&gt; true,\n    //    &#039;no_unneeded_control_parentheses&#039; =&gt; true,\n    //    &#039;no_unneeded_curly_braces&#039; =&gt; true,\n    //    &#039;no_unneeded_final_method&#039; =&gt; true,\n    //    &#039;no_unreachable_default_argument_value&#039; =&gt; true,\n    //    &#039;no_unused_imports&#039; =&gt; true,\n    //    &#039;no_useless_else&#039; =&gt; true,\n    //    &#039;no_useless_return&#039; =&gt; true,\n    //    &#039;no_whitespace_before_comma_in_array&#039; =&gt; true,\n    //    &#039;no_whitespace_in_blank_line&#039; =&gt; true,\n    //    &#039;normalize_index_brace&#039; =&gt; true,\n    //    &#039;object_operator_without_whitespace&#039; =&gt; true,\n    //    &#039;ordered_class_elements&#039; =&gt; true,\n    //    &#039;ordered_imports&#039; =&gt; true,\n    //    &#039;php_unit_construct&#039; =&gt; true,\n    //    &#039;php_unit_dedicate_assert&#039; =&gt; true,\n    //    &#039;php_unit_mock&#039; =&gt; true,\n    //    &#039;php_unit_namespaced&#039; =&gt; true,\n    //    &#039;phpdoc_add_missing_param_annotation&#039; =&gt; [&#039;only_untyped&#039; =&gt; false],\n    //    &#039;phpdoc_align&#039; =&gt; [&#039;tags&#039; =&gt; [&#039;param&#039;]],\n    //    &#039;phpdoc_annotation_without_dot&#039; =&gt; true,\n    //    &#039;phpdoc_indent&#039; =&gt; true,\n    //    &#039;phpdoc_inline_tag&#039; =&gt; true,\n    //    &#039;phpdoc_no_access&#039; =&gt; true,\n    //    &#039;phpdoc_no_empty_return&#039; =&gt; true,\n    //    &#039;phpdoc_no_package&#039; =&gt; true,\n    //    &#039;phpdoc_order&#039; =&gt; true,\n    //    &#039;phpdoc_return_self_reference&#039; =&gt; true,\n    //    &#039;phpdoc_scalar&#039; =&gt; true,\n    //    &#039;phpdoc_single_line_var_spacing&#039; =&gt; true,\n    //    &#039;phpdoc_summary&#039; =&gt; true,\n    //    &#039;phpdoc_to_comment&#039; =&gt; true,\n    //    &#039;phpdoc_trim&#039; =&gt; true,\n    //    &#039;phpdoc_types&#039; =&gt; true,\n    //    &#039;phpdoc_types_order&#039; =&gt; true,\n    //    &#039;phpdoc_var_without_name&#039; =&gt; true,\n    //    &#039;pow_to_exponentiation&#039; =&gt; true,\n    //    &#039;protected_to_private&#039; =&gt; true,\n    //    &#039;random_api_migration&#039; =&gt; true,\n    //    &#039;return_type_declaration&#039; =&gt; true,\n    //    &#039;self_accessor&#039; =&gt; true,\n    //    &#039;semicolon_after_instruction&#039; =&gt; true,\n    //    &#039;short_scalar_cast&#039; =&gt; true,\n    //    &#039;simplified_null_return&#039; =&gt; true,\n    //    &#039;single_blank_line_before_namespace&#039; =&gt; true,\n    //    &#039;single_line_comment_style&#039; =&gt; true,\n    //    &#039;single_quote&#039; =&gt; true,\n    //    &#039;space_after_semicolon&#039; =&gt; [&#039;remove_in_empty_for_expressions&#039; =&gt; true],\n    //    &#039;standardize_not_equals&#039; =&gt; true,\n    //    &#039;ternary_operator_spaces&#039; =&gt; true,\n    //    &#039;ternary_to_null_coalescing&#039; =&gt; true,\n    //    &#039;trailing_comma_in_multiline_array&#039; =&gt; true,\n    //    &#039;trim_array_spaces&#039; =&gt; true,\n    //    &#039;unary_operator_spaces&#039; =&gt; true,\n    //    &#039;void_return&#039; =&gt; true,\n    //    &#039;whitespace_after_comma_in_array&#039; =&gt; true,\n    //    &#039;yoda_style&#039; =&gt; [&#039;equal&#039; =&gt; false, &#039;identical&#039; =&gt; false],\n    ])\n    -&gt;setFinder($finder);</code></pre>','php-cs-fixer - Laravelでの開発の前準備2','','inherit','closed','closed','','463-revision-v1','','','2020-02-15 15:31:53','2020-02-15 06:31:53','## php-cs-fixer を設定する\r\n## php-cs-fixer Install\r\n```bash\r\ncomposer install php-cs-fixer\r\n```\r\n### composer.jsonへScriptとして登録\r\nvim composer.json\r\ncomposer fix-diff でrule違反箇所を確認\r\ncomposer fix でrule違反箇所を整形\r\n```bash\r\n    &quot;scripts&quot;: {\r\n        &quot;post-autoload-dump&quot;: [\r\n            &quot;Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump&quot;,\r\n            &quot;@php artisan package:discover --ansi&quot;\r\n        ],\r\n        &quot;post-root-package-install&quot;: [\r\n            &quot;@php -r \\&quot;file_exists(&#039;.env&#039;) || copy(&#039;.env.example&#039;, &#039;.env&#039;);\\&quot;&quot;\r\n        ],\r\n        &quot;post-create-project-cmd&quot;: [\r\n            &quot;@php artisan key:generate --ansi&quot;\r\n        ],\r\n        &quot;fix-diff&quot;: [\r\n            &quot;./vendor/bin/php-cs-fixer fix  --dry-run --diff&quot;\r\n        ],\r\n        &quot;fix&quot;: [\r\n            &quot;./vendor/bin/php-cs-fixer fix&quot;\r\n        ]\r\n    }\r\n```\r\n### IDEへの設定\r\n例) Intelij idea\r\n\r\nPreferences | Languages & Frameworks | PHP | Quality Tools\r\n\r\n[画像]\r\n\r\nルール違反箇所\r\n\r\n[画像]\r\n\r\n<kbd>option</kbd> + <kbd>CR</kbd>\r\nで自動整形\r\n### php-cs-fixer 詳細設定\r\nプロジェクトルートへ.php_cs.dist or .php_cs\r\n```bash\r\n\r\n&lt;?php\r\n$finder = PhpCsFixer\\Finder::create()\r\n    -&gt;exclude(&#039;bootstrap&#039;)\r\n    -&gt;exclude(&#039;vendor&#039;)\r\n    -&gt;exclude(&#039;storage&#039;)\r\n    -&gt;exclude(&#039;node_module&#039;)\r\n    -&gt;exclude(&#039;public&#039;)\r\n    -&gt;exclude(&#039;resources&#039;)\r\n    -&gt;exclude(&#039;server.php&#039;)\r\n    -&gt;exclude(&#039;app/Console/Kernel.php&#039;)\r\n    -&gt;exclude(&#039;tests/CreatesApplication.php&#039;)\r\n    -&gt;in(__DIR__)\r\n    -&gt;name(&#039;*.php&#039;)\r\n    -&gt;notName(&#039;.php_cs&#039;)\r\n    -&gt;notName(&#039;*.blade.php&#039;)\r\n    -&gt;ignoreDotFiles(true)\r\n    -&gt;ignoreVCS(true)\r\n;\r\nreturn PhpCsFixer\\Config::create()\r\n    -&gt;setRiskyAllowed(true)\r\n    -&gt;setRules([\r\n        &#039;@PSR2&#039; =&gt; true,\r\n    //    &#039;align_multiline_comment&#039; =&gt; true,\r\n        &#039;array_syntax&#039; =&gt; [&#039;syntax&#039; =&gt; &#039;short&#039;],\r\n    //    &#039;binary_operator_spaces&#039; =&gt; true,\r\n    //    &#039;blank_line_after_opening_tag&#039; =&gt; true,\r\n    //    &#039;blank_line_before_statement&#039; =&gt; [&#039;statements&#039; =&gt; [&#039;declare&#039;, &#039;do&#039;, &#039;for&#039;, &#039;foreach&#039;, &#039;if&#039;, &#039;switch&#039;, &#039;try&#039;]],\r\n    //    &#039;cast_spaces&#039; =&gt; true,\r\n    //    &#039;class_attributes_separation&#039; =&gt; true,\r\n    //    &#039;combine_consecutive_issets&#039; =&gt; true,\r\n    //    &#039;combine_consecutive_unsets&#039; =&gt; true,\r\n    //    &#039;compact_nullable_typehint&#039; =&gt; true,\r\n    //    &#039;concat_space&#039; =&gt; [&#039;spacing&#039; =&gt; &#039;one&#039;],\r\n    //    &#039;declare_equal_normalize&#039; =&gt; true,\r\n    //    &#039;declare_strict_types&#039; =&gt; true,\r\n    //    &#039;dir_constant&#039; =&gt; true,\r\n    //    &#039;ereg_to_preg&#039; =&gt; true,\r\n    //    &#039;escape_implicit_backslashes&#039; =&gt; true,\r\n    //    &#039;explicit_indirect_variable&#039; =&gt; true,\r\n    //    &#039;explicit_string_variable&#039; =&gt; true,\r\n    //    &#039;final_internal_class&#039; =&gt; true,\r\n    //    &#039;function_to_constant&#039; =&gt; true,\r\n    //    &#039;function_typehint_space&#039; =&gt; true,\r\n    //    &#039;general_phpdoc_annotation_remove&#039; =&gt; [&#039;annotations&#039; =&gt; [&#039;class&#039;, &#039;package&#039;, &#039;author&#039;]],\r\n    //    &#039;hash_to_slash_comment&#039; =&gt; true,\r\n    //    &#039;heredoc_to_nowdoc&#039; =&gt; true,\r\n    //    &#039;include&#039; =&gt; true,\r\n    //    &#039;is_null&#039; =&gt; [&#039;use_yoda_style&#039; =&gt; false],\r\n    //    &#039;linebreak_after_opening_tag&#039; =&gt; true,\r\n    //    &#039;list_syntax&#039; =&gt; true,\r\n    //    &#039;lowercase_cast&#039; =&gt; true,\r\n    //    &#039;magic_constant_casing&#039; =&gt; true,\r\n    //    &#039;method_chaining_indentation&#039; =&gt; true,\r\n    //    &#039;method_separation&#039; =&gt; true,\r\n    //    &#039;modernize_types_casting&#039; =&gt; true,\r\n    //    &#039;native_function_casing&#039; =&gt; true,\r\n    //    &#039;no_alias_functions&#039; =&gt; true,\r\n    //    &#039;no_blank_lines_after_class_opening&#039; =&gt; true,\r\n    //    &#039;no_blank_lines_after_phpdoc&#039; =&gt; true,\r\n    //    &#039;no_empty_comment&#039; =&gt; true,\r\n    //    &#039;no_empty_phpdoc&#039; =&gt; true,\r\n    //    &#039;no_empty_statement&#039; =&gt; true,\r\n    //    &#039;no_extra_consecutive_blank_lines&#039; =&gt; [&#039;tokens&#039; =&gt; [&#039;break&#039;, &#039;continue&#039;, &#039;extra&#039;, &#039;return&#039;, &#039;throw&#039;, &#039;use&#039;, &#039;parenthesis_brace_block&#039;, &#039;square_brace_block&#039;, &#039;curly_brace_block&#039;]],\r\n    //    &#039;no_homoglyph_names&#039; =&gt; true,\r\n    //    &#039;no_leading_import_slash&#039; =&gt; true,\r\n    //    &#039;no_leading_namespace_whitespace&#039; =&gt; true,\r\n    //    &#039;no_mixed_echo_print&#039; =&gt; true,\r\n    //    &#039;no_multiline_whitespace_around_double_arrow&#039; =&gt; true,\r\n    //    &#039;no_multiline_whitespace_before_semicolons&#039; =&gt; true,\r\n    //    &#039;no_null_property_initialization&#039; =&gt; true,\r\n    //    &#039;no_php4_constructor&#039; =&gt; true,\r\n    //    &#039;no_short_bool_cast&#039; =&gt; true,\r\n    //    &#039;no_singleline_whitespace_before_semicolons&#039; =&gt; true,\r\n    //    &#039;no_spaces_around_offset&#039; =&gt; true,\r\n    //    &#039;no_trailing_comma_in_list_call&#039; =&gt; true,\r\n    //    &#039;no_trailing_comma_in_singleline_array&#039; =&gt; true,\r\n    //    &#039;no_unneeded_control_parentheses&#039; =&gt; true,\r\n    //    &#039;no_unneeded_curly_braces&#039; =&gt; true,\r\n    //    &#039;no_unneeded_final_method&#039; =&gt; true,\r\n    //    &#039;no_unreachable_default_argument_value&#039; =&gt; true,\r\n    //    &#039;no_unused_imports&#039; =&gt; true,\r\n    //    &#039;no_useless_else&#039; =&gt; true,\r\n    //    &#039;no_useless_return&#039; =&gt; true,\r\n    //    &#039;no_whitespace_before_comma_in_array&#039; =&gt; true,\r\n    //    &#039;no_whitespace_in_blank_line&#039; =&gt; true,\r\n    //    &#039;normalize_index_brace&#039; =&gt; true,\r\n    //    &#039;object_operator_without_whitespace&#039; =&gt; true,\r\n    //    &#039;ordered_class_elements&#039; =&gt; true,\r\n    //    &#039;ordered_imports&#039; =&gt; true,\r\n    //    &#039;php_unit_construct&#039; =&gt; true,\r\n    //    &#039;php_unit_dedicate_assert&#039; =&gt; true,\r\n    //    &#039;php_unit_mock&#039; =&gt; true,\r\n    //    &#039;php_unit_namespaced&#039; =&gt; true,\r\n    //    &#039;phpdoc_add_missing_param_annotation&#039; =&gt; [&#039;only_untyped&#039; =&gt; false],\r\n    //    &#039;phpdoc_align&#039; =&gt; [&#039;tags&#039; =&gt; [&#039;param&#039;]],\r\n    //    &#039;phpdoc_annotation_without_dot&#039; =&gt; true,\r\n    //    &#039;phpdoc_indent&#039; =&gt; true,\r\n    //    &#039;phpdoc_inline_tag&#039; =&gt; true,\r\n    //    &#039;phpdoc_no_access&#039; =&gt; true,\r\n    //    &#039;phpdoc_no_empty_return&#039; =&gt; true,\r\n    //    &#039;phpdoc_no_package&#039; =&gt; true,\r\n    //    &#039;phpdoc_order&#039; =&gt; true,\r\n    //    &#039;phpdoc_return_self_reference&#039; =&gt; true,\r\n    //    &#039;phpdoc_scalar&#039; =&gt; true,\r\n    //    &#039;phpdoc_single_line_var_spacing&#039; =&gt; true,\r\n    //    &#039;phpdoc_summary&#039; =&gt; true,\r\n    //    &#039;phpdoc_to_comment&#039; =&gt; true,\r\n    //    &#039;phpdoc_trim&#039; =&gt; true,\r\n    //    &#039;phpdoc_types&#039; =&gt; true,\r\n    //    &#039;phpdoc_types_order&#039; =&gt; true,\r\n    //    &#039;phpdoc_var_without_name&#039; =&gt; true,\r\n    //    &#039;pow_to_exponentiation&#039; =&gt; true,\r\n    //    &#039;protected_to_private&#039; =&gt; true,\r\n    //    &#039;random_api_migration&#039; =&gt; true,\r\n    //    &#039;return_type_declaration&#039; =&gt; true,\r\n    //    &#039;self_accessor&#039; =&gt; true,\r\n    //    &#039;semicolon_after_instruction&#039; =&gt; true,\r\n    //    &#039;short_scalar_cast&#039; =&gt; true,\r\n    //    &#039;simplified_null_return&#039; =&gt; true,\r\n    //    &#039;single_blank_line_before_namespace&#039; =&gt; true,\r\n    //    &#039;single_line_comment_style&#039; =&gt; true,\r\n    //    &#039;single_quote&#039; =&gt; true,\r\n    //    &#039;space_after_semicolon&#039; =&gt; [&#039;remove_in_empty_for_expressions&#039; =&gt; true],\r\n    //    &#039;standardize_not_equals&#039; =&gt; true,\r\n    //    &#039;ternary_operator_spaces&#039; =&gt; true,\r\n    //    &#039;ternary_to_null_coalescing&#039; =&gt; true,\r\n    //    &#039;trailing_comma_in_multiline_array&#039; =&gt; true,\r\n    //    &#039;trim_array_spaces&#039; =&gt; true,\r\n    //    &#039;unary_operator_spaces&#039; =&gt; true,\r\n    //    &#039;void_return&#039; =&gt; true,\r\n    //    &#039;whitespace_after_comma_in_array&#039; =&gt; true,\r\n    //    &#039;yoda_style&#039; =&gt; [&#039;equal&#039; =&gt; false, &#039;identical&#039; =&gt; false],\r\n    ])\r\n    -&gt;setFinder($finder);\r\n```\r\n',463,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/463-revision-v1/',0,'revision','',0),(535,1,'2020-02-15 15:41:50','2020-02-15 06:41:50','','php-cs-fixer','','inherit','closed','closed','','php-cs-fixer','','','2020-02-15 15:41:50','2020-02-15 06:41:50','',463,'https://blog.webdimension.jp/wp-content/uploads/2020/02/php-cs-fixer.png',0,'attachment','image/png',0),(536,1,'2020-02-15 15:44:43','2020-02-15 06:44:43','<h2>php-cs-fixer を設定する</h2>\n<h2>php-cs-fixer Install</h2>\n<pre><code class=\"language-bash\">composer install php-cs-fixer</code></pre>\n<h3>composer.jsonへScriptとして登録</h3>\n<p>vim composer.json\ncomposer fix-diff でrule違反箇所を確認\ncomposer fix でrule違反箇所を整形</p>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n        &quot;post-autoload-dump&quot;: [\n            &quot;Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump&quot;,\n            &quot;@php artisan package:discover --ansi&quot;\n        ],\n        &quot;post-root-package-install&quot;: [\n            &quot;@php -r \\&quot;file_exists(&#039;.env&#039;) || copy(&#039;.env.example&#039;, &#039;.env&#039;);\\&quot;&quot;\n        ],\n        &quot;post-create-project-cmd&quot;: [\n            &quot;@php artisan key:generate --ansi&quot;\n        ],\n        &quot;fix-diff&quot;: [\n            &quot;./vendor/bin/php-cs-fixer fix  --dry-run --diff&quot;\n        ],\n        &quot;fix&quot;: [\n            &quot;./vendor/bin/php-cs-fixer fix&quot;\n        ]\n    }</code></pre>\n<h3>IDEへの設定</h3>\n<p>例) Intelij idea</p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Quality Tools</p>\n<p>[画像]</p>\n<p>ルール違反箇所</p>\n<p>[画像]</p>\n<p><kbd>option</kbd> + <kbd>CR</kbd>\nで自動整形</p>\n<h3>php-cs-fixer 詳細設定</h3>\n<p>プロジェクトルートへ.php_cs.dist or .php_cs</p>\n<pre><code class=\"language-bash\">\n&lt;?php\n$finder = PhpCsFixer\\Finder::create()\n    -&gt;exclude(&#039;bootstrap&#039;)\n    -&gt;exclude(&#039;vendor&#039;)\n    -&gt;exclude(&#039;storage&#039;)\n    -&gt;exclude(&#039;node_module&#039;)\n    -&gt;exclude(&#039;public&#039;)\n    -&gt;exclude(&#039;resources&#039;)\n    -&gt;exclude(&#039;server.php&#039;)\n    -&gt;exclude(&#039;app/Console/Kernel.php&#039;)\n    -&gt;exclude(&#039;tests/CreatesApplication.php&#039;)\n    -&gt;in(__DIR__)\n    -&gt;name(&#039;*.php&#039;)\n    -&gt;notName(&#039;.php_cs&#039;)\n    -&gt;notName(&#039;*.blade.php&#039;)\n    -&gt;ignoreDotFiles(true)\n    -&gt;ignoreVCS(true)\n;\nreturn PhpCsFixer\\Config::create()\n    -&gt;setRiskyAllowed(true)\n    -&gt;setRules([\n        &#039;@PSR2&#039; =&gt; true,\n    //    &#039;align_multiline_comment&#039; =&gt; true,\n        &#039;array_syntax&#039; =&gt; [&#039;syntax&#039; =&gt; &#039;short&#039;],\n    //    &#039;binary_operator_spaces&#039; =&gt; true,\n    //    &#039;blank_line_after_opening_tag&#039; =&gt; true,\n    //    &#039;blank_line_before_statement&#039; =&gt; [&#039;statements&#039; =&gt; [&#039;declare&#039;, &#039;do&#039;, &#039;for&#039;, &#039;foreach&#039;, &#039;if&#039;, &#039;switch&#039;, &#039;try&#039;]],\n    //    &#039;cast_spaces&#039; =&gt; true,\n    //    &#039;class_attributes_separation&#039; =&gt; true,\n    //    &#039;combine_consecutive_issets&#039; =&gt; true,\n    //    &#039;combine_consecutive_unsets&#039; =&gt; true,\n    //    &#039;compact_nullable_typehint&#039; =&gt; true,\n    //    &#039;concat_space&#039; =&gt; [&#039;spacing&#039; =&gt; &#039;one&#039;],\n    //    &#039;declare_equal_normalize&#039; =&gt; true,\n    //    &#039;declare_strict_types&#039; =&gt; true,\n    //    &#039;dir_constant&#039; =&gt; true,\n    //    &#039;ereg_to_preg&#039; =&gt; true,\n    //    &#039;escape_implicit_backslashes&#039; =&gt; true,\n    //    &#039;explicit_indirect_variable&#039; =&gt; true,\n    //    &#039;explicit_string_variable&#039; =&gt; true,\n    //    &#039;final_internal_class&#039; =&gt; true,\n    //    &#039;function_to_constant&#039; =&gt; true,\n    //    &#039;function_typehint_space&#039; =&gt; true,\n    //    &#039;general_phpdoc_annotation_remove&#039; =&gt; [&#039;annotations&#039; =&gt; [&#039;class&#039;, &#039;package&#039;, &#039;author&#039;]],\n    //    &#039;hash_to_slash_comment&#039; =&gt; true,\n    //    &#039;heredoc_to_nowdoc&#039; =&gt; true,\n    //    &#039;include&#039; =&gt; true,\n    //    &#039;is_null&#039; =&gt; [&#039;use_yoda_style&#039; =&gt; false],\n    //    &#039;linebreak_after_opening_tag&#039; =&gt; true,\n    //    &#039;list_syntax&#039; =&gt; true,\n    //    &#039;lowercase_cast&#039; =&gt; true,\n    //    &#039;magic_constant_casing&#039; =&gt; true,\n    //    &#039;method_chaining_indentation&#039; =&gt; true,\n    //    &#039;method_separation&#039; =&gt; true,\n    //    &#039;modernize_types_casting&#039; =&gt; true,\n    //    &#039;native_function_casing&#039; =&gt; true,\n    //    &#039;no_alias_functions&#039; =&gt; true,\n    //    &#039;no_blank_lines_after_class_opening&#039; =&gt; true,\n    //    &#039;no_blank_lines_after_phpdoc&#039; =&gt; true,\n    //    &#039;no_empty_comment&#039; =&gt; true,\n    //    &#039;no_empty_phpdoc&#039; =&gt; true,\n    //    &#039;no_empty_statement&#039; =&gt; true,\n    //    &#039;no_extra_consecutive_blank_lines&#039; =&gt; [&#039;tokens&#039; =&gt; [&#039;break&#039;, &#039;continue&#039;, &#039;extra&#039;, &#039;return&#039;, &#039;throw&#039;, &#039;use&#039;, &#039;parenthesis_brace_block&#039;, &#039;square_brace_block&#039;, &#039;curly_brace_block&#039;]],\n    //    &#039;no_homoglyph_names&#039; =&gt; true,\n    //    &#039;no_leading_import_slash&#039; =&gt; true,\n    //    &#039;no_leading_namespace_whitespace&#039; =&gt; true,\n    //    &#039;no_mixed_echo_print&#039; =&gt; true,\n    //    &#039;no_multiline_whitespace_around_double_arrow&#039; =&gt; true,\n    //    &#039;no_multiline_whitespace_before_semicolons&#039; =&gt; true,\n    //    &#039;no_null_property_initialization&#039; =&gt; true,\n    //    &#039;no_php4_constructor&#039; =&gt; true,\n    //    &#039;no_short_bool_cast&#039; =&gt; true,\n    //    &#039;no_singleline_whitespace_before_semicolons&#039; =&gt; true,\n    //    &#039;no_spaces_around_offset&#039; =&gt; true,\n    //    &#039;no_trailing_comma_in_list_call&#039; =&gt; true,\n    //    &#039;no_trailing_comma_in_singleline_array&#039; =&gt; true,\n    //    &#039;no_unneeded_control_parentheses&#039; =&gt; true,\n    //    &#039;no_unneeded_curly_braces&#039; =&gt; true,\n    //    &#039;no_unneeded_final_method&#039; =&gt; true,\n    //    &#039;no_unreachable_default_argument_value&#039; =&gt; true,\n    //    &#039;no_unused_imports&#039; =&gt; true,\n    //    &#039;no_useless_else&#039; =&gt; true,\n    //    &#039;no_useless_return&#039; =&gt; true,\n    //    &#039;no_whitespace_before_comma_in_array&#039; =&gt; true,\n    //    &#039;no_whitespace_in_blank_line&#039; =&gt; true,\n    //    &#039;normalize_index_brace&#039; =&gt; true,\n    //    &#039;object_operator_without_whitespace&#039; =&gt; true,\n    //    &#039;ordered_class_elements&#039; =&gt; true,\n    //    &#039;ordered_imports&#039; =&gt; true,\n    //    &#039;php_unit_construct&#039; =&gt; true,\n    //    &#039;php_unit_dedicate_assert&#039; =&gt; true,\n    //    &#039;php_unit_mock&#039; =&gt; true,\n    //    &#039;php_unit_namespaced&#039; =&gt; true,\n    //    &#039;phpdoc_add_missing_param_annotation&#039; =&gt; [&#039;only_untyped&#039; =&gt; false],\n    //    &#039;phpdoc_align&#039; =&gt; [&#039;tags&#039; =&gt; [&#039;param&#039;]],\n    //    &#039;phpdoc_annotation_without_dot&#039; =&gt; true,\n    //    &#039;phpdoc_indent&#039; =&gt; true,\n    //    &#039;phpdoc_inline_tag&#039; =&gt; true,\n    //    &#039;phpdoc_no_access&#039; =&gt; true,\n    //    &#039;phpdoc_no_empty_return&#039; =&gt; true,\n    //    &#039;phpdoc_no_package&#039; =&gt; true,\n    //    &#039;phpdoc_order&#039; =&gt; true,\n    //    &#039;phpdoc_return_self_reference&#039; =&gt; true,\n    //    &#039;phpdoc_scalar&#039; =&gt; true,\n    //    &#039;phpdoc_single_line_var_spacing&#039; =&gt; true,\n    //    &#039;phpdoc_summary&#039; =&gt; true,\n    //    &#039;phpdoc_to_comment&#039; =&gt; true,\n    //    &#039;phpdoc_trim&#039; =&gt; true,\n    //    &#039;phpdoc_types&#039; =&gt; true,\n    //    &#039;phpdoc_types_order&#039; =&gt; true,\n    //    &#039;phpdoc_var_without_name&#039; =&gt; true,\n    //    &#039;pow_to_exponentiation&#039; =&gt; true,\n    //    &#039;protected_to_private&#039; =&gt; true,\n    //    &#039;random_api_migration&#039; =&gt; true,\n    //    &#039;return_type_declaration&#039; =&gt; true,\n    //    &#039;self_accessor&#039; =&gt; true,\n    //    &#039;semicolon_after_instruction&#039; =&gt; true,\n    //    &#039;short_scalar_cast&#039; =&gt; true,\n    //    &#039;simplified_null_return&#039; =&gt; true,\n    //    &#039;single_blank_line_before_namespace&#039; =&gt; true,\n    //    &#039;single_line_comment_style&#039; =&gt; true,\n    //    &#039;single_quote&#039; =&gt; true,\n    //    &#039;space_after_semicolon&#039; =&gt; [&#039;remove_in_empty_for_expressions&#039; =&gt; true],\n    //    &#039;standardize_not_equals&#039; =&gt; true,\n    //    &#039;ternary_operator_spaces&#039; =&gt; true,\n    //    &#039;ternary_to_null_coalescing&#039; =&gt; true,\n    //    &#039;trailing_comma_in_multiline_array&#039; =&gt; true,\n    //    &#039;trim_array_spaces&#039; =&gt; true,\n    //    &#039;unary_operator_spaces&#039; =&gt; true,\n    //    &#039;void_return&#039; =&gt; true,\n    //    &#039;whitespace_after_comma_in_array&#039; =&gt; true,\n    //    &#039;yoda_style&#039; =&gt; [&#039;equal&#039; =&gt; false, &#039;identical&#039; =&gt; false],\n    ])\n    -&gt;setFinder($finder);</code></pre>','php-cs-fixer - Laravelでの開発の前準備2','php-cs-fixerを導入しコーディングルールを設定。\r\nIDEに設定すればルール違反をリアルタイムで指摘してくれる。','inherit','closed','closed','','463-revision-v1','','','2020-02-15 15:44:43','2020-02-15 06:44:43','## php-cs-fixer を設定する\r\n## php-cs-fixer Install\r\n```bash\r\ncomposer install php-cs-fixer\r\n```\r\n### composer.jsonへScriptとして登録\r\nvim composer.json\r\ncomposer fix-diff でrule違反箇所を確認\r\ncomposer fix でrule違反箇所を整形\r\n```bash\r\n    &quot;scripts&quot;: {\r\n        &quot;post-autoload-dump&quot;: [\r\n            &quot;Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump&quot;,\r\n            &quot;@php artisan package:discover --ansi&quot;\r\n        ],\r\n        &quot;post-root-package-install&quot;: [\r\n            &quot;@php -r \\&quot;file_exists(&#039;.env&#039;) || copy(&#039;.env.example&#039;, &#039;.env&#039;);\\&quot;&quot;\r\n        ],\r\n        &quot;post-create-project-cmd&quot;: [\r\n            &quot;@php artisan key:generate --ansi&quot;\r\n        ],\r\n        &quot;fix-diff&quot;: [\r\n            &quot;./vendor/bin/php-cs-fixer fix  --dry-run --diff&quot;\r\n        ],\r\n        &quot;fix&quot;: [\r\n            &quot;./vendor/bin/php-cs-fixer fix&quot;\r\n        ]\r\n    }\r\n```\r\n### IDEへの設定\r\n例) Intelij idea\r\n\r\nPreferences | Languages & Frameworks | PHP | Quality Tools\r\n\r\n[画像]\r\n\r\nルール違反箇所\r\n\r\n[画像]\r\n\r\n<kbd>option</kbd> + <kbd>CR</kbd>\r\nで自動整形\r\n### php-cs-fixer 詳細設定\r\nプロジェクトルートへ.php_cs.dist or .php_cs\r\n```bash\r\n\r\n&lt;?php\r\n$finder = PhpCsFixer\\Finder::create()\r\n    -&gt;exclude(&#039;bootstrap&#039;)\r\n    -&gt;exclude(&#039;vendor&#039;)\r\n    -&gt;exclude(&#039;storage&#039;)\r\n    -&gt;exclude(&#039;node_module&#039;)\r\n    -&gt;exclude(&#039;public&#039;)\r\n    -&gt;exclude(&#039;resources&#039;)\r\n    -&gt;exclude(&#039;server.php&#039;)\r\n    -&gt;exclude(&#039;app/Console/Kernel.php&#039;)\r\n    -&gt;exclude(&#039;tests/CreatesApplication.php&#039;)\r\n    -&gt;in(__DIR__)\r\n    -&gt;name(&#039;*.php&#039;)\r\n    -&gt;notName(&#039;.php_cs&#039;)\r\n    -&gt;notName(&#039;*.blade.php&#039;)\r\n    -&gt;ignoreDotFiles(true)\r\n    -&gt;ignoreVCS(true)\r\n;\r\nreturn PhpCsFixer\\Config::create()\r\n    -&gt;setRiskyAllowed(true)\r\n    -&gt;setRules([\r\n        &#039;@PSR2&#039; =&gt; true,\r\n    //    &#039;align_multiline_comment&#039; =&gt; true,\r\n        &#039;array_syntax&#039; =&gt; [&#039;syntax&#039; =&gt; &#039;short&#039;],\r\n    //    &#039;binary_operator_spaces&#039; =&gt; true,\r\n    //    &#039;blank_line_after_opening_tag&#039; =&gt; true,\r\n    //    &#039;blank_line_before_statement&#039; =&gt; [&#039;statements&#039; =&gt; [&#039;declare&#039;, &#039;do&#039;, &#039;for&#039;, &#039;foreach&#039;, &#039;if&#039;, &#039;switch&#039;, &#039;try&#039;]],\r\n    //    &#039;cast_spaces&#039; =&gt; true,\r\n    //    &#039;class_attributes_separation&#039; =&gt; true,\r\n    //    &#039;combine_consecutive_issets&#039; =&gt; true,\r\n    //    &#039;combine_consecutive_unsets&#039; =&gt; true,\r\n    //    &#039;compact_nullable_typehint&#039; =&gt; true,\r\n    //    &#039;concat_space&#039; =&gt; [&#039;spacing&#039; =&gt; &#039;one&#039;],\r\n    //    &#039;declare_equal_normalize&#039; =&gt; true,\r\n    //    &#039;declare_strict_types&#039; =&gt; true,\r\n    //    &#039;dir_constant&#039; =&gt; true,\r\n    //    &#039;ereg_to_preg&#039; =&gt; true,\r\n    //    &#039;escape_implicit_backslashes&#039; =&gt; true,\r\n    //    &#039;explicit_indirect_variable&#039; =&gt; true,\r\n    //    &#039;explicit_string_variable&#039; =&gt; true,\r\n    //    &#039;final_internal_class&#039; =&gt; true,\r\n    //    &#039;function_to_constant&#039; =&gt; true,\r\n    //    &#039;function_typehint_space&#039; =&gt; true,\r\n    //    &#039;general_phpdoc_annotation_remove&#039; =&gt; [&#039;annotations&#039; =&gt; [&#039;class&#039;, &#039;package&#039;, &#039;author&#039;]],\r\n    //    &#039;hash_to_slash_comment&#039; =&gt; true,\r\n    //    &#039;heredoc_to_nowdoc&#039; =&gt; true,\r\n    //    &#039;include&#039; =&gt; true,\r\n    //    &#039;is_null&#039; =&gt; [&#039;use_yoda_style&#039; =&gt; false],\r\n    //    &#039;linebreak_after_opening_tag&#039; =&gt; true,\r\n    //    &#039;list_syntax&#039; =&gt; true,\r\n    //    &#039;lowercase_cast&#039; =&gt; true,\r\n    //    &#039;magic_constant_casing&#039; =&gt; true,\r\n    //    &#039;method_chaining_indentation&#039; =&gt; true,\r\n    //    &#039;method_separation&#039; =&gt; true,\r\n    //    &#039;modernize_types_casting&#039; =&gt; true,\r\n    //    &#039;native_function_casing&#039; =&gt; true,\r\n    //    &#039;no_alias_functions&#039; =&gt; true,\r\n    //    &#039;no_blank_lines_after_class_opening&#039; =&gt; true,\r\n    //    &#039;no_blank_lines_after_phpdoc&#039; =&gt; true,\r\n    //    &#039;no_empty_comment&#039; =&gt; true,\r\n    //    &#039;no_empty_phpdoc&#039; =&gt; true,\r\n    //    &#039;no_empty_statement&#039; =&gt; true,\r\n    //    &#039;no_extra_consecutive_blank_lines&#039; =&gt; [&#039;tokens&#039; =&gt; [&#039;break&#039;, &#039;continue&#039;, &#039;extra&#039;, &#039;return&#039;, &#039;throw&#039;, &#039;use&#039;, &#039;parenthesis_brace_block&#039;, &#039;square_brace_block&#039;, &#039;curly_brace_block&#039;]],\r\n    //    &#039;no_homoglyph_names&#039; =&gt; true,\r\n    //    &#039;no_leading_import_slash&#039; =&gt; true,\r\n    //    &#039;no_leading_namespace_whitespace&#039; =&gt; true,\r\n    //    &#039;no_mixed_echo_print&#039; =&gt; true,\r\n    //    &#039;no_multiline_whitespace_around_double_arrow&#039; =&gt; true,\r\n    //    &#039;no_multiline_whitespace_before_semicolons&#039; =&gt; true,\r\n    //    &#039;no_null_property_initialization&#039; =&gt; true,\r\n    //    &#039;no_php4_constructor&#039; =&gt; true,\r\n    //    &#039;no_short_bool_cast&#039; =&gt; true,\r\n    //    &#039;no_singleline_whitespace_before_semicolons&#039; =&gt; true,\r\n    //    &#039;no_spaces_around_offset&#039; =&gt; true,\r\n    //    &#039;no_trailing_comma_in_list_call&#039; =&gt; true,\r\n    //    &#039;no_trailing_comma_in_singleline_array&#039; =&gt; true,\r\n    //    &#039;no_unneeded_control_parentheses&#039; =&gt; true,\r\n    //    &#039;no_unneeded_curly_braces&#039; =&gt; true,\r\n    //    &#039;no_unneeded_final_method&#039; =&gt; true,\r\n    //    &#039;no_unreachable_default_argument_value&#039; =&gt; true,\r\n    //    &#039;no_unused_imports&#039; =&gt; true,\r\n    //    &#039;no_useless_else&#039; =&gt; true,\r\n    //    &#039;no_useless_return&#039; =&gt; true,\r\n    //    &#039;no_whitespace_before_comma_in_array&#039; =&gt; true,\r\n    //    &#039;no_whitespace_in_blank_line&#039; =&gt; true,\r\n    //    &#039;normalize_index_brace&#039; =&gt; true,\r\n    //    &#039;object_operator_without_whitespace&#039; =&gt; true,\r\n    //    &#039;ordered_class_elements&#039; =&gt; true,\r\n    //    &#039;ordered_imports&#039; =&gt; true,\r\n    //    &#039;php_unit_construct&#039; =&gt; true,\r\n    //    &#039;php_unit_dedicate_assert&#039; =&gt; true,\r\n    //    &#039;php_unit_mock&#039; =&gt; true,\r\n    //    &#039;php_unit_namespaced&#039; =&gt; true,\r\n    //    &#039;phpdoc_add_missing_param_annotation&#039; =&gt; [&#039;only_untyped&#039; =&gt; false],\r\n    //    &#039;phpdoc_align&#039; =&gt; [&#039;tags&#039; =&gt; [&#039;param&#039;]],\r\n    //    &#039;phpdoc_annotation_without_dot&#039; =&gt; true,\r\n    //    &#039;phpdoc_indent&#039; =&gt; true,\r\n    //    &#039;phpdoc_inline_tag&#039; =&gt; true,\r\n    //    &#039;phpdoc_no_access&#039; =&gt; true,\r\n    //    &#039;phpdoc_no_empty_return&#039; =&gt; true,\r\n    //    &#039;phpdoc_no_package&#039; =&gt; true,\r\n    //    &#039;phpdoc_order&#039; =&gt; true,\r\n    //    &#039;phpdoc_return_self_reference&#039; =&gt; true,\r\n    //    &#039;phpdoc_scalar&#039; =&gt; true,\r\n    //    &#039;phpdoc_single_line_var_spacing&#039; =&gt; true,\r\n    //    &#039;phpdoc_summary&#039; =&gt; true,\r\n    //    &#039;phpdoc_to_comment&#039; =&gt; true,\r\n    //    &#039;phpdoc_trim&#039; =&gt; true,\r\n    //    &#039;phpdoc_types&#039; =&gt; true,\r\n    //    &#039;phpdoc_types_order&#039; =&gt; true,\r\n    //    &#039;phpdoc_var_without_name&#039; =&gt; true,\r\n    //    &#039;pow_to_exponentiation&#039; =&gt; true,\r\n    //    &#039;protected_to_private&#039; =&gt; true,\r\n    //    &#039;random_api_migration&#039; =&gt; true,\r\n    //    &#039;return_type_declaration&#039; =&gt; true,\r\n    //    &#039;self_accessor&#039; =&gt; true,\r\n    //    &#039;semicolon_after_instruction&#039; =&gt; true,\r\n    //    &#039;short_scalar_cast&#039; =&gt; true,\r\n    //    &#039;simplified_null_return&#039; =&gt; true,\r\n    //    &#039;single_blank_line_before_namespace&#039; =&gt; true,\r\n    //    &#039;single_line_comment_style&#039; =&gt; true,\r\n    //    &#039;single_quote&#039; =&gt; true,\r\n    //    &#039;space_after_semicolon&#039; =&gt; [&#039;remove_in_empty_for_expressions&#039; =&gt; true],\r\n    //    &#039;standardize_not_equals&#039; =&gt; true,\r\n    //    &#039;ternary_operator_spaces&#039; =&gt; true,\r\n    //    &#039;ternary_to_null_coalescing&#039; =&gt; true,\r\n    //    &#039;trailing_comma_in_multiline_array&#039; =&gt; true,\r\n    //    &#039;trim_array_spaces&#039; =&gt; true,\r\n    //    &#039;unary_operator_spaces&#039; =&gt; true,\r\n    //    &#039;void_return&#039; =&gt; true,\r\n    //    &#039;whitespace_after_comma_in_array&#039; =&gt; true,\r\n    //    &#039;yoda_style&#039; =&gt; [&#039;equal&#039; =&gt; false, &#039;identical&#039; =&gt; false],\r\n    ])\r\n    -&gt;setFinder($finder);\r\n```\r\n',463,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/463-revision-v1/',0,'revision','',0),(537,1,'2020-02-15 15:45:04','2020-02-15 06:45:04','<h2>php-cs-fixer を設定する</h2>\n<h3>php-cs-fixer Install</h3>\n<pre><code class=\"language-bash\">composer install php-cs-fixer</code></pre>\n<h3>composer.jsonへScriptとして登録</h3>\n<p>vim composer.json\ncomposer fix-diff でrule違反箇所を確認\ncomposer fix でrule違反箇所を整形</p>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n        &quot;post-autoload-dump&quot;: [\n            &quot;Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump&quot;,\n            &quot;@php artisan package:discover --ansi&quot;\n        ],\n        &quot;post-root-package-install&quot;: [\n            &quot;@php -r \\&quot;file_exists(&#039;.env&#039;) || copy(&#039;.env.example&#039;, &#039;.env&#039;);\\&quot;&quot;\n        ],\n        &quot;post-create-project-cmd&quot;: [\n            &quot;@php artisan key:generate --ansi&quot;\n        ],\n        &quot;fix-diff&quot;: [\n            &quot;./vendor/bin/php-cs-fixer fix  --dry-run --diff&quot;\n        ],\n        &quot;fix&quot;: [\n            &quot;./vendor/bin/php-cs-fixer fix&quot;\n        ]\n    }</code></pre>\n<h3>IDEへの設定</h3>\n<p>例) Intelij idea</p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Quality Tools</p>\n<p>[画像]</p>\n<p>ルール違反箇所</p>\n<p>[画像]</p>\n<p><kbd>option</kbd> + <kbd>CR</kbd>\nで自動整形</p>\n<h3>php-cs-fixer 詳細設定</h3>\n<p>プロジェクトルートへ.php_cs.dist or .php_cs</p>\n<pre><code class=\"language-bash\">\n&lt;?php\n$finder = PhpCsFixer\\Finder::create()\n    -&gt;exclude(&#039;bootstrap&#039;)\n    -&gt;exclude(&#039;vendor&#039;)\n    -&gt;exclude(&#039;storage&#039;)\n    -&gt;exclude(&#039;node_module&#039;)\n    -&gt;exclude(&#039;public&#039;)\n    -&gt;exclude(&#039;resources&#039;)\n    -&gt;exclude(&#039;server.php&#039;)\n    -&gt;exclude(&#039;app/Console/Kernel.php&#039;)\n    -&gt;exclude(&#039;tests/CreatesApplication.php&#039;)\n    -&gt;in(__DIR__)\n    -&gt;name(&#039;*.php&#039;)\n    -&gt;notName(&#039;.php_cs&#039;)\n    -&gt;notName(&#039;*.blade.php&#039;)\n    -&gt;ignoreDotFiles(true)\n    -&gt;ignoreVCS(true)\n;\nreturn PhpCsFixer\\Config::create()\n    -&gt;setRiskyAllowed(true)\n    -&gt;setRules([\n        &#039;@PSR2&#039; =&gt; true,\n    //    &#039;align_multiline_comment&#039; =&gt; true,\n        &#039;array_syntax&#039; =&gt; [&#039;syntax&#039; =&gt; &#039;short&#039;],\n    //    &#039;binary_operator_spaces&#039; =&gt; true,\n    //    &#039;blank_line_after_opening_tag&#039; =&gt; true,\n    //    &#039;blank_line_before_statement&#039; =&gt; [&#039;statements&#039; =&gt; [&#039;declare&#039;, &#039;do&#039;, &#039;for&#039;, &#039;foreach&#039;, &#039;if&#039;, &#039;switch&#039;, &#039;try&#039;]],\n    //    &#039;cast_spaces&#039; =&gt; true,\n    //    &#039;class_attributes_separation&#039; =&gt; true,\n    //    &#039;combine_consecutive_issets&#039; =&gt; true,\n    //    &#039;combine_consecutive_unsets&#039; =&gt; true,\n    //    &#039;compact_nullable_typehint&#039; =&gt; true,\n    //    &#039;concat_space&#039; =&gt; [&#039;spacing&#039; =&gt; &#039;one&#039;],\n    //    &#039;declare_equal_normalize&#039; =&gt; true,\n    //    &#039;declare_strict_types&#039; =&gt; true,\n    //    &#039;dir_constant&#039; =&gt; true,\n    //    &#039;ereg_to_preg&#039; =&gt; true,\n    //    &#039;escape_implicit_backslashes&#039; =&gt; true,\n    //    &#039;explicit_indirect_variable&#039; =&gt; true,\n    //    &#039;explicit_string_variable&#039; =&gt; true,\n    //    &#039;final_internal_class&#039; =&gt; true,\n    //    &#039;function_to_constant&#039; =&gt; true,\n    //    &#039;function_typehint_space&#039; =&gt; true,\n    //    &#039;general_phpdoc_annotation_remove&#039; =&gt; [&#039;annotations&#039; =&gt; [&#039;class&#039;, &#039;package&#039;, &#039;author&#039;]],\n    //    &#039;hash_to_slash_comment&#039; =&gt; true,\n    //    &#039;heredoc_to_nowdoc&#039; =&gt; true,\n    //    &#039;include&#039; =&gt; true,\n    //    &#039;is_null&#039; =&gt; [&#039;use_yoda_style&#039; =&gt; false],\n    //    &#039;linebreak_after_opening_tag&#039; =&gt; true,\n    //    &#039;list_syntax&#039; =&gt; true,\n    //    &#039;lowercase_cast&#039; =&gt; true,\n    //    &#039;magic_constant_casing&#039; =&gt; true,\n    //    &#039;method_chaining_indentation&#039; =&gt; true,\n    //    &#039;method_separation&#039; =&gt; true,\n    //    &#039;modernize_types_casting&#039; =&gt; true,\n    //    &#039;native_function_casing&#039; =&gt; true,\n    //    &#039;no_alias_functions&#039; =&gt; true,\n    //    &#039;no_blank_lines_after_class_opening&#039; =&gt; true,\n    //    &#039;no_blank_lines_after_phpdoc&#039; =&gt; true,\n    //    &#039;no_empty_comment&#039; =&gt; true,\n    //    &#039;no_empty_phpdoc&#039; =&gt; true,\n    //    &#039;no_empty_statement&#039; =&gt; true,\n    //    &#039;no_extra_consecutive_blank_lines&#039; =&gt; [&#039;tokens&#039; =&gt; [&#039;break&#039;, &#039;continue&#039;, &#039;extra&#039;, &#039;return&#039;, &#039;throw&#039;, &#039;use&#039;, &#039;parenthesis_brace_block&#039;, &#039;square_brace_block&#039;, &#039;curly_brace_block&#039;]],\n    //    &#039;no_homoglyph_names&#039; =&gt; true,\n    //    &#039;no_leading_import_slash&#039; =&gt; true,\n    //    &#039;no_leading_namespace_whitespace&#039; =&gt; true,\n    //    &#039;no_mixed_echo_print&#039; =&gt; true,\n    //    &#039;no_multiline_whitespace_around_double_arrow&#039; =&gt; true,\n    //    &#039;no_multiline_whitespace_before_semicolons&#039; =&gt; true,\n    //    &#039;no_null_property_initialization&#039; =&gt; true,\n    //    &#039;no_php4_constructor&#039; =&gt; true,\n    //    &#039;no_short_bool_cast&#039; =&gt; true,\n    //    &#039;no_singleline_whitespace_before_semicolons&#039; =&gt; true,\n    //    &#039;no_spaces_around_offset&#039; =&gt; true,\n    //    &#039;no_trailing_comma_in_list_call&#039; =&gt; true,\n    //    &#039;no_trailing_comma_in_singleline_array&#039; =&gt; true,\n    //    &#039;no_unneeded_control_parentheses&#039; =&gt; true,\n    //    &#039;no_unneeded_curly_braces&#039; =&gt; true,\n    //    &#039;no_unneeded_final_method&#039; =&gt; true,\n    //    &#039;no_unreachable_default_argument_value&#039; =&gt; true,\n    //    &#039;no_unused_imports&#039; =&gt; true,\n    //    &#039;no_useless_else&#039; =&gt; true,\n    //    &#039;no_useless_return&#039; =&gt; true,\n    //    &#039;no_whitespace_before_comma_in_array&#039; =&gt; true,\n    //    &#039;no_whitespace_in_blank_line&#039; =&gt; true,\n    //    &#039;normalize_index_brace&#039; =&gt; true,\n    //    &#039;object_operator_without_whitespace&#039; =&gt; true,\n    //    &#039;ordered_class_elements&#039; =&gt; true,\n    //    &#039;ordered_imports&#039; =&gt; true,\n    //    &#039;php_unit_construct&#039; =&gt; true,\n    //    &#039;php_unit_dedicate_assert&#039; =&gt; true,\n    //    &#039;php_unit_mock&#039; =&gt; true,\n    //    &#039;php_unit_namespaced&#039; =&gt; true,\n    //    &#039;phpdoc_add_missing_param_annotation&#039; =&gt; [&#039;only_untyped&#039; =&gt; false],\n    //    &#039;phpdoc_align&#039; =&gt; [&#039;tags&#039; =&gt; [&#039;param&#039;]],\n    //    &#039;phpdoc_annotation_without_dot&#039; =&gt; true,\n    //    &#039;phpdoc_indent&#039; =&gt; true,\n    //    &#039;phpdoc_inline_tag&#039; =&gt; true,\n    //    &#039;phpdoc_no_access&#039; =&gt; true,\n    //    &#039;phpdoc_no_empty_return&#039; =&gt; true,\n    //    &#039;phpdoc_no_package&#039; =&gt; true,\n    //    &#039;phpdoc_order&#039; =&gt; true,\n    //    &#039;phpdoc_return_self_reference&#039; =&gt; true,\n    //    &#039;phpdoc_scalar&#039; =&gt; true,\n    //    &#039;phpdoc_single_line_var_spacing&#039; =&gt; true,\n    //    &#039;phpdoc_summary&#039; =&gt; true,\n    //    &#039;phpdoc_to_comment&#039; =&gt; true,\n    //    &#039;phpdoc_trim&#039; =&gt; true,\n    //    &#039;phpdoc_types&#039; =&gt; true,\n    //    &#039;phpdoc_types_order&#039; =&gt; true,\n    //    &#039;phpdoc_var_without_name&#039; =&gt; true,\n    //    &#039;pow_to_exponentiation&#039; =&gt; true,\n    //    &#039;protected_to_private&#039; =&gt; true,\n    //    &#039;random_api_migration&#039; =&gt; true,\n    //    &#039;return_type_declaration&#039; =&gt; true,\n    //    &#039;self_accessor&#039; =&gt; true,\n    //    &#039;semicolon_after_instruction&#039; =&gt; true,\n    //    &#039;short_scalar_cast&#039; =&gt; true,\n    //    &#039;simplified_null_return&#039; =&gt; true,\n    //    &#039;single_blank_line_before_namespace&#039; =&gt; true,\n    //    &#039;single_line_comment_style&#039; =&gt; true,\n    //    &#039;single_quote&#039; =&gt; true,\n    //    &#039;space_after_semicolon&#039; =&gt; [&#039;remove_in_empty_for_expressions&#039; =&gt; true],\n    //    &#039;standardize_not_equals&#039; =&gt; true,\n    //    &#039;ternary_operator_spaces&#039; =&gt; true,\n    //    &#039;ternary_to_null_coalescing&#039; =&gt; true,\n    //    &#039;trailing_comma_in_multiline_array&#039; =&gt; true,\n    //    &#039;trim_array_spaces&#039; =&gt; true,\n    //    &#039;unary_operator_spaces&#039; =&gt; true,\n    //    &#039;void_return&#039; =&gt; true,\n    //    &#039;whitespace_after_comma_in_array&#039; =&gt; true,\n    //    &#039;yoda_style&#039; =&gt; [&#039;equal&#039; =&gt; false, &#039;identical&#039; =&gt; false],\n    ])\n    -&gt;setFinder($finder);</code></pre>','php-cs-fixer - Laravelでの開発の前準備2','php-cs-fixerを導入しコーディングルールを設定。\r\nIDEに設定すればルール違反をリアルタイムで指摘してくれる。','inherit','closed','closed','','463-revision-v1','','','2020-02-15 15:45:04','2020-02-15 06:45:04','## php-cs-fixer を設定する\r\n### php-cs-fixer Install\r\n```bash\r\ncomposer install php-cs-fixer\r\n```\r\n### composer.jsonへScriptとして登録\r\nvim composer.json\r\ncomposer fix-diff でrule違反箇所を確認\r\ncomposer fix でrule違反箇所を整形\r\n```bash\r\n    &quot;scripts&quot;: {\r\n        &quot;post-autoload-dump&quot;: [\r\n            &quot;Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump&quot;,\r\n            &quot;@php artisan package:discover --ansi&quot;\r\n        ],\r\n        &quot;post-root-package-install&quot;: [\r\n            &quot;@php -r \\&quot;file_exists(&#039;.env&#039;) || copy(&#039;.env.example&#039;, &#039;.env&#039;);\\&quot;&quot;\r\n        ],\r\n        &quot;post-create-project-cmd&quot;: [\r\n            &quot;@php artisan key:generate --ansi&quot;\r\n        ],\r\n        &quot;fix-diff&quot;: [\r\n            &quot;./vendor/bin/php-cs-fixer fix  --dry-run --diff&quot;\r\n        ],\r\n        &quot;fix&quot;: [\r\n            &quot;./vendor/bin/php-cs-fixer fix&quot;\r\n        ]\r\n    }\r\n```\r\n### IDEへの設定\r\n例) Intelij idea\r\n\r\nPreferences | Languages & Frameworks | PHP | Quality Tools\r\n\r\n[画像]\r\n\r\nルール違反箇所\r\n\r\n[画像]\r\n\r\n<kbd>option</kbd> + <kbd>CR</kbd>\r\nで自動整形\r\n### php-cs-fixer 詳細設定\r\nプロジェクトルートへ.php_cs.dist or .php_cs\r\n```bash\r\n\r\n&lt;?php\r\n$finder = PhpCsFixer\\Finder::create()\r\n    -&gt;exclude(&#039;bootstrap&#039;)\r\n    -&gt;exclude(&#039;vendor&#039;)\r\n    -&gt;exclude(&#039;storage&#039;)\r\n    -&gt;exclude(&#039;node_module&#039;)\r\n    -&gt;exclude(&#039;public&#039;)\r\n    -&gt;exclude(&#039;resources&#039;)\r\n    -&gt;exclude(&#039;server.php&#039;)\r\n    -&gt;exclude(&#039;app/Console/Kernel.php&#039;)\r\n    -&gt;exclude(&#039;tests/CreatesApplication.php&#039;)\r\n    -&gt;in(__DIR__)\r\n    -&gt;name(&#039;*.php&#039;)\r\n    -&gt;notName(&#039;.php_cs&#039;)\r\n    -&gt;notName(&#039;*.blade.php&#039;)\r\n    -&gt;ignoreDotFiles(true)\r\n    -&gt;ignoreVCS(true)\r\n;\r\nreturn PhpCsFixer\\Config::create()\r\n    -&gt;setRiskyAllowed(true)\r\n    -&gt;setRules([\r\n        &#039;@PSR2&#039; =&gt; true,\r\n    //    &#039;align_multiline_comment&#039; =&gt; true,\r\n        &#039;array_syntax&#039; =&gt; [&#039;syntax&#039; =&gt; &#039;short&#039;],\r\n    //    &#039;binary_operator_spaces&#039; =&gt; true,\r\n    //    &#039;blank_line_after_opening_tag&#039; =&gt; true,\r\n    //    &#039;blank_line_before_statement&#039; =&gt; [&#039;statements&#039; =&gt; [&#039;declare&#039;, &#039;do&#039;, &#039;for&#039;, &#039;foreach&#039;, &#039;if&#039;, &#039;switch&#039;, &#039;try&#039;]],\r\n    //    &#039;cast_spaces&#039; =&gt; true,\r\n    //    &#039;class_attributes_separation&#039; =&gt; true,\r\n    //    &#039;combine_consecutive_issets&#039; =&gt; true,\r\n    //    &#039;combine_consecutive_unsets&#039; =&gt; true,\r\n    //    &#039;compact_nullable_typehint&#039; =&gt; true,\r\n    //    &#039;concat_space&#039; =&gt; [&#039;spacing&#039; =&gt; &#039;one&#039;],\r\n    //    &#039;declare_equal_normalize&#039; =&gt; true,\r\n    //    &#039;declare_strict_types&#039; =&gt; true,\r\n    //    &#039;dir_constant&#039; =&gt; true,\r\n    //    &#039;ereg_to_preg&#039; =&gt; true,\r\n    //    &#039;escape_implicit_backslashes&#039; =&gt; true,\r\n    //    &#039;explicit_indirect_variable&#039; =&gt; true,\r\n    //    &#039;explicit_string_variable&#039; =&gt; true,\r\n    //    &#039;final_internal_class&#039; =&gt; true,\r\n    //    &#039;function_to_constant&#039; =&gt; true,\r\n    //    &#039;function_typehint_space&#039; =&gt; true,\r\n    //    &#039;general_phpdoc_annotation_remove&#039; =&gt; [&#039;annotations&#039; =&gt; [&#039;class&#039;, &#039;package&#039;, &#039;author&#039;]],\r\n    //    &#039;hash_to_slash_comment&#039; =&gt; true,\r\n    //    &#039;heredoc_to_nowdoc&#039; =&gt; true,\r\n    //    &#039;include&#039; =&gt; true,\r\n    //    &#039;is_null&#039; =&gt; [&#039;use_yoda_style&#039; =&gt; false],\r\n    //    &#039;linebreak_after_opening_tag&#039; =&gt; true,\r\n    //    &#039;list_syntax&#039; =&gt; true,\r\n    //    &#039;lowercase_cast&#039; =&gt; true,\r\n    //    &#039;magic_constant_casing&#039; =&gt; true,\r\n    //    &#039;method_chaining_indentation&#039; =&gt; true,\r\n    //    &#039;method_separation&#039; =&gt; true,\r\n    //    &#039;modernize_types_casting&#039; =&gt; true,\r\n    //    &#039;native_function_casing&#039; =&gt; true,\r\n    //    &#039;no_alias_functions&#039; =&gt; true,\r\n    //    &#039;no_blank_lines_after_class_opening&#039; =&gt; true,\r\n    //    &#039;no_blank_lines_after_phpdoc&#039; =&gt; true,\r\n    //    &#039;no_empty_comment&#039; =&gt; true,\r\n    //    &#039;no_empty_phpdoc&#039; =&gt; true,\r\n    //    &#039;no_empty_statement&#039; =&gt; true,\r\n    //    &#039;no_extra_consecutive_blank_lines&#039; =&gt; [&#039;tokens&#039; =&gt; [&#039;break&#039;, &#039;continue&#039;, &#039;extra&#039;, &#039;return&#039;, &#039;throw&#039;, &#039;use&#039;, &#039;parenthesis_brace_block&#039;, &#039;square_brace_block&#039;, &#039;curly_brace_block&#039;]],\r\n    //    &#039;no_homoglyph_names&#039; =&gt; true,\r\n    //    &#039;no_leading_import_slash&#039; =&gt; true,\r\n    //    &#039;no_leading_namespace_whitespace&#039; =&gt; true,\r\n    //    &#039;no_mixed_echo_print&#039; =&gt; true,\r\n    //    &#039;no_multiline_whitespace_around_double_arrow&#039; =&gt; true,\r\n    //    &#039;no_multiline_whitespace_before_semicolons&#039; =&gt; true,\r\n    //    &#039;no_null_property_initialization&#039; =&gt; true,\r\n    //    &#039;no_php4_constructor&#039; =&gt; true,\r\n    //    &#039;no_short_bool_cast&#039; =&gt; true,\r\n    //    &#039;no_singleline_whitespace_before_semicolons&#039; =&gt; true,\r\n    //    &#039;no_spaces_around_offset&#039; =&gt; true,\r\n    //    &#039;no_trailing_comma_in_list_call&#039; =&gt; true,\r\n    //    &#039;no_trailing_comma_in_singleline_array&#039; =&gt; true,\r\n    //    &#039;no_unneeded_control_parentheses&#039; =&gt; true,\r\n    //    &#039;no_unneeded_curly_braces&#039; =&gt; true,\r\n    //    &#039;no_unneeded_final_method&#039; =&gt; true,\r\n    //    &#039;no_unreachable_default_argument_value&#039; =&gt; true,\r\n    //    &#039;no_unused_imports&#039; =&gt; true,\r\n    //    &#039;no_useless_else&#039; =&gt; true,\r\n    //    &#039;no_useless_return&#039; =&gt; true,\r\n    //    &#039;no_whitespace_before_comma_in_array&#039; =&gt; true,\r\n    //    &#039;no_whitespace_in_blank_line&#039; =&gt; true,\r\n    //    &#039;normalize_index_brace&#039; =&gt; true,\r\n    //    &#039;object_operator_without_whitespace&#039; =&gt; true,\r\n    //    &#039;ordered_class_elements&#039; =&gt; true,\r\n    //    &#039;ordered_imports&#039; =&gt; true,\r\n    //    &#039;php_unit_construct&#039; =&gt; true,\r\n    //    &#039;php_unit_dedicate_assert&#039; =&gt; true,\r\n    //    &#039;php_unit_mock&#039; =&gt; true,\r\n    //    &#039;php_unit_namespaced&#039; =&gt; true,\r\n    //    &#039;phpdoc_add_missing_param_annotation&#039; =&gt; [&#039;only_untyped&#039; =&gt; false],\r\n    //    &#039;phpdoc_align&#039; =&gt; [&#039;tags&#039; =&gt; [&#039;param&#039;]],\r\n    //    &#039;phpdoc_annotation_without_dot&#039; =&gt; true,\r\n    //    &#039;phpdoc_indent&#039; =&gt; true,\r\n    //    &#039;phpdoc_inline_tag&#039; =&gt; true,\r\n    //    &#039;phpdoc_no_access&#039; =&gt; true,\r\n    //    &#039;phpdoc_no_empty_return&#039; =&gt; true,\r\n    //    &#039;phpdoc_no_package&#039; =&gt; true,\r\n    //    &#039;phpdoc_order&#039; =&gt; true,\r\n    //    &#039;phpdoc_return_self_reference&#039; =&gt; true,\r\n    //    &#039;phpdoc_scalar&#039; =&gt; true,\r\n    //    &#039;phpdoc_single_line_var_spacing&#039; =&gt; true,\r\n    //    &#039;phpdoc_summary&#039; =&gt; true,\r\n    //    &#039;phpdoc_to_comment&#039; =&gt; true,\r\n    //    &#039;phpdoc_trim&#039; =&gt; true,\r\n    //    &#039;phpdoc_types&#039; =&gt; true,\r\n    //    &#039;phpdoc_types_order&#039; =&gt; true,\r\n    //    &#039;phpdoc_var_without_name&#039; =&gt; true,\r\n    //    &#039;pow_to_exponentiation&#039; =&gt; true,\r\n    //    &#039;protected_to_private&#039; =&gt; true,\r\n    //    &#039;random_api_migration&#039; =&gt; true,\r\n    //    &#039;return_type_declaration&#039; =&gt; true,\r\n    //    &#039;self_accessor&#039; =&gt; true,\r\n    //    &#039;semicolon_after_instruction&#039; =&gt; true,\r\n    //    &#039;short_scalar_cast&#039; =&gt; true,\r\n    //    &#039;simplified_null_return&#039; =&gt; true,\r\n    //    &#039;single_blank_line_before_namespace&#039; =&gt; true,\r\n    //    &#039;single_line_comment_style&#039; =&gt; true,\r\n    //    &#039;single_quote&#039; =&gt; true,\r\n    //    &#039;space_after_semicolon&#039; =&gt; [&#039;remove_in_empty_for_expressions&#039; =&gt; true],\r\n    //    &#039;standardize_not_equals&#039; =&gt; true,\r\n    //    &#039;ternary_operator_spaces&#039; =&gt; true,\r\n    //    &#039;ternary_to_null_coalescing&#039; =&gt; true,\r\n    //    &#039;trailing_comma_in_multiline_array&#039; =&gt; true,\r\n    //    &#039;trim_array_spaces&#039; =&gt; true,\r\n    //    &#039;unary_operator_spaces&#039; =&gt; true,\r\n    //    &#039;void_return&#039; =&gt; true,\r\n    //    &#039;whitespace_after_comma_in_array&#039; =&gt; true,\r\n    //    &#039;yoda_style&#039; =&gt; [&#039;equal&#039; =&gt; false, &#039;identical&#039; =&gt; false],\r\n    ])\r\n    -&gt;setFinder($finder);\r\n```\r\n',463,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/463-revision-v1/',0,'revision','',0),(538,1,'2020-02-15 15:46:23','2020-02-15 06:46:23','','Screen Shot 2020-02-15 at 15.18.48','','inherit','closed','closed','','screen-shot-2020-02-15-at-15-18-48','','','2020-02-15 15:46:23','2020-02-15 06:46:23','',463,'https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-15.18.48.png',0,'attachment','image/png',0),(539,1,'2020-02-15 15:46:57','2020-02-15 06:46:57','','Screen Shot 2020-02-15 at 15.21.18','','inherit','closed','closed','','screen-shot-2020-02-15-at-15-21-18','','','2020-02-15 15:46:57','2020-02-15 06:46:57','',463,'https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-15.21.18.png',0,'attachment','image/png',0),(540,1,'2020-02-15 15:47:31','2020-02-15 06:47:31','<h2>php-cs-fixer を設定する</h2>\n<h3>php-cs-fixer Install</h3>\n<pre><code class=\"language-bash\">composer install php-cs-fixer</code></pre>\n<h3>composer.jsonへScriptとして登録</h3>\n<p>vim composer.json\ncomposer fix-diff でrule違反箇所を確認\ncomposer fix でrule違反箇所を整形</p>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n        &quot;post-autoload-dump&quot;: [\n            &quot;Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump&quot;,\n            &quot;@php artisan package:discover --ansi&quot;\n        ],\n        &quot;post-root-package-install&quot;: [\n            &quot;@php -r \\&quot;file_exists(&#039;.env&#039;) || copy(&#039;.env.example&#039;, &#039;.env&#039;);\\&quot;&quot;\n        ],\n        &quot;post-create-project-cmd&quot;: [\n            &quot;@php artisan key:generate --ansi&quot;\n        ],\n        &quot;fix-diff&quot;: [\n            &quot;./vendor/bin/php-cs-fixer fix  --dry-run --diff&quot;\n        ],\n        &quot;fix&quot;: [\n            &quot;./vendor/bin/php-cs-fixer fix&quot;\n        ]\n    }</code></pre>\n<h3>IDEへの設定</h3>\n<p>例) Intelij idea</p>\n<p>Preferences | Languages &amp; Frameworks | PHP | Quality Tools</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-15.18.48.png\" alt=\"\" /></p>\n<p>ルール違反箇所</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-15.21.18.png\" alt=\"\" /></p>\n<p><kbd>option</kbd> + <kbd>CR</kbd>\nで自動整形</p>\n<h3>php-cs-fixer 詳細設定</h3>\n<p>プロジェクトルートへ.php_cs.dist or .php_cs</p>\n<pre><code class=\"language-bash\">\n&lt;?php\n$finder = PhpCsFixer\\Finder::create()\n    -&gt;exclude(&#039;bootstrap&#039;)\n    -&gt;exclude(&#039;vendor&#039;)\n    -&gt;exclude(&#039;storage&#039;)\n    -&gt;exclude(&#039;node_module&#039;)\n    -&gt;exclude(&#039;public&#039;)\n    -&gt;exclude(&#039;resources&#039;)\n    -&gt;exclude(&#039;server.php&#039;)\n    -&gt;exclude(&#039;app/Console/Kernel.php&#039;)\n    -&gt;exclude(&#039;tests/CreatesApplication.php&#039;)\n    -&gt;in(__DIR__)\n    -&gt;name(&#039;*.php&#039;)\n    -&gt;notName(&#039;.php_cs&#039;)\n    -&gt;notName(&#039;*.blade.php&#039;)\n    -&gt;ignoreDotFiles(true)\n    -&gt;ignoreVCS(true)\n;\nreturn PhpCsFixer\\Config::create()\n    -&gt;setRiskyAllowed(true)\n    -&gt;setRules([\n        &#039;@PSR2&#039; =&gt; true,\n    //    &#039;align_multiline_comment&#039; =&gt; true,\n        &#039;array_syntax&#039; =&gt; [&#039;syntax&#039; =&gt; &#039;short&#039;],\n    //    &#039;binary_operator_spaces&#039; =&gt; true,\n    //    &#039;blank_line_after_opening_tag&#039; =&gt; true,\n    //    &#039;blank_line_before_statement&#039; =&gt; [&#039;statements&#039; =&gt; [&#039;declare&#039;, &#039;do&#039;, &#039;for&#039;, &#039;foreach&#039;, &#039;if&#039;, &#039;switch&#039;, &#039;try&#039;]],\n    //    &#039;cast_spaces&#039; =&gt; true,\n    //    &#039;class_attributes_separation&#039; =&gt; true,\n    //    &#039;combine_consecutive_issets&#039; =&gt; true,\n    //    &#039;combine_consecutive_unsets&#039; =&gt; true,\n    //    &#039;compact_nullable_typehint&#039; =&gt; true,\n    //    &#039;concat_space&#039; =&gt; [&#039;spacing&#039; =&gt; &#039;one&#039;],\n    //    &#039;declare_equal_normalize&#039; =&gt; true,\n    //    &#039;declare_strict_types&#039; =&gt; true,\n    //    &#039;dir_constant&#039; =&gt; true,\n    //    &#039;ereg_to_preg&#039; =&gt; true,\n    //    &#039;escape_implicit_backslashes&#039; =&gt; true,\n    //    &#039;explicit_indirect_variable&#039; =&gt; true,\n    //    &#039;explicit_string_variable&#039; =&gt; true,\n    //    &#039;final_internal_class&#039; =&gt; true,\n    //    &#039;function_to_constant&#039; =&gt; true,\n    //    &#039;function_typehint_space&#039; =&gt; true,\n    //    &#039;general_phpdoc_annotation_remove&#039; =&gt; [&#039;annotations&#039; =&gt; [&#039;class&#039;, &#039;package&#039;, &#039;author&#039;]],\n    //    &#039;hash_to_slash_comment&#039; =&gt; true,\n    //    &#039;heredoc_to_nowdoc&#039; =&gt; true,\n    //    &#039;include&#039; =&gt; true,\n    //    &#039;is_null&#039; =&gt; [&#039;use_yoda_style&#039; =&gt; false],\n    //    &#039;linebreak_after_opening_tag&#039; =&gt; true,\n    //    &#039;list_syntax&#039; =&gt; true,\n    //    &#039;lowercase_cast&#039; =&gt; true,\n    //    &#039;magic_constant_casing&#039; =&gt; true,\n    //    &#039;method_chaining_indentation&#039; =&gt; true,\n    //    &#039;method_separation&#039; =&gt; true,\n    //    &#039;modernize_types_casting&#039; =&gt; true,\n    //    &#039;native_function_casing&#039; =&gt; true,\n    //    &#039;no_alias_functions&#039; =&gt; true,\n    //    &#039;no_blank_lines_after_class_opening&#039; =&gt; true,\n    //    &#039;no_blank_lines_after_phpdoc&#039; =&gt; true,\n    //    &#039;no_empty_comment&#039; =&gt; true,\n    //    &#039;no_empty_phpdoc&#039; =&gt; true,\n    //    &#039;no_empty_statement&#039; =&gt; true,\n    //    &#039;no_extra_consecutive_blank_lines&#039; =&gt; [&#039;tokens&#039; =&gt; [&#039;break&#039;, &#039;continue&#039;, &#039;extra&#039;, &#039;return&#039;, &#039;throw&#039;, &#039;use&#039;, &#039;parenthesis_brace_block&#039;, &#039;square_brace_block&#039;, &#039;curly_brace_block&#039;]],\n    //    &#039;no_homoglyph_names&#039; =&gt; true,\n    //    &#039;no_leading_import_slash&#039; =&gt; true,\n    //    &#039;no_leading_namespace_whitespace&#039; =&gt; true,\n    //    &#039;no_mixed_echo_print&#039; =&gt; true,\n    //    &#039;no_multiline_whitespace_around_double_arrow&#039; =&gt; true,\n    //    &#039;no_multiline_whitespace_before_semicolons&#039; =&gt; true,\n    //    &#039;no_null_property_initialization&#039; =&gt; true,\n    //    &#039;no_php4_constructor&#039; =&gt; true,\n    //    &#039;no_short_bool_cast&#039; =&gt; true,\n    //    &#039;no_singleline_whitespace_before_semicolons&#039; =&gt; true,\n    //    &#039;no_spaces_around_offset&#039; =&gt; true,\n    //    &#039;no_trailing_comma_in_list_call&#039; =&gt; true,\n    //    &#039;no_trailing_comma_in_singleline_array&#039; =&gt; true,\n    //    &#039;no_unneeded_control_parentheses&#039; =&gt; true,\n    //    &#039;no_unneeded_curly_braces&#039; =&gt; true,\n    //    &#039;no_unneeded_final_method&#039; =&gt; true,\n    //    &#039;no_unreachable_default_argument_value&#039; =&gt; true,\n    //    &#039;no_unused_imports&#039; =&gt; true,\n    //    &#039;no_useless_else&#039; =&gt; true,\n    //    &#039;no_useless_return&#039; =&gt; true,\n    //    &#039;no_whitespace_before_comma_in_array&#039; =&gt; true,\n    //    &#039;no_whitespace_in_blank_line&#039; =&gt; true,\n    //    &#039;normalize_index_brace&#039; =&gt; true,\n    //    &#039;object_operator_without_whitespace&#039; =&gt; true,\n    //    &#039;ordered_class_elements&#039; =&gt; true,\n    //    &#039;ordered_imports&#039; =&gt; true,\n    //    &#039;php_unit_construct&#039; =&gt; true,\n    //    &#039;php_unit_dedicate_assert&#039; =&gt; true,\n    //    &#039;php_unit_mock&#039; =&gt; true,\n    //    &#039;php_unit_namespaced&#039; =&gt; true,\n    //    &#039;phpdoc_add_missing_param_annotation&#039; =&gt; [&#039;only_untyped&#039; =&gt; false],\n    //    &#039;phpdoc_align&#039; =&gt; [&#039;tags&#039; =&gt; [&#039;param&#039;]],\n    //    &#039;phpdoc_annotation_without_dot&#039; =&gt; true,\n    //    &#039;phpdoc_indent&#039; =&gt; true,\n    //    &#039;phpdoc_inline_tag&#039; =&gt; true,\n    //    &#039;phpdoc_no_access&#039; =&gt; true,\n    //    &#039;phpdoc_no_empty_return&#039; =&gt; true,\n    //    &#039;phpdoc_no_package&#039; =&gt; true,\n    //    &#039;phpdoc_order&#039; =&gt; true,\n    //    &#039;phpdoc_return_self_reference&#039; =&gt; true,\n    //    &#039;phpdoc_scalar&#039; =&gt; true,\n    //    &#039;phpdoc_single_line_var_spacing&#039; =&gt; true,\n    //    &#039;phpdoc_summary&#039; =&gt; true,\n    //    &#039;phpdoc_to_comment&#039; =&gt; true,\n    //    &#039;phpdoc_trim&#039; =&gt; true,\n    //    &#039;phpdoc_types&#039; =&gt; true,\n    //    &#039;phpdoc_types_order&#039; =&gt; true,\n    //    &#039;phpdoc_var_without_name&#039; =&gt; true,\n    //    &#039;pow_to_exponentiation&#039; =&gt; true,\n    //    &#039;protected_to_private&#039; =&gt; true,\n    //    &#039;random_api_migration&#039; =&gt; true,\n    //    &#039;return_type_declaration&#039; =&gt; true,\n    //    &#039;self_accessor&#039; =&gt; true,\n    //    &#039;semicolon_after_instruction&#039; =&gt; true,\n    //    &#039;short_scalar_cast&#039; =&gt; true,\n    //    &#039;simplified_null_return&#039; =&gt; true,\n    //    &#039;single_blank_line_before_namespace&#039; =&gt; true,\n    //    &#039;single_line_comment_style&#039; =&gt; true,\n    //    &#039;single_quote&#039; =&gt; true,\n    //    &#039;space_after_semicolon&#039; =&gt; [&#039;remove_in_empty_for_expressions&#039; =&gt; true],\n    //    &#039;standardize_not_equals&#039; =&gt; true,\n    //    &#039;ternary_operator_spaces&#039; =&gt; true,\n    //    &#039;ternary_to_null_coalescing&#039; =&gt; true,\n    //    &#039;trailing_comma_in_multiline_array&#039; =&gt; true,\n    //    &#039;trim_array_spaces&#039; =&gt; true,\n    //    &#039;unary_operator_spaces&#039; =&gt; true,\n    //    &#039;void_return&#039; =&gt; true,\n    //    &#039;whitespace_after_comma_in_array&#039; =&gt; true,\n    //    &#039;yoda_style&#039; =&gt; [&#039;equal&#039; =&gt; false, &#039;identical&#039; =&gt; false],\n    ])\n    -&gt;setFinder($finder);</code></pre>','php-cs-fixer - Laravelでの開発の前準備2','php-cs-fixerを導入しコーディングルールを設定。\r\nIDEに設定すればルール違反をリアルタイムで指摘してくれる。','inherit','closed','closed','','463-revision-v1','','','2020-02-15 15:47:31','2020-02-15 06:47:31','## php-cs-fixer を設定する\r\n### php-cs-fixer Install\r\n```bash\r\ncomposer install php-cs-fixer\r\n```\r\n### composer.jsonへScriptとして登録\r\nvim composer.json\r\ncomposer fix-diff でrule違反箇所を確認\r\ncomposer fix でrule違反箇所を整形\r\n```bash\r\n    &quot;scripts&quot;: {\r\n        &quot;post-autoload-dump&quot;: [\r\n            &quot;Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump&quot;,\r\n            &quot;@php artisan package:discover --ansi&quot;\r\n        ],\r\n        &quot;post-root-package-install&quot;: [\r\n            &quot;@php -r \\&quot;file_exists(&#039;.env&#039;) || copy(&#039;.env.example&#039;, &#039;.env&#039;);\\&quot;&quot;\r\n        ],\r\n        &quot;post-create-project-cmd&quot;: [\r\n            &quot;@php artisan key:generate --ansi&quot;\r\n        ],\r\n        &quot;fix-diff&quot;: [\r\n            &quot;./vendor/bin/php-cs-fixer fix  --dry-run --diff&quot;\r\n        ],\r\n        &quot;fix&quot;: [\r\n            &quot;./vendor/bin/php-cs-fixer fix&quot;\r\n        ]\r\n    }\r\n```\r\n### IDEへの設定\r\n例) Intelij idea\r\n\r\nPreferences | Languages & Frameworks | PHP | Quality Tools\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-15.18.48.png)\r\n\r\nルール違反箇所\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-15.21.18.png)\r\n\r\n<kbd>option</kbd> + <kbd>CR</kbd>\r\nで自動整形\r\n### php-cs-fixer 詳細設定\r\nプロジェクトルートへ.php_cs.dist or .php_cs\r\n```bash\r\n\r\n&lt;?php\r\n$finder = PhpCsFixer\\Finder::create()\r\n    -&gt;exclude(&#039;bootstrap&#039;)\r\n    -&gt;exclude(&#039;vendor&#039;)\r\n    -&gt;exclude(&#039;storage&#039;)\r\n    -&gt;exclude(&#039;node_module&#039;)\r\n    -&gt;exclude(&#039;public&#039;)\r\n    -&gt;exclude(&#039;resources&#039;)\r\n    -&gt;exclude(&#039;server.php&#039;)\r\n    -&gt;exclude(&#039;app/Console/Kernel.php&#039;)\r\n    -&gt;exclude(&#039;tests/CreatesApplication.php&#039;)\r\n    -&gt;in(__DIR__)\r\n    -&gt;name(&#039;*.php&#039;)\r\n    -&gt;notName(&#039;.php_cs&#039;)\r\n    -&gt;notName(&#039;*.blade.php&#039;)\r\n    -&gt;ignoreDotFiles(true)\r\n    -&gt;ignoreVCS(true)\r\n;\r\nreturn PhpCsFixer\\Config::create()\r\n    -&gt;setRiskyAllowed(true)\r\n    -&gt;setRules([\r\n        &#039;@PSR2&#039; =&gt; true,\r\n    //    &#039;align_multiline_comment&#039; =&gt; true,\r\n        &#039;array_syntax&#039; =&gt; [&#039;syntax&#039; =&gt; &#039;short&#039;],\r\n    //    &#039;binary_operator_spaces&#039; =&gt; true,\r\n    //    &#039;blank_line_after_opening_tag&#039; =&gt; true,\r\n    //    &#039;blank_line_before_statement&#039; =&gt; [&#039;statements&#039; =&gt; [&#039;declare&#039;, &#039;do&#039;, &#039;for&#039;, &#039;foreach&#039;, &#039;if&#039;, &#039;switch&#039;, &#039;try&#039;]],\r\n    //    &#039;cast_spaces&#039; =&gt; true,\r\n    //    &#039;class_attributes_separation&#039; =&gt; true,\r\n    //    &#039;combine_consecutive_issets&#039; =&gt; true,\r\n    //    &#039;combine_consecutive_unsets&#039; =&gt; true,\r\n    //    &#039;compact_nullable_typehint&#039; =&gt; true,\r\n    //    &#039;concat_space&#039; =&gt; [&#039;spacing&#039; =&gt; &#039;one&#039;],\r\n    //    &#039;declare_equal_normalize&#039; =&gt; true,\r\n    //    &#039;declare_strict_types&#039; =&gt; true,\r\n    //    &#039;dir_constant&#039; =&gt; true,\r\n    //    &#039;ereg_to_preg&#039; =&gt; true,\r\n    //    &#039;escape_implicit_backslashes&#039; =&gt; true,\r\n    //    &#039;explicit_indirect_variable&#039; =&gt; true,\r\n    //    &#039;explicit_string_variable&#039; =&gt; true,\r\n    //    &#039;final_internal_class&#039; =&gt; true,\r\n    //    &#039;function_to_constant&#039; =&gt; true,\r\n    //    &#039;function_typehint_space&#039; =&gt; true,\r\n    //    &#039;general_phpdoc_annotation_remove&#039; =&gt; [&#039;annotations&#039; =&gt; [&#039;class&#039;, &#039;package&#039;, &#039;author&#039;]],\r\n    //    &#039;hash_to_slash_comment&#039; =&gt; true,\r\n    //    &#039;heredoc_to_nowdoc&#039; =&gt; true,\r\n    //    &#039;include&#039; =&gt; true,\r\n    //    &#039;is_null&#039; =&gt; [&#039;use_yoda_style&#039; =&gt; false],\r\n    //    &#039;linebreak_after_opening_tag&#039; =&gt; true,\r\n    //    &#039;list_syntax&#039; =&gt; true,\r\n    //    &#039;lowercase_cast&#039; =&gt; true,\r\n    //    &#039;magic_constant_casing&#039; =&gt; true,\r\n    //    &#039;method_chaining_indentation&#039; =&gt; true,\r\n    //    &#039;method_separation&#039; =&gt; true,\r\n    //    &#039;modernize_types_casting&#039; =&gt; true,\r\n    //    &#039;native_function_casing&#039; =&gt; true,\r\n    //    &#039;no_alias_functions&#039; =&gt; true,\r\n    //    &#039;no_blank_lines_after_class_opening&#039; =&gt; true,\r\n    //    &#039;no_blank_lines_after_phpdoc&#039; =&gt; true,\r\n    //    &#039;no_empty_comment&#039; =&gt; true,\r\n    //    &#039;no_empty_phpdoc&#039; =&gt; true,\r\n    //    &#039;no_empty_statement&#039; =&gt; true,\r\n    //    &#039;no_extra_consecutive_blank_lines&#039; =&gt; [&#039;tokens&#039; =&gt; [&#039;break&#039;, &#039;continue&#039;, &#039;extra&#039;, &#039;return&#039;, &#039;throw&#039;, &#039;use&#039;, &#039;parenthesis_brace_block&#039;, &#039;square_brace_block&#039;, &#039;curly_brace_block&#039;]],\r\n    //    &#039;no_homoglyph_names&#039; =&gt; true,\r\n    //    &#039;no_leading_import_slash&#039; =&gt; true,\r\n    //    &#039;no_leading_namespace_whitespace&#039; =&gt; true,\r\n    //    &#039;no_mixed_echo_print&#039; =&gt; true,\r\n    //    &#039;no_multiline_whitespace_around_double_arrow&#039; =&gt; true,\r\n    //    &#039;no_multiline_whitespace_before_semicolons&#039; =&gt; true,\r\n    //    &#039;no_null_property_initialization&#039; =&gt; true,\r\n    //    &#039;no_php4_constructor&#039; =&gt; true,\r\n    //    &#039;no_short_bool_cast&#039; =&gt; true,\r\n    //    &#039;no_singleline_whitespace_before_semicolons&#039; =&gt; true,\r\n    //    &#039;no_spaces_around_offset&#039; =&gt; true,\r\n    //    &#039;no_trailing_comma_in_list_call&#039; =&gt; true,\r\n    //    &#039;no_trailing_comma_in_singleline_array&#039; =&gt; true,\r\n    //    &#039;no_unneeded_control_parentheses&#039; =&gt; true,\r\n    //    &#039;no_unneeded_curly_braces&#039; =&gt; true,\r\n    //    &#039;no_unneeded_final_method&#039; =&gt; true,\r\n    //    &#039;no_unreachable_default_argument_value&#039; =&gt; true,\r\n    //    &#039;no_unused_imports&#039; =&gt; true,\r\n    //    &#039;no_useless_else&#039; =&gt; true,\r\n    //    &#039;no_useless_return&#039; =&gt; true,\r\n    //    &#039;no_whitespace_before_comma_in_array&#039; =&gt; true,\r\n    //    &#039;no_whitespace_in_blank_line&#039; =&gt; true,\r\n    //    &#039;normalize_index_brace&#039; =&gt; true,\r\n    //    &#039;object_operator_without_whitespace&#039; =&gt; true,\r\n    //    &#039;ordered_class_elements&#039; =&gt; true,\r\n    //    &#039;ordered_imports&#039; =&gt; true,\r\n    //    &#039;php_unit_construct&#039; =&gt; true,\r\n    //    &#039;php_unit_dedicate_assert&#039; =&gt; true,\r\n    //    &#039;php_unit_mock&#039; =&gt; true,\r\n    //    &#039;php_unit_namespaced&#039; =&gt; true,\r\n    //    &#039;phpdoc_add_missing_param_annotation&#039; =&gt; [&#039;only_untyped&#039; =&gt; false],\r\n    //    &#039;phpdoc_align&#039; =&gt; [&#039;tags&#039; =&gt; [&#039;param&#039;]],\r\n    //    &#039;phpdoc_annotation_without_dot&#039; =&gt; true,\r\n    //    &#039;phpdoc_indent&#039; =&gt; true,\r\n    //    &#039;phpdoc_inline_tag&#039; =&gt; true,\r\n    //    &#039;phpdoc_no_access&#039; =&gt; true,\r\n    //    &#039;phpdoc_no_empty_return&#039; =&gt; true,\r\n    //    &#039;phpdoc_no_package&#039; =&gt; true,\r\n    //    &#039;phpdoc_order&#039; =&gt; true,\r\n    //    &#039;phpdoc_return_self_reference&#039; =&gt; true,\r\n    //    &#039;phpdoc_scalar&#039; =&gt; true,\r\n    //    &#039;phpdoc_single_line_var_spacing&#039; =&gt; true,\r\n    //    &#039;phpdoc_summary&#039; =&gt; true,\r\n    //    &#039;phpdoc_to_comment&#039; =&gt; true,\r\n    //    &#039;phpdoc_trim&#039; =&gt; true,\r\n    //    &#039;phpdoc_types&#039; =&gt; true,\r\n    //    &#039;phpdoc_types_order&#039; =&gt; true,\r\n    //    &#039;phpdoc_var_without_name&#039; =&gt; true,\r\n    //    &#039;pow_to_exponentiation&#039; =&gt; true,\r\n    //    &#039;protected_to_private&#039; =&gt; true,\r\n    //    &#039;random_api_migration&#039; =&gt; true,\r\n    //    &#039;return_type_declaration&#039; =&gt; true,\r\n    //    &#039;self_accessor&#039; =&gt; true,\r\n    //    &#039;semicolon_after_instruction&#039; =&gt; true,\r\n    //    &#039;short_scalar_cast&#039; =&gt; true,\r\n    //    &#039;simplified_null_return&#039; =&gt; true,\r\n    //    &#039;single_blank_line_before_namespace&#039; =&gt; true,\r\n    //    &#039;single_line_comment_style&#039; =&gt; true,\r\n    //    &#039;single_quote&#039; =&gt; true,\r\n    //    &#039;space_after_semicolon&#039; =&gt; [&#039;remove_in_empty_for_expressions&#039; =&gt; true],\r\n    //    &#039;standardize_not_equals&#039; =&gt; true,\r\n    //    &#039;ternary_operator_spaces&#039; =&gt; true,\r\n    //    &#039;ternary_to_null_coalescing&#039; =&gt; true,\r\n    //    &#039;trailing_comma_in_multiline_array&#039; =&gt; true,\r\n    //    &#039;trim_array_spaces&#039; =&gt; true,\r\n    //    &#039;unary_operator_spaces&#039; =&gt; true,\r\n    //    &#039;void_return&#039; =&gt; true,\r\n    //    &#039;whitespace_after_comma_in_array&#039; =&gt; true,\r\n    //    &#039;yoda_style&#039; =&gt; [&#039;equal&#039; =&gt; false, &#039;identical&#039; =&gt; false],\r\n    ])\r\n    -&gt;setFinder($finder);\r\n```\r\n',463,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/463-revision-v1/',0,'revision','',0),(541,1,'2020-02-15 16:08:42','2020-02-15 07:08:42','','Screen Shot 2020-02-15 at 16.00.39','','inherit','closed','closed','','screen-shot-2020-02-15-at-16-00-39','','','2020-02-15 16:08:42','2020-02-15 07:08:42','',467,'https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.00.39.png',0,'attachment','image/png',0),(542,1,'2020-02-15 16:09:35','2020-02-15 07:09:35','','Screen Shot 2020-02-15 at 16.01.06','','inherit','closed','closed','','screen-shot-2020-02-15-at-16-01-06','','','2020-02-15 16:09:35','2020-02-15 07:09:35','',467,'https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.01.06.png',0,'attachment','image/png',0),(543,1,'2020-02-15 16:10:17','2020-02-15 07:10:17','<h1>Eslint</h1>\n<h2>Install</h2>\n<pre><code class=\"language-bash\">$ npm install babel-eslint eslint eslint-config-prettier eslint-config-standard eslint-friendly-formatter eslint-loader eslint-plugin-html eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise eslint-plugin-standard eslint-plugin-vue laravel-mix-eslint --save-dev</code></pre>\n<h3>package.jsonへScriptとして登録</h3>\n<p>vim composer.json\nnpm eslint でrule違反箇所を確認\nnpm eslint-fix でrule違反箇所を整形</p>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n    ...\n    ...\n    ...\n     +   &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\n     +   &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\n    },</code></pre>\n<h3>IDEへの設定</h3>\n<p>例) Intelij idea</p>\n<p>Preferences | Languages &amp; Frameworks | JavaScript | Code Quality Tools | ESLint</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.00.39.png\" alt=\"\" /></p>\n<p>ルール違反箇所</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.01.06.png\" alt=\"\" /></p>\n<p><kbd>option</kbd> + <kbd>CR</kbd>\nで自動整形</p>\n<h2>設定ファイル</h2>\n<p>プロジェクトルートへ.eslintrc.js</p>\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n    root: true,\n    globals: {\n        &#039;_&#039;: true, // lodash\n        &#039;Enumerable&#039;: true, // linq\n        Vue: true\n    },\n    parserOptions: {\n        parser: &#039;babel-eslint&#039;\n    },\n    env: {\n        &#039;browser&#039;: true,\n        &#039;jquery&#039; : true,\n        &quot;mocha&quot;: true\n    },\n    extends: [\n        &quot;prettier&quot;,\n        &#039;standard&#039;, // https://github.com/standard/standard/blob/master/docs/RULES-en.md,\n        &#039;eslint:recommended&#039;,\n        // &quot;plugin:vue-i18n/recommended&quot;,\n        // &#039;plugin:vue/essential&#039;\n        // &quot;plugin:vue/strongly-recommended&quot;\n        &#039;plugin:vue/recommended&#039;\n\n    ],\n    // required to lint *.vue files\n    plugins: [\n        &#039;vue&#039;,\n        &quot;prettier&quot;\n    ],\n    // add your custom rules here\n    rules: {\n        // allow async-await\n        &#039;generator-star-spacing&#039;: &#039;off&#039;,\n        &quot;indent&quot;: [&quot;error&quot;, 2],\n        &quot;object-shorthand&quot;: [0,&quot;always&quot;]\n\n    },\n}</code></pre>','Eslint (vue)  - Laravelでの開発の前準備','','inherit','closed','closed','','467-revision-v1','','','2020-02-15 16:10:17','2020-02-15 07:10:17','# Eslint\r\n## Install\r\n```bash\r\n$ npm install babel-eslint eslint eslint-config-prettier eslint-config-standard eslint-friendly-formatter eslint-loader eslint-plugin-html eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise eslint-plugin-standard eslint-plugin-vue laravel-mix-eslint --save-dev\r\n```\r\n### package.jsonへScriptとして登録\r\nvim composer.json\r\nnpm eslint でrule違反箇所を確認\r\nnpm eslint-fix でrule違反箇所を整形\r\n\r\n```bash\r\n    &quot;scripts&quot;: {\r\n    ...\r\n    ...\r\n    ...\r\n     +   &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\r\n     +   &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\r\n    },\r\n```\r\n### IDEへの設定\r\n例) Intelij idea\r\n\r\nPreferences | Languages & Frameworks | JavaScript | Code Quality Tools | ESLint\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.00.39.png)\r\n\r\nルール違反箇所\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.01.06.png)\r\n\r\n<kbd>option</kbd> + <kbd>CR</kbd>\r\nで自動整形\r\n\r\n## 設定ファイル\r\nプロジェクトルートへ.eslintrc.js\r\n```javascript\r\n\r\nmodule.exports = {\r\n    root: true,\r\n    globals: {\r\n        &#039;_&#039;: true, // lodash\r\n        &#039;Enumerable&#039;: true, // linq\r\n        Vue: true\r\n    },\r\n    parserOptions: {\r\n        parser: &#039;babel-eslint&#039;\r\n    },\r\n    env: {\r\n        &#039;browser&#039;: true,\r\n        &#039;jquery&#039; : true,\r\n        &quot;mocha&quot;: true\r\n    },\r\n    extends: [\r\n        &quot;prettier&quot;,\r\n        &#039;standard&#039;, // https://github.com/standard/standard/blob/master/docs/RULES-en.md,\r\n        &#039;eslint:recommended&#039;,\r\n        // &quot;plugin:vue-i18n/recommended&quot;,\r\n        // &#039;plugin:vue/essential&#039;\r\n        // &quot;plugin:vue/strongly-recommended&quot;\r\n        &#039;plugin:vue/recommended&#039;\r\n\r\n    ],\r\n    // required to lint *.vue files\r\n    plugins: [\r\n        &#039;vue&#039;,\r\n        &quot;prettier&quot;\r\n    ],\r\n    // add your custom rules here\r\n    rules: {\r\n        // allow async-await\r\n        &#039;generator-star-spacing&#039;: &#039;off&#039;,\r\n        &quot;indent&quot;: [&quot;error&quot;, 2],\r\n        &quot;object-shorthand&quot;: [0,&quot;always&quot;]\r\n\r\n    },\r\n}\r\n```\r\n\r\n',467,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/467-revision-v1/',0,'revision','',0),(544,1,'2020-02-15 16:21:50','2020-02-15 07:21:50','','eslint','','inherit','closed','closed','','eslint','','','2020-02-15 16:21:50','2020-02-15 07:21:50','',467,'https://blog.webdimension.jp/wp-content/uploads/2020/02/eslint.png',0,'attachment','image/png',0),(545,1,'2020-02-15 16:22:49','2020-02-15 07:22:49','<h1>Eslint</h1>\n<h2>Install</h2>\n<pre><code class=\"language-bash\">$ npm install babel-eslint eslint eslint-config-prettier eslint-config-standard eslint-friendly-formatter eslint-loader eslint-plugin-html eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise eslint-plugin-standard eslint-plugin-vue laravel-mix-eslint --save-dev</code></pre>\n<h3>package.jsonへScriptとして登録</h3>\n<p>vim composer.json\nnpm eslint でrule違反箇所を確認\nnpm eslint-fix でrule違反箇所を整形</p>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n    ...\n    ...\n    ...\n     +   &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\n     +   &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\n    },</code></pre>\n<h3>IDEへの設定</h3>\n<p>例) Intelij idea</p>\n<p>Preferences | Languages &amp; Frameworks | JavaScript | Code Quality Tools | ESLint</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.00.39.png\" alt=\"\" /></p>\n<p>ルール違反箇所</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.01.06.png\" alt=\"\" /></p>\n<p><kbd>option</kbd> + <kbd>CR</kbd>\nで自動整形</p>\n<h2>設定ファイル</h2>\n<p>プロジェクトルートへ.eslintrc.js</p>\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n    root: true,\n    globals: {\n        &#039;_&#039;: true, // lodash\n        &#039;Enumerable&#039;: true, // linq\n        Vue: true\n    },\n    parserOptions: {\n        parser: &#039;babel-eslint&#039;\n    },\n    env: {\n        &#039;browser&#039;: true,\n        &#039;jquery&#039; : true,\n        &quot;mocha&quot;: true\n    },\n    extends: [\n        &quot;prettier&quot;,\n        &#039;standard&#039;, // https://github.com/standard/standard/blob/master/docs/RULES-en.md,\n        &#039;eslint:recommended&#039;,\n        // &quot;plugin:vue-i18n/recommended&quot;,\n        // &#039;plugin:vue/essential&#039;\n        // &quot;plugin:vue/strongly-recommended&quot;\n        &#039;plugin:vue/recommended&#039;\n\n    ],\n    // required to lint *.vue files\n    plugins: [\n        &#039;vue&#039;,\n        &quot;prettier&quot;\n    ],\n    // add your custom rules here\n    rules: {\n        // allow async-await\n        &#039;generator-star-spacing&#039;: &#039;off&#039;,\n        &quot;indent&quot;: [&quot;error&quot;, 2],\n        &quot;object-shorthand&quot;: [0,&quot;always&quot;]\n\n    },\n}</code></pre>','Eslint (vue)  - Laravelでの開発の前準備','Eslintを導入しコーディングルールを設定。 IDEに設定すればルール違反をリアルタイムで指摘してくれる。','inherit','closed','closed','','467-revision-v1','','','2020-02-15 16:22:49','2020-02-15 07:22:49','# Eslint\r\n## Install\r\n```bash\r\n$ npm install babel-eslint eslint eslint-config-prettier eslint-config-standard eslint-friendly-formatter eslint-loader eslint-plugin-html eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise eslint-plugin-standard eslint-plugin-vue laravel-mix-eslint --save-dev\r\n```\r\n### package.jsonへScriptとして登録\r\nvim composer.json\r\nnpm eslint でrule違反箇所を確認\r\nnpm eslint-fix でrule違反箇所を整形\r\n\r\n```bash\r\n    &quot;scripts&quot;: {\r\n    ...\r\n    ...\r\n    ...\r\n     +   &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\r\n     +   &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\r\n    },\r\n```\r\n### IDEへの設定\r\n例) Intelij idea\r\n\r\nPreferences | Languages & Frameworks | JavaScript | Code Quality Tools | ESLint\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.00.39.png)\r\n\r\nルール違反箇所\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.01.06.png)\r\n\r\n<kbd>option</kbd> + <kbd>CR</kbd>\r\nで自動整形\r\n\r\n## 設定ファイル\r\nプロジェクトルートへ.eslintrc.js\r\n```javascript\r\n\r\nmodule.exports = {\r\n    root: true,\r\n    globals: {\r\n        &#039;_&#039;: true, // lodash\r\n        &#039;Enumerable&#039;: true, // linq\r\n        Vue: true\r\n    },\r\n    parserOptions: {\r\n        parser: &#039;babel-eslint&#039;\r\n    },\r\n    env: {\r\n        &#039;browser&#039;: true,\r\n        &#039;jquery&#039; : true,\r\n        &quot;mocha&quot;: true\r\n    },\r\n    extends: [\r\n        &quot;prettier&quot;,\r\n        &#039;standard&#039;, // https://github.com/standard/standard/blob/master/docs/RULES-en.md,\r\n        &#039;eslint:recommended&#039;,\r\n        // &quot;plugin:vue-i18n/recommended&quot;,\r\n        // &#039;plugin:vue/essential&#039;\r\n        // &quot;plugin:vue/strongly-recommended&quot;\r\n        &#039;plugin:vue/recommended&#039;\r\n\r\n    ],\r\n    // required to lint *.vue files\r\n    plugins: [\r\n        &#039;vue&#039;,\r\n        &quot;prettier&quot;\r\n    ],\r\n    // add your custom rules here\r\n    rules: {\r\n        // allow async-await\r\n        &#039;generator-star-spacing&#039;: &#039;off&#039;,\r\n        &quot;indent&quot;: [&quot;error&quot;, 2],\r\n        &quot;object-shorthand&quot;: [0,&quot;always&quot;]\r\n\r\n    },\r\n}\r\n```\r\n\r\n',467,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/467-revision-v1/',0,'revision','',0),(546,1,'2020-02-15 16:25:40','2020-02-15 07:25:40','<h1>Eslint</h1>\n<h2>Install</h2>\n<pre><code class=\"language-bash\">$ npm install babel-eslint eslint eslint-config-prettier eslint-config-standard eslint-friendly-formatter eslint-loader eslint-plugin-html eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise eslint-plugin-standard eslint-plugin-vue laravel-mix-eslint --save-dev</code></pre>\n<h3>package.jsonへScriptとして登録</h3>\n<p>vim composer.json\nnpm eslint でrule違反箇所を確認\nnpm eslint-fix でrule違反箇所を整形</p>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n    ...\n    ...\n    ...\n     +   &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\n     +   &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\n    },</code></pre>\n<h3>IDEへの設定</h3>\n<p>例) Intelij idea</p>\n<p>Preferences | Languages &amp; Frameworks | JavaScript | Code Quality Tools | ESLint</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.00.39.png\" alt=\"\" /></p>\n<p>ルール違反箇所</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.01.06.png\" alt=\"\" /></p>\n<p><kbd>option</kbd> + <kbd>CR</kbd>\nで自動整形</p>\n<h2>設定ファイル</h2>\n<p>プロジェクトルートへ.eslintrc.js</p>\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n    root: true,\n    globals: {\n        &#039;_&#039;: true, // lodash\n        &#039;Enumerable&#039;: true, // linq\n        Vue: true\n    },\n    parserOptions: {\n        parser: &#039;babel-eslint&#039;\n    },\n    env: {\n        &#039;browser&#039;: true,\n        &#039;jquery&#039; : true,\n        &quot;mocha&quot;: true\n    },\n    extends: [\n        &quot;prettier&quot;,\n        &#039;standard&#039;, // https://github.com/standard/standard/blob/master/docs/RULES-en.md,\n        &#039;eslint:recommended&#039;,\n        // &quot;plugin:vue-i18n/recommended&quot;,\n        // &#039;plugin:vue/essential&#039;\n        // &quot;plugin:vue/strongly-recommended&quot;\n        &#039;plugin:vue/recommended&#039;\n\n    ],\n    // required to lint *.vue files\n    plugins: [\n        &#039;vue&#039;,\n        &quot;prettier&quot;\n    ],\n    // add your custom rules here\n    rules: {\n        // allow async-await\n        &#039;generator-star-spacing&#039;: &#039;off&#039;,\n        &quot;indent&quot;: [&quot;error&quot;, 2],\n        &quot;object-shorthand&quot;: [0,&quot;always&quot;]\n\n    },\n}</code></pre>','Eslint (vue)  - Laravelでの開発の前準備3','Eslintを導入しコーディングルールを設定。 IDEに設定すればルール違反をリアルタイムで指摘してくれる。','inherit','closed','closed','','467-revision-v1','','','2020-02-15 16:25:40','2020-02-15 07:25:40','# Eslint\r\n## Install\r\n```bash\r\n$ npm install babel-eslint eslint eslint-config-prettier eslint-config-standard eslint-friendly-formatter eslint-loader eslint-plugin-html eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise eslint-plugin-standard eslint-plugin-vue laravel-mix-eslint --save-dev\r\n```\r\n### package.jsonへScriptとして登録\r\nvim composer.json\r\nnpm eslint でrule違反箇所を確認\r\nnpm eslint-fix でrule違反箇所を整形\r\n\r\n```bash\r\n    &quot;scripts&quot;: {\r\n    ...\r\n    ...\r\n    ...\r\n     +   &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\r\n     +   &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\r\n    },\r\n```\r\n### IDEへの設定\r\n例) Intelij idea\r\n\r\nPreferences | Languages & Frameworks | JavaScript | Code Quality Tools | ESLint\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.00.39.png)\r\n\r\nルール違反箇所\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.01.06.png)\r\n\r\n<kbd>option</kbd> + <kbd>CR</kbd>\r\nで自動整形\r\n\r\n## 設定ファイル\r\nプロジェクトルートへ.eslintrc.js\r\n```javascript\r\n\r\nmodule.exports = {\r\n    root: true,\r\n    globals: {\r\n        &#039;_&#039;: true, // lodash\r\n        &#039;Enumerable&#039;: true, // linq\r\n        Vue: true\r\n    },\r\n    parserOptions: {\r\n        parser: &#039;babel-eslint&#039;\r\n    },\r\n    env: {\r\n        &#039;browser&#039;: true,\r\n        &#039;jquery&#039; : true,\r\n        &quot;mocha&quot;: true\r\n    },\r\n    extends: [\r\n        &quot;prettier&quot;,\r\n        &#039;standard&#039;, // https://github.com/standard/standard/blob/master/docs/RULES-en.md,\r\n        &#039;eslint:recommended&#039;,\r\n        // &quot;plugin:vue-i18n/recommended&quot;,\r\n        // &#039;plugin:vue/essential&#039;\r\n        // &quot;plugin:vue/strongly-recommended&quot;\r\n        &#039;plugin:vue/recommended&#039;\r\n\r\n    ],\r\n    // required to lint *.vue files\r\n    plugins: [\r\n        &#039;vue&#039;,\r\n        &quot;prettier&quot;\r\n    ],\r\n    // add your custom rules here\r\n    rules: {\r\n        // allow async-await\r\n        &#039;generator-star-spacing&#039;: &#039;off&#039;,\r\n        &quot;indent&quot;: [&quot;error&quot;, 2],\r\n        &quot;object-shorthand&quot;: [0,&quot;always&quot;]\r\n\r\n    },\r\n}\r\n```\r\n\r\n',467,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/467-revision-v1/',0,'revision','',0),(547,1,'2020-02-15 17:04:43','2020-02-15 08:04:43','<h2>phpunit を実行してみる</h2>\n<p>LaravelにはデフォルトでTestが導入されている。\n実行してみる</p>\n<pre><code class=\"language-bash\"> ./vendor/bin/phpunit </code></pre>\n<pre><code class=\"language-bash\">Time: 669 ms, Memory: 22.00 MB\n\nOK (1 tests, 1 assertions)</code></pre>\n<p>このようにOKがでれば　テスト成功</p>\n<h3>composer.json のscriptに追加</h3>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n        ...\n        ...\n        ...\n        ...\n        &quot;test&quot;: [\n            &quot;./vendor/bin/phpunit&quot;\n        ]\n        ...\n        ...\n        ...</code></pre>\n<pre><code class=\"language-bash\">composer test</code></pre>\n<p>で実行できるようになる。</p>\n<h3>IDEからTestunit実行</h3>\n<p>参考:<a href=\"https://blog.webdimension.jp/linux/docke-on-vagrant/\">Docker on Vagrant をがんばってみた</a></p>\n<p>この例ではVagrant上のDockerで動いているPHPをテストしています。</p>','PHP UnitTest  - Laravelでの開発の前準備4','','inherit','closed','closed','','477-revision-v1','','','2020-02-15 17:04:43','2020-02-15 08:04:43','## phpunit を実行してみる\r\nLaravelにはデフォルトでTestが導入されている。\r\n実行してみる\r\n\r\n```bash\r\n ./vendor/bin/phpunit \r\n```\r\n\r\n```bash\r\nTime: 669 ms, Memory: 22.00 MB\r\n\r\nOK (1 tests, 1 assertions)\r\n```\r\nこのようにOKがでれば　テスト成功\r\n\r\n### composer.json のscriptに追加\r\n```bash\r\n    &quot;scripts&quot;: {\r\n        ...\r\n        ...\r\n        ...\r\n        ...\r\n        &quot;test&quot;: [\r\n            &quot;./vendor/bin/phpunit&quot;\r\n        ]\r\n        ...\r\n        ...\r\n        ...\r\n```\r\n\r\n```bash\r\ncomposer test\r\n```\r\nで実行できるようになる。\r\n\r\n### IDEからTestunit実行\r\n参考:<a href=\"https://blog.webdimension.jp/linux/docke-on-vagrant/\">Docker on Vagrant をがんばってみた</a>\r\n\r\nこの例ではVagrant上のDockerで動いているPHPをテストしています。\r\n',477,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/477-revision-v1/',0,'revision','',0),(548,1,'2020-02-15 17:06:01','2020-02-15 08:06:01','<h2>phpunit を実行してみる</h2>\n<p>LaravelにはデフォルトでTestが導入されている。\n実行してみる</p>\n<pre><code class=\"language-bash\"> ./vendor/bin/phpunit </code></pre>\n<pre><code class=\"language-bash\">Time: 669 ms, Memory: 22.00 MB\n\nOK (1 tests, 1 assertions)</code></pre>\n<p>このようにOKがでれば　テスト成功</p>\n<h3>composer.json のscriptに追加</h3>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n        ...\n        ...\n        ...\n        ...\n        &quot;test&quot;: [\n            &quot;./vendor/bin/phpunit&quot;\n        ]\n        ...\n        ...\n        ...</code></pre>\n<pre><code class=\"language-bash\">composer test</code></pre>\n<p>で実行できるようになる。</p>\n<h3>IDEからTestunit実行</h3>\n<p>参考:<a href=\"https://blog.webdimension.jp/linux/docke-on-vagrant/\">Docker on Vagrant をがんばってみた</a></p>\n<p>この例ではVagrant上のDockerで動いているPHPをテストしています。</p>','PHP UnitTest  - Laravelでの開発の前準備4','Laravelデフォルトのphpunitを実行。\r\ncomposer.json へスクリプト登録','inherit','closed','closed','','477-revision-v1','','','2020-02-15 17:06:01','2020-02-15 08:06:01','## phpunit を実行してみる\r\nLaravelにはデフォルトでTestが導入されている。\r\n実行してみる\r\n\r\n```bash\r\n ./vendor/bin/phpunit \r\n```\r\n\r\n```bash\r\nTime: 669 ms, Memory: 22.00 MB\r\n\r\nOK (1 tests, 1 assertions)\r\n```\r\nこのようにOKがでれば　テスト成功\r\n\r\n### composer.json のscriptに追加\r\n```bash\r\n    &quot;scripts&quot;: {\r\n        ...\r\n        ...\r\n        ...\r\n        ...\r\n        &quot;test&quot;: [\r\n            &quot;./vendor/bin/phpunit&quot;\r\n        ]\r\n        ...\r\n        ...\r\n        ...\r\n```\r\n\r\n```bash\r\ncomposer test\r\n```\r\nで実行できるようになる。\r\n\r\n### IDEからTestunit実行\r\n参考:<a href=\"https://blog.webdimension.jp/linux/docke-on-vagrant/\">Docker on Vagrant をがんばってみた</a>\r\n\r\nこの例ではVagrant上のDockerで動いているPHPをテストしています。\r\n',477,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/477-revision-v1/',0,'revision','',0),(549,1,'2020-02-15 17:09:33','2020-02-15 08:09:33','','phpunit','','inherit','closed','closed','','phpunit-2','','','2020-02-15 17:09:33','2020-02-15 08:09:33','',477,'https://blog.webdimension.jp/wp-content/uploads/2020/02/phpunit.png',0,'attachment','image/png',0),(550,1,'2020-02-15 18:11:27','2020-02-15 09:11:27','','Screen Shot 2020-02-15 at 18.04.51','','inherit','closed','closed','','screen-shot-2020-02-15-at-18-04-51','','','2020-02-15 18:11:27','2020-02-15 09:11:27','',469,'https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.04.51.png',0,'attachment','image/png',0),(551,1,'2020-02-15 18:11:56','2020-02-15 09:11:56','','Screen Shot 2020-02-15 at 18.06.52','','inherit','closed','closed','','screen-shot-2020-02-15-at-18-06-52','','','2020-02-15 18:11:56','2020-02-15 09:11:56','',469,'https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.06.52.png',0,'attachment','image/png',0),(552,1,'2020-02-15 18:12:23','2020-02-15 09:12:23','','Screen Shot 2020-02-15 at 18.07.53','','inherit','closed','closed','','screen-shot-2020-02-15-at-18-07-53','','','2020-02-15 18:12:23','2020-02-15 09:12:23','',469,'https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.07.53.png',0,'attachment','image/png',0),(553,1,'2020-02-15 18:14:00','2020-02-15 09:14:00','<h2>Vue.js Unittestを導入する</h2>\n<h3>vue test-utils install</h3>\n<pre><code class=\"language-bash\">npm install --save-dev @vue/test-utils mocha jsdom jsdom-global expect</code></pre>\n<p>しかしこれではうまく動かない。</p>\n<pre><code class=\"language-bash\">Error: Chunk.parents: Use ChunkGroup.getParents() instead</code></pre>\n<p>package.jsonを変更</p>\n<pre><code class=\"language-bash\"> &quot;mocha-webpack&quot;: &quot;^2.0.0-beta.0&quot;,</code></pre>\n<p>再度</p>\n<pre><code class=\"language-bash\">npm install</code></pre>\n<h2>vue.js テストを設置</h2>\n<p>javascriptのテスト用ディレクトリを作成</p>\n<pre><code class=\"language-bash\">mkdir tests/Javascript</code></pre>\n<p>test用setup.js作成(公式に準ずる)</p>\n<pre><code class=\"language-bash\">vim tests/Javascript/setup.js</code></pre>\n<p>setup.js</p>\n<pre><code class=\"language-bash\">require(&#039;jsdom-global&#039;)()\n\nglobal.expect = require(&#039;expect&#039;)</code></pre>\n<h2>testunitを作る</h2>\n<h3>testunit (テストする方)</h3>\n<p>tests/Javascript/VueTestComponent.spec.js</p>\n<pre><code class=\"language-bash\">import { shallowMount } from &#039;@vue/test-utils&#039;\nimport ProjectImageUploadComponent from &#039;../../resources/js/components/VueTestComponent.vue&#039;\n\ndescribe(&#039;VueTestComponent.vue&#039;, () =&gt; {\n  it(&#039;props test&#039;, () =&gt; {\n    const wrapper = shallowMount(VueTestComponent)\n    const paramName = &#039;vuetest&#039;\n    wrapper.setProps({\n      TestParam: paramName\n    })\n    // eslint-disable-next-line no-undef\n    expect(wrapper.vm.$props.paramName).toBe(paramName)\n  })\n})</code></pre>\n<h3>vue component (テストされる方)</h3>\n<p>../../resources/js/components/VueTestComponent.vue</p>\n<pre><code class=\"language-bash\">\n&lt;template&gt;\n  &lt;div&gt; {{ testParam: }}&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    testParam: {\n      type: String,\n      default: &#039;&#039;\n    },\n  },\n\n}\n&lt;/script&gt;\n</code></pre>\n<h2>packege.jsonにscript登録</h2>\n<pre><code class=\"language-bash\">npm test</code></pre>\n<p>で実行できるようにする</p>\n<p>package.json</p>\n<pre><code class=\"language-bash\">\n    &quot;scripts&quot;: {\n        ...\n        ...\n        ...\n        ...\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\n    },</code></pre>\n<h2>vue unittestを実行</h2>\n<pre><code class=\"language-bash\">npm test</code></pre>\n<p>このような結果だと成功</p>\n<pre><code class=\"language-bash\"> WEBPACK  Compiled successfully in 3370ms\n\n MOCHA  Testing...\n\n  ProjectImageUploadComponent.vue\n    ✓ increments count when button is clicked (64ms)\n\n  1 passing (210ms)\n\n MOCHA  Tests completed successfully</code></pre>\n<h2>IDEからtest実行</h2>\n<p>例 Intellij idea\nPreferences | Languages &amp; Frameworks | Node.js and NPM</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.04.51.png\" alt=\"\" /></p>\n<p><kbd>optin</kbd> + <kbd>F11</kbd>\nでnpm script をPopup表示</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.06.52.png\" alt=\"\" /></p>\n<p>testを選択して実行</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.07.53.png\" alt=\"\" /></p>\n<p>test成功</p>','vue.js テスト環境  - Laravelでの開発の前準備','Laravel上でのVue.jsにUnittestを導入。npm scriptに追加','inherit','closed','closed','','469-revision-v1','','','2020-02-15 18:14:00','2020-02-15 09:14:00','## Vue.js Unittestを導入する\r\n### vue test-utils install\r\n\r\n```bash\r\nnpm install --save-dev @vue/test-utils mocha jsdom jsdom-global expect\r\n```\r\n\r\nしかしこれではうまく動かない。\r\n\r\n```bash\r\nError: Chunk.parents: Use ChunkGroup.getParents() instead\r\n```\r\n\r\npackage.jsonを変更\r\n\r\n```bash\r\n &quot;mocha-webpack&quot;: &quot;^2.0.0-beta.0&quot;,\r\n```\r\n\r\n再度\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\n## vue.js テストを設置\r\njavascriptのテスト用ディレクトリを作成\r\n```bash\r\nmkdir tests/Javascript\r\n```\r\ntest用setup.js作成(公式に準ずる)\r\n```bash\r\nvim tests/Javascript/setup.js\r\n```\r\nsetup.js\r\n```bash\r\nrequire(&#039;jsdom-global&#039;)()\r\n\r\nglobal.expect = require(&#039;expect&#039;)\r\n```\r\n\r\n## testunitを作る\r\n### testunit (テストする方)\r\ntests/Javascript/VueTestComponent.spec.js\r\n```bash\r\nimport { shallowMount } from &#039;@vue/test-utils&#039;\r\nimport ProjectImageUploadComponent from &#039;../../resources/js/components/VueTestComponent.vue&#039;\r\n\r\ndescribe(&#039;VueTestComponent.vue&#039;, () =&gt; {\r\n  it(&#039;props test&#039;, () =&gt; {\r\n    const wrapper = shallowMount(VueTestComponent)\r\n    const paramName = &#039;vuetest&#039;\r\n    wrapper.setProps({\r\n      TestParam: paramName\r\n    })\r\n    // eslint-disable-next-line no-undef\r\n    expect(wrapper.vm.$props.paramName).toBe(paramName)\r\n  })\r\n})\r\n```\r\n\r\n### vue component (テストされる方)\r\n../../resources/js/components/VueTestComponent.vue\r\n```bash\r\n\r\n&lt;template&gt;\r\n  &lt;div&gt; {{ testParam: }}&lt;/div&gt;\r\n&lt;/template&gt;\r\n\r\n&lt;script&gt;\r\nexport default {\r\n  props: {\r\n    testParam: {\r\n      type: String,\r\n      default: &#039;&#039;\r\n    },\r\n  },\r\n\r\n}\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\n## packege.jsonにscript登録\r\n```bash\r\nnpm test\r\n```\r\nで実行できるようにする\r\n\r\npackage.json\r\n```bash\r\n\r\n    &quot;scripts&quot;: {\r\n        ...\r\n        ...\r\n        ...\r\n        ...\r\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\r\n    },\r\n```\r\n\r\n## vue unittestを実行\r\n```bash\r\nnpm test\r\n```\r\nこのような結果だと成功\r\n```bash\r\n WEBPACK  Compiled successfully in 3370ms\r\n\r\n MOCHA  Testing...\r\n\r\n\r\n\r\n  ProjectImageUploadComponent.vue\r\n    ✓ increments count when button is clicked (64ms)\r\n\r\n\r\n  1 passing (210ms)\r\n\r\n MOCHA  Tests completed successfully\r\n```\r\n\r\n## IDEからtest実行\r\n例 Intellij idea\r\nPreferences | Languages & Frameworks | Node.js and NPM\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.04.51.png)\r\n\r\n<kbd>optin</kbd> + <kbd>F11</kbd>\r\nでnpm script をPopup表示\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.06.52.png)\r\n\r\ntestを選択して実行\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.07.53.png)\r\n\r\ntest成功\r\n\r\n',469,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/469-revision-v1/',0,'revision','',0),(554,1,'2020-02-15 18:21:12','2020-02-15 09:21:12','','vue-test','','inherit','closed','closed','','vue-test-2','','','2020-02-15 18:21:12','2020-02-15 09:21:12','',469,'https://blog.webdimension.jp/wp-content/uploads/2020/02/vue-test.png',0,'attachment','image/png',0),(555,1,'2020-02-15 18:22:34','2020-02-15 09:22:34','<h2>Vue.js Unittestを導入する</h2>\n<h3>vue test-utils install</h3>\n<pre><code class=\"language-bash\">npm install --save-dev @vue/test-utils mocha jsdom jsdom-global expect</code></pre>\n<p>しかしこれではうまく動かない。</p>\n<pre><code class=\"language-bash\">Error: Chunk.parents: Use ChunkGroup.getParents() instead</code></pre>\n<p>package.jsonを変更</p>\n<pre><code class=\"language-bash\"> &quot;mocha-webpack&quot;: &quot;^2.0.0-beta.0&quot;,</code></pre>\n<p>再度</p>\n<pre><code class=\"language-bash\">npm install</code></pre>\n<h2>vue.js テストを設置</h2>\n<p>javascriptのテスト用ディレクトリを作成</p>\n<pre><code class=\"language-bash\">mkdir tests/Javascript</code></pre>\n<p>test用setup.js作成(公式に準ずる)</p>\n<pre><code class=\"language-bash\">vim tests/Javascript/setup.js</code></pre>\n<p>tests/Javascript/setup.js</p>\n<pre><code class=\"language-bash\">require(&#039;jsdom-global&#039;)()\n\nglobal.expect = require(&#039;expect&#039;)</code></pre>\n<h2>testunitを作る</h2>\n<h3>testunit (テストする方)</h3>\n<p>tests/Javascript/VueTestComponent.spec.js</p>\n<pre><code class=\"language-bash\">import { shallowMount } from &#039;@vue/test-utils&#039;\nimport ProjectImageUploadComponent from &#039;../../resources/js/components/VueTestComponent.vue&#039;\n\ndescribe(&#039;VueTestComponent.vue&#039;, () =&gt; {\n  it(&#039;props test&#039;, () =&gt; {\n    const wrapper = shallowMount(VueTestComponent)\n    const paramName = &#039;vuetest&#039;\n    wrapper.setProps({\n      TestParam: paramName\n    })\n    // eslint-disable-next-line no-undef\n    expect(wrapper.vm.$props.paramName).toBe(paramName)\n  })\n})</code></pre>\n<h3>vue component (テストされる方)</h3>\n<p>../../resources/js/components/VueTestComponent.vue</p>\n<pre><code class=\"language-bash\">\n&lt;template&gt;\n  &lt;div&gt; {{ testParam: }}&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    testParam: {\n      type: String,\n      default: &#039;&#039;\n    },\n  },\n\n}\n&lt;/script&gt;\n</code></pre>\n<h2>packege.jsonにscript登録</h2>\n<pre><code class=\"language-bash\">npm test</code></pre>\n<p>で実行できるようにする</p>\n<p>package.json</p>\n<pre><code class=\"language-bash\">\n    &quot;scripts&quot;: {\n        ...\n        ...\n        ...\n        ...\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\n    },</code></pre>\n<h2>vue unittestを実行</h2>\n<pre><code class=\"language-bash\">npm test</code></pre>\n<p>このような結果だと成功</p>\n<pre><code class=\"language-bash\"> WEBPACK  Compiled successfully in 3370ms\n\n MOCHA  Testing...\n\n  ProjectImageUploadComponent.vue\n    ✓ increments count when button is clicked (64ms)\n\n  1 passing (210ms)\n\n MOCHA  Tests completed successfully</code></pre>\n<h2>IDEからtest実行</h2>\n<p>例 Intellij idea\nPreferences | Languages &amp; Frameworks | Node.js and NPM</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.04.51.png\" alt=\"\" /></p>\n<p><kbd>optin</kbd> + <kbd>F11</kbd>\nでnpm script をPopup表示</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.06.52.png\" alt=\"\" /></p>\n<p>testを選択して実行</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.07.53.png\" alt=\"\" /></p>\n<p>test成功</p>','vue.js テスト環境  - Laravelでの開発の前準備','Laravel上でのVue.jsにUnittestを導入。npm scriptに追加','inherit','closed','closed','','469-revision-v1','','','2020-02-15 18:22:34','2020-02-15 09:22:34','## Vue.js Unittestを導入する\r\n### vue test-utils install\r\n\r\n```bash\r\nnpm install --save-dev @vue/test-utils mocha jsdom jsdom-global expect\r\n```\r\n\r\nしかしこれではうまく動かない。\r\n\r\n```bash\r\nError: Chunk.parents: Use ChunkGroup.getParents() instead\r\n```\r\n\r\npackage.jsonを変更\r\n\r\n```bash\r\n &quot;mocha-webpack&quot;: &quot;^2.0.0-beta.0&quot;,\r\n```\r\n\r\n再度\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\n## vue.js テストを設置\r\njavascriptのテスト用ディレクトリを作成\r\n```bash\r\nmkdir tests/Javascript\r\n```\r\ntest用setup.js作成(公式に準ずる)\r\n```bash\r\nvim tests/Javascript/setup.js\r\n```\r\ntests/Javascript/setup.js\r\n```bash\r\nrequire(&#039;jsdom-global&#039;)()\r\n\r\nglobal.expect = require(&#039;expect&#039;)\r\n```\r\n\r\n## testunitを作る\r\n### testunit (テストする方)\r\ntests/Javascript/VueTestComponent.spec.js\r\n```bash\r\nimport { shallowMount } from &#039;@vue/test-utils&#039;\r\nimport ProjectImageUploadComponent from &#039;../../resources/js/components/VueTestComponent.vue&#039;\r\n\r\ndescribe(&#039;VueTestComponent.vue&#039;, () =&gt; {\r\n  it(&#039;props test&#039;, () =&gt; {\r\n    const wrapper = shallowMount(VueTestComponent)\r\n    const paramName = &#039;vuetest&#039;\r\n    wrapper.setProps({\r\n      TestParam: paramName\r\n    })\r\n    // eslint-disable-next-line no-undef\r\n    expect(wrapper.vm.$props.paramName).toBe(paramName)\r\n  })\r\n})\r\n```\r\n\r\n### vue component (テストされる方)\r\n../../resources/js/components/VueTestComponent.vue\r\n```bash\r\n\r\n&lt;template&gt;\r\n  &lt;div&gt; {{ testParam: }}&lt;/div&gt;\r\n&lt;/template&gt;\r\n\r\n&lt;script&gt;\r\nexport default {\r\n  props: {\r\n    testParam: {\r\n      type: String,\r\n      default: &#039;&#039;\r\n    },\r\n  },\r\n\r\n}\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\n## packege.jsonにscript登録\r\n```bash\r\nnpm test\r\n```\r\nで実行できるようにする\r\n\r\npackage.json\r\n```bash\r\n\r\n    &quot;scripts&quot;: {\r\n        ...\r\n        ...\r\n        ...\r\n        ...\r\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\r\n    },\r\n```\r\n\r\n## vue unittestを実行\r\n```bash\r\nnpm test\r\n```\r\nこのような結果だと成功\r\n```bash\r\n WEBPACK  Compiled successfully in 3370ms\r\n\r\n MOCHA  Testing...\r\n\r\n\r\n\r\n  ProjectImageUploadComponent.vue\r\n    ✓ increments count when button is clicked (64ms)\r\n\r\n\r\n  1 passing (210ms)\r\n\r\n MOCHA  Tests completed successfully\r\n```\r\n\r\n## IDEからtest実行\r\n例 Intellij idea\r\nPreferences | Languages & Frameworks | Node.js and NPM\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.04.51.png)\r\n\r\n<kbd>optin</kbd> + <kbd>F11</kbd>\r\nでnpm script をPopup表示\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.06.52.png)\r\n\r\ntestを選択して実行\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.07.53.png)\r\n\r\ntest成功\r\n\r\n',469,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/469-revision-v1/',0,'revision','',0),(556,1,'2020-02-15 18:24:24','2020-02-15 09:24:24','<h2>Vue.js Unittestを導入する</h2>\n<h3>vue test-utils install</h3>\n<pre><code class=\"language-bash\">npm install --save-dev @vue/test-utils mocha jsdom jsdom-global expect</code></pre>\n<p>しかしこれではうまく動かない。</p>\n<pre><code class=\"language-bash\">Error: Chunk.parents: Use ChunkGroup.getParents() instead</code></pre>\n<p>package.jsonを変更</p>\n<pre><code class=\"language-bash\"> &quot;mocha-webpack&quot;: &quot;^2.0.0-beta.0&quot;,</code></pre>\n<p>再度</p>\n<pre><code class=\"language-bash\">npm install</code></pre>\n<h2>vue.js テストを設置</h2>\n<p>javascriptのテスト用ディレクトリを作成</p>\n<pre><code class=\"language-bash\">mkdir tests/Javascript</code></pre>\n<p>test用setup.js作成(公式に準ずる)</p>\n<pre><code class=\"language-bash\">vim tests/Javascript/setup.js</code></pre>\n<p>tests/Javascript/setup.js</p>\n<pre><code class=\"language-bash\">require(&#039;jsdom-global&#039;)()\n\nglobal.expect = require(&#039;expect&#039;)</code></pre>\n<h2>testunitを作る</h2>\n<h3>testunit (テストする方)</h3>\n<p>tests/Javascript/VueTestComponent.spec.js</p>\n<pre><code class=\"language-bash\">import { shallowMount } from &#039;@vue/test-utils&#039;\nimport ProjectImageUploadComponent from &#039;../../resources/js/components/VueTestComponent.vue&#039;\n\ndescribe(&#039;VueTestComponent.vue&#039;, () =&gt; {\n  it(&#039;props test&#039;, () =&gt; {\n    const wrapper = shallowMount(VueTestComponent)\n    const paramName = &#039;vuetest&#039;\n    wrapper.setProps({\n      TestParam: paramName\n    })\n    // eslint-disable-next-line no-undef\n    expect(wrapper.vm.$props.paramName).toBe(paramName)\n  })\n})</code></pre>\n<h3>vue component (テストされる方)</h3>\n<p>../../resources/js/components/VueTestComponent.vue</p>\n<pre><code class=\"language-bash\">\n&lt;template&gt;\n  &lt;div&gt; {{ testParam: }}&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    testParam: {\n      type: String,\n      default: &#039;&#039;\n    },\n  },\n\n}\n&lt;/script&gt;\n</code></pre>\n<h2>packege.jsonにscript登録</h2>\n<pre><code class=\"language-bash\">npm test</code></pre>\n<p>で実行できるようにする</p>\n<p>package.json</p>\n<pre><code class=\"language-bash\">\n    &quot;scripts&quot;: {\n        ...\n        ...\n        ...\n        ...\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\n    },</code></pre>\n<h2>vue unittestを実行</h2>\n<pre><code class=\"language-bash\">npm test</code></pre>\n<p>このような結果だと成功</p>\n<pre><code class=\"language-bash\"> WEBPACK  Compiled successfully in 3370ms\n\n MOCHA  Testing...\n\n  ProjectImageUploadComponent.vue\n    ✓ increments count when button is clicked (64ms)\n\n  1 passing (210ms)\n\n MOCHA  Tests completed successfully</code></pre>\n<h2>IDEからtest実行</h2>\n<p>例 Intellij idea\nPreferences | Languages &amp; Frameworks | Node.js and NPM</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.04.51.png\" alt=\"\" /></p>\n<p><kbd>optin</kbd> + <kbd>F11</kbd>\nでnpm script をPopup表示</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.06.52.png\" alt=\"\" /></p>\n<p>testを選択して実行</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.07.53.png\" alt=\"\" /></p>\n<p>test成功</p>','vue.js テスト環境  - Laravelでの開発の前準備5','Laravel上でのVue.jsにUnittestを導入。npm scriptに追加','inherit','closed','closed','','469-revision-v1','','','2020-02-15 18:24:24','2020-02-15 09:24:24','## Vue.js Unittestを導入する\r\n### vue test-utils install\r\n\r\n```bash\r\nnpm install --save-dev @vue/test-utils mocha jsdom jsdom-global expect\r\n```\r\n\r\nしかしこれではうまく動かない。\r\n\r\n```bash\r\nError: Chunk.parents: Use ChunkGroup.getParents() instead\r\n```\r\n\r\npackage.jsonを変更\r\n\r\n```bash\r\n &quot;mocha-webpack&quot;: &quot;^2.0.0-beta.0&quot;,\r\n```\r\n\r\n再度\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\n## vue.js テストを設置\r\njavascriptのテスト用ディレクトリを作成\r\n```bash\r\nmkdir tests/Javascript\r\n```\r\ntest用setup.js作成(公式に準ずる)\r\n```bash\r\nvim tests/Javascript/setup.js\r\n```\r\ntests/Javascript/setup.js\r\n```bash\r\nrequire(&#039;jsdom-global&#039;)()\r\n\r\nglobal.expect = require(&#039;expect&#039;)\r\n```\r\n\r\n## testunitを作る\r\n### testunit (テストする方)\r\ntests/Javascript/VueTestComponent.spec.js\r\n```bash\r\nimport { shallowMount } from &#039;@vue/test-utils&#039;\r\nimport ProjectImageUploadComponent from &#039;../../resources/js/components/VueTestComponent.vue&#039;\r\n\r\ndescribe(&#039;VueTestComponent.vue&#039;, () =&gt; {\r\n  it(&#039;props test&#039;, () =&gt; {\r\n    const wrapper = shallowMount(VueTestComponent)\r\n    const paramName = &#039;vuetest&#039;\r\n    wrapper.setProps({\r\n      TestParam: paramName\r\n    })\r\n    // eslint-disable-next-line no-undef\r\n    expect(wrapper.vm.$props.paramName).toBe(paramName)\r\n  })\r\n})\r\n```\r\n\r\n### vue component (テストされる方)\r\n../../resources/js/components/VueTestComponent.vue\r\n```bash\r\n\r\n&lt;template&gt;\r\n  &lt;div&gt; {{ testParam: }}&lt;/div&gt;\r\n&lt;/template&gt;\r\n\r\n&lt;script&gt;\r\nexport default {\r\n  props: {\r\n    testParam: {\r\n      type: String,\r\n      default: &#039;&#039;\r\n    },\r\n  },\r\n\r\n}\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\n## packege.jsonにscript登録\r\n```bash\r\nnpm test\r\n```\r\nで実行できるようにする\r\n\r\npackage.json\r\n```bash\r\n\r\n    &quot;scripts&quot;: {\r\n        ...\r\n        ...\r\n        ...\r\n        ...\r\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\r\n    },\r\n```\r\n\r\n## vue unittestを実行\r\n```bash\r\nnpm test\r\n```\r\nこのような結果だと成功\r\n```bash\r\n WEBPACK  Compiled successfully in 3370ms\r\n\r\n MOCHA  Testing...\r\n\r\n\r\n\r\n  ProjectImageUploadComponent.vue\r\n    ✓ increments count when button is clicked (64ms)\r\n\r\n\r\n  1 passing (210ms)\r\n\r\n MOCHA  Tests completed successfully\r\n```\r\n\r\n## IDEからtest実行\r\n例 Intellij idea\r\nPreferences | Languages & Frameworks | Node.js and NPM\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.04.51.png)\r\n\r\n<kbd>optin</kbd> + <kbd>F11</kbd>\r\nでnpm script をPopup表示\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.06.52.png)\r\n\r\ntestを選択して実行\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.07.53.png)\r\n\r\ntest成功\r\n\r\n',469,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/469-revision-v1/',0,'revision','',0),(557,1,'2020-02-15 19:10:17','2020-02-15 10:10:17','','Screen Shot 2020-02-15 at 19.08.22','','inherit','closed','closed','','screen-shot-2020-02-15-at-19-08-22','','','2020-02-15 19:10:17','2020-02-15 10:10:17','',473,'https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.08.22.png',0,'attachment','image/png',0),(558,1,'2020-02-15 19:10:39','2020-02-15 10:10:39','','Screen Shot 2020-02-15 at 19.07.26','','inherit','closed','closed','','screen-shot-2020-02-15-at-19-07-26','','','2020-02-15 19:10:39','2020-02-15 10:10:39','',473,'https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.07.26.png',0,'attachment','image/png',0),(559,1,'2020-02-15 19:14:52','2020-02-15 10:14:52','<h2>Laravel mix (webpack) をざっくり理解する</h2>\n<p>設定ファイルはwebpack.js</p>\n<pre><code class=\"language-bash\">\n(&#039;resources/js/app.js&#039;, &#039;public/js&#039;)\n  .sass(&#039;resources/sass/app.scss&#039;, &#039;public/css&#039;);\n</code></pre>\n<ul>\n<li>resources/js/app.js をBuildしてpublic/js に配置\n(pblic/js/app.js)</li>\n<li>resources/sass/app.scss をbuildしてpublic/cssに配置\n(pblic/css/app.css)</li>\n</ul>\n<h3>ファイルを追加する場合</h3>\n<pre><code class=\"language-bash\">(&#039;resources/js/app.js&#039;, &#039;public/js&#039;)\n  .sass(&#039;resources/sass/app.scss&#039;, &#039;public/css&#039;);\n  mix.js(&#039;resources/js/admin.js&#039;, &#039;public/js&#039;)\n    .sass(&#039;resources/sass/admin.scss&#039;, &#039;public/css&#039;);</code></pre>\n<ul>\n<li>pblic/js/admin.js</li>\n<li>pblic/css/admin.css</li>\n</ul>\n<p>が生成される。</p>\n<h2>package.json　を見てみる</h2>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n        &quot;dev&quot;: &quot;npm run development&quot;,\n        &quot;development&quot;: &quot;cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\n        &quot;watch&quot;: &quot;npm run development -- --watch&quot;,\n        &quot;watch-poll&quot;: &quot;npm run watch -- --watch-poll&quot;,\n        &quot;hot&quot;: &quot;cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\n        &quot;prod&quot;: &quot;npm run production&quot;,\n        &quot;production&quot;: &quot;cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\n        &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\n        &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\n        &quot;stylelint&quot;: &quot;stylelint ./resources/sass/player.scss ./resources/sass/admin.scss&quot;,\n        &quot;stylelint-fix&quot;: &quot;stylelint ./resources/sass/player.scss ./resources/sass/admin.scss --fix&quot;,\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\n    },</code></pre>\n<pre><code class=\"language-bash\">npm dev</code></pre>\n<p>\'npm development\'へのalias</p>\n<pre><code class=\"language-bash\">npm development</code></pre>\n<p>開発モードでBuild</p>\n<pre><code class=\"language-bash\">npm watch</code></pre>\n<p>ファイルに変更があれば変更を感知し開発モードでBuild\nフロント作業はほぼ実行しっぱなし。</p>\n<pre><code class=\"language-bash\">npm watch-poll</code></pre>\n<p>上記 npm watch をvagrantなどVirtualBox上で行う場合はこちら\n(パーミッションなどの問題らしい)</p>\n<pre><code class=\"language-bash\">npm prod</code></pre>\n<p>\'npm production\'へのalias</p>\n<pre><code class=\"language-bash\">npm production</code></pre>\n<p>プロダクトモードでBuild\n(ガチなBuild)</p>\n<pre><code class=\"language-bash\">npm hot</code></pre>\n<p>使ったことない。</p>\n<p>開発のモードのBuildとプロダクトモードの違いは生成されるjs,cssをみれば一目瞭然。</p>\n<h2>npm watch 実行してみる</h2>\n<h3>Commandから実行</h3>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>結果 成功例</p>\n<pre><code class=\"language-bash\">\n DONE  Compiled successfully in 18120ms                                                                                                                                                                                         19:02:47\n\n          Asset      Size      Chunks             Chunk Names\n   /css/app.css   196 KiB     /js/app  [emitted]  /js/app\n     /js/app.js  1.39 MiB     /js/app  [emitted]  /js/app</code></pre>\n<h3>IDEで実行</h3>\n<p>例 Intellij IDEA</p>\n<p><kbd>option</kbd> + <kbd>F11</kbd></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.08.22.png\" alt=\"\" /></p>\n<p>実行結果</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.07.26.png\" alt=\"\" /></p>','webpack  - Laravelでの開発の前準備6','Laravel-mix (webpack)　で Build, Watch をしてみる','inherit','closed','closed','','473-revision-v1','','','2020-02-15 19:14:52','2020-02-15 10:14:52','## Laravel mix (webpack) をざっくり理解する\r\n設定ファイルはwebpack.js\r\n```bash\r\n\r\n(&#039;resources/js/app.js&#039;, &#039;public/js&#039;)\r\n  .sass(&#039;resources/sass/app.scss&#039;, &#039;public/css&#039;);\r\n\r\n```\r\n- resources/js/app.js をBuildしてpublic/js に配置\r\n    (pblic/js/app.js)\r\n- resources/sass/app.scss をbuildしてpublic/cssに配置\r\n    (pblic/css/app.css)\r\n\r\n\r\n### ファイルを追加する場合\r\n```bash\r\n(&#039;resources/js/app.js&#039;, &#039;public/js&#039;)\r\n  .sass(&#039;resources/sass/app.scss&#039;, &#039;public/css&#039;);\r\n  mix.js(&#039;resources/js/admin.js&#039;, &#039;public/js&#039;)\r\n    .sass(&#039;resources/sass/admin.scss&#039;, &#039;public/css&#039;);\r\n```\r\n\r\n- pblic/js/admin.js\r\n- pblic/css/admin.css\r\n\r\nが生成される。\r\n\r\n## package.json　を見てみる\r\n```bash\r\n    &quot;scripts&quot;: {\r\n        &quot;dev&quot;: &quot;npm run development&quot;,\r\n        &quot;development&quot;: &quot;cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\r\n        &quot;watch&quot;: &quot;npm run development -- --watch&quot;,\r\n        &quot;watch-poll&quot;: &quot;npm run watch -- --watch-poll&quot;,\r\n        &quot;hot&quot;: &quot;cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\r\n        &quot;prod&quot;: &quot;npm run production&quot;,\r\n        &quot;production&quot;: &quot;cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\r\n        &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\r\n        &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\r\n        &quot;stylelint&quot;: &quot;stylelint ./resources/sass/player.scss ./resources/sass/admin.scss&quot;,\r\n        &quot;stylelint-fix&quot;: &quot;stylelint ./resources/sass/player.scss ./resources/sass/admin.scss --fix&quot;,\r\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\r\n    },\r\n```\r\n\r\n```bash\r\nnpm dev\r\n```\r\n\'npm development\'へのalias\r\n\r\n\r\n```bash\r\nnpm development\r\n```\r\n開発モードでBuild\r\n\r\n\r\n```bash\r\nnpm watch\r\n```\r\nファイルに変更があれば変更を感知し開発モードでBuild\r\nフロント作業はほぼ実行しっぱなし。\r\n\r\n\r\n```bash\r\nnpm watch-poll\r\n```\r\n上記 npm watch をvagrantなどVirtualBox上で行う場合はこちら\r\n(パーミッションなどの問題らしい)\r\n\r\n\r\n```bash\r\nnpm prod\r\n```\r\n\'npm production\'へのalias\r\n\r\n\r\n```bash\r\nnpm production\r\n```\r\nプロダクトモードでBuild\r\n(ガチなBuild)\r\n\r\n```bash\r\nnpm hot\r\n```\r\n使ったことない。\r\n\r\n\r\n開発のモードのBuildとプロダクトモードの違いは生成されるjs,cssをみれば一目瞭然。\r\n\r\n\r\n## npm watch 実行してみる\r\n### Commandから実行\r\n```bash\r\nnpm run watch\r\n```\r\n結果 成功例\r\n```bash\r\n\r\n DONE  Compiled successfully in 18120ms                                                                                                                                                                                         19:02:47\r\n\r\n          Asset      Size      Chunks             Chunk Names\r\n   /css/app.css   196 KiB     /js/app  [emitted]  /js/app\r\n     /js/app.js  1.39 MiB     /js/app  [emitted]  /js/app\r\n```\r\n### IDEで実行\r\n例 Intellij IDEA\r\n\r\n<kbd>option</kbd> + <kbd>F11</kbd>\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.08.22.png)\r\n\r\n実行結果\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.07.26.png)\r\n\r\n\r\n\r\n',473,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/473-revision-v1/',0,'revision','',0),(561,1,'2020-02-15 19:23:06','2020-02-15 10:23:06','','webpack','','inherit','closed','closed','','webpack-2','','','2020-02-15 19:23:06','2020-02-15 10:23:06','',473,'https://blog.webdimension.jp/wp-content/uploads/2020/02/webpack-1.png',0,'attachment','image/png',0),(562,1,'2020-02-15 20:02:31','2020-02-15 11:02:31','<h2>Stylelint を導入する</h2>\n<h3>Stylelint Install</h3>\n<pre><code class=\"language-bash\">npm install --save-dev stylelint stylelint-config-standard stylelint-config-recommended-scss stylelint-scss stylelint-config-concentric-order stylelint-webpack-plugin</code></pre>\n<h3>設定ファイル</h3>\n<p>.stylelintrc\n(以下一般的な設定)</p>\n<pre><code class=\"language-javascript\">\n{\n  &quot;extends&quot;: [\n    &quot;stylelint-config-standard&quot;,\n    &quot;stylelint-config-concentric-order&quot;,\n    &quot;stylelint-config-recommended-scss&quot;\n  ],\n  &quot;rules&quot;: {\n    &quot;at-rule-empty-line-before&quot;: [ &quot;always&quot;, {\n      except: [\n        &quot;blockless-after-same-name-blockless&quot;,\n        &quot;first-nested&quot;,\n      ],\n      ignore: [&quot;after-comment&quot;],\n    } ],\n    &quot;at-rule-name-case&quot;: &quot;lower&quot;,\n    &quot;at-rule-name-space-after&quot;: &quot;always-single-line&quot;,\n    &quot;at-rule-semicolon-newline-after&quot;: &quot;always&quot;,\n    &quot;block-closing-brace-empty-line-before&quot;: &quot;never&quot;,\n    &quot;block-closing-brace-newline-after&quot;: &quot;always&quot;,\n    &quot;block-closing-brace-newline-before&quot;: &quot;always-multi-line&quot;,\n    &quot;block-closing-brace-space-before&quot;: &quot;always-single-line&quot;,\n    &quot;block-opening-brace-newline-after&quot;: &quot;always-multi-line&quot;,\n    &quot;block-opening-brace-space-after&quot;: &quot;always-single-line&quot;,\n    &quot;block-opening-brace-space-before&quot;: &quot;always&quot;,\n    &quot;color-hex-case&quot;: &quot;lower&quot;,\n    &quot;color-hex-length&quot;: &quot;short&quot;,\n    &quot;comment-empty-line-before&quot;: [ &quot;always&quot;, {\n      except: [&quot;first-nested&quot;],\n      ignore: [&quot;stylelint-commands&quot;],\n    } ],\n    &quot;comment-whitespace-inside&quot;: &quot;always&quot;,\n    &quot;custom-property-empty-line-before&quot;: [ &quot;always&quot;, {\n      except: [\n        &quot;after-custom-property&quot;,\n        &quot;first-nested&quot;,\n      ],\n      ignore: [\n        &quot;after-comment&quot;,\n        &quot;inside-single-line-block&quot;,\n      ],\n    } ],\n    &quot;declaration-bang-space-after&quot;: &quot;never&quot;,\n    &quot;declaration-bang-space-before&quot;: &quot;always&quot;,\n    &quot;declaration-block-semicolon-newline-after&quot;: &quot;always-multi-line&quot;,\n    &quot;declaration-block-semicolon-space-after&quot;: &quot;always-single-line&quot;,\n    &quot;declaration-block-semicolon-space-before&quot;: &quot;never&quot;,\n    &quot;declaration-block-single-line-max-declarations&quot;: 1,\n    &quot;declaration-block-trailing-semicolon&quot;: &quot;always&quot;,\n    &quot;declaration-colon-newline-after&quot;: &quot;always-multi-line&quot;,\n    &quot;declaration-colon-space-after&quot;: &quot;always-single-line&quot;,\n    &quot;declaration-colon-space-before&quot;: &quot;never&quot;,\n    &quot;declaration-empty-line-before&quot;: [ &quot;always&quot;, {\n      except: [\n        &quot;after-declaration&quot;,\n        &quot;first-nested&quot;,\n      ],\n      ignore: [\n        &quot;after-comment&quot;,\n        &quot;inside-single-line-block&quot;,\n      ],\n    } ],\n    &quot;function-comma-newline-after&quot;: &quot;always-multi-line&quot;,\n    &quot;function-comma-space-after&quot;: &quot;always-single-line&quot;,\n    &quot;function-comma-space-before&quot;: &quot;never&quot;,\n    &quot;function-max-empty-lines&quot;: 0,\n    &quot;function-name-case&quot;: &quot;lower&quot;,\n    &quot;function-parentheses-newline-inside&quot;: &quot;always-multi-line&quot;,\n    &quot;function-parentheses-space-inside&quot;: &quot;never-single-line&quot;,\n    &quot;function-whitespace-after&quot;: &quot;always&quot;,\n    &quot;indentation&quot;: 2,\n    &quot;length-zero-no-unit&quot;: true,\n    &quot;max-empty-lines&quot;: 1,\n    &quot;media-feature-colon-space-after&quot;: &quot;always&quot;,\n    &quot;media-feature-colon-space-before&quot;: &quot;never&quot;,\n    &quot;media-feature-name-case&quot;: &quot;lower&quot;,\n    &quot;media-feature-parentheses-space-inside&quot;: &quot;never&quot;,\n    &quot;media-feature-range-operator-space-after&quot;: &quot;always&quot;,\n    &quot;media-feature-range-operator-space-before&quot;: &quot;always&quot;,\n    &quot;media-query-list-comma-newline-after&quot;: &quot;always-multi-line&quot;,\n    &quot;media-query-list-comma-space-after&quot;: &quot;always-single-line&quot;,\n    &quot;media-query-list-comma-space-before&quot;: &quot;never&quot;,\n    &quot;no-eol-whitespace&quot;: true,\n    &quot;no-missing-end-of-source-newline&quot;: true,\n    &quot;number-leading-zero&quot;: &quot;always&quot;,\n    &quot;number-no-trailing-zeros&quot;: true,\n    &quot;property-case&quot;: &quot;lower&quot;,\n    &quot;rule-empty-line-before&quot;: [ &quot;always-multi-line&quot;, {\n      except: [&quot;first-nested&quot;],\n      ignore: [&quot;after-comment&quot;],\n    } ],\n    &quot;selector-attribute-brackets-space-inside&quot;: &quot;never&quot;,\n    &quot;selector-attribute-operator-space-after&quot;: &quot;never&quot;,\n    &quot;selector-attribute-operator-space-before&quot;: &quot;never&quot;,\n    &quot;selector-combinator-space-after&quot;: &quot;always&quot;,\n    &quot;selector-combinator-space-before&quot;: &quot;always&quot;,\n    &quot;selector-descendant-combinator-no-non-space&quot;: true,\n    &quot;selector-list-comma-newline-after&quot;: &quot;always&quot;,\n    &quot;selector-list-comma-space-before&quot;: &quot;never&quot;,\n    &quot;selector-max-empty-lines&quot;: 0,\n    &quot;selector-pseudo-class-case&quot;: &quot;lower&quot;,\n    &quot;selector-pseudo-class-parentheses-space-inside&quot;: &quot;never&quot;,\n    &quot;selector-pseudo-element-case&quot;: &quot;lower&quot;,\n    &quot;selector-pseudo-element-colon-notation&quot;: &quot;double&quot;,\n    &quot;selector-type-case&quot;: &quot;lower&quot;,\n    &quot;unit-case&quot;: &quot;lower&quot;,\n    &quot;value-list-comma-newline-after&quot;: &quot;always-multi-line&quot;,\n    &quot;value-list-comma-space-after&quot;: &quot;always-single-line&quot;,\n    &quot;value-list-comma-space-before&quot;: &quot;never&quot;,\n    &quot;value-list-max-empty-lines&quot;: 0,\n  }\n}\n</code></pre>\n<h2>package.json に script 登録</h2>\n<pre><code class=\"language-bash\">\n    &quot;scripts&quot;: {\n    ...\n    ...\n    ...\n        &quot;stylelint&quot;: &quot;stylelint ./resources/sass/app.scss ./resources/sass/app.scss&quot;,\n        &quot;stylelint-fix&quot;: &quot;stylelint ./resources/sass/app.scss ./resources/sass/app.scss --fix&quot;,\n    ...\n    ...\n    ...\n    },</code></pre>\n<pre><code class=\"language-bash\">npm run stylelint</code></pre>\n<p>でルール違反表示</p>\n<pre><code class=\"language-bash\">npm run stylelint-fix</code></pre>\n<p>でルール違反自動整形</p>\n<h2>IDEにStylelint設定</h2>\n<p>例 Intellij IDEA\nPreferences | Languages &amp; Frameworks | Style Sheets | Stylelint</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.41.14.png\" alt=\"\" /></p>\n<p>不要なタブを入れてみる</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.41.28.png\" alt=\"\" /></p>\n<p>怒られる。。。</p>','Stylelint – Laravelでの開発の前準備7','Stylelintを導入しルール違反のコードに警告を。','publish','closed','open','','stylelint','','','2020-02-15 20:02:31','2020-02-15 11:02:31','## Stylelint を導入する\r\n\r\n### Stylelint Install\r\n```bash\r\nnpm install --save-dev stylelint stylelint-config-standard stylelint-config-recommended-scss stylelint-scss stylelint-config-concentric-order stylelint-webpack-plugin\r\n```\r\n\r\n### 設定ファイル\r\n .stylelintrc\r\n (以下一般的な設定)\r\n```javascript\r\n\r\n{\r\n  &quot;extends&quot;: [\r\n    &quot;stylelint-config-standard&quot;,\r\n    &quot;stylelint-config-concentric-order&quot;,\r\n    &quot;stylelint-config-recommended-scss&quot;\r\n  ],\r\n  &quot;rules&quot;: {\r\n    &quot;at-rule-empty-line-before&quot;: [ &quot;always&quot;, {\r\n      except: [\r\n        &quot;blockless-after-same-name-blockless&quot;,\r\n        &quot;first-nested&quot;,\r\n      ],\r\n      ignore: [&quot;after-comment&quot;],\r\n    } ],\r\n    &quot;at-rule-name-case&quot;: &quot;lower&quot;,\r\n    &quot;at-rule-name-space-after&quot;: &quot;always-single-line&quot;,\r\n    &quot;at-rule-semicolon-newline-after&quot;: &quot;always&quot;,\r\n    &quot;block-closing-brace-empty-line-before&quot;: &quot;never&quot;,\r\n    &quot;block-closing-brace-newline-after&quot;: &quot;always&quot;,\r\n    &quot;block-closing-brace-newline-before&quot;: &quot;always-multi-line&quot;,\r\n    &quot;block-closing-brace-space-before&quot;: &quot;always-single-line&quot;,\r\n    &quot;block-opening-brace-newline-after&quot;: &quot;always-multi-line&quot;,\r\n    &quot;block-opening-brace-space-after&quot;: &quot;always-single-line&quot;,\r\n    &quot;block-opening-brace-space-before&quot;: &quot;always&quot;,\r\n    &quot;color-hex-case&quot;: &quot;lower&quot;,\r\n    &quot;color-hex-length&quot;: &quot;short&quot;,\r\n    &quot;comment-empty-line-before&quot;: [ &quot;always&quot;, {\r\n      except: [&quot;first-nested&quot;],\r\n      ignore: [&quot;stylelint-commands&quot;],\r\n    } ],\r\n    &quot;comment-whitespace-inside&quot;: &quot;always&quot;,\r\n    &quot;custom-property-empty-line-before&quot;: [ &quot;always&quot;, {\r\n      except: [\r\n        &quot;after-custom-property&quot;,\r\n        &quot;first-nested&quot;,\r\n      ],\r\n      ignore: [\r\n        &quot;after-comment&quot;,\r\n        &quot;inside-single-line-block&quot;,\r\n      ],\r\n    } ],\r\n    &quot;declaration-bang-space-after&quot;: &quot;never&quot;,\r\n    &quot;declaration-bang-space-before&quot;: &quot;always&quot;,\r\n    &quot;declaration-block-semicolon-newline-after&quot;: &quot;always-multi-line&quot;,\r\n    &quot;declaration-block-semicolon-space-after&quot;: &quot;always-single-line&quot;,\r\n    &quot;declaration-block-semicolon-space-before&quot;: &quot;never&quot;,\r\n    &quot;declaration-block-single-line-max-declarations&quot;: 1,\r\n    &quot;declaration-block-trailing-semicolon&quot;: &quot;always&quot;,\r\n    &quot;declaration-colon-newline-after&quot;: &quot;always-multi-line&quot;,\r\n    &quot;declaration-colon-space-after&quot;: &quot;always-single-line&quot;,\r\n    &quot;declaration-colon-space-before&quot;: &quot;never&quot;,\r\n    &quot;declaration-empty-line-before&quot;: [ &quot;always&quot;, {\r\n      except: [\r\n        &quot;after-declaration&quot;,\r\n        &quot;first-nested&quot;,\r\n      ],\r\n      ignore: [\r\n        &quot;after-comment&quot;,\r\n        &quot;inside-single-line-block&quot;,\r\n      ],\r\n    } ],\r\n    &quot;function-comma-newline-after&quot;: &quot;always-multi-line&quot;,\r\n    &quot;function-comma-space-after&quot;: &quot;always-single-line&quot;,\r\n    &quot;function-comma-space-before&quot;: &quot;never&quot;,\r\n    &quot;function-max-empty-lines&quot;: 0,\r\n    &quot;function-name-case&quot;: &quot;lower&quot;,\r\n    &quot;function-parentheses-newline-inside&quot;: &quot;always-multi-line&quot;,\r\n    &quot;function-parentheses-space-inside&quot;: &quot;never-single-line&quot;,\r\n    &quot;function-whitespace-after&quot;: &quot;always&quot;,\r\n    &quot;indentation&quot;: 2,\r\n    &quot;length-zero-no-unit&quot;: true,\r\n    &quot;max-empty-lines&quot;: 1,\r\n    &quot;media-feature-colon-space-after&quot;: &quot;always&quot;,\r\n    &quot;media-feature-colon-space-before&quot;: &quot;never&quot;,\r\n    &quot;media-feature-name-case&quot;: &quot;lower&quot;,\r\n    &quot;media-feature-parentheses-space-inside&quot;: &quot;never&quot;,\r\n    &quot;media-feature-range-operator-space-after&quot;: &quot;always&quot;,\r\n    &quot;media-feature-range-operator-space-before&quot;: &quot;always&quot;,\r\n    &quot;media-query-list-comma-newline-after&quot;: &quot;always-multi-line&quot;,\r\n    &quot;media-query-list-comma-space-after&quot;: &quot;always-single-line&quot;,\r\n    &quot;media-query-list-comma-space-before&quot;: &quot;never&quot;,\r\n    &quot;no-eol-whitespace&quot;: true,\r\n    &quot;no-missing-end-of-source-newline&quot;: true,\r\n    &quot;number-leading-zero&quot;: &quot;always&quot;,\r\n    &quot;number-no-trailing-zeros&quot;: true,\r\n    &quot;property-case&quot;: &quot;lower&quot;,\r\n    &quot;rule-empty-line-before&quot;: [ &quot;always-multi-line&quot;, {\r\n      except: [&quot;first-nested&quot;],\r\n      ignore: [&quot;after-comment&quot;],\r\n    } ],\r\n    &quot;selector-attribute-brackets-space-inside&quot;: &quot;never&quot;,\r\n    &quot;selector-attribute-operator-space-after&quot;: &quot;never&quot;,\r\n    &quot;selector-attribute-operator-space-before&quot;: &quot;never&quot;,\r\n    &quot;selector-combinator-space-after&quot;: &quot;always&quot;,\r\n    &quot;selector-combinator-space-before&quot;: &quot;always&quot;,\r\n    &quot;selector-descendant-combinator-no-non-space&quot;: true,\r\n    &quot;selector-list-comma-newline-after&quot;: &quot;always&quot;,\r\n    &quot;selector-list-comma-space-before&quot;: &quot;never&quot;,\r\n    &quot;selector-max-empty-lines&quot;: 0,\r\n    &quot;selector-pseudo-class-case&quot;: &quot;lower&quot;,\r\n    &quot;selector-pseudo-class-parentheses-space-inside&quot;: &quot;never&quot;,\r\n    &quot;selector-pseudo-element-case&quot;: &quot;lower&quot;,\r\n    &quot;selector-pseudo-element-colon-notation&quot;: &quot;double&quot;,\r\n    &quot;selector-type-case&quot;: &quot;lower&quot;,\r\n    &quot;unit-case&quot;: &quot;lower&quot;,\r\n    &quot;value-list-comma-newline-after&quot;: &quot;always-multi-line&quot;,\r\n    &quot;value-list-comma-space-after&quot;: &quot;always-single-line&quot;,\r\n    &quot;value-list-comma-space-before&quot;: &quot;never&quot;,\r\n    &quot;value-list-max-empty-lines&quot;: 0,\r\n  }\r\n}\r\n\r\n```\r\n\r\n\r\n## package.json に script 登録\r\n```bash\r\n\r\n    &quot;scripts&quot;: {\r\n    ...\r\n    ...\r\n    ...\r\n        &quot;stylelint&quot;: &quot;stylelint ./resources/sass/app.scss ./resources/sass/app.scss&quot;,\r\n        &quot;stylelint-fix&quot;: &quot;stylelint ./resources/sass/app.scss ./resources/sass/app.scss --fix&quot;,\r\n    ...\r\n    ...\r\n    ...\r\n    },\r\n```\r\n```bash\r\nnpm run stylelint\r\n```\r\nでルール違反表示\r\n\r\n\r\n```bash\r\nnpm run stylelint-fix\r\n```\r\nでルール違反自動整形\r\n\r\n\r\n## IDEにStylelint設定\r\n例 Intellij IDEA\r\nPreferences | Languages & Frameworks | Style Sheets | Stylelint\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.41.14.png)\r\n\r\n不要なタブを入れてみる\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.41.28.png)\r\n\r\n怒られる。。。\r\n\r\n',0,'https://blog.webdimension.jp/?p=562',0,'post','',0),(564,1,'2020-02-15 19:48:46','2020-02-15 10:48:46','','Screen Shot 2020-02-15 at 19.41.14','','inherit','closed','closed','','screen-shot-2020-02-15-at-19-41-14','','','2020-02-15 19:48:46','2020-02-15 10:48:46','',562,'https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.41.14.png',0,'attachment','image/png',0),(565,1,'2020-02-15 19:49:08','2020-02-15 10:49:08','','Screen Shot 2020-02-15 at 19.41.28','','inherit','closed','closed','','screen-shot-2020-02-15-at-19-41-28','','','2020-02-15 19:49:08','2020-02-15 10:49:08','',562,'https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.41.28.png',0,'attachment','image/png',0),(566,1,'2020-02-15 19:49:53','2020-02-15 10:49:53','<h2>Stylelint を導入する</h2>\n<h3>Stylelint Install</h3>\n<pre><code class=\"language-bash\">npm install --save-dev stylelint stylelint-config-standard stylelint-config-recommended-scss stylelint-scss stylelint-config-concentric-order stylelint-webpack-plugin</code></pre>\n<h3>設定ファイル</h3>\n<p>.stylelintrc\n(以下一般的な設定)</p>\n<pre><code class=\"language-javascript\">\n{\n  &quot;extends&quot;: [\n    &quot;stylelint-config-standard&quot;,\n    &quot;stylelint-config-concentric-order&quot;,\n    &quot;stylelint-config-recommended-scss&quot;\n  ],\n  &quot;rules&quot;: {\n    &quot;at-rule-empty-line-before&quot;: [ &quot;always&quot;, {\n      except: [\n        &quot;blockless-after-same-name-blockless&quot;,\n        &quot;first-nested&quot;,\n      ],\n      ignore: [&quot;after-comment&quot;],\n    } ],\n    &quot;at-rule-name-case&quot;: &quot;lower&quot;,\n    &quot;at-rule-name-space-after&quot;: &quot;always-single-line&quot;,\n    &quot;at-rule-semicolon-newline-after&quot;: &quot;always&quot;,\n    &quot;block-closing-brace-empty-line-before&quot;: &quot;never&quot;,\n    &quot;block-closing-brace-newline-after&quot;: &quot;always&quot;,\n    &quot;block-closing-brace-newline-before&quot;: &quot;always-multi-line&quot;,\n    &quot;block-closing-brace-space-before&quot;: &quot;always-single-line&quot;,\n    &quot;block-opening-brace-newline-after&quot;: &quot;always-multi-line&quot;,\n    &quot;block-opening-brace-space-after&quot;: &quot;always-single-line&quot;,\n    &quot;block-opening-brace-space-before&quot;: &quot;always&quot;,\n    &quot;color-hex-case&quot;: &quot;lower&quot;,\n    &quot;color-hex-length&quot;: &quot;short&quot;,\n    &quot;comment-empty-line-before&quot;: [ &quot;always&quot;, {\n      except: [&quot;first-nested&quot;],\n      ignore: [&quot;stylelint-commands&quot;],\n    } ],\n    &quot;comment-whitespace-inside&quot;: &quot;always&quot;,\n    &quot;custom-property-empty-line-before&quot;: [ &quot;always&quot;, {\n      except: [\n        &quot;after-custom-property&quot;,\n        &quot;first-nested&quot;,\n      ],\n      ignore: [\n        &quot;after-comment&quot;,\n        &quot;inside-single-line-block&quot;,\n      ],\n    } ],\n    &quot;declaration-bang-space-after&quot;: &quot;never&quot;,\n    &quot;declaration-bang-space-before&quot;: &quot;always&quot;,\n    &quot;declaration-block-semicolon-newline-after&quot;: &quot;always-multi-line&quot;,\n    &quot;declaration-block-semicolon-space-after&quot;: &quot;always-single-line&quot;,\n    &quot;declaration-block-semicolon-space-before&quot;: &quot;never&quot;,\n    &quot;declaration-block-single-line-max-declarations&quot;: 1,\n    &quot;declaration-block-trailing-semicolon&quot;: &quot;always&quot;,\n    &quot;declaration-colon-newline-after&quot;: &quot;always-multi-line&quot;,\n    &quot;declaration-colon-space-after&quot;: &quot;always-single-line&quot;,\n    &quot;declaration-colon-space-before&quot;: &quot;never&quot;,\n    &quot;declaration-empty-line-before&quot;: [ &quot;always&quot;, {\n      except: [\n        &quot;after-declaration&quot;,\n        &quot;first-nested&quot;,\n      ],\n      ignore: [\n        &quot;after-comment&quot;,\n        &quot;inside-single-line-block&quot;,\n      ],\n    } ],\n    &quot;function-comma-newline-after&quot;: &quot;always-multi-line&quot;,\n    &quot;function-comma-space-after&quot;: &quot;always-single-line&quot;,\n    &quot;function-comma-space-before&quot;: &quot;never&quot;,\n    &quot;function-max-empty-lines&quot;: 0,\n    &quot;function-name-case&quot;: &quot;lower&quot;,\n    &quot;function-parentheses-newline-inside&quot;: &quot;always-multi-line&quot;,\n    &quot;function-parentheses-space-inside&quot;: &quot;never-single-line&quot;,\n    &quot;function-whitespace-after&quot;: &quot;always&quot;,\n    &quot;indentation&quot;: 2,\n    &quot;length-zero-no-unit&quot;: true,\n    &quot;max-empty-lines&quot;: 1,\n    &quot;media-feature-colon-space-after&quot;: &quot;always&quot;,\n    &quot;media-feature-colon-space-before&quot;: &quot;never&quot;,\n    &quot;media-feature-name-case&quot;: &quot;lower&quot;,\n    &quot;media-feature-parentheses-space-inside&quot;: &quot;never&quot;,\n    &quot;media-feature-range-operator-space-after&quot;: &quot;always&quot;,\n    &quot;media-feature-range-operator-space-before&quot;: &quot;always&quot;,\n    &quot;media-query-list-comma-newline-after&quot;: &quot;always-multi-line&quot;,\n    &quot;media-query-list-comma-space-after&quot;: &quot;always-single-line&quot;,\n    &quot;media-query-list-comma-space-before&quot;: &quot;never&quot;,\n    &quot;no-eol-whitespace&quot;: true,\n    &quot;no-missing-end-of-source-newline&quot;: true,\n    &quot;number-leading-zero&quot;: &quot;always&quot;,\n    &quot;number-no-trailing-zeros&quot;: true,\n    &quot;property-case&quot;: &quot;lower&quot;,\n    &quot;rule-empty-line-before&quot;: [ &quot;always-multi-line&quot;, {\n      except: [&quot;first-nested&quot;],\n      ignore: [&quot;after-comment&quot;],\n    } ],\n    &quot;selector-attribute-brackets-space-inside&quot;: &quot;never&quot;,\n    &quot;selector-attribute-operator-space-after&quot;: &quot;never&quot;,\n    &quot;selector-attribute-operator-space-before&quot;: &quot;never&quot;,\n    &quot;selector-combinator-space-after&quot;: &quot;always&quot;,\n    &quot;selector-combinator-space-before&quot;: &quot;always&quot;,\n    &quot;selector-descendant-combinator-no-non-space&quot;: true,\n    &quot;selector-list-comma-newline-after&quot;: &quot;always&quot;,\n    &quot;selector-list-comma-space-before&quot;: &quot;never&quot;,\n    &quot;selector-max-empty-lines&quot;: 0,\n    &quot;selector-pseudo-class-case&quot;: &quot;lower&quot;,\n    &quot;selector-pseudo-class-parentheses-space-inside&quot;: &quot;never&quot;,\n    &quot;selector-pseudo-element-case&quot;: &quot;lower&quot;,\n    &quot;selector-pseudo-element-colon-notation&quot;: &quot;double&quot;,\n    &quot;selector-type-case&quot;: &quot;lower&quot;,\n    &quot;unit-case&quot;: &quot;lower&quot;,\n    &quot;value-list-comma-newline-after&quot;: &quot;always-multi-line&quot;,\n    &quot;value-list-comma-space-after&quot;: &quot;always-single-line&quot;,\n    &quot;value-list-comma-space-before&quot;: &quot;never&quot;,\n    &quot;value-list-max-empty-lines&quot;: 0,\n  }\n}\n</code></pre>\n<h2>package.json に script 登録</h2>\n<pre><code class=\"language-bash\">\n    &quot;scripts&quot;: {\n    ...\n    ...\n    ...\n        &quot;stylelint&quot;: &quot;stylelint ./resources/sass/app.scss ./resources/sass/app.scss&quot;,\n        &quot;stylelint-fix&quot;: &quot;stylelint ./resources/sass/app.scss ./resources/sass/app.scss --fix&quot;,\n    ...\n    ...\n    ...\n    },</code></pre>\n<pre><code class=\"language-bash\">npm run stylelint</code></pre>\n<p>でルール違反表示</p>\n<pre><code class=\"language-bash\">npm run stylelint-fix</code></pre>\n<p>でルール違反自動整形</p>\n<h2>IDEにStylelint設定</h2>\n<p>例 Intellij IDEA\nPreferences | Languages &amp; Frameworks | Style Sheets | Stylelint</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.41.14.png\" alt=\"\" /></p>\n<p>不要なタブを入れてみる</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.41.28.png\" alt=\"\" /></p>\n<p>怒られる。。。</p>','Stylelint – Laravelでの開発の前準備7','Stylelintを導入しルール違反のコードに警告を。','inherit','closed','closed','','562-revision-v1','','','2020-02-15 19:49:53','2020-02-15 10:49:53','## Stylelint を導入する\r\n\r\n### Stylelint Install\r\n```bash\r\nnpm install --save-dev stylelint stylelint-config-standard stylelint-config-recommended-scss stylelint-scss stylelint-config-concentric-order stylelint-webpack-plugin\r\n```\r\n\r\n### 設定ファイル\r\n .stylelintrc\r\n (以下一般的な設定)\r\n```javascript\r\n\r\n{\r\n  &quot;extends&quot;: [\r\n    &quot;stylelint-config-standard&quot;,\r\n    &quot;stylelint-config-concentric-order&quot;,\r\n    &quot;stylelint-config-recommended-scss&quot;\r\n  ],\r\n  &quot;rules&quot;: {\r\n    &quot;at-rule-empty-line-before&quot;: [ &quot;always&quot;, {\r\n      except: [\r\n        &quot;blockless-after-same-name-blockless&quot;,\r\n        &quot;first-nested&quot;,\r\n      ],\r\n      ignore: [&quot;after-comment&quot;],\r\n    } ],\r\n    &quot;at-rule-name-case&quot;: &quot;lower&quot;,\r\n    &quot;at-rule-name-space-after&quot;: &quot;always-single-line&quot;,\r\n    &quot;at-rule-semicolon-newline-after&quot;: &quot;always&quot;,\r\n    &quot;block-closing-brace-empty-line-before&quot;: &quot;never&quot;,\r\n    &quot;block-closing-brace-newline-after&quot;: &quot;always&quot;,\r\n    &quot;block-closing-brace-newline-before&quot;: &quot;always-multi-line&quot;,\r\n    &quot;block-closing-brace-space-before&quot;: &quot;always-single-line&quot;,\r\n    &quot;block-opening-brace-newline-after&quot;: &quot;always-multi-line&quot;,\r\n    &quot;block-opening-brace-space-after&quot;: &quot;always-single-line&quot;,\r\n    &quot;block-opening-brace-space-before&quot;: &quot;always&quot;,\r\n    &quot;color-hex-case&quot;: &quot;lower&quot;,\r\n    &quot;color-hex-length&quot;: &quot;short&quot;,\r\n    &quot;comment-empty-line-before&quot;: [ &quot;always&quot;, {\r\n      except: [&quot;first-nested&quot;],\r\n      ignore: [&quot;stylelint-commands&quot;],\r\n    } ],\r\n    &quot;comment-whitespace-inside&quot;: &quot;always&quot;,\r\n    &quot;custom-property-empty-line-before&quot;: [ &quot;always&quot;, {\r\n      except: [\r\n        &quot;after-custom-property&quot;,\r\n        &quot;first-nested&quot;,\r\n      ],\r\n      ignore: [\r\n        &quot;after-comment&quot;,\r\n        &quot;inside-single-line-block&quot;,\r\n      ],\r\n    } ],\r\n    &quot;declaration-bang-space-after&quot;: &quot;never&quot;,\r\n    &quot;declaration-bang-space-before&quot;: &quot;always&quot;,\r\n    &quot;declaration-block-semicolon-newline-after&quot;: &quot;always-multi-line&quot;,\r\n    &quot;declaration-block-semicolon-space-after&quot;: &quot;always-single-line&quot;,\r\n    &quot;declaration-block-semicolon-space-before&quot;: &quot;never&quot;,\r\n    &quot;declaration-block-single-line-max-declarations&quot;: 1,\r\n    &quot;declaration-block-trailing-semicolon&quot;: &quot;always&quot;,\r\n    &quot;declaration-colon-newline-after&quot;: &quot;always-multi-line&quot;,\r\n    &quot;declaration-colon-space-after&quot;: &quot;always-single-line&quot;,\r\n    &quot;declaration-colon-space-before&quot;: &quot;never&quot;,\r\n    &quot;declaration-empty-line-before&quot;: [ &quot;always&quot;, {\r\n      except: [\r\n        &quot;after-declaration&quot;,\r\n        &quot;first-nested&quot;,\r\n      ],\r\n      ignore: [\r\n        &quot;after-comment&quot;,\r\n        &quot;inside-single-line-block&quot;,\r\n      ],\r\n    } ],\r\n    &quot;function-comma-newline-after&quot;: &quot;always-multi-line&quot;,\r\n    &quot;function-comma-space-after&quot;: &quot;always-single-line&quot;,\r\n    &quot;function-comma-space-before&quot;: &quot;never&quot;,\r\n    &quot;function-max-empty-lines&quot;: 0,\r\n    &quot;function-name-case&quot;: &quot;lower&quot;,\r\n    &quot;function-parentheses-newline-inside&quot;: &quot;always-multi-line&quot;,\r\n    &quot;function-parentheses-space-inside&quot;: &quot;never-single-line&quot;,\r\n    &quot;function-whitespace-after&quot;: &quot;always&quot;,\r\n    &quot;indentation&quot;: 2,\r\n    &quot;length-zero-no-unit&quot;: true,\r\n    &quot;max-empty-lines&quot;: 1,\r\n    &quot;media-feature-colon-space-after&quot;: &quot;always&quot;,\r\n    &quot;media-feature-colon-space-before&quot;: &quot;never&quot;,\r\n    &quot;media-feature-name-case&quot;: &quot;lower&quot;,\r\n    &quot;media-feature-parentheses-space-inside&quot;: &quot;never&quot;,\r\n    &quot;media-feature-range-operator-space-after&quot;: &quot;always&quot;,\r\n    &quot;media-feature-range-operator-space-before&quot;: &quot;always&quot;,\r\n    &quot;media-query-list-comma-newline-after&quot;: &quot;always-multi-line&quot;,\r\n    &quot;media-query-list-comma-space-after&quot;: &quot;always-single-line&quot;,\r\n    &quot;media-query-list-comma-space-before&quot;: &quot;never&quot;,\r\n    &quot;no-eol-whitespace&quot;: true,\r\n    &quot;no-missing-end-of-source-newline&quot;: true,\r\n    &quot;number-leading-zero&quot;: &quot;always&quot;,\r\n    &quot;number-no-trailing-zeros&quot;: true,\r\n    &quot;property-case&quot;: &quot;lower&quot;,\r\n    &quot;rule-empty-line-before&quot;: [ &quot;always-multi-line&quot;, {\r\n      except: [&quot;first-nested&quot;],\r\n      ignore: [&quot;after-comment&quot;],\r\n    } ],\r\n    &quot;selector-attribute-brackets-space-inside&quot;: &quot;never&quot;,\r\n    &quot;selector-attribute-operator-space-after&quot;: &quot;never&quot;,\r\n    &quot;selector-attribute-operator-space-before&quot;: &quot;never&quot;,\r\n    &quot;selector-combinator-space-after&quot;: &quot;always&quot;,\r\n    &quot;selector-combinator-space-before&quot;: &quot;always&quot;,\r\n    &quot;selector-descendant-combinator-no-non-space&quot;: true,\r\n    &quot;selector-list-comma-newline-after&quot;: &quot;always&quot;,\r\n    &quot;selector-list-comma-space-before&quot;: &quot;never&quot;,\r\n    &quot;selector-max-empty-lines&quot;: 0,\r\n    &quot;selector-pseudo-class-case&quot;: &quot;lower&quot;,\r\n    &quot;selector-pseudo-class-parentheses-space-inside&quot;: &quot;never&quot;,\r\n    &quot;selector-pseudo-element-case&quot;: &quot;lower&quot;,\r\n    &quot;selector-pseudo-element-colon-notation&quot;: &quot;double&quot;,\r\n    &quot;selector-type-case&quot;: &quot;lower&quot;,\r\n    &quot;unit-case&quot;: &quot;lower&quot;,\r\n    &quot;value-list-comma-newline-after&quot;: &quot;always-multi-line&quot;,\r\n    &quot;value-list-comma-space-after&quot;: &quot;always-single-line&quot;,\r\n    &quot;value-list-comma-space-before&quot;: &quot;never&quot;,\r\n    &quot;value-list-max-empty-lines&quot;: 0,\r\n  }\r\n}\r\n\r\n```\r\n\r\n\r\n## package.json に script 登録\r\n```bash\r\n\r\n    &quot;scripts&quot;: {\r\n    ...\r\n    ...\r\n    ...\r\n        &quot;stylelint&quot;: &quot;stylelint ./resources/sass/app.scss ./resources/sass/app.scss&quot;,\r\n        &quot;stylelint-fix&quot;: &quot;stylelint ./resources/sass/app.scss ./resources/sass/app.scss --fix&quot;,\r\n    ...\r\n    ...\r\n    ...\r\n    },\r\n```\r\n```bash\r\nnpm run stylelint\r\n```\r\nでルール違反表示\r\n\r\n\r\n```bash\r\nnpm run stylelint-fix\r\n```\r\nでルール違反自動整形\r\n\r\n\r\n## IDEにStylelint設定\r\n例 Intellij IDEA\r\nPreferences | Languages & Frameworks | Style Sheets | Stylelint\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.41.14.png)\r\n\r\n不要なタブを入れてみる\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.41.28.png)\r\n\r\n怒られる。。。\r\n\r\n',562,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/562-revision-v1/',0,'revision','',0),(567,1,'2020-02-15 20:00:48','2020-02-15 11:00:48','','stylelint','','inherit','closed','closed','','stylelint','','','2020-02-15 20:00:48','2020-02-15 11:00:48','',562,'https://blog.webdimension.jp/wp-content/uploads/2020/02/stylelint.png',0,'attachment','image/png',0),(568,1,'2020-02-15 20:04:00','2020-02-15 11:04:00','<h2>Laravel mix (webpack) をざっくり理解する</h2>\n<p>設定ファイルはwebpack.js</p>\n<pre><code class=\"language-bash\">\n(&#039;resources/js/app.js&#039;, &#039;public/js&#039;)\n  .sass(&#039;resources/sass/app.scss&#039;, &#039;public/css&#039;);\n</code></pre>\n<ul>\n<li>resources/js/app.js をBuildしてpublic/js に配置\n(pblic/js/app.js)</li>\n<li>resources/sass/app.scss をbuildしてpublic/cssに配置\n(pblic/css/app.css)</li>\n</ul>\n<h3>ファイルを追加する場合</h3>\n<pre><code class=\"language-bash\">(&#039;resources/js/app.js&#039;, &#039;public/js&#039;)\n  .sass(&#039;resources/sass/app.scss&#039;, &#039;public/css&#039;);\n  mix.js(&#039;resources/js/admin.js&#039;, &#039;public/js&#039;)\n    .sass(&#039;resources/sass/admin.scss&#039;, &#039;public/css&#039;);</code></pre>\n<ul>\n<li>pblic/js/admin.js</li>\n<li>pblic/css/admin.css</li>\n</ul>\n<p>が生成される。</p>\n<h2>package.json　を見てみる</h2>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n        &quot;dev&quot;: &quot;npm run development&quot;,\n        &quot;development&quot;: &quot;cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\n        &quot;watch&quot;: &quot;npm run development -- --watch&quot;,\n        &quot;watch-poll&quot;: &quot;npm run watch -- --watch-poll&quot;,\n        &quot;hot&quot;: &quot;cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\n        &quot;prod&quot;: &quot;npm run production&quot;,\n        &quot;production&quot;: &quot;cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\n        &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\n        &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\n        &quot;stylelint&quot;: &quot;stylelint ./resources/sass/player.scss ./resources/sass/admin.scss&quot;,\n        &quot;stylelint-fix&quot;: &quot;stylelint ./resources/sass/player.scss ./resources/sass/admin.scss --fix&quot;,\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\n    },</code></pre>\n<pre><code class=\"language-bash\">npm run dev</code></pre>\n<p>\'npm run development\'へのalias</p>\n<pre><code class=\"language-bash\">npm run development</code></pre>\n<p>開発モードでBuild</p>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>ファイルに変更があれば変更を感知し開発モードでBuild\nフロント作業はほぼ実行しっぱなし。</p>\n<pre><code class=\"language-bash\">npm run watch-poll</code></pre>\n<p>上記 npm watch をvagrantなどVirtualBox上で行う場合はこちら\n(パーミッションなどの問題らしい)</p>\n<pre><code class=\"language-bash\">npm run prod</code></pre>\n<p>\'npm run production\'へのalias</p>\n<pre><code class=\"language-bash\">npm run production</code></pre>\n<p>プロダクトモードでBuild\n(ガチなBuild)</p>\n<pre><code class=\"language-bash\">npm run hot</code></pre>\n<p>使ったことない。</p>\n<p>開発のモードのBuildとプロダクトモードの違いは生成されるjs,cssをみれば一目瞭然。</p>\n<h2>npm run watch 実行してみる</h2>\n<h3>Commandから実行</h3>\n<pre><code class=\"language-bash\">npm run watch</code></pre>\n<p>結果 成功例</p>\n<pre><code class=\"language-bash\">\n DONE  Compiled successfully in 18120ms                                                                                                                                                                                         19:02:47\n\n          Asset      Size      Chunks             Chunk Names\n   /css/app.css   196 KiB     /js/app  [emitted]  /js/app\n     /js/app.js  1.39 MiB     /js/app  [emitted]  /js/app</code></pre>\n<h3>IDEで実行</h3>\n<p>例 Intellij IDEA</p>\n<p><kbd>option</kbd> + <kbd>F11</kbd></p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.08.22.png\" alt=\"\" /></p>\n<p>実行結果</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.07.26.png\" alt=\"\" /></p>','webpack  - Laravelでの開発の前準備6','Laravel-mix (webpack)　で Build, Watch をしてみる','inherit','closed','closed','','473-revision-v1','','','2020-02-15 20:04:00','2020-02-15 11:04:00','## Laravel mix (webpack) をざっくり理解する\r\n設定ファイルはwebpack.js\r\n```bash\r\n\r\n(&#039;resources/js/app.js&#039;, &#039;public/js&#039;)\r\n  .sass(&#039;resources/sass/app.scss&#039;, &#039;public/css&#039;);\r\n\r\n```\r\n- resources/js/app.js をBuildしてpublic/js に配置\r\n    (pblic/js/app.js)\r\n- resources/sass/app.scss をbuildしてpublic/cssに配置\r\n    (pblic/css/app.css)\r\n\r\n\r\n### ファイルを追加する場合\r\n```bash\r\n(&#039;resources/js/app.js&#039;, &#039;public/js&#039;)\r\n  .sass(&#039;resources/sass/app.scss&#039;, &#039;public/css&#039;);\r\n  mix.js(&#039;resources/js/admin.js&#039;, &#039;public/js&#039;)\r\n    .sass(&#039;resources/sass/admin.scss&#039;, &#039;public/css&#039;);\r\n```\r\n\r\n- pblic/js/admin.js\r\n- pblic/css/admin.css\r\n\r\nが生成される。\r\n\r\n## package.json　を見てみる\r\n```bash\r\n    &quot;scripts&quot;: {\r\n        &quot;dev&quot;: &quot;npm run development&quot;,\r\n        &quot;development&quot;: &quot;cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\r\n        &quot;watch&quot;: &quot;npm run development -- --watch&quot;,\r\n        &quot;watch-poll&quot;: &quot;npm run watch -- --watch-poll&quot;,\r\n        &quot;hot&quot;: &quot;cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\r\n        &quot;prod&quot;: &quot;npm run production&quot;,\r\n        &quot;production&quot;: &quot;cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,\r\n        &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\r\n        &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\r\n        &quot;stylelint&quot;: &quot;stylelint ./resources/sass/player.scss ./resources/sass/admin.scss&quot;,\r\n        &quot;stylelint-fix&quot;: &quot;stylelint ./resources/sass/player.scss ./resources/sass/admin.scss --fix&quot;,\r\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\r\n    },\r\n```\r\n\r\n```bash\r\nnpm run dev\r\n```\r\n\'npm run development\'へのalias\r\n\r\n\r\n```bash\r\nnpm run development\r\n```\r\n開発モードでBuild\r\n\r\n\r\n```bash\r\nnpm run watch\r\n```\r\nファイルに変更があれば変更を感知し開発モードでBuild\r\nフロント作業はほぼ実行しっぱなし。\r\n\r\n\r\n```bash\r\nnpm run watch-poll\r\n```\r\n上記 npm watch をvagrantなどVirtualBox上で行う場合はこちら\r\n(パーミッションなどの問題らしい)\r\n\r\n\r\n```bash\r\nnpm run prod\r\n```\r\n\'npm run production\'へのalias\r\n\r\n\r\n```bash\r\nnpm run production\r\n```\r\nプロダクトモードでBuild\r\n(ガチなBuild)\r\n\r\n```bash\r\nnpm run hot\r\n```\r\n使ったことない。\r\n\r\n\r\n開発のモードのBuildとプロダクトモードの違いは生成されるjs,cssをみれば一目瞭然。\r\n\r\n\r\n## npm run watch 実行してみる\r\n### Commandから実行\r\n```bash\r\nnpm run watch\r\n```\r\n結果 成功例\r\n```bash\r\n\r\n DONE  Compiled successfully in 18120ms                                                                                                                                                                                         19:02:47\r\n\r\n          Asset      Size      Chunks             Chunk Names\r\n   /css/app.css   196 KiB     /js/app  [emitted]  /js/app\r\n     /js/app.js  1.39 MiB     /js/app  [emitted]  /js/app\r\n```\r\n### IDEで実行\r\n例 Intellij IDEA\r\n\r\n<kbd>option</kbd> + <kbd>F11</kbd>\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.08.22.png)\r\n\r\n実行結果\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-19.07.26.png)\r\n\r\n\r\n\r\n',473,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/473-revision-v1/',0,'revision','',0),(569,1,'2020-02-15 20:05:24','2020-02-15 11:05:24','<h2>Vue.js Unittestを導入する</h2>\n<h3>vue test-utils install</h3>\n<pre><code class=\"language-bash\">npm install --save-dev @vue/test-utils mocha jsdom jsdom-global expect</code></pre>\n<p>しかしこれではうまく動かない。</p>\n<pre><code class=\"language-bash\">Error: Chunk.parents: Use ChunkGroup.getParents() instead</code></pre>\n<p>package.jsonを変更</p>\n<pre><code class=\"language-bash\"> &quot;mocha-webpack&quot;: &quot;^2.0.0-beta.0&quot;,</code></pre>\n<p>再度</p>\n<pre><code class=\"language-bash\">npm install</code></pre>\n<h2>vue.js テストを設置</h2>\n<p>javascriptのテスト用ディレクトリを作成</p>\n<pre><code class=\"language-bash\">mkdir tests/Javascript</code></pre>\n<p>test用setup.js作成(公式に準ずる)</p>\n<pre><code class=\"language-bash\">vim tests/Javascript/setup.js</code></pre>\n<p>tests/Javascript/setup.js</p>\n<pre><code class=\"language-bash\">require(&#039;jsdom-global&#039;)()\n\nglobal.expect = require(&#039;expect&#039;)</code></pre>\n<h2>testunitを作る</h2>\n<h3>testunit (テストする方)</h3>\n<p>tests/Javascript/VueTestComponent.spec.js</p>\n<pre><code class=\"language-bash\">import { shallowMount } from &#039;@vue/test-utils&#039;\nimport ProjectImageUploadComponent from &#039;../../resources/js/components/VueTestComponent.vue&#039;\n\ndescribe(&#039;VueTestComponent.vue&#039;, () =&gt; {\n  it(&#039;props test&#039;, () =&gt; {\n    const wrapper = shallowMount(VueTestComponent)\n    const paramName = &#039;vuetest&#039;\n    wrapper.setProps({\n      TestParam: paramName\n    })\n    // eslint-disable-next-line no-undef\n    expect(wrapper.vm.$props.paramName).toBe(paramName)\n  })\n})</code></pre>\n<h3>vue component (テストされる方)</h3>\n<p>../../resources/js/components/VueTestComponent.vue</p>\n<pre><code class=\"language-bash\">\n&lt;template&gt;\n  &lt;div&gt; {{ testParam: }}&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    testParam: {\n      type: String,\n      default: &#039;&#039;\n    },\n  },\n\n}\n&lt;/script&gt;\n</code></pre>\n<h2>packege.jsonにscript登録</h2>\n<pre><code class=\"language-bash\">npm run test</code></pre>\n<p>で実行できるようにする</p>\n<p>package.json</p>\n<pre><code class=\"language-bash\">\n    &quot;scripts&quot;: {\n        ...\n        ...\n        ...\n        ...\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\n    },</code></pre>\n<h2>vue unittestを実行</h2>\n<pre><code class=\"language-bash\">npm test</code></pre>\n<p>このような結果だと成功</p>\n<pre><code class=\"language-bash\"> WEBPACK  Compiled successfully in 3370ms\n\n MOCHA  Testing...\n\n  ProjectImageUploadComponent.vue\n    ✓ increments count when button is clicked (64ms)\n\n  1 passing (210ms)\n\n MOCHA  Tests completed successfully</code></pre>\n<h2>IDEからtest実行</h2>\n<p>例 Intellij idea\nPreferences | Languages &amp; Frameworks | Node.js and NPM</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.04.51.png\" alt=\"\" /></p>\n<p><kbd>optin</kbd> + <kbd>F11</kbd>\nでnpm script をPopup表示</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.06.52.png\" alt=\"\" /></p>\n<p>testを選択して実行</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.07.53.png\" alt=\"\" /></p>\n<p>test成功</p>','vue.js テスト環境  - Laravelでの開発の前準備5','Laravel上でのVue.jsにUnittestを導入。npm scriptに追加','inherit','closed','closed','','469-revision-v1','','','2020-02-15 20:05:24','2020-02-15 11:05:24','## Vue.js Unittestを導入する\r\n### vue test-utils install\r\n\r\n```bash\r\nnpm install --save-dev @vue/test-utils mocha jsdom jsdom-global expect\r\n```\r\n\r\nしかしこれではうまく動かない。\r\n\r\n```bash\r\nError: Chunk.parents: Use ChunkGroup.getParents() instead\r\n```\r\n\r\npackage.jsonを変更\r\n\r\n```bash\r\n &quot;mocha-webpack&quot;: &quot;^2.0.0-beta.0&quot;,\r\n```\r\n\r\n再度\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\n## vue.js テストを設置\r\njavascriptのテスト用ディレクトリを作成\r\n```bash\r\nmkdir tests/Javascript\r\n```\r\ntest用setup.js作成(公式に準ずる)\r\n```bash\r\nvim tests/Javascript/setup.js\r\n```\r\ntests/Javascript/setup.js\r\n```bash\r\nrequire(&#039;jsdom-global&#039;)()\r\n\r\nglobal.expect = require(&#039;expect&#039;)\r\n```\r\n\r\n## testunitを作る\r\n### testunit (テストする方)\r\ntests/Javascript/VueTestComponent.spec.js\r\n```bash\r\nimport { shallowMount } from &#039;@vue/test-utils&#039;\r\nimport ProjectImageUploadComponent from &#039;../../resources/js/components/VueTestComponent.vue&#039;\r\n\r\ndescribe(&#039;VueTestComponent.vue&#039;, () =&gt; {\r\n  it(&#039;props test&#039;, () =&gt; {\r\n    const wrapper = shallowMount(VueTestComponent)\r\n    const paramName = &#039;vuetest&#039;\r\n    wrapper.setProps({\r\n      TestParam: paramName\r\n    })\r\n    // eslint-disable-next-line no-undef\r\n    expect(wrapper.vm.$props.paramName).toBe(paramName)\r\n  })\r\n})\r\n```\r\n\r\n### vue component (テストされる方)\r\n../../resources/js/components/VueTestComponent.vue\r\n```bash\r\n\r\n&lt;template&gt;\r\n  &lt;div&gt; {{ testParam: }}&lt;/div&gt;\r\n&lt;/template&gt;\r\n\r\n&lt;script&gt;\r\nexport default {\r\n  props: {\r\n    testParam: {\r\n      type: String,\r\n      default: &#039;&#039;\r\n    },\r\n  },\r\n\r\n}\r\n&lt;/script&gt;\r\n\r\n```\r\n\r\n## packege.jsonにscript登録\r\n```bash\r\nnpm run test\r\n```\r\nで実行できるようにする\r\n\r\npackage.json\r\n```bash\r\n\r\n    &quot;scripts&quot;: {\r\n        ...\r\n        ...\r\n        ...\r\n        ...\r\n        &quot;test&quot;: &quot;mocha-webpack --webpack-config=node_modules/laravel-mix/setup/webpack.config.js --require tests/Javascript/setup.js tests/Javascript/**/*.spec.js&quot;\r\n    },\r\n```\r\n\r\n## vue unittestを実行\r\n```bash\r\nnpm test\r\n```\r\nこのような結果だと成功\r\n```bash\r\n WEBPACK  Compiled successfully in 3370ms\r\n\r\n MOCHA  Testing...\r\n\r\n\r\n\r\n  ProjectImageUploadComponent.vue\r\n    ✓ increments count when button is clicked (64ms)\r\n\r\n\r\n  1 passing (210ms)\r\n\r\n MOCHA  Tests completed successfully\r\n```\r\n\r\n## IDEからtest実行\r\n例 Intellij idea\r\nPreferences | Languages & Frameworks | Node.js and NPM\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.04.51.png)\r\n\r\n<kbd>optin</kbd> + <kbd>F11</kbd>\r\nでnpm script をPopup表示\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.06.52.png)\r\n\r\ntestを選択して実行\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-18.07.53.png)\r\n\r\ntest成功\r\n\r\n',469,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/469-revision-v1/',0,'revision','',0),(570,1,'2020-02-15 20:06:18','2020-02-15 11:06:18','<h1>Eslint</h1>\n<h2>Install</h2>\n<pre><code class=\"language-bash\">$ npm install babel-eslint eslint eslint-config-prettier eslint-config-standard eslint-friendly-formatter eslint-loader eslint-plugin-html eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise eslint-plugin-standard eslint-plugin-vue laravel-mix-eslint --save-dev</code></pre>\n<h3>package.jsonへScriptとして登録</h3>\n<p>vim composer.json\nnpm run eslint でrule違反箇所を確認\nnpm run eslint-fix でrule違反箇所を整形</p>\n<pre><code class=\"language-bash\">    &quot;scripts&quot;: {\n    ...\n    ...\n    ...\n     +   &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\n     +   &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\n    },</code></pre>\n<h3>IDEへの設定</h3>\n<p>例) Intelij idea</p>\n<p>Preferences | Languages &amp; Frameworks | JavaScript | Code Quality Tools | ESLint</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.00.39.png\" alt=\"\" /></p>\n<p>ルール違反箇所</p>\n<p><img src=\"https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.01.06.png\" alt=\"\" /></p>\n<p><kbd>option</kbd> + <kbd>CR</kbd>\nで自動整形</p>\n<h2>設定ファイル</h2>\n<p>プロジェクトルートへ.eslintrc.js</p>\n<pre><code class=\"language-javascript\">\nmodule.exports = {\n    root: true,\n    globals: {\n        &#039;_&#039;: true, // lodash\n        &#039;Enumerable&#039;: true, // linq\n        Vue: true\n    },\n    parserOptions: {\n        parser: &#039;babel-eslint&#039;\n    },\n    env: {\n        &#039;browser&#039;: true,\n        &#039;jquery&#039; : true,\n        &quot;mocha&quot;: true\n    },\n    extends: [\n        &quot;prettier&quot;,\n        &#039;standard&#039;, // https://github.com/standard/standard/blob/master/docs/RULES-en.md,\n        &#039;eslint:recommended&#039;,\n        // &quot;plugin:vue-i18n/recommended&quot;,\n        // &#039;plugin:vue/essential&#039;\n        // &quot;plugin:vue/strongly-recommended&quot;\n        &#039;plugin:vue/recommended&#039;\n\n    ],\n    // required to lint *.vue files\n    plugins: [\n        &#039;vue&#039;,\n        &quot;prettier&quot;\n    ],\n    // add your custom rules here\n    rules: {\n        // allow async-await\n        &#039;generator-star-spacing&#039;: &#039;off&#039;,\n        &quot;indent&quot;: [&quot;error&quot;, 2],\n        &quot;object-shorthand&quot;: [0,&quot;always&quot;]\n\n    },\n}</code></pre>','Eslint (vue)  - Laravelでの開発の前準備3','Eslintを導入しコーディングルールを設定。 IDEに設定すればルール違反をリアルタイムで指摘してくれる。','inherit','closed','closed','','467-revision-v1','','','2020-02-15 20:06:18','2020-02-15 11:06:18','# Eslint\r\n## Install\r\n```bash\r\n$ npm install babel-eslint eslint eslint-config-prettier eslint-config-standard eslint-friendly-formatter eslint-loader eslint-plugin-html eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise eslint-plugin-standard eslint-plugin-vue laravel-mix-eslint --save-dev\r\n```\r\n### package.jsonへScriptとして登録\r\nvim composer.json\r\nnpm run eslint でrule違反箇所を確認\r\nnpm run eslint-fix でrule違反箇所を整形\r\n\r\n```bash\r\n    &quot;scripts&quot;: {\r\n    ...\r\n    ...\r\n    ...\r\n     +   &quot;eslint&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue &quot;,\r\n     +   &quot;eslint-fix&quot;: &quot;eslint ./resources/js/*/*/*.vue ./resources/js/*.js ./resources/js/*/*.vue --fix&quot;,\r\n    },\r\n```\r\n### IDEへの設定\r\n例) Intelij idea\r\n\r\nPreferences | Languages & Frameworks | JavaScript | Code Quality Tools | ESLint\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.00.39.png)\r\n\r\nルール違反箇所\r\n\r\n![](https://blog.webdimension.jp/wp-content/uploads/2020/02/Screen-Shot-2020-02-15-at-16.01.06.png)\r\n\r\n<kbd>option</kbd> + <kbd>CR</kbd>\r\nで自動整形\r\n\r\n## 設定ファイル\r\nプロジェクトルートへ.eslintrc.js\r\n```javascript\r\n\r\nmodule.exports = {\r\n    root: true,\r\n    globals: {\r\n        &#039;_&#039;: true, // lodash\r\n        &#039;Enumerable&#039;: true, // linq\r\n        Vue: true\r\n    },\r\n    parserOptions: {\r\n        parser: &#039;babel-eslint&#039;\r\n    },\r\n    env: {\r\n        &#039;browser&#039;: true,\r\n        &#039;jquery&#039; : true,\r\n        &quot;mocha&quot;: true\r\n    },\r\n    extends: [\r\n        &quot;prettier&quot;,\r\n        &#039;standard&#039;, // https://github.com/standard/standard/blob/master/docs/RULES-en.md,\r\n        &#039;eslint:recommended&#039;,\r\n        // &quot;plugin:vue-i18n/recommended&quot;,\r\n        // &#039;plugin:vue/essential&#039;\r\n        // &quot;plugin:vue/strongly-recommended&quot;\r\n        &#039;plugin:vue/recommended&#039;\r\n\r\n    ],\r\n    // required to lint *.vue files\r\n    plugins: [\r\n        &#039;vue&#039;,\r\n        &quot;prettier&quot;\r\n    ],\r\n    // add your custom rules here\r\n    rules: {\r\n        // allow async-await\r\n        &#039;generator-star-spacing&#039;: &#039;off&#039;,\r\n        &quot;indent&quot;: [&quot;error&quot;, 2],\r\n        &quot;object-shorthand&quot;: [0,&quot;always&quot;]\r\n\r\n    },\r\n}\r\n```\r\n\r\n',467,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/467-revision-v1/',0,'revision','',0),(571,1,'2020-02-15 20:08:25','2020-02-15 11:08:25','<p>webpack.configへ追加設定</p>','npm run watch でLint系実行  - Laravelでの開発の前準備8','','inherit','closed','closed','','475-revision-v1','','','2020-02-15 20:08:25','2020-02-15 11:08:25','webpack.configへ追加設定',475,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/475-revision-v1/',0,'revision','',0),(572,1,'2020-02-15 20:20:42','2020-02-15 11:20:42','<h2>webpack (laravel-mix) への設定追加</h2>\n<p>webpack.mix.js</p>\n<pre><code class=\"language-bash\">const styleLintPlugin = require(&#039;stylelint-webpack-plugin&#039;);\n\nif (!mix.inProduction()) {\n  mix.webpackConfig({\n    plugins: [\n      // eslint-disable-next-line new-cap\n      new styleLintPlugin({\n        files: [\n          &#039;./resources/sass/app.scss&#039;,\n        ],\n        // eslint-disable-next-line no-undef\n        configFile: path.join(__dirname, &#039;.stylelintrc&#039;),\n        syntax: &#039;scss&#039;,\n        options: {\n          fix: false\n        }\n      }),\n    ],\n    module: {\n      rules: [\n        {\n          enforce: &#039;pre&#039;,\n          exclude: /node_modules/,\n          loader: &#039;eslint-loader&#039;,\n          test: /\\.(js|vue)?$/,\n          options: {\n            fix: false\n          }\n        }\n      ]\n    }\n  })\n}</code></pre>\n<p>対象のファイルcss</p>\n<pre><code class=\"language-bash\">\n        files: [\n          &#039;./resources/sass/app.scss&#039;,\n        ],</code></pre>\n<p>対象のjsファイル(.js, .vue を指定)</p>\n<pre><code class=\"language-bash\">\n          test: /\\.(js|vue)?$/,</code></pre>\n<p>警告を出すだけで自動整形はしない\n\'true\'にすれば自動整形</p>\n<pre><code class=\"language-bash\">\n          options: {\n            fix: false\n          }</code></pre>','npm run watch(build時) でLint系実行  - Laravelでの開発の前準備8','npm run xxx の Build時に Eslint, Stylelintも実行しスパルタンな設定をしてみる。','inherit','closed','closed','','475-revision-v1','','','2020-02-15 20:20:42','2020-02-15 11:20:42','\r\n## webpack (laravel-mix) への設定追加\r\nwebpack.mix.js\r\n```bash\r\nconst styleLintPlugin = require(&#039;stylelint-webpack-plugin&#039;);\r\n\r\nif (!mix.inProduction()) {\r\n  mix.webpackConfig({\r\n    plugins: [\r\n      // eslint-disable-next-line new-cap\r\n      new styleLintPlugin({\r\n        files: [\r\n          &#039;./resources/sass/app.scss&#039;,\r\n        ],\r\n        // eslint-disable-next-line no-undef\r\n        configFile: path.join(__dirname, &#039;.stylelintrc&#039;),\r\n        syntax: &#039;scss&#039;,\r\n        options: {\r\n          fix: false\r\n        }\r\n      }),\r\n    ],\r\n    module: {\r\n      rules: [\r\n        {\r\n          enforce: &#039;pre&#039;,\r\n          exclude: /node_modules/,\r\n          loader: &#039;eslint-loader&#039;,\r\n          test: /\\.(js|vue)?$/,\r\n          options: {\r\n            fix: false\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  })\r\n}\r\n```\r\n\r\n対象のファイルcss\r\n```bash\r\n\r\n        files: [\r\n          &#039;./resources/sass/app.scss&#039;,\r\n        ],\r\n```\r\n対象のjsファイル(.js, .vue を指定)\r\n```bash\r\n\r\n          test: /\\.(js|vue)?$/,\r\n```\r\n警告を出すだけで自動整形はしない\r\n\'true\'にすれば自動整形\r\n```bash\r\n\r\n          options: {\r\n            fix: false\r\n          }\r\n```\r\n\r\n',475,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/475-revision-v1/',0,'revision','',0),(573,1,'2020-02-15 20:24:05','2020-02-15 11:24:05','<h2>webpack (laravel-mix) への設定追加</h2>\n<p>webpack.mix.js</p>\n<pre><code class=\"language-bash\">const styleLintPlugin = require(&#039;stylelint-webpack-plugin&#039;);\n\nif (!mix.inProduction()) {\n  mix.webpackConfig({\n    plugins: [\n      // eslint-disable-next-line new-cap\n      new styleLintPlugin({\n        files: [\n          &#039;./resources/sass/app.scss&#039;,\n        ],\n        // eslint-disable-next-line no-undef\n        configFile: path.join(__dirname, &#039;.stylelintrc&#039;),\n        syntax: &#039;scss&#039;,\n        options: {\n          fix: false\n        }\n      }),\n    ],\n    module: {\n      rules: [\n        {\n          enforce: &#039;pre&#039;,\n          exclude: /node_modules/,\n          loader: &#039;eslint-loader&#039;,\n          test: /\\.(js|vue)?$/,\n          options: {\n            fix: false\n          }\n        }\n      ]\n    }\n  })\n}</code></pre>\n<p>対象のファイルcss</p>\n<pre><code class=\"language-bash\">\n        files: [\n          &#039;./resources/sass/app.scss&#039;,\n        ],</code></pre>\n<p>対象のjsファイル(.js, .vue を指定)</p>\n<pre><code class=\"language-bash\">\n          test: /\\.(js|vue)?$/,</code></pre>\n<p>警告を出すだけで自動整形はしない\n\'true\'にすれば自動整形</p>\n<pre><code class=\"language-bash\">\n          options: {\n            fix: false\n          }</code></pre>','npm run watch(build時) でLint実行  - Laravelでの開発の前準備8','npm run xxx の Build時に Eslint, Stylelintも実行しスパルタンな設定をしてみる。','inherit','closed','closed','','475-revision-v1','','','2020-02-15 20:24:05','2020-02-15 11:24:05','## webpack (laravel-mix) への設定追加\r\nwebpack.mix.js\r\n```bash\r\nconst styleLintPlugin = require(&#039;stylelint-webpack-plugin&#039;);\r\n\r\nif (!mix.inProduction()) {\r\n  mix.webpackConfig({\r\n    plugins: [\r\n      // eslint-disable-next-line new-cap\r\n      new styleLintPlugin({\r\n        files: [\r\n          &#039;./resources/sass/app.scss&#039;,\r\n        ],\r\n        // eslint-disable-next-line no-undef\r\n        configFile: path.join(__dirname, &#039;.stylelintrc&#039;),\r\n        syntax: &#039;scss&#039;,\r\n        options: {\r\n          fix: false\r\n        }\r\n      }),\r\n    ],\r\n    module: {\r\n      rules: [\r\n        {\r\n          enforce: &#039;pre&#039;,\r\n          exclude: /node_modules/,\r\n          loader: &#039;eslint-loader&#039;,\r\n          test: /\\.(js|vue)?$/,\r\n          options: {\r\n            fix: false\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  })\r\n}\r\n```\r\n\r\n対象のファイルcss\r\n```bash\r\n\r\n        files: [\r\n          &#039;./resources/sass/app.scss&#039;,\r\n        ],\r\n```\r\n対象のjsファイル(.js, .vue を指定)\r\n```bash\r\n\r\n          test: /\\.(js|vue)?$/,\r\n```\r\n警告を出すだけで自動整形はしない\r\n\'true\'にすれば自動整形\r\n```bash\r\n\r\n          options: {\r\n            fix: false\r\n          }\r\n```\r\n\r\n',475,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/475-revision-v1/',0,'revision','',0),(574,1,'2020-02-15 20:29:36','2020-02-15 11:29:36','','npm-build-lint','','inherit','closed','closed','','npm-build-lint-2','','','2020-02-15 20:29:36','2020-02-15 11:29:36','',475,'https://blog.webdimension.jp/wp-content/uploads/2020/02/npm-build-lint.png',0,'attachment','image/png',0),(575,1,'2020-02-15 20:32:00','2020-02-15 11:32:00','<h2>webpack (laravel-mix) への設定追加</h2>\n<p>webpack.mix.js</p>\n<pre><code class=\"language-bash\">const styleLintPlugin = require(&#039;stylelint-webpack-plugin&#039;);\n\nif (!mix.inProduction()) {\n  mix.webpackConfig({\n    plugins: [\n      // eslint-disable-next-line new-cap\n      new styleLintPlugin({\n        files: [\n          &#039;./resources/sass/app.scss&#039;,\n        ],\n        // eslint-disable-next-line no-undef\n        configFile: path.join(__dirname, &#039;.stylelintrc&#039;),\n        syntax: &#039;scss&#039;,\n        options: {\n          fix: false\n        }\n      }),\n    ],\n    module: {\n      rules: [\n        {\n          enforce: &#039;pre&#039;,\n          exclude: /node_modules/,\n          loader: &#039;eslint-loader&#039;,\n          test: /\\.(js|vue)?$/,\n          options: {\n            fix: false\n          }\n        }\n      ]\n    }\n  })\n}</code></pre>\n<p>対象のファイルcss</p>\n<pre><code class=\"language-bash\">\n        files: [\n          &#039;./resources/sass/app.scss&#039;,\n        ],</code></pre>\n<p>対象のjsファイル(.js, .vue を指定)</p>\n<pre><code class=\"language-bash\">\n          test: /\\.(js|vue)?$/,</code></pre>\n<p>警告を出すだけで自動整形はしない\n\'true\'にすれば自動整形</p>\n<pre><code class=\"language-bash\">\n          options: {\n            fix: false\n          }</code></pre>\n<p>Build時の自動整形はなんか怖いので自動整形しない設定にしてます。</p>','npm run watch(build時) でLint実行  - Laravelでの開発の前準備8','npm run xxx の Build時に Eslint, Stylelintも実行しスパルタンな設定をしてみる。','inherit','closed','closed','','475-revision-v1','','','2020-02-15 20:32:00','2020-02-15 11:32:00','## webpack (laravel-mix) への設定追加\r\nwebpack.mix.js\r\n```bash\r\nconst styleLintPlugin = require(&#039;stylelint-webpack-plugin&#039;);\r\n\r\nif (!mix.inProduction()) {\r\n  mix.webpackConfig({\r\n    plugins: [\r\n      // eslint-disable-next-line new-cap\r\n      new styleLintPlugin({\r\n        files: [\r\n          &#039;./resources/sass/app.scss&#039;,\r\n        ],\r\n        // eslint-disable-next-line no-undef\r\n        configFile: path.join(__dirname, &#039;.stylelintrc&#039;),\r\n        syntax: &#039;scss&#039;,\r\n        options: {\r\n          fix: false\r\n        }\r\n      }),\r\n    ],\r\n    module: {\r\n      rules: [\r\n        {\r\n          enforce: &#039;pre&#039;,\r\n          exclude: /node_modules/,\r\n          loader: &#039;eslint-loader&#039;,\r\n          test: /\\.(js|vue)?$/,\r\n          options: {\r\n            fix: false\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  })\r\n}\r\n```\r\n\r\n対象のファイルcss\r\n```bash\r\n\r\n        files: [\r\n          &#039;./resources/sass/app.scss&#039;,\r\n        ],\r\n```\r\n対象のjsファイル(.js, .vue を指定)\r\n```bash\r\n\r\n          test: /\\.(js|vue)?$/,\r\n```\r\n警告を出すだけで自動整形はしない\r\n\'true\'にすれば自動整形\r\n```bash\r\n\r\n          options: {\r\n            fix: false\r\n          }\r\n```\r\nBuild時の自動整形はなんか怖いので自動整形しない設定にしてます。\r\n',475,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/475-revision-v1/',0,'revision','',0),(576,1,'2020-02-15 20:33:09','2020-02-15 11:33:09','<h2>webpack (laravel-mix) への設定追加</h2>\n<p>webpack.mix.js</p>\n<pre><code class=\"language-bash\">const styleLintPlugin = require(&#039;stylelint-webpack-plugin&#039;);\n\nif (!mix.inProduction()) {\n  mix.webpackConfig({\n    plugins: [\n      // eslint-disable-next-line new-cap\n      new styleLintPlugin({\n        files: [\n          &#039;./resources/sass/app.scss&#039;,\n        ],\n        // eslint-disable-next-line no-undef\n        configFile: path.join(__dirname, &#039;.stylelintrc&#039;),\n        syntax: &#039;scss&#039;,\n        options: {\n          fix: false\n        }\n      }),\n    ],\n    module: {\n      rules: [\n        {\n          enforce: &#039;pre&#039;,\n          exclude: /node_modules/,\n          loader: &#039;eslint-loader&#039;,\n          test: /\\.(js|vue)?$/,\n          options: {\n            fix: false\n          }\n        }\n      ]\n    }\n  })\n}</code></pre>\n<p>対象のファイルcss</p>\n<pre><code class=\"language-bash\">\n        files: [\n          &#039;./resources/sass/app.scss&#039;,\n        ],</code></pre>\n<p>対象のjsファイル(.js, .vue を指定)</p>\n<pre><code class=\"language-bash\">\n          test: /\\.(js|vue)?$/,</code></pre>\n<p>警告を出すだけで自動整形はしない\n\'true\'にすれば自動整形</p>\n<pre><code class=\"language-bash\">\n          options: {\n            fix: false\n          }</code></pre>\n<p>Build時の自動整形はなんか怖いので自動整形しない設定にしてます。</p>\n<p>漏れなくコーディングチェックできます。</p>','npm run watch(build時) でLint実行  - Laravelでの開発の前準備8','npm run xxx の Build時に Eslint, Stylelintも実行しスパルタンな設定をしてみる。','inherit','closed','closed','','475-revision-v1','','','2020-02-15 20:33:09','2020-02-15 11:33:09','## webpack (laravel-mix) への設定追加\r\nwebpack.mix.js\r\n```bash\r\nconst styleLintPlugin = require(&#039;stylelint-webpack-plugin&#039;);\r\n\r\nif (!mix.inProduction()) {\r\n  mix.webpackConfig({\r\n    plugins: [\r\n      // eslint-disable-next-line new-cap\r\n      new styleLintPlugin({\r\n        files: [\r\n          &#039;./resources/sass/app.scss&#039;,\r\n        ],\r\n        // eslint-disable-next-line no-undef\r\n        configFile: path.join(__dirname, &#039;.stylelintrc&#039;),\r\n        syntax: &#039;scss&#039;,\r\n        options: {\r\n          fix: false\r\n        }\r\n      }),\r\n    ],\r\n    module: {\r\n      rules: [\r\n        {\r\n          enforce: &#039;pre&#039;,\r\n          exclude: /node_modules/,\r\n          loader: &#039;eslint-loader&#039;,\r\n          test: /\\.(js|vue)?$/,\r\n          options: {\r\n            fix: false\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  })\r\n}\r\n```\r\n\r\n対象のファイルcss\r\n```bash\r\n\r\n        files: [\r\n          &#039;./resources/sass/app.scss&#039;,\r\n        ],\r\n```\r\n対象のjsファイル(.js, .vue を指定)\r\n```bash\r\n\r\n          test: /\\.(js|vue)?$/,\r\n```\r\n警告を出すだけで自動整形はしない\r\n\'true\'にすれば自動整形\r\n```bash\r\n\r\n          options: {\r\n            fix: false\r\n          }\r\n```\r\nBuild時の自動整形はなんか怖いので自動整形しない設定にしてます。\r\n\r\n漏れなくコーディングチェックできます。\r\n',475,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/475-revision-v1/',0,'revision','',0),(579,1,'2020-12-09 19:38:55','2020-12-09 10:38:55','<h1>オレオレ開発環境</h1>\n<p>GitHub : <a href=\"https://github.com/WEBDIMENSION/ubuntu_on_mac\">Ubuntu On Mac</a></p>\n<p>Vagrant + VMware Fusion + Ubuntu20.04</p>\n<ul>\n<li>Ansible provisioning で構築</li>\n<li><a href=\"https://github.com/WEBDIMENSION/ubuntu_on_mac/tree/master/ansible/roles\">ロールディレクトリ</a></li>\n<li><a href=\"https://github.com/WEBDIMENSION/ubuntu_on_mac/labels/enhancement\">今後の機能追加</a></li>\n</ul>','Ubuntu On Mac','Vagrant + VMware Fusion + Ubuntu20.04','publish','closed','open','','gh_ubuntu_on_mac','','','2020-12-09 19:38:55','2020-12-09 10:38:55','# オレオレ開発環境 \r\nGitHub : [Ubuntu On Mac](https://github.com/WEBDIMENSION/ubuntu_on_mac)\r\n\r\nVagrant + VMware Fusion + Ubuntu20.04\r\n\r\n- Ansible provisioning で構築\r\n- [ロールディレクトリ](https://github.com/WEBDIMENSION/ubuntu_on_mac/tree/master/ansible/roles)\r\n- [今後の機能追加](https://github.com/WEBDIMENSION/ubuntu_on_mac/labels/enhancement)\r\n\r\n\r\n',0,'https://blog.webdimension.jp/?p=579',0,'post','',0),(580,1,'2020-12-09 18:55:38','2020-12-09 09:55:38','<h1>オレオレ開発環境</h1>\n<p>GitHub : <a href=\"https://github.com/WEBDIMENSION/ubuntu_on_mac\">Ubuntu On Mac</a></p>\n<p>Vagrant + VMware Fusion + Ubuntu20.04</p>\n<ul>\n<li>Ansible provisioning で構築</li>\n<li><a href=\"https://github.com/WEBDIMENSION/ubuntu_on_mac/tree/master/ansible/roles\">ロールディレクトリ</a></li>\n<li><a href=\"https://github.com/WEBDIMENSION/ubuntu_on_mac/labels/enhancement\">今後の機能追加</a></li>\n</ul>','','Ubuntu20.04 On Mac','inherit','closed','closed','','579-revision-v1','','','2020-12-09 18:55:38','2020-12-09 09:55:38','# オレオレ開発環境 \r\nGitHub : [Ubuntu On Mac](https://github.com/WEBDIMENSION/ubuntu_on_mac)\r\n\r\nVagrant + VMware Fusion + Ubuntu20.04\r\n\r\n- Ansible provisioning で構築\r\n- [ロールディレクトリ](https://github.com/WEBDIMENSION/ubuntu_on_mac/tree/master/ansible/roles)\r\n- [今後の機能追加](https://github.com/WEBDIMENSION/ubuntu_on_mac/labels/enhancement)\r\n\r\n\r\n',579,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/579-revision-v1/',0,'revision','',0),(581,1,'2020-12-09 19:35:01','2020-12-09 10:35:01','','gh-ubuntu-on-mac','','inherit','closed','closed','','gh-ubuntu-on-mac','','','2020-12-09 19:35:01','2020-12-09 10:35:01','',579,'https://blog.webdimension.jp/wp-content/uploads/2020/12/gh-ubuntu-on-mac.jpg',0,'attachment','image/jpeg',0),(582,1,'2020-12-09 19:36:09','2020-12-09 10:36:09','<h1>オレオレ開発環境</h1>\n<p>GitHub : <a href=\"https://github.com/WEBDIMENSION/ubuntu_on_mac\">Ubuntu On Mac</a></p>\n<p>Vagrant + VMware Fusion + Ubuntu20.04</p>\n<ul>\n<li>Ansible provisioning で構築</li>\n<li><a href=\"https://github.com/WEBDIMENSION/ubuntu_on_mac/tree/master/ansible/roles\">ロールディレクトリ</a></li>\n<li><a href=\"https://github.com/WEBDIMENSION/ubuntu_on_mac/labels/enhancement\">今後の機能追加</a></li>\n</ul>','Ubuntu On Mac','Ubuntu20.04 On Mac','inherit','closed','closed','','579-revision-v1','','','2020-12-09 19:36:09','2020-12-09 10:36:09','# オレオレ開発環境 \r\nGitHub : [Ubuntu On Mac](https://github.com/WEBDIMENSION/ubuntu_on_mac)\r\n\r\nVagrant + VMware Fusion + Ubuntu20.04\r\n\r\n- Ansible provisioning で構築\r\n- [ロールディレクトリ](https://github.com/WEBDIMENSION/ubuntu_on_mac/tree/master/ansible/roles)\r\n- [今後の機能追加](https://github.com/WEBDIMENSION/ubuntu_on_mac/labels/enhancement)\r\n\r\n\r\n',579,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/579-revision-v1/',0,'revision','',0),(583,1,'2020-12-09 19:36:41','2020-12-09 10:36:41','<h1>オレオレ開発環境</h1>\n<p>GitHub : <a href=\"https://github.com/WEBDIMENSION/ubuntu_on_mac\">Ubuntu On Mac</a></p>\n<p>Vagrant + VMware Fusion + Ubuntu20.04</p>\n<ul>\n<li>Ansible provisioning で構築</li>\n<li><a href=\"https://github.com/WEBDIMENSION/ubuntu_on_mac/tree/master/ansible/roles\">ロールディレクトリ</a></li>\n<li><a href=\"https://github.com/WEBDIMENSION/ubuntu_on_mac/labels/enhancement\">今後の機能追加</a></li>\n</ul>','Ubuntu On Mac','Vagrant + VMware Fusion + Ubuntu20.04','inherit','closed','closed','','579-revision-v1','','','2020-12-09 19:36:41','2020-12-09 10:36:41','# オレオレ開発環境 \r\nGitHub : [Ubuntu On Mac](https://github.com/WEBDIMENSION/ubuntu_on_mac)\r\n\r\nVagrant + VMware Fusion + Ubuntu20.04\r\n\r\n- Ansible provisioning で構築\r\n- [ロールディレクトリ](https://github.com/WEBDIMENSION/ubuntu_on_mac/tree/master/ansible/roles)\r\n- [今後の機能追加](https://github.com/WEBDIMENSION/ubuntu_on_mac/labels/enhancement)\r\n\r\n\r\n',579,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/579-revision-v1/',0,'revision','',0),(588,1,'2020-12-14 12:21:24','2020-12-14 03:21:24','<p><a href=\"https://github.com/WEBDIMENSION/ansible-softether-for-conoha\">GitHub</a></p>\n<h2>inventory_file でのhostの指定を動的にしたい</h2>\n<p>ローカルのDocker上でのテスト, Act(GitHub actionsのローカル版)を利用してのテスト、本番デプロイにおいて inventory_file でのhostの指定を動的にしたい。</p>\n<pre><code class=\"language-python\">## vars-file for docker\nmount_dir: &#039;/softether&#039;\nproject_name: &#039;Ansible-SoftEther-For-Conoha&#039;\ndocker_server:\n  hosts:\n    - host_ip: &quot;127.0.0.1&quot;\n      ssh_port: 2223\n      image_tag: &quot;softether_server&quot;\n      container_tag: &quot;softether001&quot;\n      container_ip: &quot;&quot;\n      dockerfile: &quot;centos7&quot;\n  inventory_name: &quot;docker_server&quot;\ndocker_client:\n  hosts:\n    - host_ip: &quot;127.0.0.1&quot;\n      ssh_port: 2222\n      image_tag: &quot;softether_client&quot;\n      container_tag: &quot;softether_client&quot;\n      container_ip: &quot;&quot;\n      dockerfile: &quot;ubuntu20.04&quot;\n  inventory_name: &quot;docker_client&quot;</code></pre>\n<pre><code class=\"language-python\"># Create inventory\n        hosts_text = &quot;&quot;\n        for i in range(len(docker_server[&quot;hosts&quot;])):\n            cname = str(docker_server[&quot;hosts&quot;][i][&quot;container_tag&quot;])\n            ip = str(docker_server[&quot;hosts&quot;][i][&quot;container_ip&quot;])\n            port = str(docker_server[&quot;hosts&quot;][i][&quot;ssh_port&quot;])\n            hosts_text += str(cname + &quot; ansible_host=&quot; + ip) + &quot;\\n&quot;\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\n        with open(\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_root&quot;, &quot;w&quot;\n        ) as f:\n            f.write(SOFTETHER_INVENTORY_FILE)\n        SOFTETHER_INVENTORY_FILE = (\n            textwrap.dedent(\n                &quot;&quot;&quot;\\\n        [softether]\n        {hosts}\n        [softether:vars]\n        ansible_user={ansible_user}\n        ansible_port={ansible_ssh_port}\n        ansible_ssh_private_key_file={mount_dir}/roles/ansible_user/{key}\\\n        &quot;&quot;&quot;\n            )\n            .format(\n                hosts=hosts_text,\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\n            )\n            .strip()\n        )\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\n        with open(\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_user&quot;, &quot;w&quot;\n        ) as f:\n            f.write(SOFTETHER_INVENTORY_FILE)</code></pre>\n<h2>nofity 設定反映するためServiceをrestartさせる</h2>\n<p>Case in Firewalled</p>\n<pre><code class=\"language-python\"># roles/firewalled/handlers/main.yml\n- name: Restart firewalld\n  become: yes\n  systemd:\n    state: restarted\n    name: firewalld\n    enabled: yes</code></pre>\n<pre><code class=\"language-python\">- name: Open port by firewalld\n  become: yes\n  firewalld:\n    port: &quot;{{ item.port }}&quot;\n    permanent: &quot;{{ item.permanent }}&quot;\n    state: &quot;{{ item.state }}&quot;\n  with_items: &quot;{{ firewalld_ports }}&quot;\n  when: firewalld_ports is defined\n  notify: Restart firewalld # &lt;-  最終的にリスタートさせる</code></pre>\n<h2>Use dict for vars  and loop</h2>\n<pre><code class=\"language-python\">#  dict で書くことにより\nansible_users:\n  master:\n    name: &#039;ansible&#039;\n    groups: &#039;wheel&#039;\n    append: &#039;yes&#039;\n    state: &#039;present&#039;\n    remove: &#039;no&#039;\n    password: &quot;{{ secret.ansible_user_password }}&quot;\n    key: &quot;files/ansible_rsa.pub&quot;\n    secret_key: &quot;files/ansible_rsa&quot;\n    login_shell: &#039;/bin/bash&#039;\n    create_home: &#039;yes&#039;\n    sudo: &#039;present&#039;\n    comment: &#039;ansible user&#039;\n    expires: &#039;-1&#039;</code></pre>\n<pre><code class=\"language-python\">#  指定しやすくなる\n            .format(\n                hosts=hosts_text,\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\n            )\n            .strip()</code></pre>\n<pre><code class=\"language-python\"># playbook では with_dict を使い item.value.xxxになる\n- name: user-control\n  become: true\n  user:\n    name: &quot;{{ item.value.name }}&quot;\n    groups: &quot;{{ item.value.groups }}&quot;\n    state:  &quot;{{ item.value.state }}&quot;\n    remove:  &quot;{{ item.value.remove }}&quot;\n    create_home: &quot;{{ item.value.create_home }}&quot;\n    password: &quot;{{ item.value.password | password_hash(&#039;sha512&#039;) }}&quot;\n    shell: &quot;{{ item.value.login_shell }}&quot;\n    comment: &quot;{{ item.value.comment }}&quot;\n    expires: &quot;{{ item.value.expires }}&quot;\n  with_dict: &quot;{{ ansible_users }}&quot;</code></pre>\n<h2>ansible-lint shell command</h2>\n<pre><code class=\"language-bash\"># Default command\nansible-lint site.yml</code></pre>\n<pre><code class=\"language-python\"># docker execから ansible-lint\n        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &quot; bash -c &#039;cd &quot;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; ansible-lint site.yml&#039;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<h2>flake8</h2>\n<pre><code class=\"language-bash\"># Default command\nflake8 [DIR_NAME FILE_NAME]</code></pre>\n<pre><code class=\"language-python\"># docker execから flake8\n        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &quot; bash -c &#039;cd &quot;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; flake8 tests tests.py deploy deploy.py&#039;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<h2>block</h2>\n<pre><code class=\"language-bash\"># default command\nblack [DIR_NAME FILE_NAME]</code></pre>\n<pre><code class=\"language-python\"># docker execから flake8\n        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &quot; bash -c &#039;cd &quot;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; block tests tests.py deploy deploy.py&#039;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<h2>testinfra for ansible</h2>\n<pre><code class=\"language-python\">        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &#039; bash -c &quot;cd &#039;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; py.test -v tests/testinfra.py&quot;\n            + &quot; --connection=ssh&quot;\n            + &quot; --hosts=&#039;ansible://softether&#039;&quot;\n            + &quot; --ansible-inventory=&#039;hosts/&quot;\n            + docker_server[&quot;inventory_name&quot;]\n            + &quot;_user&#039;\\&quot;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<pre><code class=\"language-python\"># Service check\ndef test_sshd_running_and_enabled(host):\n    &quot;&quot;&quot; Check service sshd  &quot;&quot;&quot;\n    service = host.service(&quot;sshd&quot;)\n    assert service.is_running\n    assert service.is_enabled\n\n# Port check\ndef test_open_port(host):\n    &quot;&quot;&quot; Check ports  &quot;&quot;&quot;\n    all_variables = host.ansible.get_variables()\n    localhost = host.addr(&quot;localhost&quot;)\n    # sshd\n    assert localhost.port(all_variables[&quot;sshd_port&quot;]).is_reachable\n    if all_variables[&quot;sshd_port&quot;] != 22:\n        assert not localhost.port(22).is_reachable\n    # vpnserver\n    assert localhost.port(443).is_reachable\n    assert localhost.port(5555).is_reachable\n    assert localhost.port(1194).is_reachable\n# user check\ndef test_ansible_user(host):\n    &quot;&quot;&quot; Check exists ansible user  &quot;&quot;&quot;\n    all_variables = host.ansible.get_variables()\n    for i in all_variables[&quot;ansible_users&quot;].values():\n        user = host.user(i[&quot;name&quot;])\n        assert user.exists\n        assert user.name == i[&quot;name&quot;]\n        assert user.shell == i[&quot;login_shell&quot;]\n        assert user.home == &quot;/home/&quot; + i[&quot;name&quot;]\n</code></pre>\n<h2>Docker for Ansible test</h2>\n<p>Enable ssh systemd</p>\n<h3>CentOS7</h3>\n<pre><code class=\"language-bash\">FROM centos:centos7\nVOLUME [ &quot;/sys/fs/cgroup&quot; ]\nRUN yum -y update; yum clean all\nRUN yum -y install openssh-server passwd; yum clean all\nRUN yum install -y which\nRUN yum install -y https://repo.ius.io/ius-release-el7.rpm\nRUN yum install -y sudo\nRUN yum install -y wget\nRUN yum install -y curl\nRUN yum install -y sshpass\nRUN echo &#039;root:password&#039; | chpasswd\nRUN mkdir /root/.ssh\nRUN touch /root/.ssh/config\nRUN echo $&#039;Host *\\n\\\n \\tStrictHostKeyChecking no\\n\\\n \\n\\\nServerAliveInterval 60 \\n\\\nServerAliveCountMax 10 \\n &#039;  &gt;&gt; /root/.ssh/config\n\nRUN chmod 700 /root/.ssh/\nRUN chmod 600 /root/.ssh/*\n\nRUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N &#039;&#039;\nENTRYPOINT [&quot;/sbin/init&quot;]</code></pre>\n<h3>Ubuntu20.04</h3>\n<pre><code class=\"language-bash\">FROM ubuntu:20.04\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y software-properties-common \\\n                       tzdata\n\nRUN apt-add-repository -y ppa:git-core/ppa &amp;&amp; \\\n    apt-get update &amp;&amp; \\\n    apt-get install -y git \\\n                       curl \\\n                       openssh-server \\\n                       vim \\\n                       sudo \\\n                       sshpass \\\n                       python3-pip\nRUN mkdir /root/.ssh\nRUN echo &#039;\\n\\\nHost *\\n\\\n    StrictHostKeyChecking no\\n\\\n&#039; &gt;&gt; /root/.ssh/config\n\nRUN chmod 700 /root/.ssh\nRUN chmod 600 /root/.ssh/*\n\nRUN echo &#039;root:root&#039; | chpasswd\nEXPOSE 22\nCMD [ &quot;/sbin/init&quot; ]</code></pre>','VPNサーバー(SoftEhter)をAnsibleでConoha-VPNサーバーへ構築','Conoha API を使いVPN構築を簡略化　の備忘録','publish','closed','open','','ansible_vpn','','','2020-12-14 12:23:08','2020-12-14 03:23:08','[GitHub](https://github.com/WEBDIMENSION/ansible-softether-for-conoha)\r\n\r\n## inventory_file でのhostの指定を動的にしたい\r\nローカルのDocker上でのテスト, Act(GitHub actionsのローカル版)を利用してのテスト、本番デプロイにおいて inventory_file でのhostの指定を動的にしたい。\r\n\r\n```python \r\n## vars-file for docker\r\nmount_dir: &#039;/softether&#039;\r\nproject_name: &#039;Ansible-SoftEther-For-Conoha&#039;\r\ndocker_server:\r\n  hosts:\r\n    - host_ip: &quot;127.0.0.1&quot;\r\n      ssh_port: 2223\r\n      image_tag: &quot;softether_server&quot;\r\n      container_tag: &quot;softether001&quot;\r\n      container_ip: &quot;&quot;\r\n      dockerfile: &quot;centos7&quot;\r\n  inventory_name: &quot;docker_server&quot;\r\ndocker_client:\r\n  hosts:\r\n    - host_ip: &quot;127.0.0.1&quot;\r\n      ssh_port: 2222\r\n      image_tag: &quot;softether_client&quot;\r\n      container_tag: &quot;softether_client&quot;\r\n      container_ip: &quot;&quot;\r\n      dockerfile: &quot;ubuntu20.04&quot;\r\n  inventory_name: &quot;docker_client&quot;\r\n```\r\n\r\n```python\r\n# Create inventory\r\n        hosts_text = &quot;&quot;\r\n        for i in range(len(docker_server[&quot;hosts&quot;])):\r\n            cname = str(docker_server[&quot;hosts&quot;][i][&quot;container_tag&quot;])\r\n            ip = str(docker_server[&quot;hosts&quot;][i][&quot;container_ip&quot;])\r\n            port = str(docker_server[&quot;hosts&quot;][i][&quot;ssh_port&quot;])\r\n            hosts_text += str(cname + &quot; ansible_host=&quot; + ip) + &quot;\\n&quot;\r\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\r\n        with open(\r\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_root&quot;, &quot;w&quot;\r\n        ) as f:\r\n            f.write(SOFTETHER_INVENTORY_FILE)\r\n        SOFTETHER_INVENTORY_FILE = (\r\n            textwrap.dedent(\r\n                &quot;&quot;&quot;\\\r\n        [softether]\r\n        {hosts}\r\n        [softether:vars]\r\n        ansible_user={ansible_user}\r\n        ansible_port={ansible_ssh_port}\r\n        ansible_ssh_private_key_file={mount_dir}/roles/ansible_user/{key}\\\r\n        &quot;&quot;&quot;\r\n            )\r\n            .format(\r\n                hosts=hosts_text,\r\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\r\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\r\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\r\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\r\n            )\r\n            .strip()\r\n        )\r\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\r\n        with open(\r\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_user&quot;, &quot;w&quot;\r\n        ) as f:\r\n            f.write(SOFTETHER_INVENTORY_FILE)\r\n```\r\n## nofity 設定反映するためServiceをrestartさせる\r\n\r\nCase in Firewalled\r\n\r\n```python\r\n# roles/firewalled/handlers/main.yml\r\n- name: Restart firewalld\r\n  become: yes\r\n  systemd:\r\n    state: restarted\r\n    name: firewalld\r\n    enabled: yes\r\n```\r\n\r\n```python \r\n- name: Open port by firewalld\r\n  become: yes\r\n  firewalld:\r\n    port: &quot;{{ item.port }}&quot;\r\n    permanent: &quot;{{ item.permanent }}&quot;\r\n    state: &quot;{{ item.state }}&quot;\r\n  with_items: &quot;{{ firewalld_ports }}&quot;\r\n  when: firewalld_ports is defined\r\n  notify: Restart firewalld # &lt;-  最終的にリスタートさせる\r\n```\r\n\r\n## Use dict for vars  and loop\r\n```python\r\n#  dict で書くことにより\r\nansible_users:\r\n  master:\r\n    name: &#039;ansible&#039;\r\n    groups: &#039;wheel&#039;\r\n    append: &#039;yes&#039;\r\n    state: &#039;present&#039;\r\n    remove: &#039;no&#039;\r\n    password: &quot;{{ secret.ansible_user_password }}&quot;\r\n    key: &quot;files/ansible_rsa.pub&quot;\r\n    secret_key: &quot;files/ansible_rsa&quot;\r\n    login_shell: &#039;/bin/bash&#039;\r\n    create_home: &#039;yes&#039;\r\n    sudo: &#039;present&#039;\r\n    comment: &#039;ansible user&#039;\r\n    expires: &#039;-1&#039;\r\n```\r\n```python\r\n#  指定しやすくなる\r\n            .format(\r\n                hosts=hosts_text,\r\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\r\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\r\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\r\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\r\n            )\r\n            .strip()\r\n```\r\n```python\r\n# playbook では with_dict を使い item.value.xxxになる\r\n- name: user-control\r\n  become: true\r\n  user:\r\n    name: &quot;{{ item.value.name }}&quot;\r\n    groups: &quot;{{ item.value.groups }}&quot;\r\n    state:  &quot;{{ item.value.state }}&quot;\r\n    remove:  &quot;{{ item.value.remove }}&quot;\r\n    create_home: &quot;{{ item.value.create_home }}&quot;\r\n    password: &quot;{{ item.value.password | password_hash(&#039;sha512&#039;) }}&quot;\r\n    shell: &quot;{{ item.value.login_shell }}&quot;\r\n    comment: &quot;{{ item.value.comment }}&quot;\r\n    expires: &quot;{{ item.value.expires }}&quot;\r\n  with_dict: &quot;{{ ansible_users }}&quot;\r\n```\r\n\r\n\r\n## ansible-lint shell command\r\n```bash\r\n# Default command\r\nansible-lint site.yml\r\n```\r\n```python\r\n# docker execから ansible-lint\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &quot; bash -c &#039;cd &quot;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; ansible-lint site.yml&#039;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n## flake8\r\n``` bash\r\n# Default command\r\nflake8 [DIR_NAME FILE_NAME]\r\n```\r\n```python\r\n# docker execから flake8\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &quot; bash -c &#039;cd &quot;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; flake8 tests tests.py deploy deploy.py&#039;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n\r\n## block\r\n```bash\r\n# default command\r\nblack [DIR_NAME FILE_NAME]\r\n```\r\n```python\r\n# docker execから flake8\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &quot; bash -c &#039;cd &quot;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; block tests tests.py deploy deploy.py&#039;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n## testinfra for ansible\r\n```python\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &#039; bash -c &quot;cd &#039;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; py.test -v tests/testinfra.py&quot;\r\n            + &quot; --connection=ssh&quot;\r\n            + &quot; --hosts=&#039;ansible://softether&#039;&quot;\r\n            + &quot; --ansible-inventory=&#039;hosts/&quot;\r\n            + docker_server[&quot;inventory_name&quot;]\r\n            + &quot;_user&#039;\\&quot;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n```python\r\n# Service check\r\ndef test_sshd_running_and_enabled(host):\r\n    &quot;&quot;&quot; Check service sshd  &quot;&quot;&quot;\r\n    service = host.service(&quot;sshd&quot;)\r\n    assert service.is_running\r\n    assert service.is_enabled\r\n\r\n# Port check\r\ndef test_open_port(host):\r\n    &quot;&quot;&quot; Check ports  &quot;&quot;&quot;\r\n    all_variables = host.ansible.get_variables()\r\n    localhost = host.addr(&quot;localhost&quot;)\r\n    # sshd\r\n    assert localhost.port(all_variables[&quot;sshd_port&quot;]).is_reachable\r\n    if all_variables[&quot;sshd_port&quot;] != 22:\r\n        assert not localhost.port(22).is_reachable\r\n    # vpnserver\r\n    assert localhost.port(443).is_reachable\r\n    assert localhost.port(5555).is_reachable\r\n    assert localhost.port(1194).is_reachable\r\n# user check\r\ndef test_ansible_user(host):\r\n    &quot;&quot;&quot; Check exists ansible user  &quot;&quot;&quot;\r\n    all_variables = host.ansible.get_variables()\r\n    for i in all_variables[&quot;ansible_users&quot;].values():\r\n        user = host.user(i[&quot;name&quot;])\r\n        assert user.exists\r\n        assert user.name == i[&quot;name&quot;]\r\n        assert user.shell == i[&quot;login_shell&quot;]\r\n        assert user.home == &quot;/home/&quot; + i[&quot;name&quot;]\r\n\r\n```\r\n## Docker for Ansible test\r\nEnable ssh systemd\r\n### CentOS7\r\n```bash\r\nFROM centos:centos7\r\nVOLUME [ &quot;/sys/fs/cgroup&quot; ]\r\nRUN yum -y update; yum clean all\r\nRUN yum -y install openssh-server passwd; yum clean all\r\nRUN yum install -y which\r\nRUN yum install -y https://repo.ius.io/ius-release-el7.rpm\r\nRUN yum install -y sudo\r\nRUN yum install -y wget\r\nRUN yum install -y curl\r\nRUN yum install -y sshpass\r\nRUN echo &#039;root:password&#039; | chpasswd\r\nRUN mkdir /root/.ssh\r\nRUN touch /root/.ssh/config\r\nRUN echo $&#039;Host *\\n\\\r\n \\tStrictHostKeyChecking no\\n\\\r\n \\n\\\r\nServerAliveInterval 60 \\n\\\r\nServerAliveCountMax 10 \\n &#039;  &gt;&gt; /root/.ssh/config\r\n\r\nRUN chmod 700 /root/.ssh/\r\nRUN chmod 600 /root/.ssh/*\r\n\r\nRUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N &#039;&#039;\r\nENTRYPOINT [&quot;/sbin/init&quot;]\r\n```\r\n\r\n### Ubuntu20.04 \r\n\r\n```bash\r\nFROM ubuntu:20.04\r\nRUN apt-get update &amp;&amp; \\\r\n    apt-get install -y software-properties-common \\\r\n                       tzdata\r\n\r\nRUN apt-add-repository -y ppa:git-core/ppa &amp;&amp; \\\r\n    apt-get update &amp;&amp; \\\r\n    apt-get install -y git \\\r\n                       curl \\\r\n                       openssh-server \\\r\n                       vim \\\r\n                       sudo \\\r\n                       sshpass \\\r\n                       python3-pip\r\nRUN mkdir /root/.ssh\r\nRUN echo &#039;\\n\\\r\nHost *\\n\\\r\n    StrictHostKeyChecking no\\n\\\r\n&#039; &gt;&gt; /root/.ssh/config\r\n\r\nRUN chmod 700 /root/.ssh\r\nRUN chmod 600 /root/.ssh/*\r\n\r\nRUN echo &#039;root:root&#039; | chpasswd\r\nEXPOSE 22\r\nCMD [ &quot;/sbin/init&quot; ]\r\n```\r\n\r\n',0,'https://blog.webdimension.jp/?p=588',0,'post','',0),(589,1,'2020-12-14 11:51:32','2020-12-14 02:51:32','<h1>VPNサーバー(SoftEhter)をAnsibleでConoha-VPNサーバーへ構築</h1>\n<p><a href=\"https://github.com/WEBDIMENSION/ansible-softether-for-conoha\">GitHub</a></p>\n<h1>inventory_file でのhostの指定を動的にしたい</h1>\n<p>ローカルのDocker上でのテスト, Act(GitHub actionsのローカル版)を利用してのテスト、本番デプロイにおいて inventory_file でのhostの指定を動的にしたい。</p>\n<pre><code class=\"language-python\">## vars-file for docker\nmount_dir: &#039;/softether&#039;\nproject_name: &#039;Ansible-SoftEther-For-Conoha&#039;\ndocker_server:\n  hosts:\n    - host_ip: &quot;127.0.0.1&quot;\n      ssh_port: 2223\n      image_tag: &quot;softether_server&quot;\n      container_tag: &quot;softether001&quot;\n      container_ip: &quot;&quot;\n      dockerfile: &quot;centos7&quot;\n  inventory_name: &quot;docker_server&quot;\ndocker_client:\n  hosts:\n    - host_ip: &quot;127.0.0.1&quot;\n      ssh_port: 2222\n      image_tag: &quot;softether_client&quot;\n      container_tag: &quot;softether_client&quot;\n      container_ip: &quot;&quot;\n      dockerfile: &quot;ubuntu20.04&quot;\n  inventory_name: &quot;docker_client&quot;</code></pre>\n<pre><code class=\"language-python\"># Create inventory\n        hosts_text = &quot;&quot;\n        for i in range(len(docker_server[&quot;hosts&quot;])):\n            cname = str(docker_server[&quot;hosts&quot;][i][&quot;container_tag&quot;])\n            ip = str(docker_server[&quot;hosts&quot;][i][&quot;container_ip&quot;])\n            port = str(docker_server[&quot;hosts&quot;][i][&quot;ssh_port&quot;])\n            hosts_text += str(cname + &quot; ansible_host=&quot; + ip) + &quot;\\n&quot;\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\n        with open(\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_root&quot;, &quot;w&quot;\n        ) as f:\n            f.write(SOFTETHER_INVENTORY_FILE)\n        SOFTETHER_INVENTORY_FILE = (\n            textwrap.dedent(\n                &quot;&quot;&quot;\\\n        [softether]\n        {hosts}\n        [softether:vars]\n        ansible_user={ansible_user}\n        ansible_port={ansible_ssh_port}\n        ansible_ssh_private_key_file={mount_dir}/roles/ansible_user/{key}\\\n        &quot;&quot;&quot;\n            )\n            .format(\n                hosts=hosts_text,\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\n            )\n            .strip()\n        )\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\n        with open(\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_user&quot;, &quot;w&quot;\n        ) as f:\n            f.write(SOFTETHER_INVENTORY_FILE)</code></pre>\n<h2>nofity 設定反映するためServiceをrestartさせる</h2>\n<p>Case in Firewalled</p>\n<pre><code class=\"language-python\"># roles/firewalled/handlers/main.yml\n- name: Restart firewalld\n  become: yes\n  systemd:\n    state: restarted\n    name: firewalld\n    enabled: yes</code></pre>\n<pre><code class=\"language-python\">- name: Open port by firewalld\n  become: yes\n  firewalld:\n    port: &quot;{{ item.port }}&quot;\n    permanent: &quot;{{ item.permanent }}&quot;\n    state: &quot;{{ item.state }}&quot;\n  with_items: &quot;{{ firewalld_ports }}&quot;\n  when: firewalld_ports is defined\n  notify: Restart firewalld # &lt;-  最終的にリスタートさせる</code></pre>\n<h2>Use dict for vars  and loop</h2>\n<pre><code class=\"language-python\">#  dict で書くことにより\nansible_users:\n  master:\n    name: &#039;ansible&#039;\n    groups: &#039;wheel&#039;\n    append: &#039;yes&#039;\n    state: &#039;present&#039;\n    remove: &#039;no&#039;\n    password: &quot;{{ secret.ansible_user_password }}&quot;\n    key: &quot;files/ansible_rsa.pub&quot;\n    secret_key: &quot;files/ansible_rsa&quot;\n    login_shell: &#039;/bin/bash&#039;\n    create_home: &#039;yes&#039;\n    sudo: &#039;present&#039;\n    comment: &#039;ansible user&#039;\n    expires: &#039;-1&#039;</code></pre>\n<pre><code class=\"language-python\">#  指定しやすくなる\n            .format(\n                hosts=hosts_text,\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\n            )\n            .strip()</code></pre>\n<pre><code class=\"language-python\"># playbook では with_dict を使い item.value.xxxになる\n- name: user-control\n  become: true\n  user:\n    name: &quot;{{ item.value.name }}&quot;\n    groups: &quot;{{ item.value.groups }}&quot;\n    state:  &quot;{{ item.value.state }}&quot;\n    remove:  &quot;{{ item.value.remove }}&quot;\n    create_home: &quot;{{ item.value.create_home }}&quot;\n    password: &quot;{{ item.value.password | password_hash(&#039;sha512&#039;) }}&quot;\n    shell: &quot;{{ item.value.login_shell }}&quot;\n    comment: &quot;{{ item.value.comment }}&quot;\n    expires: &quot;{{ item.value.expires }}&quot;\n  with_dict: &quot;{{ ansible_users }}&quot;</code></pre>\n<h2>ansible-lint shell command</h2>\n<pre><code class=\"language-bash\"># Default command\nansible-lint site.yml</code></pre>\n<pre><code class=\"language-python\"># docker execから ansible-lint\n        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &quot; bash -c &#039;cd &quot;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; ansible-lint site.yml&#039;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<h2>flake8</h2>\n<pre><code class=\"language-bash\"># Default command\nflake8 [DIR_NAME FILE_NAME]</code></pre>\n<pre><code class=\"language-python\"># docker execから flake8\n        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &quot; bash -c &#039;cd &quot;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; flake8 tests tests.py deploy deploy.py&#039;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<h2>block</h2>\n<pre><code class=\"language-bash\"># default command\nblack [DIR_NAME FILE_NAME]</code></pre>\n<pre><code class=\"language-python\"># docker execから flake8\n        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &quot; bash -c &#039;cd &quot;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; block tests tests.py deploy deploy.py&#039;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<h2>testinfra for ansible</h2>\n<pre><code class=\"language-python\">        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &#039; bash -c &quot;cd &#039;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; py.test -v tests/testinfra.py&quot;\n            + &quot; --connection=ssh&quot;\n            + &quot; --hosts=&#039;ansible://softether&#039;&quot;\n            + &quot; --ansible-inventory=&#039;hosts/&quot;\n            + docker_server[&quot;inventory_name&quot;]\n            + &quot;_user&#039;\\&quot;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<pre><code class=\"language-python\"># Service check\ndef test_sshd_running_and_enabled(host):\n    &quot;&quot;&quot; Check service sshd  &quot;&quot;&quot;\n    service = host.service(&quot;sshd&quot;)\n    assert service.is_running\n    assert service.is_enabled\n\n# Port check\ndef test_open_port(host):\n    &quot;&quot;&quot; Check ports  &quot;&quot;&quot;\n    all_variables = host.ansible.get_variables()\n    localhost = host.addr(&quot;localhost&quot;)\n    # sshd\n    assert localhost.port(all_variables[&quot;sshd_port&quot;]).is_reachable\n    if all_variables[&quot;sshd_port&quot;] != 22:\n        assert not localhost.port(22).is_reachable\n    # vpnserver\n    assert localhost.port(443).is_reachable\n    assert localhost.port(5555).is_reachable\n    assert localhost.port(1194).is_reachable\n# user check\ndef test_ansible_user(host):\n    &quot;&quot;&quot; Check exists ansible user  &quot;&quot;&quot;\n    all_variables = host.ansible.get_variables()\n    for i in all_variables[&quot;ansible_users&quot;].values():\n        user = host.user(i[&quot;name&quot;])\n        assert user.exists\n        assert user.name == i[&quot;name&quot;]\n        assert user.shell == i[&quot;login_shell&quot;]\n        assert user.home == &quot;/home/&quot; + i[&quot;name&quot;]\n</code></pre>\n<h2>Docker for Ansible test</h2>\n<p>Enable ssh systemd</p>\n<h3>CentOS7</h3>\n<pre><code class=\"language-bash\">FROM centos:centos7\nVOLUME [ &quot;/sys/fs/cgroup&quot; ]\nRUN yum -y update; yum clean all\nRUN yum -y install openssh-server passwd; yum clean all\nRUN yum install -y which\nRUN yum install -y https://repo.ius.io/ius-release-el7.rpm\nRUN yum install -y sudo\nRUN yum install -y wget\nRUN yum install -y curl\nRUN yum install -y sshpass\nRUN echo &#039;root:password&#039; | chpasswd\nRUN mkdir /root/.ssh\nRUN touch /root/.ssh/config\nRUN echo $&#039;Host *\\n\\\n \\tStrictHostKeyChecking no\\n\\\n \\n\\\nServerAliveInterval 60 \\n\\\nServerAliveCountMax 10 \\n &#039;  &gt;&gt; /root/.ssh/config\n\nRUN chmod 700 /root/.ssh/\nRUN chmod 600 /root/.ssh/*\n\nRUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N &#039;&#039;\nENTRYPOINT [&quot;/sbin/init&quot;]</code></pre>\n<h3>Ubuntu20.04</h3>\n<pre><code class=\"language-bash\">FROM ubuntu:20.04\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y software-properties-common \\\n                       tzdata\n\nRUN apt-add-repository -y ppa:git-core/ppa &amp;&amp; \\\n    apt-get update &amp;&amp; \\\n    apt-get install -y git \\\n                       curl \\\n                       openssh-server \\\n                       vim \\\n                       sudo \\\n                       sshpass \\\n                       python3-pip\nRUN mkdir /root/.ssh\nRUN echo &#039;\\n\\\nHost *\\n\\\n    StrictHostKeyChecking no\\n\\\n&#039; &gt;&gt; /root/.ssh/config\n\nRUN chmod 700 /root/.ssh\nRUN chmod 600 /root/.ssh/*\n\nRUN echo &#039;root:root&#039; | chpasswd\nEXPOSE 22\nCMD [ &quot;/sbin/init&quot; ]</code></pre>','VPNサーバー(SoftEhter)をAnsibleでConoha-VPNサーバーへ構築','Conoha API を使いVPN構築の簡略化','inherit','closed','closed','','588-revision-v1','','','2020-12-14 11:51:32','2020-12-14 02:51:32','# VPNサーバー(SoftEhter)をAnsibleでConoha-VPNサーバーへ構築\r\n[GitHub](https://github.com/WEBDIMENSION/ansible-softether-for-conoha)\r\n\r\n# inventory_file でのhostの指定を動的にしたい\r\nローカルのDocker上でのテスト, Act(GitHub actionsのローカル版)を利用してのテスト、本番デプロイにおいて inventory_file でのhostの指定を動的にしたい。\r\n\r\n```python \r\n## vars-file for docker\r\nmount_dir: &#039;/softether&#039;\r\nproject_name: &#039;Ansible-SoftEther-For-Conoha&#039;\r\ndocker_server:\r\n  hosts:\r\n    - host_ip: &quot;127.0.0.1&quot;\r\n      ssh_port: 2223\r\n      image_tag: &quot;softether_server&quot;\r\n      container_tag: &quot;softether001&quot;\r\n      container_ip: &quot;&quot;\r\n      dockerfile: &quot;centos7&quot;\r\n  inventory_name: &quot;docker_server&quot;\r\ndocker_client:\r\n  hosts:\r\n    - host_ip: &quot;127.0.0.1&quot;\r\n      ssh_port: 2222\r\n      image_tag: &quot;softether_client&quot;\r\n      container_tag: &quot;softether_client&quot;\r\n      container_ip: &quot;&quot;\r\n      dockerfile: &quot;ubuntu20.04&quot;\r\n  inventory_name: &quot;docker_client&quot;\r\n```\r\n\r\n```python\r\n# Create inventory\r\n        hosts_text = &quot;&quot;\r\n        for i in range(len(docker_server[&quot;hosts&quot;])):\r\n            cname = str(docker_server[&quot;hosts&quot;][i][&quot;container_tag&quot;])\r\n            ip = str(docker_server[&quot;hosts&quot;][i][&quot;container_ip&quot;])\r\n            port = str(docker_server[&quot;hosts&quot;][i][&quot;ssh_port&quot;])\r\n            hosts_text += str(cname + &quot; ansible_host=&quot; + ip) + &quot;\\n&quot;\r\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\r\n        with open(\r\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_root&quot;, &quot;w&quot;\r\n        ) as f:\r\n            f.write(SOFTETHER_INVENTORY_FILE)\r\n        SOFTETHER_INVENTORY_FILE = (\r\n            textwrap.dedent(\r\n                &quot;&quot;&quot;\\\r\n        [softether]\r\n        {hosts}\r\n        [softether:vars]\r\n        ansible_user={ansible_user}\r\n        ansible_port={ansible_ssh_port}\r\n        ansible_ssh_private_key_file={mount_dir}/roles/ansible_user/{key}\\\r\n        &quot;&quot;&quot;\r\n            )\r\n            .format(\r\n                hosts=hosts_text,\r\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\r\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\r\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\r\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\r\n            )\r\n            .strip()\r\n        )\r\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\r\n        with open(\r\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_user&quot;, &quot;w&quot;\r\n        ) as f:\r\n            f.write(SOFTETHER_INVENTORY_FILE)\r\n```\r\n## nofity 設定反映するためServiceをrestartさせる\r\n\r\nCase in Firewalled\r\n\r\n```python\r\n# roles/firewalled/handlers/main.yml\r\n- name: Restart firewalld\r\n  become: yes\r\n  systemd:\r\n    state: restarted\r\n    name: firewalld\r\n    enabled: yes\r\n```\r\n\r\n```python \r\n- name: Open port by firewalld\r\n  become: yes\r\n  firewalld:\r\n    port: &quot;{{ item.port }}&quot;\r\n    permanent: &quot;{{ item.permanent }}&quot;\r\n    state: &quot;{{ item.state }}&quot;\r\n  with_items: &quot;{{ firewalld_ports }}&quot;\r\n  when: firewalld_ports is defined\r\n  notify: Restart firewalld # &lt;-  最終的にリスタートさせる\r\n```\r\n\r\n## Use dict for vars  and loop\r\n```python\r\n#  dict で書くことにより\r\nansible_users:\r\n  master:\r\n    name: &#039;ansible&#039;\r\n    groups: &#039;wheel&#039;\r\n    append: &#039;yes&#039;\r\n    state: &#039;present&#039;\r\n    remove: &#039;no&#039;\r\n    password: &quot;{{ secret.ansible_user_password }}&quot;\r\n    key: &quot;files/ansible_rsa.pub&quot;\r\n    secret_key: &quot;files/ansible_rsa&quot;\r\n    login_shell: &#039;/bin/bash&#039;\r\n    create_home: &#039;yes&#039;\r\n    sudo: &#039;present&#039;\r\n    comment: &#039;ansible user&#039;\r\n    expires: &#039;-1&#039;\r\n```\r\n```python\r\n#  指定しやすくなる\r\n            .format(\r\n                hosts=hosts_text,\r\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\r\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\r\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\r\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\r\n            )\r\n            .strip()\r\n```\r\n```python\r\n# playbook では with_dict を使い item.value.xxxになる\r\n- name: user-control\r\n  become: true\r\n  user:\r\n    name: &quot;{{ item.value.name }}&quot;\r\n    groups: &quot;{{ item.value.groups }}&quot;\r\n    state:  &quot;{{ item.value.state }}&quot;\r\n    remove:  &quot;{{ item.value.remove }}&quot;\r\n    create_home: &quot;{{ item.value.create_home }}&quot;\r\n    password: &quot;{{ item.value.password | password_hash(&#039;sha512&#039;) }}&quot;\r\n    shell: &quot;{{ item.value.login_shell }}&quot;\r\n    comment: &quot;{{ item.value.comment }}&quot;\r\n    expires: &quot;{{ item.value.expires }}&quot;\r\n  with_dict: &quot;{{ ansible_users }}&quot;\r\n```\r\n\r\n\r\n## ansible-lint shell command\r\n```bash\r\n# Default command\r\nansible-lint site.yml\r\n```\r\n```python\r\n# docker execから ansible-lint\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &quot; bash -c &#039;cd &quot;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; ansible-lint site.yml&#039;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n## flake8\r\n``` bash\r\n# Default command\r\nflake8 [DIR_NAME FILE_NAME]\r\n```\r\n```python\r\n# docker execから flake8\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &quot; bash -c &#039;cd &quot;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; flake8 tests tests.py deploy deploy.py&#039;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n\r\n## block\r\n```bash\r\n# default command\r\nblack [DIR_NAME FILE_NAME]\r\n```\r\n```python\r\n# docker execから flake8\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &quot; bash -c &#039;cd &quot;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; block tests tests.py deploy deploy.py&#039;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n## testinfra for ansible\r\n```python\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &#039; bash -c &quot;cd &#039;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; py.test -v tests/testinfra.py&quot;\r\n            + &quot; --connection=ssh&quot;\r\n            + &quot; --hosts=&#039;ansible://softether&#039;&quot;\r\n            + &quot; --ansible-inventory=&#039;hosts/&quot;\r\n            + docker_server[&quot;inventory_name&quot;]\r\n            + &quot;_user&#039;\\&quot;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n```python\r\n# Service check\r\ndef test_sshd_running_and_enabled(host):\r\n    &quot;&quot;&quot; Check service sshd  &quot;&quot;&quot;\r\n    service = host.service(&quot;sshd&quot;)\r\n    assert service.is_running\r\n    assert service.is_enabled\r\n\r\n# Port check\r\ndef test_open_port(host):\r\n    &quot;&quot;&quot; Check ports  &quot;&quot;&quot;\r\n    all_variables = host.ansible.get_variables()\r\n    localhost = host.addr(&quot;localhost&quot;)\r\n    # sshd\r\n    assert localhost.port(all_variables[&quot;sshd_port&quot;]).is_reachable\r\n    if all_variables[&quot;sshd_port&quot;] != 22:\r\n        assert not localhost.port(22).is_reachable\r\n    # vpnserver\r\n    assert localhost.port(443).is_reachable\r\n    assert localhost.port(5555).is_reachable\r\n    assert localhost.port(1194).is_reachable\r\n# user check\r\ndef test_ansible_user(host):\r\n    &quot;&quot;&quot; Check exists ansible user  &quot;&quot;&quot;\r\n    all_variables = host.ansible.get_variables()\r\n    for i in all_variables[&quot;ansible_users&quot;].values():\r\n        user = host.user(i[&quot;name&quot;])\r\n        assert user.exists\r\n        assert user.name == i[&quot;name&quot;]\r\n        assert user.shell == i[&quot;login_shell&quot;]\r\n        assert user.home == &quot;/home/&quot; + i[&quot;name&quot;]\r\n\r\n```\r\n## Docker for Ansible test\r\nEnable ssh systemd\r\n### CentOS7\r\n```bash\r\nFROM centos:centos7\r\nVOLUME [ &quot;/sys/fs/cgroup&quot; ]\r\nRUN yum -y update; yum clean all\r\nRUN yum -y install openssh-server passwd; yum clean all\r\nRUN yum install -y which\r\nRUN yum install -y https://repo.ius.io/ius-release-el7.rpm\r\nRUN yum install -y sudo\r\nRUN yum install -y wget\r\nRUN yum install -y curl\r\nRUN yum install -y sshpass\r\nRUN echo &#039;root:password&#039; | chpasswd\r\nRUN mkdir /root/.ssh\r\nRUN touch /root/.ssh/config\r\nRUN echo $&#039;Host *\\n\\\r\n \\tStrictHostKeyChecking no\\n\\\r\n \\n\\\r\nServerAliveInterval 60 \\n\\\r\nServerAliveCountMax 10 \\n &#039;  &gt;&gt; /root/.ssh/config\r\n\r\nRUN chmod 700 /root/.ssh/\r\nRUN chmod 600 /root/.ssh/*\r\n\r\nRUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N &#039;&#039;\r\nENTRYPOINT [&quot;/sbin/init&quot;]\r\n```\r\n\r\n### Ubuntu20.04 \r\n\r\n```bash\r\nFROM ubuntu:20.04\r\nRUN apt-get update &amp;&amp; \\\r\n    apt-get install -y software-properties-common \\\r\n                       tzdata\r\n\r\nRUN apt-add-repository -y ppa:git-core/ppa &amp;&amp; \\\r\n    apt-get update &amp;&amp; \\\r\n    apt-get install -y git \\\r\n                       curl \\\r\n                       openssh-server \\\r\n                       vim \\\r\n                       sudo \\\r\n                       sshpass \\\r\n                       python3-pip\r\nRUN mkdir /root/.ssh\r\nRUN echo &#039;\\n\\\r\nHost *\\n\\\r\n    StrictHostKeyChecking no\\n\\\r\n&#039; &gt;&gt; /root/.ssh/config\r\n\r\nRUN chmod 700 /root/.ssh\r\nRUN chmod 600 /root/.ssh/*\r\n\r\nRUN echo &#039;root:root&#039; | chpasswd\r\nEXPOSE 22\r\nCMD [ &quot;/sbin/init&quot; ]\r\n```\r\n\r\n',588,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/588-revision-v1/',0,'revision','',0),(590,1,'2020-12-14 11:52:09','2020-12-14 02:52:09','<h1>VPNサーバー(SoftEhter)をAnsibleでConoha-VPNサーバーへ構築</h1>\n<p><a href=\"https://github.com/WEBDIMENSION/ansible-softether-for-conoha\">GitHub</a></p>\n<h2>inventory_file でのhostの指定を動的にしたい</h2>\n<p>ローカルのDocker上でのテスト, Act(GitHub actionsのローカル版)を利用してのテスト、本番デプロイにおいて inventory_file でのhostの指定を動的にしたい。</p>\n<pre><code class=\"language-python\">## vars-file for docker\nmount_dir: &#039;/softether&#039;\nproject_name: &#039;Ansible-SoftEther-For-Conoha&#039;\ndocker_server:\n  hosts:\n    - host_ip: &quot;127.0.0.1&quot;\n      ssh_port: 2223\n      image_tag: &quot;softether_server&quot;\n      container_tag: &quot;softether001&quot;\n      container_ip: &quot;&quot;\n      dockerfile: &quot;centos7&quot;\n  inventory_name: &quot;docker_server&quot;\ndocker_client:\n  hosts:\n    - host_ip: &quot;127.0.0.1&quot;\n      ssh_port: 2222\n      image_tag: &quot;softether_client&quot;\n      container_tag: &quot;softether_client&quot;\n      container_ip: &quot;&quot;\n      dockerfile: &quot;ubuntu20.04&quot;\n  inventory_name: &quot;docker_client&quot;</code></pre>\n<pre><code class=\"language-python\"># Create inventory\n        hosts_text = &quot;&quot;\n        for i in range(len(docker_server[&quot;hosts&quot;])):\n            cname = str(docker_server[&quot;hosts&quot;][i][&quot;container_tag&quot;])\n            ip = str(docker_server[&quot;hosts&quot;][i][&quot;container_ip&quot;])\n            port = str(docker_server[&quot;hosts&quot;][i][&quot;ssh_port&quot;])\n            hosts_text += str(cname + &quot; ansible_host=&quot; + ip) + &quot;\\n&quot;\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\n        with open(\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_root&quot;, &quot;w&quot;\n        ) as f:\n            f.write(SOFTETHER_INVENTORY_FILE)\n        SOFTETHER_INVENTORY_FILE = (\n            textwrap.dedent(\n                &quot;&quot;&quot;\\\n        [softether]\n        {hosts}\n        [softether:vars]\n        ansible_user={ansible_user}\n        ansible_port={ansible_ssh_port}\n        ansible_ssh_private_key_file={mount_dir}/roles/ansible_user/{key}\\\n        &quot;&quot;&quot;\n            )\n            .format(\n                hosts=hosts_text,\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\n            )\n            .strip()\n        )\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\n        with open(\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_user&quot;, &quot;w&quot;\n        ) as f:\n            f.write(SOFTETHER_INVENTORY_FILE)</code></pre>\n<h2>nofity 設定反映するためServiceをrestartさせる</h2>\n<p>Case in Firewalled</p>\n<pre><code class=\"language-python\"># roles/firewalled/handlers/main.yml\n- name: Restart firewalld\n  become: yes\n  systemd:\n    state: restarted\n    name: firewalld\n    enabled: yes</code></pre>\n<pre><code class=\"language-python\">- name: Open port by firewalld\n  become: yes\n  firewalld:\n    port: &quot;{{ item.port }}&quot;\n    permanent: &quot;{{ item.permanent }}&quot;\n    state: &quot;{{ item.state }}&quot;\n  with_items: &quot;{{ firewalld_ports }}&quot;\n  when: firewalld_ports is defined\n  notify: Restart firewalld # &lt;-  最終的にリスタートさせる</code></pre>\n<h2>Use dict for vars  and loop</h2>\n<pre><code class=\"language-python\">#  dict で書くことにより\nansible_users:\n  master:\n    name: &#039;ansible&#039;\n    groups: &#039;wheel&#039;\n    append: &#039;yes&#039;\n    state: &#039;present&#039;\n    remove: &#039;no&#039;\n    password: &quot;{{ secret.ansible_user_password }}&quot;\n    key: &quot;files/ansible_rsa.pub&quot;\n    secret_key: &quot;files/ansible_rsa&quot;\n    login_shell: &#039;/bin/bash&#039;\n    create_home: &#039;yes&#039;\n    sudo: &#039;present&#039;\n    comment: &#039;ansible user&#039;\n    expires: &#039;-1&#039;</code></pre>\n<pre><code class=\"language-python\">#  指定しやすくなる\n            .format(\n                hosts=hosts_text,\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\n            )\n            .strip()</code></pre>\n<pre><code class=\"language-python\"># playbook では with_dict を使い item.value.xxxになる\n- name: user-control\n  become: true\n  user:\n    name: &quot;{{ item.value.name }}&quot;\n    groups: &quot;{{ item.value.groups }}&quot;\n    state:  &quot;{{ item.value.state }}&quot;\n    remove:  &quot;{{ item.value.remove }}&quot;\n    create_home: &quot;{{ item.value.create_home }}&quot;\n    password: &quot;{{ item.value.password | password_hash(&#039;sha512&#039;) }}&quot;\n    shell: &quot;{{ item.value.login_shell }}&quot;\n    comment: &quot;{{ item.value.comment }}&quot;\n    expires: &quot;{{ item.value.expires }}&quot;\n  with_dict: &quot;{{ ansible_users }}&quot;</code></pre>\n<h2>ansible-lint shell command</h2>\n<pre><code class=\"language-bash\"># Default command\nansible-lint site.yml</code></pre>\n<pre><code class=\"language-python\"># docker execから ansible-lint\n        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &quot; bash -c &#039;cd &quot;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; ansible-lint site.yml&#039;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<h2>flake8</h2>\n<pre><code class=\"language-bash\"># Default command\nflake8 [DIR_NAME FILE_NAME]</code></pre>\n<pre><code class=\"language-python\"># docker execから flake8\n        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &quot; bash -c &#039;cd &quot;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; flake8 tests tests.py deploy deploy.py&#039;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<h2>block</h2>\n<pre><code class=\"language-bash\"># default command\nblack [DIR_NAME FILE_NAME]</code></pre>\n<pre><code class=\"language-python\"># docker execから flake8\n        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &quot; bash -c &#039;cd &quot;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; block tests tests.py deploy deploy.py&#039;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<h2>testinfra for ansible</h2>\n<pre><code class=\"language-python\">        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &#039; bash -c &quot;cd &#039;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; py.test -v tests/testinfra.py&quot;\n            + &quot; --connection=ssh&quot;\n            + &quot; --hosts=&#039;ansible://softether&#039;&quot;\n            + &quot; --ansible-inventory=&#039;hosts/&quot;\n            + docker_server[&quot;inventory_name&quot;]\n            + &quot;_user&#039;\\&quot;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<pre><code class=\"language-python\"># Service check\ndef test_sshd_running_and_enabled(host):\n    &quot;&quot;&quot; Check service sshd  &quot;&quot;&quot;\n    service = host.service(&quot;sshd&quot;)\n    assert service.is_running\n    assert service.is_enabled\n\n# Port check\ndef test_open_port(host):\n    &quot;&quot;&quot; Check ports  &quot;&quot;&quot;\n    all_variables = host.ansible.get_variables()\n    localhost = host.addr(&quot;localhost&quot;)\n    # sshd\n    assert localhost.port(all_variables[&quot;sshd_port&quot;]).is_reachable\n    if all_variables[&quot;sshd_port&quot;] != 22:\n        assert not localhost.port(22).is_reachable\n    # vpnserver\n    assert localhost.port(443).is_reachable\n    assert localhost.port(5555).is_reachable\n    assert localhost.port(1194).is_reachable\n# user check\ndef test_ansible_user(host):\n    &quot;&quot;&quot; Check exists ansible user  &quot;&quot;&quot;\n    all_variables = host.ansible.get_variables()\n    for i in all_variables[&quot;ansible_users&quot;].values():\n        user = host.user(i[&quot;name&quot;])\n        assert user.exists\n        assert user.name == i[&quot;name&quot;]\n        assert user.shell == i[&quot;login_shell&quot;]\n        assert user.home == &quot;/home/&quot; + i[&quot;name&quot;]\n</code></pre>\n<h2>Docker for Ansible test</h2>\n<p>Enable ssh systemd</p>\n<h3>CentOS7</h3>\n<pre><code class=\"language-bash\">FROM centos:centos7\nVOLUME [ &quot;/sys/fs/cgroup&quot; ]\nRUN yum -y update; yum clean all\nRUN yum -y install openssh-server passwd; yum clean all\nRUN yum install -y which\nRUN yum install -y https://repo.ius.io/ius-release-el7.rpm\nRUN yum install -y sudo\nRUN yum install -y wget\nRUN yum install -y curl\nRUN yum install -y sshpass\nRUN echo &#039;root:password&#039; | chpasswd\nRUN mkdir /root/.ssh\nRUN touch /root/.ssh/config\nRUN echo $&#039;Host *\\n\\\n \\tStrictHostKeyChecking no\\n\\\n \\n\\\nServerAliveInterval 60 \\n\\\nServerAliveCountMax 10 \\n &#039;  &gt;&gt; /root/.ssh/config\n\nRUN chmod 700 /root/.ssh/\nRUN chmod 600 /root/.ssh/*\n\nRUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N &#039;&#039;\nENTRYPOINT [&quot;/sbin/init&quot;]</code></pre>\n<h3>Ubuntu20.04</h3>\n<pre><code class=\"language-bash\">FROM ubuntu:20.04\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y software-properties-common \\\n                       tzdata\n\nRUN apt-add-repository -y ppa:git-core/ppa &amp;&amp; \\\n    apt-get update &amp;&amp; \\\n    apt-get install -y git \\\n                       curl \\\n                       openssh-server \\\n                       vim \\\n                       sudo \\\n                       sshpass \\\n                       python3-pip\nRUN mkdir /root/.ssh\nRUN echo &#039;\\n\\\nHost *\\n\\\n    StrictHostKeyChecking no\\n\\\n&#039; &gt;&gt; /root/.ssh/config\n\nRUN chmod 700 /root/.ssh\nRUN chmod 600 /root/.ssh/*\n\nRUN echo &#039;root:root&#039; | chpasswd\nEXPOSE 22\nCMD [ &quot;/sbin/init&quot; ]</code></pre>','VPNサーバー(SoftEhter)をAnsibleでConoha-VPNサーバーへ構築','Conoha API を使いVPN構築の簡略化','inherit','closed','closed','','588-revision-v1','','','2020-12-14 11:52:09','2020-12-14 02:52:09','# VPNサーバー(SoftEhter)をAnsibleでConoha-VPNサーバーへ構築\r\n[GitHub](https://github.com/WEBDIMENSION/ansible-softether-for-conoha)\r\n\r\n## inventory_file でのhostの指定を動的にしたい\r\nローカルのDocker上でのテスト, Act(GitHub actionsのローカル版)を利用してのテスト、本番デプロイにおいて inventory_file でのhostの指定を動的にしたい。\r\n\r\n```python \r\n## vars-file for docker\r\nmount_dir: &#039;/softether&#039;\r\nproject_name: &#039;Ansible-SoftEther-For-Conoha&#039;\r\ndocker_server:\r\n  hosts:\r\n    - host_ip: &quot;127.0.0.1&quot;\r\n      ssh_port: 2223\r\n      image_tag: &quot;softether_server&quot;\r\n      container_tag: &quot;softether001&quot;\r\n      container_ip: &quot;&quot;\r\n      dockerfile: &quot;centos7&quot;\r\n  inventory_name: &quot;docker_server&quot;\r\ndocker_client:\r\n  hosts:\r\n    - host_ip: &quot;127.0.0.1&quot;\r\n      ssh_port: 2222\r\n      image_tag: &quot;softether_client&quot;\r\n      container_tag: &quot;softether_client&quot;\r\n      container_ip: &quot;&quot;\r\n      dockerfile: &quot;ubuntu20.04&quot;\r\n  inventory_name: &quot;docker_client&quot;\r\n```\r\n\r\n```python\r\n# Create inventory\r\n        hosts_text = &quot;&quot;\r\n        for i in range(len(docker_server[&quot;hosts&quot;])):\r\n            cname = str(docker_server[&quot;hosts&quot;][i][&quot;container_tag&quot;])\r\n            ip = str(docker_server[&quot;hosts&quot;][i][&quot;container_ip&quot;])\r\n            port = str(docker_server[&quot;hosts&quot;][i][&quot;ssh_port&quot;])\r\n            hosts_text += str(cname + &quot; ansible_host=&quot; + ip) + &quot;\\n&quot;\r\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\r\n        with open(\r\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_root&quot;, &quot;w&quot;\r\n        ) as f:\r\n            f.write(SOFTETHER_INVENTORY_FILE)\r\n        SOFTETHER_INVENTORY_FILE = (\r\n            textwrap.dedent(\r\n                &quot;&quot;&quot;\\\r\n        [softether]\r\n        {hosts}\r\n        [softether:vars]\r\n        ansible_user={ansible_user}\r\n        ansible_port={ansible_ssh_port}\r\n        ansible_ssh_private_key_file={mount_dir}/roles/ansible_user/{key}\\\r\n        &quot;&quot;&quot;\r\n            )\r\n            .format(\r\n                hosts=hosts_text,\r\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\r\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\r\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\r\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\r\n            )\r\n            .strip()\r\n        )\r\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\r\n        with open(\r\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_user&quot;, &quot;w&quot;\r\n        ) as f:\r\n            f.write(SOFTETHER_INVENTORY_FILE)\r\n```\r\n## nofity 設定反映するためServiceをrestartさせる\r\n\r\nCase in Firewalled\r\n\r\n```python\r\n# roles/firewalled/handlers/main.yml\r\n- name: Restart firewalld\r\n  become: yes\r\n  systemd:\r\n    state: restarted\r\n    name: firewalld\r\n    enabled: yes\r\n```\r\n\r\n```python \r\n- name: Open port by firewalld\r\n  become: yes\r\n  firewalld:\r\n    port: &quot;{{ item.port }}&quot;\r\n    permanent: &quot;{{ item.permanent }}&quot;\r\n    state: &quot;{{ item.state }}&quot;\r\n  with_items: &quot;{{ firewalld_ports }}&quot;\r\n  when: firewalld_ports is defined\r\n  notify: Restart firewalld # &lt;-  最終的にリスタートさせる\r\n```\r\n\r\n## Use dict for vars  and loop\r\n```python\r\n#  dict で書くことにより\r\nansible_users:\r\n  master:\r\n    name: &#039;ansible&#039;\r\n    groups: &#039;wheel&#039;\r\n    append: &#039;yes&#039;\r\n    state: &#039;present&#039;\r\n    remove: &#039;no&#039;\r\n    password: &quot;{{ secret.ansible_user_password }}&quot;\r\n    key: &quot;files/ansible_rsa.pub&quot;\r\n    secret_key: &quot;files/ansible_rsa&quot;\r\n    login_shell: &#039;/bin/bash&#039;\r\n    create_home: &#039;yes&#039;\r\n    sudo: &#039;present&#039;\r\n    comment: &#039;ansible user&#039;\r\n    expires: &#039;-1&#039;\r\n```\r\n```python\r\n#  指定しやすくなる\r\n            .format(\r\n                hosts=hosts_text,\r\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\r\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\r\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\r\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\r\n            )\r\n            .strip()\r\n```\r\n```python\r\n# playbook では with_dict を使い item.value.xxxになる\r\n- name: user-control\r\n  become: true\r\n  user:\r\n    name: &quot;{{ item.value.name }}&quot;\r\n    groups: &quot;{{ item.value.groups }}&quot;\r\n    state:  &quot;{{ item.value.state }}&quot;\r\n    remove:  &quot;{{ item.value.remove }}&quot;\r\n    create_home: &quot;{{ item.value.create_home }}&quot;\r\n    password: &quot;{{ item.value.password | password_hash(&#039;sha512&#039;) }}&quot;\r\n    shell: &quot;{{ item.value.login_shell }}&quot;\r\n    comment: &quot;{{ item.value.comment }}&quot;\r\n    expires: &quot;{{ item.value.expires }}&quot;\r\n  with_dict: &quot;{{ ansible_users }}&quot;\r\n```\r\n\r\n\r\n## ansible-lint shell command\r\n```bash\r\n# Default command\r\nansible-lint site.yml\r\n```\r\n```python\r\n# docker execから ansible-lint\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &quot; bash -c &#039;cd &quot;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; ansible-lint site.yml&#039;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n## flake8\r\n``` bash\r\n# Default command\r\nflake8 [DIR_NAME FILE_NAME]\r\n```\r\n```python\r\n# docker execから flake8\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &quot; bash -c &#039;cd &quot;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; flake8 tests tests.py deploy deploy.py&#039;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n\r\n## block\r\n```bash\r\n# default command\r\nblack [DIR_NAME FILE_NAME]\r\n```\r\n```python\r\n# docker execから flake8\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &quot; bash -c &#039;cd &quot;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; block tests tests.py deploy deploy.py&#039;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n## testinfra for ansible\r\n```python\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &#039; bash -c &quot;cd &#039;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; py.test -v tests/testinfra.py&quot;\r\n            + &quot; --connection=ssh&quot;\r\n            + &quot; --hosts=&#039;ansible://softether&#039;&quot;\r\n            + &quot; --ansible-inventory=&#039;hosts/&quot;\r\n            + docker_server[&quot;inventory_name&quot;]\r\n            + &quot;_user&#039;\\&quot;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n```python\r\n# Service check\r\ndef test_sshd_running_and_enabled(host):\r\n    &quot;&quot;&quot; Check service sshd  &quot;&quot;&quot;\r\n    service = host.service(&quot;sshd&quot;)\r\n    assert service.is_running\r\n    assert service.is_enabled\r\n\r\n# Port check\r\ndef test_open_port(host):\r\n    &quot;&quot;&quot; Check ports  &quot;&quot;&quot;\r\n    all_variables = host.ansible.get_variables()\r\n    localhost = host.addr(&quot;localhost&quot;)\r\n    # sshd\r\n    assert localhost.port(all_variables[&quot;sshd_port&quot;]).is_reachable\r\n    if all_variables[&quot;sshd_port&quot;] != 22:\r\n        assert not localhost.port(22).is_reachable\r\n    # vpnserver\r\n    assert localhost.port(443).is_reachable\r\n    assert localhost.port(5555).is_reachable\r\n    assert localhost.port(1194).is_reachable\r\n# user check\r\ndef test_ansible_user(host):\r\n    &quot;&quot;&quot; Check exists ansible user  &quot;&quot;&quot;\r\n    all_variables = host.ansible.get_variables()\r\n    for i in all_variables[&quot;ansible_users&quot;].values():\r\n        user = host.user(i[&quot;name&quot;])\r\n        assert user.exists\r\n        assert user.name == i[&quot;name&quot;]\r\n        assert user.shell == i[&quot;login_shell&quot;]\r\n        assert user.home == &quot;/home/&quot; + i[&quot;name&quot;]\r\n\r\n```\r\n## Docker for Ansible test\r\nEnable ssh systemd\r\n### CentOS7\r\n```bash\r\nFROM centos:centos7\r\nVOLUME [ &quot;/sys/fs/cgroup&quot; ]\r\nRUN yum -y update; yum clean all\r\nRUN yum -y install openssh-server passwd; yum clean all\r\nRUN yum install -y which\r\nRUN yum install -y https://repo.ius.io/ius-release-el7.rpm\r\nRUN yum install -y sudo\r\nRUN yum install -y wget\r\nRUN yum install -y curl\r\nRUN yum install -y sshpass\r\nRUN echo &#039;root:password&#039; | chpasswd\r\nRUN mkdir /root/.ssh\r\nRUN touch /root/.ssh/config\r\nRUN echo $&#039;Host *\\n\\\r\n \\tStrictHostKeyChecking no\\n\\\r\n \\n\\\r\nServerAliveInterval 60 \\n\\\r\nServerAliveCountMax 10 \\n &#039;  &gt;&gt; /root/.ssh/config\r\n\r\nRUN chmod 700 /root/.ssh/\r\nRUN chmod 600 /root/.ssh/*\r\n\r\nRUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N &#039;&#039;\r\nENTRYPOINT [&quot;/sbin/init&quot;]\r\n```\r\n\r\n### Ubuntu20.04 \r\n\r\n```bash\r\nFROM ubuntu:20.04\r\nRUN apt-get update &amp;&amp; \\\r\n    apt-get install -y software-properties-common \\\r\n                       tzdata\r\n\r\nRUN apt-add-repository -y ppa:git-core/ppa &amp;&amp; \\\r\n    apt-get update &amp;&amp; \\\r\n    apt-get install -y git \\\r\n                       curl \\\r\n                       openssh-server \\\r\n                       vim \\\r\n                       sudo \\\r\n                       sshpass \\\r\n                       python3-pip\r\nRUN mkdir /root/.ssh\r\nRUN echo &#039;\\n\\\r\nHost *\\n\\\r\n    StrictHostKeyChecking no\\n\\\r\n&#039; &gt;&gt; /root/.ssh/config\r\n\r\nRUN chmod 700 /root/.ssh\r\nRUN chmod 600 /root/.ssh/*\r\n\r\nRUN echo &#039;root:root&#039; | chpasswd\r\nEXPOSE 22\r\nCMD [ &quot;/sbin/init&quot; ]\r\n```\r\n\r\n',588,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/588-revision-v1/',0,'revision','',0),(591,1,'2020-12-14 11:54:40','2020-12-14 02:54:40','<h1>VPNサーバー(SoftEhter)をAnsibleでConoha-VPNサーバーへ構築</h1>\n<p><a href=\"https://github.com/WEBDIMENSION/ansible-softether-for-conoha\">GitHub</a></p>\n<h2>inventory_file でのhostの指定を動的にしたい</h2>\n<p>ローカルのDocker上でのテスト, Act(GitHub actionsのローカル版)を利用してのテスト、本番デプロイにおいて inventory_file でのhostの指定を動的にしたい。</p>\n<pre><code class=\"language-python\">## vars-file for docker\nmount_dir: &#039;/softether&#039;\nproject_name: &#039;Ansible-SoftEther-For-Conoha&#039;\ndocker_server:\n  hosts:\n    - host_ip: &quot;127.0.0.1&quot;\n      ssh_port: 2223\n      image_tag: &quot;softether_server&quot;\n      container_tag: &quot;softether001&quot;\n      container_ip: &quot;&quot;\n      dockerfile: &quot;centos7&quot;\n  inventory_name: &quot;docker_server&quot;\ndocker_client:\n  hosts:\n    - host_ip: &quot;127.0.0.1&quot;\n      ssh_port: 2222\n      image_tag: &quot;softether_client&quot;\n      container_tag: &quot;softether_client&quot;\n      container_ip: &quot;&quot;\n      dockerfile: &quot;ubuntu20.04&quot;\n  inventory_name: &quot;docker_client&quot;</code></pre>\n<pre><code class=\"language-python\"># Create inventory\n        hosts_text = &quot;&quot;\n        for i in range(len(docker_server[&quot;hosts&quot;])):\n            cname = str(docker_server[&quot;hosts&quot;][i][&quot;container_tag&quot;])\n            ip = str(docker_server[&quot;hosts&quot;][i][&quot;container_ip&quot;])\n            port = str(docker_server[&quot;hosts&quot;][i][&quot;ssh_port&quot;])\n            hosts_text += str(cname + &quot; ansible_host=&quot; + ip) + &quot;\\n&quot;\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\n        with open(\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_root&quot;, &quot;w&quot;\n        ) as f:\n            f.write(SOFTETHER_INVENTORY_FILE)\n        SOFTETHER_INVENTORY_FILE = (\n            textwrap.dedent(\n                &quot;&quot;&quot;\\\n        [softether]\n        {hosts}\n        [softether:vars]\n        ansible_user={ansible_user}\n        ansible_port={ansible_ssh_port}\n        ansible_ssh_private_key_file={mount_dir}/roles/ansible_user/{key}\\\n        &quot;&quot;&quot;\n            )\n            .format(\n                hosts=hosts_text,\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\n            )\n            .strip()\n        )\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\n        with open(\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_user&quot;, &quot;w&quot;\n        ) as f:\n            f.write(SOFTETHER_INVENTORY_FILE)</code></pre>\n<h2>nofity 設定反映するためServiceをrestartさせる</h2>\n<p>Case in Firewalled</p>\n<pre><code class=\"language-python\"># roles/firewalled/handlers/main.yml\n- name: Restart firewalld\n  become: yes\n  systemd:\n    state: restarted\n    name: firewalld\n    enabled: yes</code></pre>\n<pre><code class=\"language-python\">- name: Open port by firewalld\n  become: yes\n  firewalld:\n    port: &quot;{{ item.port }}&quot;\n    permanent: &quot;{{ item.permanent }}&quot;\n    state: &quot;{{ item.state }}&quot;\n  with_items: &quot;{{ firewalld_ports }}&quot;\n  when: firewalld_ports is defined\n  notify: Restart firewalld # &lt;-  最終的にリスタートさせる</code></pre>\n<h2>Use dict for vars  and loop</h2>\n<pre><code class=\"language-python\">#  dict で書くことにより\nansible_users:\n  master:\n    name: &#039;ansible&#039;\n    groups: &#039;wheel&#039;\n    append: &#039;yes&#039;\n    state: &#039;present&#039;\n    remove: &#039;no&#039;\n    password: &quot;{{ secret.ansible_user_password }}&quot;\n    key: &quot;files/ansible_rsa.pub&quot;\n    secret_key: &quot;files/ansible_rsa&quot;\n    login_shell: &#039;/bin/bash&#039;\n    create_home: &#039;yes&#039;\n    sudo: &#039;present&#039;\n    comment: &#039;ansible user&#039;\n    expires: &#039;-1&#039;</code></pre>\n<pre><code class=\"language-python\">#  指定しやすくなる\n            .format(\n                hosts=hosts_text,\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\n            )\n            .strip()</code></pre>\n<pre><code class=\"language-python\"># playbook では with_dict を使い item.value.xxxになる\n- name: user-control\n  become: true\n  user:\n    name: &quot;{{ item.value.name }}&quot;\n    groups: &quot;{{ item.value.groups }}&quot;\n    state:  &quot;{{ item.value.state }}&quot;\n    remove:  &quot;{{ item.value.remove }}&quot;\n    create_home: &quot;{{ item.value.create_home }}&quot;\n    password: &quot;{{ item.value.password | password_hash(&#039;sha512&#039;) }}&quot;\n    shell: &quot;{{ item.value.login_shell }}&quot;\n    comment: &quot;{{ item.value.comment }}&quot;\n    expires: &quot;{{ item.value.expires }}&quot;\n  with_dict: &quot;{{ ansible_users }}&quot;</code></pre>\n<h2>ansible-lint shell command</h2>\n<pre><code class=\"language-bash\"># Default command\nansible-lint site.yml</code></pre>\n<pre><code class=\"language-python\"># docker execから ansible-lint\n        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &quot; bash -c &#039;cd &quot;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; ansible-lint site.yml&#039;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<h2>flake8</h2>\n<pre><code class=\"language-bash\"># Default command\nflake8 [DIR_NAME FILE_NAME]</code></pre>\n<pre><code class=\"language-python\"># docker execから flake8\n        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &quot; bash -c &#039;cd &quot;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; flake8 tests tests.py deploy deploy.py&#039;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<h2>block</h2>\n<pre><code class=\"language-bash\"># default command\nblack [DIR_NAME FILE_NAME]</code></pre>\n<pre><code class=\"language-python\"># docker execから flake8\n        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &quot; bash -c &#039;cd &quot;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; block tests tests.py deploy deploy.py&#039;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<h2>testinfra for ansible</h2>\n<pre><code class=\"language-python\">        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &#039; bash -c &quot;cd &#039;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; py.test -v tests/testinfra.py&quot;\n            + &quot; --connection=ssh&quot;\n            + &quot; --hosts=&#039;ansible://softether&#039;&quot;\n            + &quot; --ansible-inventory=&#039;hosts/&quot;\n            + docker_server[&quot;inventory_name&quot;]\n            + &quot;_user&#039;\\&quot;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<pre><code class=\"language-python\"># Service check\ndef test_sshd_running_and_enabled(host):\n    &quot;&quot;&quot; Check service sshd  &quot;&quot;&quot;\n    service = host.service(&quot;sshd&quot;)\n    assert service.is_running\n    assert service.is_enabled\n\n# Port check\ndef test_open_port(host):\n    &quot;&quot;&quot; Check ports  &quot;&quot;&quot;\n    all_variables = host.ansible.get_variables()\n    localhost = host.addr(&quot;localhost&quot;)\n    # sshd\n    assert localhost.port(all_variables[&quot;sshd_port&quot;]).is_reachable\n    if all_variables[&quot;sshd_port&quot;] != 22:\n        assert not localhost.port(22).is_reachable\n    # vpnserver\n    assert localhost.port(443).is_reachable\n    assert localhost.port(5555).is_reachable\n    assert localhost.port(1194).is_reachable\n# user check\ndef test_ansible_user(host):\n    &quot;&quot;&quot; Check exists ansible user  &quot;&quot;&quot;\n    all_variables = host.ansible.get_variables()\n    for i in all_variables[&quot;ansible_users&quot;].values():\n        user = host.user(i[&quot;name&quot;])\n        assert user.exists\n        assert user.name == i[&quot;name&quot;]\n        assert user.shell == i[&quot;login_shell&quot;]\n        assert user.home == &quot;/home/&quot; + i[&quot;name&quot;]\n</code></pre>\n<h2>Docker for Ansible test</h2>\n<p>Enable ssh systemd</p>\n<h3>CentOS7</h3>\n<pre><code class=\"language-bash\">FROM centos:centos7\nVOLUME [ &quot;/sys/fs/cgroup&quot; ]\nRUN yum -y update; yum clean all\nRUN yum -y install openssh-server passwd; yum clean all\nRUN yum install -y which\nRUN yum install -y https://repo.ius.io/ius-release-el7.rpm\nRUN yum install -y sudo\nRUN yum install -y wget\nRUN yum install -y curl\nRUN yum install -y sshpass\nRUN echo &#039;root:password&#039; | chpasswd\nRUN mkdir /root/.ssh\nRUN touch /root/.ssh/config\nRUN echo $&#039;Host *\\n\\\n \\tStrictHostKeyChecking no\\n\\\n \\n\\\nServerAliveInterval 60 \\n\\\nServerAliveCountMax 10 \\n &#039;  &gt;&gt; /root/.ssh/config\n\nRUN chmod 700 /root/.ssh/\nRUN chmod 600 /root/.ssh/*\n\nRUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N &#039;&#039;\nENTRYPOINT [&quot;/sbin/init&quot;]</code></pre>\n<h3>Ubuntu20.04</h3>\n<pre><code class=\"language-bash\">FROM ubuntu:20.04\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y software-properties-common \\\n                       tzdata\n\nRUN apt-add-repository -y ppa:git-core/ppa &amp;&amp; \\\n    apt-get update &amp;&amp; \\\n    apt-get install -y git \\\n                       curl \\\n                       openssh-server \\\n                       vim \\\n                       sudo \\\n                       sshpass \\\n                       python3-pip\nRUN mkdir /root/.ssh\nRUN echo &#039;\\n\\\nHost *\\n\\\n    StrictHostKeyChecking no\\n\\\n&#039; &gt;&gt; /root/.ssh/config\n\nRUN chmod 700 /root/.ssh\nRUN chmod 600 /root/.ssh/*\n\nRUN echo &#039;root:root&#039; | chpasswd\nEXPOSE 22\nCMD [ &quot;/sbin/init&quot; ]</code></pre>','VPNサーバー(SoftEhter)をAnsibleでConoha-VPNサーバーへ構築','Conoha API を使いVPN構築を簡略化　の備忘録','inherit','closed','closed','','588-revision-v1','','','2020-12-14 11:54:40','2020-12-14 02:54:40','# VPNサーバー(SoftEhter)をAnsibleでConoha-VPNサーバーへ構築\r\n[GitHub](https://github.com/WEBDIMENSION/ansible-softether-for-conoha)\r\n\r\n## inventory_file でのhostの指定を動的にしたい\r\nローカルのDocker上でのテスト, Act(GitHub actionsのローカル版)を利用してのテスト、本番デプロイにおいて inventory_file でのhostの指定を動的にしたい。\r\n\r\n```python \r\n## vars-file for docker\r\nmount_dir: &#039;/softether&#039;\r\nproject_name: &#039;Ansible-SoftEther-For-Conoha&#039;\r\ndocker_server:\r\n  hosts:\r\n    - host_ip: &quot;127.0.0.1&quot;\r\n      ssh_port: 2223\r\n      image_tag: &quot;softether_server&quot;\r\n      container_tag: &quot;softether001&quot;\r\n      container_ip: &quot;&quot;\r\n      dockerfile: &quot;centos7&quot;\r\n  inventory_name: &quot;docker_server&quot;\r\ndocker_client:\r\n  hosts:\r\n    - host_ip: &quot;127.0.0.1&quot;\r\n      ssh_port: 2222\r\n      image_tag: &quot;softether_client&quot;\r\n      container_tag: &quot;softether_client&quot;\r\n      container_ip: &quot;&quot;\r\n      dockerfile: &quot;ubuntu20.04&quot;\r\n  inventory_name: &quot;docker_client&quot;\r\n```\r\n\r\n```python\r\n# Create inventory\r\n        hosts_text = &quot;&quot;\r\n        for i in range(len(docker_server[&quot;hosts&quot;])):\r\n            cname = str(docker_server[&quot;hosts&quot;][i][&quot;container_tag&quot;])\r\n            ip = str(docker_server[&quot;hosts&quot;][i][&quot;container_ip&quot;])\r\n            port = str(docker_server[&quot;hosts&quot;][i][&quot;ssh_port&quot;])\r\n            hosts_text += str(cname + &quot; ansible_host=&quot; + ip) + &quot;\\n&quot;\r\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\r\n        with open(\r\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_root&quot;, &quot;w&quot;\r\n        ) as f:\r\n            f.write(SOFTETHER_INVENTORY_FILE)\r\n        SOFTETHER_INVENTORY_FILE = (\r\n            textwrap.dedent(\r\n                &quot;&quot;&quot;\\\r\n        [softether]\r\n        {hosts}\r\n        [softether:vars]\r\n        ansible_user={ansible_user}\r\n        ansible_port={ansible_ssh_port}\r\n        ansible_ssh_private_key_file={mount_dir}/roles/ansible_user/{key}\\\r\n        &quot;&quot;&quot;\r\n            )\r\n            .format(\r\n                hosts=hosts_text,\r\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\r\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\r\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\r\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\r\n            )\r\n            .strip()\r\n        )\r\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\r\n        with open(\r\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_user&quot;, &quot;w&quot;\r\n        ) as f:\r\n            f.write(SOFTETHER_INVENTORY_FILE)\r\n```\r\n## nofity 設定反映するためServiceをrestartさせる\r\n\r\nCase in Firewalled\r\n\r\n```python\r\n# roles/firewalled/handlers/main.yml\r\n- name: Restart firewalld\r\n  become: yes\r\n  systemd:\r\n    state: restarted\r\n    name: firewalld\r\n    enabled: yes\r\n```\r\n\r\n```python \r\n- name: Open port by firewalld\r\n  become: yes\r\n  firewalld:\r\n    port: &quot;{{ item.port }}&quot;\r\n    permanent: &quot;{{ item.permanent }}&quot;\r\n    state: &quot;{{ item.state }}&quot;\r\n  with_items: &quot;{{ firewalld_ports }}&quot;\r\n  when: firewalld_ports is defined\r\n  notify: Restart firewalld # &lt;-  最終的にリスタートさせる\r\n```\r\n\r\n## Use dict for vars  and loop\r\n```python\r\n#  dict で書くことにより\r\nansible_users:\r\n  master:\r\n    name: &#039;ansible&#039;\r\n    groups: &#039;wheel&#039;\r\n    append: &#039;yes&#039;\r\n    state: &#039;present&#039;\r\n    remove: &#039;no&#039;\r\n    password: &quot;{{ secret.ansible_user_password }}&quot;\r\n    key: &quot;files/ansible_rsa.pub&quot;\r\n    secret_key: &quot;files/ansible_rsa&quot;\r\n    login_shell: &#039;/bin/bash&#039;\r\n    create_home: &#039;yes&#039;\r\n    sudo: &#039;present&#039;\r\n    comment: &#039;ansible user&#039;\r\n    expires: &#039;-1&#039;\r\n```\r\n```python\r\n#  指定しやすくなる\r\n            .format(\r\n                hosts=hosts_text,\r\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\r\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\r\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\r\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\r\n            )\r\n            .strip()\r\n```\r\n```python\r\n# playbook では with_dict を使い item.value.xxxになる\r\n- name: user-control\r\n  become: true\r\n  user:\r\n    name: &quot;{{ item.value.name }}&quot;\r\n    groups: &quot;{{ item.value.groups }}&quot;\r\n    state:  &quot;{{ item.value.state }}&quot;\r\n    remove:  &quot;{{ item.value.remove }}&quot;\r\n    create_home: &quot;{{ item.value.create_home }}&quot;\r\n    password: &quot;{{ item.value.password | password_hash(&#039;sha512&#039;) }}&quot;\r\n    shell: &quot;{{ item.value.login_shell }}&quot;\r\n    comment: &quot;{{ item.value.comment }}&quot;\r\n    expires: &quot;{{ item.value.expires }}&quot;\r\n  with_dict: &quot;{{ ansible_users }}&quot;\r\n```\r\n\r\n\r\n## ansible-lint shell command\r\n```bash\r\n# Default command\r\nansible-lint site.yml\r\n```\r\n```python\r\n# docker execから ansible-lint\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &quot; bash -c &#039;cd &quot;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; ansible-lint site.yml&#039;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n## flake8\r\n``` bash\r\n# Default command\r\nflake8 [DIR_NAME FILE_NAME]\r\n```\r\n```python\r\n# docker execから flake8\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &quot; bash -c &#039;cd &quot;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; flake8 tests tests.py deploy deploy.py&#039;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n\r\n## block\r\n```bash\r\n# default command\r\nblack [DIR_NAME FILE_NAME]\r\n```\r\n```python\r\n# docker execから flake8\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &quot; bash -c &#039;cd &quot;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; block tests tests.py deploy deploy.py&#039;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n## testinfra for ansible\r\n```python\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &#039; bash -c &quot;cd &#039;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; py.test -v tests/testinfra.py&quot;\r\n            + &quot; --connection=ssh&quot;\r\n            + &quot; --hosts=&#039;ansible://softether&#039;&quot;\r\n            + &quot; --ansible-inventory=&#039;hosts/&quot;\r\n            + docker_server[&quot;inventory_name&quot;]\r\n            + &quot;_user&#039;\\&quot;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n```python\r\n# Service check\r\ndef test_sshd_running_and_enabled(host):\r\n    &quot;&quot;&quot; Check service sshd  &quot;&quot;&quot;\r\n    service = host.service(&quot;sshd&quot;)\r\n    assert service.is_running\r\n    assert service.is_enabled\r\n\r\n# Port check\r\ndef test_open_port(host):\r\n    &quot;&quot;&quot; Check ports  &quot;&quot;&quot;\r\n    all_variables = host.ansible.get_variables()\r\n    localhost = host.addr(&quot;localhost&quot;)\r\n    # sshd\r\n    assert localhost.port(all_variables[&quot;sshd_port&quot;]).is_reachable\r\n    if all_variables[&quot;sshd_port&quot;] != 22:\r\n        assert not localhost.port(22).is_reachable\r\n    # vpnserver\r\n    assert localhost.port(443).is_reachable\r\n    assert localhost.port(5555).is_reachable\r\n    assert localhost.port(1194).is_reachable\r\n# user check\r\ndef test_ansible_user(host):\r\n    &quot;&quot;&quot; Check exists ansible user  &quot;&quot;&quot;\r\n    all_variables = host.ansible.get_variables()\r\n    for i in all_variables[&quot;ansible_users&quot;].values():\r\n        user = host.user(i[&quot;name&quot;])\r\n        assert user.exists\r\n        assert user.name == i[&quot;name&quot;]\r\n        assert user.shell == i[&quot;login_shell&quot;]\r\n        assert user.home == &quot;/home/&quot; + i[&quot;name&quot;]\r\n\r\n```\r\n## Docker for Ansible test\r\nEnable ssh systemd\r\n### CentOS7\r\n```bash\r\nFROM centos:centos7\r\nVOLUME [ &quot;/sys/fs/cgroup&quot; ]\r\nRUN yum -y update; yum clean all\r\nRUN yum -y install openssh-server passwd; yum clean all\r\nRUN yum install -y which\r\nRUN yum install -y https://repo.ius.io/ius-release-el7.rpm\r\nRUN yum install -y sudo\r\nRUN yum install -y wget\r\nRUN yum install -y curl\r\nRUN yum install -y sshpass\r\nRUN echo &#039;root:password&#039; | chpasswd\r\nRUN mkdir /root/.ssh\r\nRUN touch /root/.ssh/config\r\nRUN echo $&#039;Host *\\n\\\r\n \\tStrictHostKeyChecking no\\n\\\r\n \\n\\\r\nServerAliveInterval 60 \\n\\\r\nServerAliveCountMax 10 \\n &#039;  &gt;&gt; /root/.ssh/config\r\n\r\nRUN chmod 700 /root/.ssh/\r\nRUN chmod 600 /root/.ssh/*\r\n\r\nRUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N &#039;&#039;\r\nENTRYPOINT [&quot;/sbin/init&quot;]\r\n```\r\n\r\n### Ubuntu20.04 \r\n\r\n```bash\r\nFROM ubuntu:20.04\r\nRUN apt-get update &amp;&amp; \\\r\n    apt-get install -y software-properties-common \\\r\n                       tzdata\r\n\r\nRUN apt-add-repository -y ppa:git-core/ppa &amp;&amp; \\\r\n    apt-get update &amp;&amp; \\\r\n    apt-get install -y git \\\r\n                       curl \\\r\n                       openssh-server \\\r\n                       vim \\\r\n                       sudo \\\r\n                       sshpass \\\r\n                       python3-pip\r\nRUN mkdir /root/.ssh\r\nRUN echo &#039;\\n\\\r\nHost *\\n\\\r\n    StrictHostKeyChecking no\\n\\\r\n&#039; &gt;&gt; /root/.ssh/config\r\n\r\nRUN chmod 700 /root/.ssh\r\nRUN chmod 600 /root/.ssh/*\r\n\r\nRUN echo &#039;root:root&#039; | chpasswd\r\nEXPOSE 22\r\nCMD [ &quot;/sbin/init&quot; ]\r\n```\r\n\r\n',588,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/588-revision-v1/',0,'revision','',0),(592,1,'2020-12-14 12:20:03','2020-12-14 03:20:03','','ansible_softether','','inherit','closed','closed','','ansible_softether','','','2020-12-14 12:20:03','2020-12-14 03:20:03','',588,'https://blog.webdimension.jp/wp-content/uploads/2020/12/ansible_softether.jpg',0,'attachment','image/jpeg',0),(593,1,'2020-12-14 12:23:08','2020-12-14 03:23:08','<p><a href=\"https://github.com/WEBDIMENSION/ansible-softether-for-conoha\">GitHub</a></p>\n<h2>inventory_file でのhostの指定を動的にしたい</h2>\n<p>ローカルのDocker上でのテスト, Act(GitHub actionsのローカル版)を利用してのテスト、本番デプロイにおいて inventory_file でのhostの指定を動的にしたい。</p>\n<pre><code class=\"language-python\">## vars-file for docker\nmount_dir: &#039;/softether&#039;\nproject_name: &#039;Ansible-SoftEther-For-Conoha&#039;\ndocker_server:\n  hosts:\n    - host_ip: &quot;127.0.0.1&quot;\n      ssh_port: 2223\n      image_tag: &quot;softether_server&quot;\n      container_tag: &quot;softether001&quot;\n      container_ip: &quot;&quot;\n      dockerfile: &quot;centos7&quot;\n  inventory_name: &quot;docker_server&quot;\ndocker_client:\n  hosts:\n    - host_ip: &quot;127.0.0.1&quot;\n      ssh_port: 2222\n      image_tag: &quot;softether_client&quot;\n      container_tag: &quot;softether_client&quot;\n      container_ip: &quot;&quot;\n      dockerfile: &quot;ubuntu20.04&quot;\n  inventory_name: &quot;docker_client&quot;</code></pre>\n<pre><code class=\"language-python\"># Create inventory\n        hosts_text = &quot;&quot;\n        for i in range(len(docker_server[&quot;hosts&quot;])):\n            cname = str(docker_server[&quot;hosts&quot;][i][&quot;container_tag&quot;])\n            ip = str(docker_server[&quot;hosts&quot;][i][&quot;container_ip&quot;])\n            port = str(docker_server[&quot;hosts&quot;][i][&quot;ssh_port&quot;])\n            hosts_text += str(cname + &quot; ansible_host=&quot; + ip) + &quot;\\n&quot;\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\n        with open(\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_root&quot;, &quot;w&quot;\n        ) as f:\n            f.write(SOFTETHER_INVENTORY_FILE)\n        SOFTETHER_INVENTORY_FILE = (\n            textwrap.dedent(\n                &quot;&quot;&quot;\\\n        [softether]\n        {hosts}\n        [softether:vars]\n        ansible_user={ansible_user}\n        ansible_port={ansible_ssh_port}\n        ansible_ssh_private_key_file={mount_dir}/roles/ansible_user/{key}\\\n        &quot;&quot;&quot;\n            )\n            .format(\n                hosts=hosts_text,\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\n            )\n            .strip()\n        )\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\n        with open(\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_user&quot;, &quot;w&quot;\n        ) as f:\n            f.write(SOFTETHER_INVENTORY_FILE)</code></pre>\n<h2>nofity 設定反映するためServiceをrestartさせる</h2>\n<p>Case in Firewalled</p>\n<pre><code class=\"language-python\"># roles/firewalled/handlers/main.yml\n- name: Restart firewalld\n  become: yes\n  systemd:\n    state: restarted\n    name: firewalld\n    enabled: yes</code></pre>\n<pre><code class=\"language-python\">- name: Open port by firewalld\n  become: yes\n  firewalld:\n    port: &quot;{{ item.port }}&quot;\n    permanent: &quot;{{ item.permanent }}&quot;\n    state: &quot;{{ item.state }}&quot;\n  with_items: &quot;{{ firewalld_ports }}&quot;\n  when: firewalld_ports is defined\n  notify: Restart firewalld # &lt;-  最終的にリスタートさせる</code></pre>\n<h2>Use dict for vars  and loop</h2>\n<pre><code class=\"language-python\">#  dict で書くことにより\nansible_users:\n  master:\n    name: &#039;ansible&#039;\n    groups: &#039;wheel&#039;\n    append: &#039;yes&#039;\n    state: &#039;present&#039;\n    remove: &#039;no&#039;\n    password: &quot;{{ secret.ansible_user_password }}&quot;\n    key: &quot;files/ansible_rsa.pub&quot;\n    secret_key: &quot;files/ansible_rsa&quot;\n    login_shell: &#039;/bin/bash&#039;\n    create_home: &#039;yes&#039;\n    sudo: &#039;present&#039;\n    comment: &#039;ansible user&#039;\n    expires: &#039;-1&#039;</code></pre>\n<pre><code class=\"language-python\">#  指定しやすくなる\n            .format(\n                hosts=hosts_text,\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\n            )\n            .strip()</code></pre>\n<pre><code class=\"language-python\"># playbook では with_dict を使い item.value.xxxになる\n- name: user-control\n  become: true\n  user:\n    name: &quot;{{ item.value.name }}&quot;\n    groups: &quot;{{ item.value.groups }}&quot;\n    state:  &quot;{{ item.value.state }}&quot;\n    remove:  &quot;{{ item.value.remove }}&quot;\n    create_home: &quot;{{ item.value.create_home }}&quot;\n    password: &quot;{{ item.value.password | password_hash(&#039;sha512&#039;) }}&quot;\n    shell: &quot;{{ item.value.login_shell }}&quot;\n    comment: &quot;{{ item.value.comment }}&quot;\n    expires: &quot;{{ item.value.expires }}&quot;\n  with_dict: &quot;{{ ansible_users }}&quot;</code></pre>\n<h2>ansible-lint shell command</h2>\n<pre><code class=\"language-bash\"># Default command\nansible-lint site.yml</code></pre>\n<pre><code class=\"language-python\"># docker execから ansible-lint\n        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &quot; bash -c &#039;cd &quot;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; ansible-lint site.yml&#039;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<h2>flake8</h2>\n<pre><code class=\"language-bash\"># Default command\nflake8 [DIR_NAME FILE_NAME]</code></pre>\n<pre><code class=\"language-python\"># docker execから flake8\n        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &quot; bash -c &#039;cd &quot;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; flake8 tests tests.py deploy deploy.py&#039;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<h2>block</h2>\n<pre><code class=\"language-bash\"># default command\nblack [DIR_NAME FILE_NAME]</code></pre>\n<pre><code class=\"language-python\"># docker execから flake8\n        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &quot; bash -c &#039;cd &quot;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; block tests tests.py deploy deploy.py&#039;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<h2>testinfra for ansible</h2>\n<pre><code class=\"language-python\">        subprocess.run(\n            &quot;docker exec -it &quot;\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\n            + &#039; bash -c &quot;cd &#039;\n            + str(self.vars_docker[&quot;mount_dir&quot;])\n            + &quot; &amp;&amp; py.test -v tests/testinfra.py&quot;\n            + &quot; --connection=ssh&quot;\n            + &quot; --hosts=&#039;ansible://softether&#039;&quot;\n            + &quot; --ansible-inventory=&#039;hosts/&quot;\n            + docker_server[&quot;inventory_name&quot;]\n            + &quot;_user&#039;\\&quot;&quot;,\n            shell=True,\n            check=True,\n        )</code></pre>\n<pre><code class=\"language-python\"># Service check\ndef test_sshd_running_and_enabled(host):\n    &quot;&quot;&quot; Check service sshd  &quot;&quot;&quot;\n    service = host.service(&quot;sshd&quot;)\n    assert service.is_running\n    assert service.is_enabled\n\n# Port check\ndef test_open_port(host):\n    &quot;&quot;&quot; Check ports  &quot;&quot;&quot;\n    all_variables = host.ansible.get_variables()\n    localhost = host.addr(&quot;localhost&quot;)\n    # sshd\n    assert localhost.port(all_variables[&quot;sshd_port&quot;]).is_reachable\n    if all_variables[&quot;sshd_port&quot;] != 22:\n        assert not localhost.port(22).is_reachable\n    # vpnserver\n    assert localhost.port(443).is_reachable\n    assert localhost.port(5555).is_reachable\n    assert localhost.port(1194).is_reachable\n# user check\ndef test_ansible_user(host):\n    &quot;&quot;&quot; Check exists ansible user  &quot;&quot;&quot;\n    all_variables = host.ansible.get_variables()\n    for i in all_variables[&quot;ansible_users&quot;].values():\n        user = host.user(i[&quot;name&quot;])\n        assert user.exists\n        assert user.name == i[&quot;name&quot;]\n        assert user.shell == i[&quot;login_shell&quot;]\n        assert user.home == &quot;/home/&quot; + i[&quot;name&quot;]\n</code></pre>\n<h2>Docker for Ansible test</h2>\n<p>Enable ssh systemd</p>\n<h3>CentOS7</h3>\n<pre><code class=\"language-bash\">FROM centos:centos7\nVOLUME [ &quot;/sys/fs/cgroup&quot; ]\nRUN yum -y update; yum clean all\nRUN yum -y install openssh-server passwd; yum clean all\nRUN yum install -y which\nRUN yum install -y https://repo.ius.io/ius-release-el7.rpm\nRUN yum install -y sudo\nRUN yum install -y wget\nRUN yum install -y curl\nRUN yum install -y sshpass\nRUN echo &#039;root:password&#039; | chpasswd\nRUN mkdir /root/.ssh\nRUN touch /root/.ssh/config\nRUN echo $&#039;Host *\\n\\\n \\tStrictHostKeyChecking no\\n\\\n \\n\\\nServerAliveInterval 60 \\n\\\nServerAliveCountMax 10 \\n &#039;  &gt;&gt; /root/.ssh/config\n\nRUN chmod 700 /root/.ssh/\nRUN chmod 600 /root/.ssh/*\n\nRUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N &#039;&#039;\nENTRYPOINT [&quot;/sbin/init&quot;]</code></pre>\n<h3>Ubuntu20.04</h3>\n<pre><code class=\"language-bash\">FROM ubuntu:20.04\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y software-properties-common \\\n                       tzdata\n\nRUN apt-add-repository -y ppa:git-core/ppa &amp;&amp; \\\n    apt-get update &amp;&amp; \\\n    apt-get install -y git \\\n                       curl \\\n                       openssh-server \\\n                       vim \\\n                       sudo \\\n                       sshpass \\\n                       python3-pip\nRUN mkdir /root/.ssh\nRUN echo &#039;\\n\\\nHost *\\n\\\n    StrictHostKeyChecking no\\n\\\n&#039; &gt;&gt; /root/.ssh/config\n\nRUN chmod 700 /root/.ssh\nRUN chmod 600 /root/.ssh/*\n\nRUN echo &#039;root:root&#039; | chpasswd\nEXPOSE 22\nCMD [ &quot;/sbin/init&quot; ]</code></pre>','VPNサーバー(SoftEhter)をAnsibleでConoha-VPNサーバーへ構築','Conoha API を使いVPN構築を簡略化　の備忘録','inherit','closed','closed','','588-revision-v1','','','2020-12-14 12:23:08','2020-12-14 03:23:08','[GitHub](https://github.com/WEBDIMENSION/ansible-softether-for-conoha)\r\n\r\n## inventory_file でのhostの指定を動的にしたい\r\nローカルのDocker上でのテスト, Act(GitHub actionsのローカル版)を利用してのテスト、本番デプロイにおいて inventory_file でのhostの指定を動的にしたい。\r\n\r\n```python \r\n## vars-file for docker\r\nmount_dir: &#039;/softether&#039;\r\nproject_name: &#039;Ansible-SoftEther-For-Conoha&#039;\r\ndocker_server:\r\n  hosts:\r\n    - host_ip: &quot;127.0.0.1&quot;\r\n      ssh_port: 2223\r\n      image_tag: &quot;softether_server&quot;\r\n      container_tag: &quot;softether001&quot;\r\n      container_ip: &quot;&quot;\r\n      dockerfile: &quot;centos7&quot;\r\n  inventory_name: &quot;docker_server&quot;\r\ndocker_client:\r\n  hosts:\r\n    - host_ip: &quot;127.0.0.1&quot;\r\n      ssh_port: 2222\r\n      image_tag: &quot;softether_client&quot;\r\n      container_tag: &quot;softether_client&quot;\r\n      container_ip: &quot;&quot;\r\n      dockerfile: &quot;ubuntu20.04&quot;\r\n  inventory_name: &quot;docker_client&quot;\r\n```\r\n\r\n```python\r\n# Create inventory\r\n        hosts_text = &quot;&quot;\r\n        for i in range(len(docker_server[&quot;hosts&quot;])):\r\n            cname = str(docker_server[&quot;hosts&quot;][i][&quot;container_tag&quot;])\r\n            ip = str(docker_server[&quot;hosts&quot;][i][&quot;container_ip&quot;])\r\n            port = str(docker_server[&quot;hosts&quot;][i][&quot;ssh_port&quot;])\r\n            hosts_text += str(cname + &quot; ansible_host=&quot; + ip) + &quot;\\n&quot;\r\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\r\n        with open(\r\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_root&quot;, &quot;w&quot;\r\n        ) as f:\r\n            f.write(SOFTETHER_INVENTORY_FILE)\r\n        SOFTETHER_INVENTORY_FILE = (\r\n            textwrap.dedent(\r\n                &quot;&quot;&quot;\\\r\n        [softether]\r\n        {hosts}\r\n        [softether:vars]\r\n        ansible_user={ansible_user}\r\n        ansible_port={ansible_ssh_port}\r\n        ansible_ssh_private_key_file={mount_dir}/roles/ansible_user/{key}\\\r\n        &quot;&quot;&quot;\r\n            )\r\n            .format(\r\n                hosts=hosts_text,\r\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\r\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\r\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\r\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\r\n            )\r\n            .strip()\r\n        )\r\n        os.makedirs(pwd + &quot;/hosts&quot;, exist_ok=True)\r\n        with open(\r\n            pwd + &quot;/hosts/&quot; + docker_server[&quot;inventory_name&quot;] + &quot;_user&quot;, &quot;w&quot;\r\n        ) as f:\r\n            f.write(SOFTETHER_INVENTORY_FILE)\r\n```\r\n## nofity 設定反映するためServiceをrestartさせる\r\n\r\nCase in Firewalled\r\n\r\n```python\r\n# roles/firewalled/handlers/main.yml\r\n- name: Restart firewalld\r\n  become: yes\r\n  systemd:\r\n    state: restarted\r\n    name: firewalld\r\n    enabled: yes\r\n```\r\n\r\n```python \r\n- name: Open port by firewalld\r\n  become: yes\r\n  firewalld:\r\n    port: &quot;{{ item.port }}&quot;\r\n    permanent: &quot;{{ item.permanent }}&quot;\r\n    state: &quot;{{ item.state }}&quot;\r\n  with_items: &quot;{{ firewalld_ports }}&quot;\r\n  when: firewalld_ports is defined\r\n  notify: Restart firewalld # &lt;-  最終的にリスタートさせる\r\n```\r\n\r\n## Use dict for vars  and loop\r\n```python\r\n#  dict で書くことにより\r\nansible_users:\r\n  master:\r\n    name: &#039;ansible&#039;\r\n    groups: &#039;wheel&#039;\r\n    append: &#039;yes&#039;\r\n    state: &#039;present&#039;\r\n    remove: &#039;no&#039;\r\n    password: &quot;{{ secret.ansible_user_password }}&quot;\r\n    key: &quot;files/ansible_rsa.pub&quot;\r\n    secret_key: &quot;files/ansible_rsa&quot;\r\n    login_shell: &#039;/bin/bash&#039;\r\n    create_home: &#039;yes&#039;\r\n    sudo: &#039;present&#039;\r\n    comment: &#039;ansible user&#039;\r\n    expires: &#039;-1&#039;\r\n```\r\n```python\r\n#  指定しやすくなる\r\n            .format(\r\n                hosts=hosts_text,\r\n                ansible_user=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;name&quot;],\r\n                ansible_ssh_port=self.vars_sshd[&quot;sshd_port&quot;],\r\n                mount_dir=self.vars_docker[&quot;mount_dir&quot;],\r\n                key=self.vars_ansible_user[&quot;ansible_users&quot;][&quot;master&quot;][&quot;secret_key&quot;],\r\n            )\r\n            .strip()\r\n```\r\n```python\r\n# playbook では with_dict を使い item.value.xxxになる\r\n- name: user-control\r\n  become: true\r\n  user:\r\n    name: &quot;{{ item.value.name }}&quot;\r\n    groups: &quot;{{ item.value.groups }}&quot;\r\n    state:  &quot;{{ item.value.state }}&quot;\r\n    remove:  &quot;{{ item.value.remove }}&quot;\r\n    create_home: &quot;{{ item.value.create_home }}&quot;\r\n    password: &quot;{{ item.value.password | password_hash(&#039;sha512&#039;) }}&quot;\r\n    shell: &quot;{{ item.value.login_shell }}&quot;\r\n    comment: &quot;{{ item.value.comment }}&quot;\r\n    expires: &quot;{{ item.value.expires }}&quot;\r\n  with_dict: &quot;{{ ansible_users }}&quot;\r\n```\r\n\r\n\r\n## ansible-lint shell command\r\n```bash\r\n# Default command\r\nansible-lint site.yml\r\n```\r\n```python\r\n# docker execから ansible-lint\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &quot; bash -c &#039;cd &quot;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; ansible-lint site.yml&#039;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n## flake8\r\n``` bash\r\n# Default command\r\nflake8 [DIR_NAME FILE_NAME]\r\n```\r\n```python\r\n# docker execから flake8\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &quot; bash -c &#039;cd &quot;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; flake8 tests tests.py deploy deploy.py&#039;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n\r\n## block\r\n```bash\r\n# default command\r\nblack [DIR_NAME FILE_NAME]\r\n```\r\n```python\r\n# docker execから flake8\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &quot; bash -c &#039;cd &quot;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; block tests tests.py deploy deploy.py&#039;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n## testinfra for ansible\r\n```python\r\n        subprocess.run(\r\n            &quot;docker exec -it &quot;\r\n            + docker_client[&quot;hosts&quot;][0][&quot;container_tag&quot;]\r\n            + &#039; bash -c &quot;cd &#039;\r\n            + str(self.vars_docker[&quot;mount_dir&quot;])\r\n            + &quot; &amp;&amp; py.test -v tests/testinfra.py&quot;\r\n            + &quot; --connection=ssh&quot;\r\n            + &quot; --hosts=&#039;ansible://softether&#039;&quot;\r\n            + &quot; --ansible-inventory=&#039;hosts/&quot;\r\n            + docker_server[&quot;inventory_name&quot;]\r\n            + &quot;_user&#039;\\&quot;&quot;,\r\n            shell=True,\r\n            check=True,\r\n        )\r\n```\r\n```python\r\n# Service check\r\ndef test_sshd_running_and_enabled(host):\r\n    &quot;&quot;&quot; Check service sshd  &quot;&quot;&quot;\r\n    service = host.service(&quot;sshd&quot;)\r\n    assert service.is_running\r\n    assert service.is_enabled\r\n\r\n# Port check\r\ndef test_open_port(host):\r\n    &quot;&quot;&quot; Check ports  &quot;&quot;&quot;\r\n    all_variables = host.ansible.get_variables()\r\n    localhost = host.addr(&quot;localhost&quot;)\r\n    # sshd\r\n    assert localhost.port(all_variables[&quot;sshd_port&quot;]).is_reachable\r\n    if all_variables[&quot;sshd_port&quot;] != 22:\r\n        assert not localhost.port(22).is_reachable\r\n    # vpnserver\r\n    assert localhost.port(443).is_reachable\r\n    assert localhost.port(5555).is_reachable\r\n    assert localhost.port(1194).is_reachable\r\n# user check\r\ndef test_ansible_user(host):\r\n    &quot;&quot;&quot; Check exists ansible user  &quot;&quot;&quot;\r\n    all_variables = host.ansible.get_variables()\r\n    for i in all_variables[&quot;ansible_users&quot;].values():\r\n        user = host.user(i[&quot;name&quot;])\r\n        assert user.exists\r\n        assert user.name == i[&quot;name&quot;]\r\n        assert user.shell == i[&quot;login_shell&quot;]\r\n        assert user.home == &quot;/home/&quot; + i[&quot;name&quot;]\r\n\r\n```\r\n## Docker for Ansible test\r\nEnable ssh systemd\r\n### CentOS7\r\n```bash\r\nFROM centos:centos7\r\nVOLUME [ &quot;/sys/fs/cgroup&quot; ]\r\nRUN yum -y update; yum clean all\r\nRUN yum -y install openssh-server passwd; yum clean all\r\nRUN yum install -y which\r\nRUN yum install -y https://repo.ius.io/ius-release-el7.rpm\r\nRUN yum install -y sudo\r\nRUN yum install -y wget\r\nRUN yum install -y curl\r\nRUN yum install -y sshpass\r\nRUN echo &#039;root:password&#039; | chpasswd\r\nRUN mkdir /root/.ssh\r\nRUN touch /root/.ssh/config\r\nRUN echo $&#039;Host *\\n\\\r\n \\tStrictHostKeyChecking no\\n\\\r\n \\n\\\r\nServerAliveInterval 60 \\n\\\r\nServerAliveCountMax 10 \\n &#039;  &gt;&gt; /root/.ssh/config\r\n\r\nRUN chmod 700 /root/.ssh/\r\nRUN chmod 600 /root/.ssh/*\r\n\r\nRUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N &#039;&#039;\r\nENTRYPOINT [&quot;/sbin/init&quot;]\r\n```\r\n\r\n### Ubuntu20.04 \r\n\r\n```bash\r\nFROM ubuntu:20.04\r\nRUN apt-get update &amp;&amp; \\\r\n    apt-get install -y software-properties-common \\\r\n                       tzdata\r\n\r\nRUN apt-add-repository -y ppa:git-core/ppa &amp;&amp; \\\r\n    apt-get update &amp;&amp; \\\r\n    apt-get install -y git \\\r\n                       curl \\\r\n                       openssh-server \\\r\n                       vim \\\r\n                       sudo \\\r\n                       sshpass \\\r\n                       python3-pip\r\nRUN mkdir /root/.ssh\r\nRUN echo &#039;\\n\\\r\nHost *\\n\\\r\n    StrictHostKeyChecking no\\n\\\r\n&#039; &gt;&gt; /root/.ssh/config\r\n\r\nRUN chmod 700 /root/.ssh\r\nRUN chmod 600 /root/.ssh/*\r\n\r\nRUN echo &#039;root:root&#039; | chpasswd\r\nEXPOSE 22\r\nCMD [ &quot;/sbin/init&quot; ]\r\n```\r\n\r\n',588,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/588-revision-v1/',0,'revision','',0),(594,1,'2020-12-14 12:35:34','2020-12-14 03:35:34','<h2>Circle-ci Laravel</h2>\n<p>Make directory (project top)</p>\n<pre><code class=\"language-bash\">mkdir .circle-ci</code></pre>\n<p>Create config.yml</p>\n<pre><code class=\"language-bash\">vim config.yml</code></pre>\n<pre><code class=\"language-yaml\">version: 2\njobs:\n  build:\n    docker:\n      - image: circleci/php:7.2-stretch-node-browsers\n        environment:\n        - APP_URL: http://localhost:8000\n        - APP_DEBUG: true\n        - APP_ENV: testing\n        - APP_KEY: &lt;APP_KEY&gt;\n        - DEV_FAKER_LOCALE: ja_JP\n        - DB_CONNECTION: circleci\n        - MIX_NODE_HOST: &lt;YOUR_HOSTNAME&gt;\n        - MIX_NODE_INTERNAL_HOST: localhost\n        - MIX_NODE_PORT: 3000\n        - REDIS_PORT: 6379\n      - image: circleci/mysql:5.7\n        environment:\n        - MYSQL_ALLOW_EMPTY_PASSWORD: true\n        - MYSQL_ROOT_PASSWORD: root\n        - MYSQL_DATABASE: laravel\n        - MYSQL_USER: laravel\n        - MYSQL_PASSWORD: laravel\n      - image: node:10\n      - image: redis:latest\n      - image: selenium/hub:3.141.59-vanadium\n      - image: selenium/node-chrome:3.141.59-vanadium\n        environment:\n        - HUB_HOST: localhost\n        - HUB_PORT: 4444\n\n    working_directory: ~/repo\n\n    steps:\n      - run:\n          command: chromedriver\n          background: true\n\n      - checkout\n\n      - run:\n          name: install dockerize\n          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n          environment:\n            DOCKERIZE_VERSION: v0.6.1\n\n      - run:\n          name: Install PHP Extensions\n          command: sudo docker-php-ext-install pdo_mysql\n\n      - restore_cache:\n          keys:\n            - v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\n            - v1-dependencies-\n\n      - restore_cache:\n          keys:\n            - v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\n            - v1-node-\n\n      - run:\n          name: npm install\n          working_directory: Laravel/node\n          command: npm install\n\n      - run:\n          name: start node server\n          working_directory: Laravel/node\n          command: node ./bin/node_server.js\n          background: true\n          environment:\n            - CERTS_DIR_PATH:  /home/circleci/repo/docker/node/certs/\n            - REDIS_HOST: 0.0.0.0\n            - REDIS_PORT: 6379\n\n      - run:\n          name: composer install\n          working_directory: Laravel\n          command: composer install -n --prefer-dist\n\n      - save_cache:\n          paths:\n            - ./Laravel/vendor\n          key: v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\n\n      - save_cache:\n          paths:\n            - ./Laravel/node/node_modules\n          key: v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\n\n      - run:\n          name: Wait for db\n          command: dockerize -wait tcp://localhost:3306 -timeout 1m\n\n      - run:\n          name: Migration &amp; Seeding\n          working_directory: Laravel\n          command: php artisan migrate --seed\n\n      - run:\n          name:  Artisan command\n          working_directory: Laravel\n          command: php artisan command:tournament 1\n\n#      - run:\n#          name: Install Chrome Driver\n#          working_directory: Laravel\n#          command: php artisan dusk:chrome-driver\n\n#      - run:\n#          name: Start Chrome Driver\n#          working_directory: Laravel\n#          command: ./vendor/laravel/dusk/bin/chromedriver-linux\n#          background: true\n#\n#      - run:\n#          name: Start Chrome Driver\n#          working_directory: Laravel\n#          command: chmod 775 .vendor/laravel/dusk/bin/* &amp;&amp; ./vendor/laravel/dusk/bin/chromedriver-linux\n#          background: true\n\n      - run:\n          name:  phpcs\n          working_directory: Laravel\n          command: ./vendor/bin/phpcs --standard=phpcs.xml ./\n\n      - run:\n         name: Run Laravel Server\n         working_directory: Laravel\n         command: php artisan serve\n         background: true\n\n      - run:\n          name:  phpunit\n          working_directory: Laravel\n          command: ./vendor/bin/phpunit\n\n#      - run:\n#          name:  Chrome version\n#          working_directory: Laravel\n#          command: google-chrome --version\n#\n#      - run:\n#          name: Top\n#          working_directory: Laravel\n#          command: curl localhost:8000\n#\n      - run:\n          name:  dusk\n          working_directory: Laravel\n          command: php artisan dusk</code></pre>\n<h3>Circle-CI-CLI ( Exec circle-cli on local )</h3>\n<p>Install  for Linux , Mac</p>\n<pre><code class=\"language-bash\">curl -fLSs https://circle.ci/cli | bash</code></pre>\n<p>Ansible tasks</p>\n<pre><code class=\"language-yaml\"># tasks file for circlci\n- name: check installed docker\n  command: bash -lc &quot;circleci --version&quot;\n  register: circleci_exists\n  changed_when: False\n  ignore_errors: yes\n\n- name: Install circleci\n  become: yes\n  get_url:\n    url: &quot;https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci&quot;\n    dest: /usr/local/bin/circleci\n    mode: +x\n  when: circleci_exists is failed\n</code></pre>\n<h3>Varidate</h3>\n<pre><code class=\"language-bash\">circleci config validate -c .circleci/config.yml</code></pre>\n<h3>Exec</h3>\n<pre><code class=\"language-bash\">circleci build .circleci/config.yml</code></pre>','Laravel, CircleCI','laravelをCircleCIの備忘録','publish','closed','open','','laravel_circleci','','','2020-12-14 12:57:08','2020-12-14 03:57:08','## Circle-ci Laravel \r\nMake directory (project top)\r\n```bash\r\nmkdir .circle-ci\r\n```\r\nCreate config.yml\r\n```bash\r\nvim config.yml\r\n```\r\n```yaml\r\nversion: 2\r\njobs:\r\n  build:\r\n    docker:\r\n      - image: circleci/php:7.2-stretch-node-browsers\r\n        environment:\r\n        - APP_URL: http://localhost:8000\r\n        - APP_DEBUG: true\r\n        - APP_ENV: testing\r\n        - APP_KEY: &lt;APP_KEY&gt;\r\n        - DEV_FAKER_LOCALE: ja_JP\r\n        - DB_CONNECTION: circleci\r\n        - MIX_NODE_HOST: &lt;YOUR_HOSTNAME&gt;\r\n        - MIX_NODE_INTERNAL_HOST: localhost\r\n        - MIX_NODE_PORT: 3000\r\n        - REDIS_PORT: 6379\r\n      - image: circleci/mysql:5.7\r\n        environment:\r\n        - MYSQL_ALLOW_EMPTY_PASSWORD: true\r\n        - MYSQL_ROOT_PASSWORD: root\r\n        - MYSQL_DATABASE: laravel\r\n        - MYSQL_USER: laravel\r\n        - MYSQL_PASSWORD: laravel\r\n      - image: node:10\r\n      - image: redis:latest\r\n      - image: selenium/hub:3.141.59-vanadium\r\n      - image: selenium/node-chrome:3.141.59-vanadium\r\n        environment:\r\n        - HUB_HOST: localhost\r\n        - HUB_PORT: 4444\r\n\r\n\r\n    working_directory: ~/repo\r\n\r\n    steps:\r\n      - run:\r\n          command: chromedriver\r\n          background: true\r\n\r\n      - checkout\r\n\r\n      - run:\r\n          name: install dockerize\r\n          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\r\n          environment:\r\n            DOCKERIZE_VERSION: v0.6.1\r\n\r\n      - run:\r\n          name: Install PHP Extensions\r\n          command: sudo docker-php-ext-install pdo_mysql\r\n\r\n      - restore_cache:\r\n          keys:\r\n            - v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\r\n            - v1-dependencies-\r\n\r\n      - restore_cache:\r\n          keys:\r\n            - v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\r\n            - v1-node-\r\n\r\n      - run:\r\n          name: npm install\r\n          working_directory: Laravel/node\r\n          command: npm install\r\n\r\n      - run:\r\n          name: start node server\r\n          working_directory: Laravel/node\r\n          command: node ./bin/node_server.js\r\n          background: true\r\n          environment:\r\n            - CERTS_DIR_PATH:  /home/circleci/repo/docker/node/certs/\r\n            - REDIS_HOST: 0.0.0.0\r\n            - REDIS_PORT: 6379\r\n\r\n      - run:\r\n          name: composer install\r\n          working_directory: Laravel\r\n          command: composer install -n --prefer-dist\r\n\r\n      - save_cache:\r\n          paths:\r\n            - ./Laravel/vendor\r\n          key: v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\r\n\r\n      - save_cache:\r\n          paths:\r\n            - ./Laravel/node/node_modules\r\n          key: v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\r\n\r\n      - run:\r\n          name: Wait for db\r\n          command: dockerize -wait tcp://localhost:3306 -timeout 1m\r\n\r\n      - run:\r\n          name: Migration &amp; Seeding\r\n          working_directory: Laravel\r\n          command: php artisan migrate --seed\r\n\r\n      - run:\r\n          name:  Artisan command\r\n          working_directory: Laravel\r\n          command: php artisan command:tournament 1\r\n\r\n#      - run:\r\n#          name: Install Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: php artisan dusk:chrome-driver\r\n\r\n#      - run:\r\n#          name: Start Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: ./vendor/laravel/dusk/bin/chromedriver-linux\r\n#          background: true\r\n#\r\n#      - run:\r\n#          name: Start Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: chmod 775 .vendor/laravel/dusk/bin/* &amp;&amp; ./vendor/laravel/dusk/bin/chromedriver-linux\r\n#          background: true\r\n\r\n      - run:\r\n          name:  phpcs\r\n          working_directory: Laravel\r\n          command: ./vendor/bin/phpcs --standard=phpcs.xml ./\r\n\r\n      - run:\r\n         name: Run Laravel Server\r\n         working_directory: Laravel\r\n         command: php artisan serve\r\n         background: true\r\n\r\n      - run:\r\n          name:  phpunit\r\n          working_directory: Laravel\r\n          command: ./vendor/bin/phpunit\r\n\r\n#      - run:\r\n#          name:  Chrome version\r\n#          working_directory: Laravel\r\n#          command: google-chrome --version\r\n#\r\n#      - run:\r\n#          name: Top\r\n#          working_directory: Laravel\r\n#          command: curl localhost:8000\r\n#\r\n      - run:\r\n          name:  dusk\r\n          working_directory: Laravel\r\n          command: php artisan dusk\r\n```\r\n\r\n\r\n### Circle-CI-CLI ( Exec circle-cli on local )\r\nInstall  for Linux , Mac\r\n```bash\r\ncurl -fLSs https://circle.ci/cli | bash\r\n```\r\nAnsible tasks\r\n```yaml\r\n# tasks file for circlci\r\n- name: check installed docker\r\n  command: bash -lc &quot;circleci --version&quot;\r\n  register: circleci_exists\r\n  changed_when: False\r\n  ignore_errors: yes\r\n\r\n- name: Install circleci\r\n  become: yes\r\n  get_url:\r\n    url: &quot;https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci&quot;\r\n    dest: /usr/local/bin/circleci\r\n    mode: +x\r\n  when: circleci_exists is failed\r\n\r\n```\r\n\r\n\r\n### Varidate\r\n```bash\r\ncircleci config validate -c .circleci/config.yml\r\n```\r\n### Exec\r\n```bash\r\ncircleci build .circleci/config.yml\r\n```',0,'https://blog.webdimension.jp/?p=594',0,'post','',0),(595,1,'2020-12-14 12:34:52','2020-12-14 03:34:52','<h2>Circle-ci Laravel</h2>\n<p>Make directory (project top)</p>\n<pre><code class=\"language-bash\">mkdir .circle-ci</code></pre>\n<p>Create config.yml</p>\n<pre><code class=\"language-bash\">vim config.ym   l</code></pre>\n<pre><code class=\"language-yaml\">version: 2\njobs:\n  build:\n    docker:\n      - image: circleci/php:7.2-stretch-node-browsers\n        environment:\n        - APP_URL: http://localhost:8000\n        - APP_DEBUG: true\n        - APP_ENV: testing\n        - APP_KEY: &lt;APP_KEY&gt;\n        - DEV_FAKER_LOCALE: ja_JP\n        - DB_CONNECTION: circleci\n        - MIX_NODE_HOST: &lt;YOUR_HOSTNAME&gt;\n        - MIX_NODE_INTERNAL_HOST: localhost\n        - MIX_NODE_PORT: 3000\n        - REDIS_PORT: 6379\n      - image: circleci/mysql:5.7\n        environment:\n        - MYSQL_ALLOW_EMPTY_PASSWORD: true\n        - MYSQL_ROOT_PASSWORD: root\n        - MYSQL_DATABASE: laravel\n        - MYSQL_USER: laravel\n        - MYSQL_PASSWORD: laravel\n      - image: node:10\n      - image: redis:latest\n      - image: selenium/hub:3.141.59-vanadium\n      - image: selenium/node-chrome:3.141.59-vanadium\n        environment:\n        - HUB_HOST: localhost\n        - HUB_PORT: 4444\n\n    working_directory: ~/repo\n\n    steps:\n      - run:\n          command: chromedriver\n          background: true\n\n      - checkout\n\n      - run:\n          name: install dockerize\n          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n          environment:\n            DOCKERIZE_VERSION: v0.6.1\n\n      - run:\n          name: Install PHP Extensions\n          command: sudo docker-php-ext-install pdo_mysql\n\n      - restore_cache:\n          keys:\n            - v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\n            - v1-dependencies-\n\n      - restore_cache:\n          keys:\n            - v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\n            - v1-node-\n\n      - run:\n          name: npm install\n          working_directory: Laravel/node\n          command: npm install\n\n      - run:\n          name: start node server\n          working_directory: Laravel/node\n          command: node ./bin/node_server.js\n          background: true\n          environment:\n            - CERTS_DIR_PATH:  /home/circleci/repo/docker/node/certs/\n            - REDIS_HOST: 0.0.0.0\n            - REDIS_PORT: 6379\n\n      - run:\n          name: composer install\n          working_directory: Laravel\n          command: composer install -n --prefer-dist\n\n      - save_cache:\n          paths:\n            - ./Laravel/vendor\n          key: v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\n\n      - save_cache:\n          paths:\n            - ./Laravel/node/node_modules\n          key: v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\n\n      - run:\n          name: Wait for db\n          command: dockerize -wait tcp://localhost:3306 -timeout 1m\n\n      - run:\n          name: Migration &amp; Seeding\n          working_directory: Laravel\n          command: php artisan migrate --seed\n\n      - run:\n          name:  Artisan command\n          working_directory: Laravel\n          command: php artisan command:tournament 1\n\n#      - run:\n#          name: Install Chrome Driver\n#          working_directory: Laravel\n#          command: php artisan dusk:chrome-driver\n\n#      - run:\n#          name: Start Chrome Driver\n#          working_directory: Laravel\n#          command: ./vendor/laravel/dusk/bin/chromedriver-linux\n#          background: true\n#\n#      - run:\n#          name: Start Chrome Driver\n#          working_directory: Laravel\n#          command: chmod 775 .vendor/laravel/dusk/bin/* &amp;&amp; ./vendor/laravel/dusk/bin/chromedriver-linux\n#          background: true\n\n      - run:\n          name:  phpcs\n          working_directory: Laravel\n          command: ./vendor/bin/phpcs --standard=phpcs.xml ./\n\n      - run:\n         name: Run Laravel Server\n         working_directory: Laravel\n         command: php artisan serve\n         background: true\n\n      - run:\n          name:  phpunit\n          working_directory: Laravel\n          command: ./vendor/bin/phpunit\n\n#      - run:\n#          name:  Chrome version\n#          working_directory: Laravel\n#          command: google-chrome --version\n#\n#      - run:\n#          name: Top\n#          working_directory: Laravel\n#          command: curl localhost:8000\n#\n      - run:\n          name:  dusk\n          working_directory: Laravel\n          command: php artisan dusk</code></pre>\n<h3>Circle-CI-CLI ( Exec circle-cli on local )</h3>\n<p>Install  for Linux , Mac</p>\n<pre><code class=\"language-bash\">curl -fLSs https://circle.ci/cli | bash</code></pre>\n<p>Ansible tasks</p>\n<pre><code class=\"language-yaml\"># tasks file for circlci\n- name: check installed docker\n  command: bash -lc &quot;circleci --version&quot;\n  register: circleci_exists\n  changed_when: False\n  ignore_errors: yes\n\n- name: Install circleci\n  become: yes\n  get_url:\n    url: &quot;https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci&quot;\n    dest: /usr/local/bin/circleci\n    mode: +x\n  when: circleci_exists is failed\n</code></pre>\n<h3>Varidate</h3>\n<pre><code class=\"language-bash\">circleci config validate -c .circleci/config.yml</code></pre>\n<h3>Exec</h3>\n<pre><code class=\"language-bash\">circleci build .circleci/config.yml</code></pre>','Laravel, CircleCI','laravelをCircleCIの備忘録','inherit','closed','closed','','594-revision-v1','','','2020-12-14 12:34:52','2020-12-14 03:34:52','## Circle-ci Laravel \r\nMake directory (project top)\r\n```bash\r\nmkdir .circle-ci\r\n```\r\nCreate config.yml\r\n```bash\r\nvim config.ym	l\r\n```\r\n```yaml\r\nversion: 2\r\njobs:\r\n  build:\r\n    docker:\r\n      - image: circleci/php:7.2-stretch-node-browsers\r\n        environment:\r\n        - APP_URL: http://localhost:8000\r\n        - APP_DEBUG: true\r\n        - APP_ENV: testing\r\n        - APP_KEY: &lt;APP_KEY&gt;\r\n        - DEV_FAKER_LOCALE: ja_JP\r\n        - DB_CONNECTION: circleci\r\n        - MIX_NODE_HOST: &lt;YOUR_HOSTNAME&gt;\r\n        - MIX_NODE_INTERNAL_HOST: localhost\r\n        - MIX_NODE_PORT: 3000\r\n        - REDIS_PORT: 6379\r\n      - image: circleci/mysql:5.7\r\n        environment:\r\n        - MYSQL_ALLOW_EMPTY_PASSWORD: true\r\n        - MYSQL_ROOT_PASSWORD: root\r\n        - MYSQL_DATABASE: laravel\r\n        - MYSQL_USER: laravel\r\n        - MYSQL_PASSWORD: laravel\r\n      - image: node:10\r\n      - image: redis:latest\r\n      - image: selenium/hub:3.141.59-vanadium\r\n      - image: selenium/node-chrome:3.141.59-vanadium\r\n        environment:\r\n        - HUB_HOST: localhost\r\n        - HUB_PORT: 4444\r\n\r\n\r\n    working_directory: ~/repo\r\n\r\n    steps:\r\n      - run:\r\n          command: chromedriver\r\n          background: true\r\n\r\n      - checkout\r\n\r\n      - run:\r\n          name: install dockerize\r\n          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\r\n          environment:\r\n            DOCKERIZE_VERSION: v0.6.1\r\n\r\n      - run:\r\n          name: Install PHP Extensions\r\n          command: sudo docker-php-ext-install pdo_mysql\r\n\r\n      - restore_cache:\r\n          keys:\r\n            - v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\r\n            - v1-dependencies-\r\n\r\n      - restore_cache:\r\n          keys:\r\n            - v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\r\n            - v1-node-\r\n\r\n      - run:\r\n          name: npm install\r\n          working_directory: Laravel/node\r\n          command: npm install\r\n\r\n      - run:\r\n          name: start node server\r\n          working_directory: Laravel/node\r\n          command: node ./bin/node_server.js\r\n          background: true\r\n          environment:\r\n            - CERTS_DIR_PATH:  /home/circleci/repo/docker/node/certs/\r\n            - REDIS_HOST: 0.0.0.0\r\n            - REDIS_PORT: 6379\r\n\r\n      - run:\r\n          name: composer install\r\n          working_directory: Laravel\r\n          command: composer install -n --prefer-dist\r\n\r\n      - save_cache:\r\n          paths:\r\n            - ./Laravel/vendor\r\n          key: v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\r\n\r\n      - save_cache:\r\n          paths:\r\n            - ./Laravel/node/node_modules\r\n          key: v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\r\n\r\n      - run:\r\n          name: Wait for db\r\n          command: dockerize -wait tcp://localhost:3306 -timeout 1m\r\n\r\n      - run:\r\n          name: Migration &amp; Seeding\r\n          working_directory: Laravel\r\n          command: php artisan migrate --seed\r\n\r\n      - run:\r\n          name:  Artisan command\r\n          working_directory: Laravel\r\n          command: php artisan command:tournament 1\r\n\r\n#      - run:\r\n#          name: Install Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: php artisan dusk:chrome-driver\r\n\r\n#      - run:\r\n#          name: Start Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: ./vendor/laravel/dusk/bin/chromedriver-linux\r\n#          background: true\r\n#\r\n#      - run:\r\n#          name: Start Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: chmod 775 .vendor/laravel/dusk/bin/* &amp;&amp; ./vendor/laravel/dusk/bin/chromedriver-linux\r\n#          background: true\r\n\r\n      - run:\r\n          name:  phpcs\r\n          working_directory: Laravel\r\n          command: ./vendor/bin/phpcs --standard=phpcs.xml ./\r\n\r\n      - run:\r\n         name: Run Laravel Server\r\n         working_directory: Laravel\r\n         command: php artisan serve\r\n         background: true\r\n\r\n      - run:\r\n          name:  phpunit\r\n          working_directory: Laravel\r\n          command: ./vendor/bin/phpunit\r\n\r\n#      - run:\r\n#          name:  Chrome version\r\n#          working_directory: Laravel\r\n#          command: google-chrome --version\r\n#\r\n#      - run:\r\n#          name: Top\r\n#          working_directory: Laravel\r\n#          command: curl localhost:8000\r\n#\r\n      - run:\r\n          name:  dusk\r\n          working_directory: Laravel\r\n          command: php artisan dusk\r\n```\r\n\r\n\r\n### Circle-CI-CLI ( Exec circle-cli on local )\r\nInstall  for Linux , Mac\r\n```bash\r\ncurl -fLSs https://circle.ci/cli | bash\r\n```\r\nAnsible tasks\r\n```yaml\r\n# tasks file for circlci\r\n- name: check installed docker\r\n  command: bash -lc &quot;circleci --version&quot;\r\n  register: circleci_exists\r\n  changed_when: False\r\n  ignore_errors: yes\r\n\r\n- name: Install circleci\r\n  become: yes\r\n  get_url:\r\n    url: &quot;https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci&quot;\r\n    dest: /usr/local/bin/circleci\r\n    mode: +x\r\n  when: circleci_exists is failed\r\n\r\n```\r\n\r\n\r\n### Varidate\r\n```bash\r\ncircleci config validate -c .circleci/config.yml\r\n```\r\n### Exec\r\n```bash\r\ncircleci build .circleci/config.yml\r\n```',594,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/594-revision-v1/',0,'revision','',0),(596,1,'2020-12-14 12:35:34','2020-12-14 03:35:34','<p>f## Circle-ci Laravel\nMake directory (project top)</p>\n<pre><code class=\"language-bash\">mkdir .circle-ci</code></pre>\n<p>Create config.yml</p>\n<pre><code class=\"language-bash\">vim config.ym   l</code></pre>\n<pre><code class=\"language-yaml\">version: 2\njobs:\n  build:\n    docker:\n      - image: circleci/php:7.2-stretch-node-browsers\n        environment:\n        - APP_URL: http://localhost:8000\n        - APP_DEBUG: true\n        - APP_ENV: testing\n        - APP_KEY: &lt;APP_KEY&gt;\n        - DEV_FAKER_LOCALE: ja_JP\n        - DB_CONNECTION: circleci\n        - MIX_NODE_HOST: &lt;YOUR_HOSTNAME&gt;\n        - MIX_NODE_INTERNAL_HOST: localhost\n        - MIX_NODE_PORT: 3000\n        - REDIS_PORT: 6379\n      - image: circleci/mysql:5.7\n        environment:\n        - MYSQL_ALLOW_EMPTY_PASSWORD: true\n        - MYSQL_ROOT_PASSWORD: root\n        - MYSQL_DATABASE: laravel\n        - MYSQL_USER: laravel\n        - MYSQL_PASSWORD: laravel\n      - image: node:10\n      - image: redis:latest\n      - image: selenium/hub:3.141.59-vanadium\n      - image: selenium/node-chrome:3.141.59-vanadium\n        environment:\n        - HUB_HOST: localhost\n        - HUB_PORT: 4444\n\n    working_directory: ~/repo\n\n    steps:\n      - run:\n          command: chromedriver\n          background: true\n\n      - checkout\n\n      - run:\n          name: install dockerize\n          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n          environment:\n            DOCKERIZE_VERSION: v0.6.1\n\n      - run:\n          name: Install PHP Extensions\n          command: sudo docker-php-ext-install pdo_mysql\n\n      - restore_cache:\n          keys:\n            - v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\n            - v1-dependencies-\n\n      - restore_cache:\n          keys:\n            - v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\n            - v1-node-\n\n      - run:\n          name: npm install\n          working_directory: Laravel/node\n          command: npm install\n\n      - run:\n          name: start node server\n          working_directory: Laravel/node\n          command: node ./bin/node_server.js\n          background: true\n          environment:\n            - CERTS_DIR_PATH:  /home/circleci/repo/docker/node/certs/\n            - REDIS_HOST: 0.0.0.0\n            - REDIS_PORT: 6379\n\n      - run:\n          name: composer install\n          working_directory: Laravel\n          command: composer install -n --prefer-dist\n\n      - save_cache:\n          paths:\n            - ./Laravel/vendor\n          key: v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\n\n      - save_cache:\n          paths:\n            - ./Laravel/node/node_modules\n          key: v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\n\n      - run:\n          name: Wait for db\n          command: dockerize -wait tcp://localhost:3306 -timeout 1m\n\n      - run:\n          name: Migration &amp; Seeding\n          working_directory: Laravel\n          command: php artisan migrate --seed\n\n      - run:\n          name:  Artisan command\n          working_directory: Laravel\n          command: php artisan command:tournament 1\n\n#      - run:\n#          name: Install Chrome Driver\n#          working_directory: Laravel\n#          command: php artisan dusk:chrome-driver\n\n#      - run:\n#          name: Start Chrome Driver\n#          working_directory: Laravel\n#          command: ./vendor/laravel/dusk/bin/chromedriver-linux\n#          background: true\n#\n#      - run:\n#          name: Start Chrome Driver\n#          working_directory: Laravel\n#          command: chmod 775 .vendor/laravel/dusk/bin/* &amp;&amp; ./vendor/laravel/dusk/bin/chromedriver-linux\n#          background: true\n\n      - run:\n          name:  phpcs\n          working_directory: Laravel\n          command: ./vendor/bin/phpcs --standard=phpcs.xml ./\n\n      - run:\n         name: Run Laravel Server\n         working_directory: Laravel\n         command: php artisan serve\n         background: true\n\n      - run:\n          name:  phpunit\n          working_directory: Laravel\n          command: ./vendor/bin/phpunit\n\n#      - run:\n#          name:  Chrome version\n#          working_directory: Laravel\n#          command: google-chrome --version\n#\n#      - run:\n#          name: Top\n#          working_directory: Laravel\n#          command: curl localhost:8000\n#\n      - run:\n          name:  dusk\n          working_directory: Laravel\n          command: php artisan dusk</code></pre>\n<h3>Circle-CI-CLI ( Exec circle-cli on local )</h3>\n<p>Install  for Linux , Mac</p>\n<pre><code class=\"language-bash\">curl -fLSs https://circle.ci/cli | bash</code></pre>\n<p>Ansible tasks</p>\n<pre><code class=\"language-yaml\"># tasks file for circlci\n- name: check installed docker\n  command: bash -lc &quot;circleci --version&quot;\n  register: circleci_exists\n  changed_when: False\n  ignore_errors: yes\n\n- name: Install circleci\n  become: yes\n  get_url:\n    url: &quot;https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci&quot;\n    dest: /usr/local/bin/circleci\n    mode: +x\n  when: circleci_exists is failed\n</code></pre>\n<h3>Varidate</h3>\n<pre><code class=\"language-bash\">circleci config validate -c .circleci/config.yml</code></pre>\n<h3>Exec</h3>\n<pre><code class=\"language-bash\">circleci build .circleci/config.yml</code></pre>','Laravel, CircleCI','laravelをCircleCIの備忘録','inherit','closed','closed','','594-revision-v1','','','2020-12-14 12:35:34','2020-12-14 03:35:34','f## Circle-ci Laravel \r\nMake directory (project top)\r\n```bash\r\nmkdir .circle-ci\r\n```\r\nCreate config.yml\r\n```bash\r\nvim config.ym	l\r\n```\r\n```yaml\r\nversion: 2\r\njobs:\r\n  build:\r\n    docker:\r\n      - image: circleci/php:7.2-stretch-node-browsers\r\n        environment:\r\n        - APP_URL: http://localhost:8000\r\n        - APP_DEBUG: true\r\n        - APP_ENV: testing\r\n        - APP_KEY: &lt;APP_KEY&gt;\r\n        - DEV_FAKER_LOCALE: ja_JP\r\n        - DB_CONNECTION: circleci\r\n        - MIX_NODE_HOST: &lt;YOUR_HOSTNAME&gt;\r\n        - MIX_NODE_INTERNAL_HOST: localhost\r\n        - MIX_NODE_PORT: 3000\r\n        - REDIS_PORT: 6379\r\n      - image: circleci/mysql:5.7\r\n        environment:\r\n        - MYSQL_ALLOW_EMPTY_PASSWORD: true\r\n        - MYSQL_ROOT_PASSWORD: root\r\n        - MYSQL_DATABASE: laravel\r\n        - MYSQL_USER: laravel\r\n        - MYSQL_PASSWORD: laravel\r\n      - image: node:10\r\n      - image: redis:latest\r\n      - image: selenium/hub:3.141.59-vanadium\r\n      - image: selenium/node-chrome:3.141.59-vanadium\r\n        environment:\r\n        - HUB_HOST: localhost\r\n        - HUB_PORT: 4444\r\n\r\n\r\n    working_directory: ~/repo\r\n\r\n    steps:\r\n      - run:\r\n          command: chromedriver\r\n          background: true\r\n\r\n      - checkout\r\n\r\n      - run:\r\n          name: install dockerize\r\n          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\r\n          environment:\r\n            DOCKERIZE_VERSION: v0.6.1\r\n\r\n      - run:\r\n          name: Install PHP Extensions\r\n          command: sudo docker-php-ext-install pdo_mysql\r\n\r\n      - restore_cache:\r\n          keys:\r\n            - v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\r\n            - v1-dependencies-\r\n\r\n      - restore_cache:\r\n          keys:\r\n            - v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\r\n            - v1-node-\r\n\r\n      - run:\r\n          name: npm install\r\n          working_directory: Laravel/node\r\n          command: npm install\r\n\r\n      - run:\r\n          name: start node server\r\n          working_directory: Laravel/node\r\n          command: node ./bin/node_server.js\r\n          background: true\r\n          environment:\r\n            - CERTS_DIR_PATH:  /home/circleci/repo/docker/node/certs/\r\n            - REDIS_HOST: 0.0.0.0\r\n            - REDIS_PORT: 6379\r\n\r\n      - run:\r\n          name: composer install\r\n          working_directory: Laravel\r\n          command: composer install -n --prefer-dist\r\n\r\n      - save_cache:\r\n          paths:\r\n            - ./Laravel/vendor\r\n          key: v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\r\n\r\n      - save_cache:\r\n          paths:\r\n            - ./Laravel/node/node_modules\r\n          key: v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\r\n\r\n      - run:\r\n          name: Wait for db\r\n          command: dockerize -wait tcp://localhost:3306 -timeout 1m\r\n\r\n      - run:\r\n          name: Migration &amp; Seeding\r\n          working_directory: Laravel\r\n          command: php artisan migrate --seed\r\n\r\n      - run:\r\n          name:  Artisan command\r\n          working_directory: Laravel\r\n          command: php artisan command:tournament 1\r\n\r\n#      - run:\r\n#          name: Install Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: php artisan dusk:chrome-driver\r\n\r\n#      - run:\r\n#          name: Start Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: ./vendor/laravel/dusk/bin/chromedriver-linux\r\n#          background: true\r\n#\r\n#      - run:\r\n#          name: Start Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: chmod 775 .vendor/laravel/dusk/bin/* &amp;&amp; ./vendor/laravel/dusk/bin/chromedriver-linux\r\n#          background: true\r\n\r\n      - run:\r\n          name:  phpcs\r\n          working_directory: Laravel\r\n          command: ./vendor/bin/phpcs --standard=phpcs.xml ./\r\n\r\n      - run:\r\n         name: Run Laravel Server\r\n         working_directory: Laravel\r\n         command: php artisan serve\r\n         background: true\r\n\r\n      - run:\r\n          name:  phpunit\r\n          working_directory: Laravel\r\n          command: ./vendor/bin/phpunit\r\n\r\n#      - run:\r\n#          name:  Chrome version\r\n#          working_directory: Laravel\r\n#          command: google-chrome --version\r\n#\r\n#      - run:\r\n#          name: Top\r\n#          working_directory: Laravel\r\n#          command: curl localhost:8000\r\n#\r\n      - run:\r\n          name:  dusk\r\n          working_directory: Laravel\r\n          command: php artisan dusk\r\n```\r\n\r\n\r\n### Circle-CI-CLI ( Exec circle-cli on local )\r\nInstall  for Linux , Mac\r\n```bash\r\ncurl -fLSs https://circle.ci/cli | bash\r\n```\r\nAnsible tasks\r\n```yaml\r\n# tasks file for circlci\r\n- name: check installed docker\r\n  command: bash -lc &quot;circleci --version&quot;\r\n  register: circleci_exists\r\n  changed_when: False\r\n  ignore_errors: yes\r\n\r\n- name: Install circleci\r\n  become: yes\r\n  get_url:\r\n    url: &quot;https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci&quot;\r\n    dest: /usr/local/bin/circleci\r\n    mode: +x\r\n  when: circleci_exists is failed\r\n\r\n```\r\n\r\n\r\n### Varidate\r\n```bash\r\ncircleci config validate -c .circleci/config.yml\r\n```\r\n### Exec\r\n```bash\r\ncircleci build .circleci/config.yml\r\n```',594,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/594-revision-v1/',0,'revision','',0),(597,1,'2020-12-14 12:57:32','2020-12-14 03:57:32','<h2>Circle-ci Laravel</h2>\n<p>Make directory (project top)</p>\n<pre><code class=\"language-bash\">mkdir .circle-ci</code></pre>\n<p>Create config.yml</p>\n<pre><code class=\"language-bash\">vim config.yml</code></pre>\n<pre><code class=\"language-yaml\">version: 2\njobs:\n  build:\n    docker:\n      - image: circleci/php:7.2-stretch-node-browsers\n        environment:\n        - APP_URL: http://localhost:8000\n        - APP_DEBUG: true\n        - APP_ENV: testing\n        - APP_KEY: &lt;APP_KEY&gt;\n        - DEV_FAKER_LOCALE: ja_JP\n        - DB_CONNECTION: circleci\n        - MIX_NODE_HOST: &lt;YOUR_HOSTNAME&gt;\n        - MIX_NODE_INTERNAL_HOST: localhost\n        - MIX_NODE_PORT: 3000\n        - REDIS_PORT: 6379\n      - image: circleci/mysql:5.7\n        environment:\n        - MYSQL_ALLOW_EMPTY_PASSWORD: true\n        - MYSQL_ROOT_PASSWORD: root\n        - MYSQL_DATABASE: laravel\n        - MYSQL_USER: laravel\n        - MYSQL_PASSWORD: laravel\n      - image: node:10\n      - image: redis:latest\n      - image: selenium/hub:3.141.59-vanadium\n      - image: selenium/node-chrome:3.141.59-vanadium\n        environment:\n        - HUB_HOST: localhost\n        - HUB_PORT: 4444\n\n    working_directory: ~/repo\n\n    steps:\n      - run:\n          command: chromedriver\n          background: true\n\n      - checkout\n\n      - run:\n          name: install dockerize\n          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n          environment:\n            DOCKERIZE_VERSION: v0.6.1\n\n      - run:\n          name: Install PHP Extensions\n          command: sudo docker-php-ext-install pdo_mysql\n\n      - restore_cache:\n          keys:\n            - v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\n            - v1-dependencies-\n\n      - restore_cache:\n          keys:\n            - v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\n            - v1-node-\n\n      - run:\n          name: npm install\n          working_directory: Laravel/node\n          command: npm install\n\n      - run:\n          name: start node server\n          working_directory: Laravel/node\n          command: node ./bin/node_server.js\n          background: true\n          environment:\n            - CERTS_DIR_PATH:  /home/circleci/repo/docker/node/certs/\n            - REDIS_HOST: 0.0.0.0\n            - REDIS_PORT: 6379\n\n      - run:\n          name: composer install\n          working_directory: Laravel\n          command: composer install -n --prefer-dist\n\n      - save_cache:\n          paths:\n            - ./Laravel/vendor\n          key: v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\n\n      - save_cache:\n          paths:\n            - ./Laravel/node/node_modules\n          key: v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\n\n      - run:\n          name: Wait for db\n          command: dockerize -wait tcp://localhost:3306 -timeout 1m\n\n      - run:\n          name: Migration &amp; Seeding\n          working_directory: Laravel\n          command: php artisan migrate --seed\n\n      - run:\n          name:  Artisan command\n          working_directory: Laravel\n          command: php artisan command:tournament 1\n\n#      - run:\n#          name: Install Chrome Driver\n#          working_directory: Laravel\n#          command: php artisan dusk:chrome-driver\n\n#      - run:\n#          name: Start Chrome Driver\n#          working_directory: Laravel\n#          command: ./vendor/laravel/dusk/bin/chromedriver-linux\n#          background: true\n#\n#      - run:\n#          name: Start Chrome Driver\n#          working_directory: Laravel\n#          command: chmod 775 .vendor/laravel/dusk/bin/* &amp;&amp; ./vendor/laravel/dusk/bin/chromedriver-linux\n#          background: true\n\n      - run:\n          name:  phpcs\n          working_directory: Laravel\n          command: ./vendor/bin/phpcs --standard=phpcs.xml ./\n\n      - run:\n         name: Run Laravel Server\n         working_directory: Laravel\n         command: php artisan serve\n         background: true\n\n      - run:\n          name:  phpunit\n          working_directory: Laravel\n          command: ./vendor/bin/phpunit\n\n#      - run:\n#          name:  Chrome version\n#          working_directory: Laravel\n#          command: google-chrome --version\n#\n#      - run:\n#          name: Top\n#          working_directory: Laravel\n#          command: curl localhost:8000\n#\n      - run:\n          name:  dusk\n          working_directory: Laravel\n          command: php artisan dusk</code></pre>\n<h3>Circle-CI-CLI ( Exec circle-cli on local )</h3>\n<p>Install  for Linux , Mac</p>\n<pre><code class=\"language-bash\">curl -fLSs https://circle.ci/cli | bash</code></pre>\n<p>Ansible tasks</p>\n<pre><code class=\"language-yaml\"># tasks file for circlci\n- name: check installed docker\n  command: bash -lc &quot;circleci --version&quot;\n  register: circleci_exists\n  changed_when: False\n  ignore_errors: yes\n\n- name: Install circleci\n  become: yes\n  get_url:\n    url: &quot;https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci&quot;\n    dest: /usr/local/bin/circleci\n    mode: +x\n  when: circleci_exists is failed\n</code></pre>\n<h3>Varidate</h3>\n<pre><code class=\"language-bash\">circleci config validate -c .circleci/config.yml</code></pre>\n<h3>Exec</h3>\n<pre><code class=\"language-bash\">circleci build .circleci/config.yml</code></pre>','Laravel, CircleCI','laravelをCircleCIの備忘録','inherit','closed','closed','','594-autosave-v1','','','2020-12-14 12:57:32','2020-12-14 03:57:32','## Circle-ci Laravel \r\nMake directory (project top)\r\n```bash\r\nmkdir .circle-ci\r\n```\r\nCreate config.yml\r\n```bash\r\nvim config.yml\r\n```\r\n```yaml\r\nversion: 2\r\njobs:\r\n  build:\r\n    docker:\r\n      - image: circleci/php:7.2-stretch-node-browsers\r\n        environment:\r\n        - APP_URL: http://localhost:8000\r\n        - APP_DEBUG: true\r\n        - APP_ENV: testing\r\n        - APP_KEY: &lt;APP_KEY&gt;\r\n        - DEV_FAKER_LOCALE: ja_JP\r\n        - DB_CONNECTION: circleci\r\n        - MIX_NODE_HOST: &lt;YOUR_HOSTNAME&gt;\r\n        - MIX_NODE_INTERNAL_HOST: localhost\r\n        - MIX_NODE_PORT: 3000\r\n        - REDIS_PORT: 6379\r\n      - image: circleci/mysql:5.7\r\n        environment:\r\n        - MYSQL_ALLOW_EMPTY_PASSWORD: true\r\n        - MYSQL_ROOT_PASSWORD: root\r\n        - MYSQL_DATABASE: laravel\r\n        - MYSQL_USER: laravel\r\n        - MYSQL_PASSWORD: laravel\r\n      - image: node:10\r\n      - image: redis:latest\r\n      - image: selenium/hub:3.141.59-vanadium\r\n      - image: selenium/node-chrome:3.141.59-vanadium\r\n        environment:\r\n        - HUB_HOST: localhost\r\n        - HUB_PORT: 4444\r\n\r\n\r\n    working_directory: ~/repo\r\n\r\n    steps:\r\n      - run:\r\n          command: chromedriver\r\n          background: true\r\n\r\n      - checkout\r\n\r\n      - run:\r\n          name: install dockerize\r\n          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\r\n          environment:\r\n            DOCKERIZE_VERSION: v0.6.1\r\n\r\n      - run:\r\n          name: Install PHP Extensions\r\n          command: sudo docker-php-ext-install pdo_mysql\r\n\r\n      - restore_cache:\r\n          keys:\r\n            - v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\r\n            - v1-dependencies-\r\n\r\n      - restore_cache:\r\n          keys:\r\n            - v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\r\n            - v1-node-\r\n\r\n      - run:\r\n          name: npm install\r\n          working_directory: Laravel/node\r\n          command: npm install\r\n\r\n      - run:\r\n          name: start node server\r\n          working_directory: Laravel/node\r\n          command: node ./bin/node_server.js\r\n          background: true\r\n          environment:\r\n            - CERTS_DIR_PATH:  /home/circleci/repo/docker/node/certs/\r\n            - REDIS_HOST: 0.0.0.0\r\n            - REDIS_PORT: 6379\r\n\r\n      - run:\r\n          name: composer install\r\n          working_directory: Laravel\r\n          command: composer install -n --prefer-dist\r\n\r\n      - save_cache:\r\n          paths:\r\n            - ./Laravel/vendor\r\n          key: v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\r\n\r\n      - save_cache:\r\n          paths:\r\n            - ./Laravel/node/node_modules\r\n          key: v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\r\n\r\n      - run:\r\n          name: Wait for db\r\n          command: dockerize -wait tcp://localhost:3306 -timeout 1m\r\n\r\n      - run:\r\n          name: Migration &amp; Seeding\r\n          working_directory: Laravel\r\n          command: php artisan migrate --seed\r\n\r\n      - run:\r\n          name:  Artisan command\r\n          working_directory: Laravel\r\n          command: php artisan command:tournament 1\r\n\r\n#      - run:\r\n#          name: Install Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: php artisan dusk:chrome-driver\r\n\r\n#      - run:\r\n#          name: Start Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: ./vendor/laravel/dusk/bin/chromedriver-linux\r\n#          background: true\r\n#\r\n#      - run:\r\n#          name: Start Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: chmod 775 .vendor/laravel/dusk/bin/* &amp;&amp; ./vendor/laravel/dusk/bin/chromedriver-linux\r\n#          background: true\r\n\r\n      - run:\r\n          name:  phpcs\r\n          working_directory: Laravel\r\n          command: ./vendor/bin/phpcs --standard=phpcs.xml ./\r\n\r\n      - run:\r\n         name: Run Laravel Server\r\n         working_directory: Laravel\r\n         command: php artisan serve\r\n         background: true\r\n\r\n      - run:\r\n          name:  phpunit\r\n          working_directory: Laravel\r\n          command: ./vendor/bin/phpunit\r\n\r\n#      - run:\r\n#          name:  Chrome version\r\n#          working_directory: Laravel\r\n#          command: google-chrome --version\r\n#\r\n#      - run:\r\n#          name: Top\r\n#          working_directory: Laravel\r\n#          command: curl localhost:8000\r\n#\r\n      - run:\r\n          name:  dusk\r\n          working_directory: Laravel\r\n          command: php artisan dusk\r\n```\r\n\r\n\r\n### Circle-CI-CLI ( Exec circle-cli on local )\r\nInstall  for Linux , Mac\r\n```bash\r\ncurl -fLSs https://circle.ci/cli | bash\r\n```\r\nAnsible tasks\r\n```yaml\r\n# tasks file for circlci\r\n- name: check installed docker\r\n  command: bash -lc &quot;circleci --version&quot;\r\n  register: circleci_exists\r\n  changed_when: False\r\n  ignore_errors: yes\r\n\r\n- name: Install circleci\r\n  become: yes\r\n  get_url:\r\n    url: &quot;https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci&quot;\r\n    dest: /usr/local/bin/circleci\r\n    mode: +x\r\n  when: circleci_exists is failed\r\n\r\n```\r\n\r\n\r\n### Varidate\r\n```bash\r\ncircleci config validate -c .circleci/config.yml\r\n```\r\n### Exec\r\n```bash\r\ncircleci build .circleci/config.yml\r\n```',594,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/594-autosave-v1/',0,'revision','',0),(598,1,'2020-12-14 12:52:30','2020-12-14 03:52:30','','laravel_circle_ci','','inherit','closed','closed','','laravel_circle_ci','','','2020-12-14 12:52:30','2020-12-14 03:52:30','',594,'https://blog.webdimension.jp/wp-content/uploads/2020/12/laravel_circle_ci.png',0,'attachment','image/png',0),(599,1,'2020-12-14 12:55:07','2020-12-14 03:55:07','<h2>Circle-ci Laravel</h2>\n<p>Make directory (project top)</p>\n<pre><code>bash\nmkdir .circle-ci</code></pre>\n<p>Create config.yml</p>\n<pre><code class=\"language-bash\">vim config.yml</code></pre>\n<pre><code class=\"language-yaml\">version: 2\njobs:\n  build:\n    docker:\n      - image: circleci/php:7.2-stretch-node-browsers\n        environment:\n        - APP_URL: http://localhost:8000\n        - APP_DEBUG: true\n        - APP_ENV: testing\n        - APP_KEY: &lt;APP_KEY&gt;\n        - DEV_FAKER_LOCALE: ja_JP\n        - DB_CONNECTION: circleci\n        - MIX_NODE_HOST: &lt;YOUR_HOSTNAME&gt;\n        - MIX_NODE_INTERNAL_HOST: localhost\n        - MIX_NODE_PORT: 3000\n        - REDIS_PORT: 6379\n      - image: circleci/mysql:5.7\n        environment:\n        - MYSQL_ALLOW_EMPTY_PASSWORD: true\n        - MYSQL_ROOT_PASSWORD: root\n        - MYSQL_DATABASE: laravel\n        - MYSQL_USER: laravel\n        - MYSQL_PASSWORD: laravel\n      - image: node:10\n      - image: redis:latest\n      - image: selenium/hub:3.141.59-vanadium\n      - image: selenium/node-chrome:3.141.59-vanadium\n        environment:\n        - HUB_HOST: localhost\n        - HUB_PORT: 4444\n\n    working_directory: ~/repo\n\n    steps:\n      - run:\n          command: chromedriver\n          background: true\n\n      - checkout\n\n      - run:\n          name: install dockerize\n          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n          environment:\n            DOCKERIZE_VERSION: v0.6.1\n\n      - run:\n          name: Install PHP Extensions\n          command: sudo docker-php-ext-install pdo_mysql\n\n      - restore_cache:\n          keys:\n            - v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\n            - v1-dependencies-\n\n      - restore_cache:\n          keys:\n            - v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\n            - v1-node-\n\n      - run:\n          name: npm install\n          working_directory: Laravel/node\n          command: npm install\n\n      - run:\n          name: start node server\n          working_directory: Laravel/node\n          command: node ./bin/node_server.js\n          background: true\n          environment:\n            - CERTS_DIR_PATH:  /home/circleci/repo/docker/node/certs/\n            - REDIS_HOST: 0.0.0.0\n            - REDIS_PORT: 6379\n\n      - run:\n          name: composer install\n          working_directory: Laravel\n          command: composer install -n --prefer-dist\n\n      - save_cache:\n          paths:\n            - ./Laravel/vendor\n          key: v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\n\n      - save_cache:\n          paths:\n            - ./Laravel/node/node_modules\n          key: v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\n\n      - run:\n          name: Wait for db\n          command: dockerize -wait tcp://localhost:3306 -timeout 1m\n\n      - run:\n          name: Migration &amp; Seeding\n          working_directory: Laravel\n          command: php artisan migrate --seed\n\n      - run:\n          name:  Artisan command\n          working_directory: Laravel\n          command: php artisan command:tournament 1\n\n#      - run:\n#          name: Install Chrome Driver\n#          working_directory: Laravel\n#          command: php artisan dusk:chrome-driver\n\n#      - run:\n#          name: Start Chrome Driver\n#          working_directory: Laravel\n#          command: ./vendor/laravel/dusk/bin/chromedriver-linux\n#          background: true\n#\n#      - run:\n#          name: Start Chrome Driver\n#          working_directory: Laravel\n#          command: chmod 775 .vendor/laravel/dusk/bin/* &amp;&amp; ./vendor/laravel/dusk/bin/chromedriver-linux\n#          background: true\n\n      - run:\n          name:  phpcs\n          working_directory: Laravel\n          command: ./vendor/bin/phpcs --standard=phpcs.xml ./\n\n      - run:\n         name: Run Laravel Server\n         working_directory: Laravel\n         command: php artisan serve\n         background: true\n\n      - run:\n          name:  phpunit\n          working_directory: Laravel\n          command: ./vendor/bin/phpunit\n\n#      - run:\n#          name:  Chrome version\n#          working_directory: Laravel\n#          command: google-chrome --version\n#\n#      - run:\n#          name: Top\n#          working_directory: Laravel\n#          command: curl localhost:8000\n#\n      - run:\n          name:  dusk\n          working_directory: Laravel\n          command: php artisan dusk</code></pre>\n<h3>Circle-CI-CLI ( Exec circle-cli on local )</h3>\n<p>Install  for Linux , Mac</p>\n<pre><code class=\"language-bash\">curl -fLSs https://circle.ci/cli | bash</code></pre>\n<p>Ansible tasks</p>\n<pre><code class=\"language-yaml\"># tasks file for circlci\n- name: check installed docker\n  command: bash -lc &quot;circleci --version&quot;\n  register: circleci_exists\n  changed_when: False\n  ignore_errors: yes\n\n- name: Install circleci\n  become: yes\n  get_url:\n    url: &quot;https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci&quot;\n    dest: /usr/local/bin/circleci\n    mode: +x\n  when: circleci_exists is failed\n</code></pre>\n<h3>Varidate</h3>\n<pre><code class=\"language-bash\">circleci config validate -c .circleci/config.yml</code></pre>\n<h3>Exec</h3>\n<pre><code class=\"language-bash\">circleci build .circleci/config.yml</code></pre>','Laravel, CircleCI','laravelをCircleCIの備忘録','inherit','closed','closed','','594-revision-v1','','','2020-12-14 12:55:07','2020-12-14 03:55:07','## Circle-ci Laravel \r\nMake directory (project top)\r\n```\r\nbash\r\nmkdir .circle-ci\r\n```\r\nCreate config.yml\r\n```bash\r\nvim config.yml\r\n```\r\n```yaml\r\nversion: 2\r\njobs:\r\n  build:\r\n    docker:\r\n      - image: circleci/php:7.2-stretch-node-browsers\r\n        environment:\r\n        - APP_URL: http://localhost:8000\r\n        - APP_DEBUG: true\r\n        - APP_ENV: testing\r\n        - APP_KEY: &lt;APP_KEY&gt;\r\n        - DEV_FAKER_LOCALE: ja_JP\r\n        - DB_CONNECTION: circleci\r\n        - MIX_NODE_HOST: &lt;YOUR_HOSTNAME&gt;\r\n        - MIX_NODE_INTERNAL_HOST: localhost\r\n        - MIX_NODE_PORT: 3000\r\n        - REDIS_PORT: 6379\r\n      - image: circleci/mysql:5.7\r\n        environment:\r\n        - MYSQL_ALLOW_EMPTY_PASSWORD: true\r\n        - MYSQL_ROOT_PASSWORD: root\r\n        - MYSQL_DATABASE: laravel\r\n        - MYSQL_USER: laravel\r\n        - MYSQL_PASSWORD: laravel\r\n      - image: node:10\r\n      - image: redis:latest\r\n      - image: selenium/hub:3.141.59-vanadium\r\n      - image: selenium/node-chrome:3.141.59-vanadium\r\n        environment:\r\n        - HUB_HOST: localhost\r\n        - HUB_PORT: 4444\r\n\r\n\r\n    working_directory: ~/repo\r\n\r\n    steps:\r\n      - run:\r\n          command: chromedriver\r\n          background: true\r\n\r\n      - checkout\r\n\r\n      - run:\r\n          name: install dockerize\r\n          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\r\n          environment:\r\n            DOCKERIZE_VERSION: v0.6.1\r\n\r\n      - run:\r\n          name: Install PHP Extensions\r\n          command: sudo docker-php-ext-install pdo_mysql\r\n\r\n      - restore_cache:\r\n          keys:\r\n            - v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\r\n            - v1-dependencies-\r\n\r\n      - restore_cache:\r\n          keys:\r\n            - v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\r\n            - v1-node-\r\n\r\n      - run:\r\n          name: npm install\r\n          working_directory: Laravel/node\r\n          command: npm install\r\n\r\n      - run:\r\n          name: start node server\r\n          working_directory: Laravel/node\r\n          command: node ./bin/node_server.js\r\n          background: true\r\n          environment:\r\n            - CERTS_DIR_PATH:  /home/circleci/repo/docker/node/certs/\r\n            - REDIS_HOST: 0.0.0.0\r\n            - REDIS_PORT: 6379\r\n\r\n      - run:\r\n          name: composer install\r\n          working_directory: Laravel\r\n          command: composer install -n --prefer-dist\r\n\r\n      - save_cache:\r\n          paths:\r\n            - ./Laravel/vendor\r\n          key: v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\r\n\r\n      - save_cache:\r\n          paths:\r\n            - ./Laravel/node/node_modules\r\n          key: v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\r\n\r\n      - run:\r\n          name: Wait for db\r\n          command: dockerize -wait tcp://localhost:3306 -timeout 1m\r\n\r\n      - run:\r\n          name: Migration &amp; Seeding\r\n          working_directory: Laravel\r\n          command: php artisan migrate --seed\r\n\r\n      - run:\r\n          name:  Artisan command\r\n          working_directory: Laravel\r\n          command: php artisan command:tournament 1\r\n\r\n#      - run:\r\n#          name: Install Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: php artisan dusk:chrome-driver\r\n\r\n#      - run:\r\n#          name: Start Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: ./vendor/laravel/dusk/bin/chromedriver-linux\r\n#          background: true\r\n#\r\n#      - run:\r\n#          name: Start Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: chmod 775 .vendor/laravel/dusk/bin/* &amp;&amp; ./vendor/laravel/dusk/bin/chromedriver-linux\r\n#          background: true\r\n\r\n      - run:\r\n          name:  phpcs\r\n          working_directory: Laravel\r\n          command: ./vendor/bin/phpcs --standard=phpcs.xml ./\r\n\r\n      - run:\r\n         name: Run Laravel Server\r\n         working_directory: Laravel\r\n         command: php artisan serve\r\n         background: true\r\n\r\n      - run:\r\n          name:  phpunit\r\n          working_directory: Laravel\r\n          command: ./vendor/bin/phpunit\r\n\r\n#      - run:\r\n#          name:  Chrome version\r\n#          working_directory: Laravel\r\n#          command: google-chrome --version\r\n#\r\n#      - run:\r\n#          name: Top\r\n#          working_directory: Laravel\r\n#          command: curl localhost:8000\r\n#\r\n      - run:\r\n          name:  dusk\r\n          working_directory: Laravel\r\n          command: php artisan dusk\r\n```\r\n\r\n\r\n### Circle-CI-CLI ( Exec circle-cli on local )\r\nInstall  for Linux , Mac\r\n```bash\r\ncurl -fLSs https://circle.ci/cli | bash\r\n```\r\nAnsible tasks\r\n```yaml\r\n# tasks file for circlci\r\n- name: check installed docker\r\n  command: bash -lc &quot;circleci --version&quot;\r\n  register: circleci_exists\r\n  changed_when: False\r\n  ignore_errors: yes\r\n\r\n- name: Install circleci\r\n  become: yes\r\n  get_url:\r\n    url: &quot;https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci&quot;\r\n    dest: /usr/local/bin/circleci\r\n    mode: +x\r\n  when: circleci_exists is failed\r\n\r\n```\r\n\r\n\r\n### Varidate\r\n```bash\r\ncircleci config validate -c .circleci/config.yml\r\n```\r\n### Exec\r\n```bash\r\ncircleci build .circleci/config.yml\r\n```',594,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/594-revision-v1/',0,'revision','',0),(600,1,'2020-12-14 12:56:21','2020-12-14 03:56:21','<h2>Circle-ci Laravel</h2>\n<p>Make directory (project top)</p>\n<pre><code class=\"language-bash\">mkdir .circle-ci</code></pre>\n<p>Create config.yml</p>\n<pre><code class=\"language-bash\">vim config.yml</code></pre>\n<pre><code class=\"language-yaml\">version: 2\njobs:\n  build:\n    docker:\n      - image: circleci/php:7.2-stretch-node-browsers\n        environment:\n        - APP_URL: http://localhost:8000\n        - APP_DEBUG: true\n        - APP_ENV: testing\n        - APP_KEY: &lt;APP_KEY&gt;\n        - DEV_FAKER_LOCALE: ja_JP\n        - DB_CONNECTION: circleci\n        - MIX_NODE_HOST: &lt;YOUR_HOSTNAME&gt;\n        - MIX_NODE_INTERNAL_HOST: localhost\n        - MIX_NODE_PORT: 3000\n        - REDIS_PORT: 6379\n      - image: circleci/mysql:5.7\n        environment:\n        - MYSQL_ALLOW_EMPTY_PASSWORD: true\n        - MYSQL_ROOT_PASSWORD: root\n        - MYSQL_DATABASE: laravel\n        - MYSQL_USER: laravel\n        - MYSQL_PASSWORD: laravel\n      - image: node:10\n      - image: redis:latest\n      - image: selenium/hub:3.141.59-vanadium\n      - image: selenium/node-chrome:3.141.59-vanadium\n        environment:\n        - HUB_HOST: localhost\n        - HUB_PORT: 4444\n\n    working_directory: ~/repo\n\n    steps:\n      - run:\n          command: chromedriver\n          background: true\n\n      - checkout\n\n      - run:\n          name: install dockerize\n          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n          environment:\n            DOCKERIZE_VERSION: v0.6.1\n\n      - run:\n          name: Install PHP Extensions\n          command: sudo docker-php-ext-install pdo_mysql\n\n      - restore_cache:\n          keys:\n            - v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\n            - v1-dependencies-\n\n      - restore_cache:\n          keys:\n            - v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\n            - v1-node-\n\n      - run:\n          name: npm install\n          working_directory: Laravel/node\n          command: npm install\n\n      - run:\n          name: start node server\n          working_directory: Laravel/node\n          command: node ./bin/node_server.js\n          background: true\n          environment:\n            - CERTS_DIR_PATH:  /home/circleci/repo/docker/node/certs/\n            - REDIS_HOST: 0.0.0.0\n            - REDIS_PORT: 6379\n\n      - run:\n          name: composer install\n          working_directory: Laravel\n          command: composer install -n --prefer-dist\n\n      - save_cache:\n          paths:\n            - ./Laravel/vendor\n          key: v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\n\n      - save_cache:\n          paths:\n            - ./Laravel/node/node_modules\n          key: v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\n\n      - run:\n          name: Wait for db\n          command: dockerize -wait tcp://localhost:3306 -timeout 1m\n\n      - run:\n          name: Migration &amp; Seeding\n          working_directory: Laravel\n          command: php artisan migrate --seed\n\n      - run:\n          name:  Artisan command\n          working_directory: Laravel\n          command: php artisan command:tournament 1\n\n#      - run:\n#          name: Install Chrome Driver\n#          working_directory: Laravel\n#          command: php artisan dusk:chrome-driver\n\n#      - run:\n#          name: Start Chrome Driver\n#          working_directory: Laravel\n#          command: ./vendor/laravel/dusk/bin/chromedriver-linux\n#          background: true\n#\n#      - run:\n#          name: Start Chrome Driver\n#          working_directory: Laravel\n#          command: chmod 775 .vendor/laravel/dusk/bin/* &amp;&amp; ./vendor/laravel/dusk/bin/chromedriver-linux\n#          background: true\n\n      - run:\n          name:  phpcs\n          working_directory: Laravel\n          command: ./vendor/bin/phpcs --standard=phpcs.xml ./\n\n      - run:\n         name: Run Laravel Server\n         working_directory: Laravel\n         command: php artisan serve\n         background: true\n\n      - run:\n          name:  phpunit\n          working_directory: Laravel\n          command: ./vendor/bin/phpunit\n\n#      - run:\n#          name:  Chrome version\n#          working_directory: Laravel\n#          command: google-chrome --version\n#\n#      - run:\n#          name: Top\n#          working_directory: Laravel\n#          command: curl localhost:8000\n#\n      - run:\n          name:  dusk\n          working_directory: Laravel\n          command: php artisan dusk</code></pre>\n<h3>Circle-CI-CLI ( Exec circle-cli on local )</h3>\n<p>Install  for Linux , Mac</p>\n<pre><code class=\"language-bash\">curl -fLSs https://circle.ci/cli | bash</code></pre>\n<p>Ansible tasks</p>\n<pre><code class=\"language-yaml\"># tasks file for circlci\n- name: check installed docker\n  command: bash -lc &quot;circleci --version&quot;\n  register: circleci_exists\n  changed_when: False\n  ignore_errors: yes\n\n- name: Install circleci\n  become: yes\n  get_url:\n    url: &quot;https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci&quot;\n    dest: /usr/local/bin/circleci\n    mode: +x\n  when: circleci_exists is failed\n</code></pre>\n<h3>Varidate</h3>\n<pre><code class=\"language-bash\">circleci config validate -c .circleci/config.yml</code></pre>\n<h3>Exec</h3>\n<pre><code class=\"language-bash\">circleci build .circleci/config.yml</code></pre>','Laravel, CircleCI','laravelをCircleCIの備忘録','inherit','closed','closed','','594-revision-v1','','','2020-12-14 12:56:21','2020-12-14 03:56:21','## Circle-ci Laravel \r\nMake directory (project top)\r\n```bash\r\nmkdir .circle-ci\r\n```\r\nCreate config.yml\r\n```bash\r\nvim config.yml\r\n```\r\n```yaml\r\nversion: 2\r\njobs:\r\n  build:\r\n    docker:\r\n      - image: circleci/php:7.2-stretch-node-browsers\r\n        environment:\r\n        - APP_URL: http://localhost:8000\r\n        - APP_DEBUG: true\r\n        - APP_ENV: testing\r\n        - APP_KEY: &lt;APP_KEY&gt;\r\n        - DEV_FAKER_LOCALE: ja_JP\r\n        - DB_CONNECTION: circleci\r\n        - MIX_NODE_HOST: &lt;YOUR_HOSTNAME&gt;\r\n        - MIX_NODE_INTERNAL_HOST: localhost\r\n        - MIX_NODE_PORT: 3000\r\n        - REDIS_PORT: 6379\r\n      - image: circleci/mysql:5.7\r\n        environment:\r\n        - MYSQL_ALLOW_EMPTY_PASSWORD: true\r\n        - MYSQL_ROOT_PASSWORD: root\r\n        - MYSQL_DATABASE: laravel\r\n        - MYSQL_USER: laravel\r\n        - MYSQL_PASSWORD: laravel\r\n      - image: node:10\r\n      - image: redis:latest\r\n      - image: selenium/hub:3.141.59-vanadium\r\n      - image: selenium/node-chrome:3.141.59-vanadium\r\n        environment:\r\n        - HUB_HOST: localhost\r\n        - HUB_PORT: 4444\r\n\r\n\r\n    working_directory: ~/repo\r\n\r\n    steps:\r\n      - run:\r\n          command: chromedriver\r\n          background: true\r\n\r\n      - checkout\r\n\r\n      - run:\r\n          name: install dockerize\r\n          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\r\n          environment:\r\n            DOCKERIZE_VERSION: v0.6.1\r\n\r\n      - run:\r\n          name: Install PHP Extensions\r\n          command: sudo docker-php-ext-install pdo_mysql\r\n\r\n      - restore_cache:\r\n          keys:\r\n            - v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\r\n            - v1-dependencies-\r\n\r\n      - restore_cache:\r\n          keys:\r\n            - v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\r\n            - v1-node-\r\n\r\n      - run:\r\n          name: npm install\r\n          working_directory: Laravel/node\r\n          command: npm install\r\n\r\n      - run:\r\n          name: start node server\r\n          working_directory: Laravel/node\r\n          command: node ./bin/node_server.js\r\n          background: true\r\n          environment:\r\n            - CERTS_DIR_PATH:  /home/circleci/repo/docker/node/certs/\r\n            - REDIS_HOST: 0.0.0.0\r\n            - REDIS_PORT: 6379\r\n\r\n      - run:\r\n          name: composer install\r\n          working_directory: Laravel\r\n          command: composer install -n --prefer-dist\r\n\r\n      - save_cache:\r\n          paths:\r\n            - ./Laravel/vendor\r\n          key: v1-dependencies-{{ checksum &quot;Laravel/composer.json&quot; }}\r\n\r\n      - save_cache:\r\n          paths:\r\n            - ./Laravel/node/node_modules\r\n          key: v1-node-{{ checksum &quot;Laravel/node/package.json&quot; }}\r\n\r\n      - run:\r\n          name: Wait for db\r\n          command: dockerize -wait tcp://localhost:3306 -timeout 1m\r\n\r\n      - run:\r\n          name: Migration &amp; Seeding\r\n          working_directory: Laravel\r\n          command: php artisan migrate --seed\r\n\r\n      - run:\r\n          name:  Artisan command\r\n          working_directory: Laravel\r\n          command: php artisan command:tournament 1\r\n\r\n#      - run:\r\n#          name: Install Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: php artisan dusk:chrome-driver\r\n\r\n#      - run:\r\n#          name: Start Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: ./vendor/laravel/dusk/bin/chromedriver-linux\r\n#          background: true\r\n#\r\n#      - run:\r\n#          name: Start Chrome Driver\r\n#          working_directory: Laravel\r\n#          command: chmod 775 .vendor/laravel/dusk/bin/* &amp;&amp; ./vendor/laravel/dusk/bin/chromedriver-linux\r\n#          background: true\r\n\r\n      - run:\r\n          name:  phpcs\r\n          working_directory: Laravel\r\n          command: ./vendor/bin/phpcs --standard=phpcs.xml ./\r\n\r\n      - run:\r\n         name: Run Laravel Server\r\n         working_directory: Laravel\r\n         command: php artisan serve\r\n         background: true\r\n\r\n      - run:\r\n          name:  phpunit\r\n          working_directory: Laravel\r\n          command: ./vendor/bin/phpunit\r\n\r\n#      - run:\r\n#          name:  Chrome version\r\n#          working_directory: Laravel\r\n#          command: google-chrome --version\r\n#\r\n#      - run:\r\n#          name: Top\r\n#          working_directory: Laravel\r\n#          command: curl localhost:8000\r\n#\r\n      - run:\r\n          name:  dusk\r\n          working_directory: Laravel\r\n          command: php artisan dusk\r\n```\r\n\r\n\r\n### Circle-CI-CLI ( Exec circle-cli on local )\r\nInstall  for Linux , Mac\r\n```bash\r\ncurl -fLSs https://circle.ci/cli | bash\r\n```\r\nAnsible tasks\r\n```yaml\r\n# tasks file for circlci\r\n- name: check installed docker\r\n  command: bash -lc &quot;circleci --version&quot;\r\n  register: circleci_exists\r\n  changed_when: False\r\n  ignore_errors: yes\r\n\r\n- name: Install circleci\r\n  become: yes\r\n  get_url:\r\n    url: &quot;https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci&quot;\r\n    dest: /usr/local/bin/circleci\r\n    mode: +x\r\n  when: circleci_exists is failed\r\n\r\n```\r\n\r\n\r\n### Varidate\r\n```bash\r\ncircleci config validate -c .circleci/config.yml\r\n```\r\n### Exec\r\n```bash\r\ncircleci build .circleci/config.yml\r\n```',594,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/594-revision-v1/',0,'revision','',0),(601,1,'2020-12-14 13:15:14','2020-12-14 04:15:14','<h2>Install cerbot tasks</h2>\n<pre><code class=\"language-yaml\">- name: check installed cerbot\n  command: bash -lc &quot;certbot --version&quot;\n  register: certbot_exists\n  changed_when: False\n  ignore_errors: yes\n\n- name: install epel-release\n  become: true\n  yum:\n    name: epel-release\n    state: present\n    #when:\n    #  - certbot_exists is failed\n\n- name: Install certbot,certbot-apache\n  become: true\n  yum: name=certbot,certbot-apache state=present\n\n- name: Install python-certbot-apache\n  become: true\n  yum: name=python-certbot-apache state=present\n\n- name: Set config to stop and restart with running certbot\n  become: yes\n  replace:\n    dest: /etc/sysconfig/certbot\n    regexp: &quot;{{ item.regexp }}&quot;\n    replace: &quot;{{ item.replace }}&quot;\n    backup: yes\n  with_items:\n    - {&#039;regexp&#039; : &#039;^PRE_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;PRE_HOOK=&quot;--pre-hook &#039;&#039;systemctl stop httpd&#039;&#039;&quot;&#039;}\n    - {&#039;regexp&#039; : &#039;^POST_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;POST_HOOK=&quot;--post-hook &#039;&#039;systemctl restart httpd&#039;&#039;&quot;&#039;}\n    - {&#039;regexp&#039; : &#039;^RENEW_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;RENEW_HOOK=&quot;--renew-hook &#039;&#039;systemctl restart httpd&#039;&#039;&quot;&#039;}</code></pre>\n<h2>VirtualHost vars</h2>\n<pre><code class=\"language-yaml\">httpd:\n  virtualhosts:\n    - hostname: \"virtualexample1.com\"\n      ssl: true\n      document_root: \"/var/www/vhosts/virtualexample1.com\"\n      log: \"/var/www/vhosts/virtualexample1.com/LOG\"\n      conf_options:\n        - AllowOverride All\n        - Options -Indexes +FollowSymLinks\n        - Options +ExecCGI\n        - AddHandler cgi-script .pl .cgi\n        - Order allow,deny\n        - Allow from all\n      conf_ssl_options:\n        - AllowOverride All\n        - Options -Indexes +FollowSymLinks\n        - Options +ExecCGI\n        - AddHandler cgi-script .pl .cgi\n        - Order allow,deny\n        - Allow from all\n      owner: \"vh1\"\n      group: \"vh1\"\n      recurse: \"yes\"\n      server_crt: \'/etc/pki/tls/certs/localhost.crt\'\n      server_key: \'/etc/pki/tls/private/localhost.key\'\n      server_chain: \'/etc/pki/tls/certs/ca-bundle.crt\'\n      letsencrypt:\n        state: \'present\'\n        name: \'letsencrypt virtualexample1.com\'\n        email: \'admin@virtualhostexample1.com\'\n        cron:\n          - name: \"letsencrypt 001\"\n            state: \"present\"\n            user: \'root\'\n            minute: \"0\"\n            hour: \"12\"\n            day: \"1\"\n            month: \"*\"\n            weekday: \"*\"\n          - name: \"letsencrypt 002\"\n            state: \"present\"\n            user: \'root\'\n            minute: \"0\"\n            hour: \"13\"\n            day: \"1\"\n            month: \"*\"\n            weekday: \"*\"\n</code></pre>\n<h2>Get cert</h2>\n<pre><code class=\"language-yaml\"> ---\n# tasks file for roles/httpd\n# letsncryp\n\n- name: Check privkey.pem exists\n  become: true\n  stat:\n    path: \"/etc/letsencrypt/live/{{ item.value.httpd.hostname }}/privkey.pem\"\n  register: key_exists\n  when:\n    - item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\n  with_dict:\n    - \"{{ virtualhosts }}\"\n\n- name: Get certs\n  become: yes\n  shell: >\n    certbot certonly -m {{ item.item.value.httpd.ssl.letsencrypt.email }}\n    --agree-tos\n    --non-interactive $*\n    --webroot\n    -w {{ item.item.value.httpd.host_dir }}{{ item.item.value.httpd.public_dir }}\n    -d {{ item.item.value.httpd.hostname }}\n  when:\n    - item.item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\n    - item.stat.exists is false\n    - item.item.value.httpd.ssl.letsencrypt.state == \'present\'\n  with_items:\n    - \"{{ key_exists.results }}\"\n\n- name: Install VirtualHost(https)\n  become: true\n  template:\n    src: templates/letsencrypt_virtualhost.conf.j2\n    dest: \"/etc/httpd/conf.d/letsencrypt_{{ item.value.httpd.hostname }}.conf\"\n  when:\n    - item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\n  with_dict:\n    - \"{{ virtualhosts }}\"\n  notify:\n    - Restart httpd\n\n- name: Remove VirtualHost(https)\n  become: true\n  file:\n    path: \"/etc/httpd/conf.d/letsencrypt_{{ item.value.httpd.hostname }}.conf\"\n    state: absent\n  when:\n    - item.value.httpd.ssl.ssl_provider != \'letsencrypt\'\n  with_dict:\n    - \"{{ virtualhosts }}\"\n  notify:\n    - Restart httpd\n\n- name: Remove keys\n  become: true\n  include: letsencrypt_delete_loop.yml\n  when:\n    - item.value.httpd.ssl.ssl_provider != \'letsencrypt\'\n  with_dict:\n    - \"{{ virtualhosts }}\"\n  notify:\n    - Restart httpd\n</code></pre>\n<h2>Cron vars</h2>\n<pre><code class=\"language-yaml\">crontab:\n  letsencrypt:\n    name: \"letsencrypt {{ httpd_domain }}\"\n    state: \'present\'\n    user: \'root\'\n    job: /bin/bash -lc \"certbot certonly --force-renew --webroot -w {{ httpd_document_root }}{{ httpd_public_dir }} -d {{ httpd_domain }} --post-hook \'systemctl reload httpd\' > /dev/null 2>&1\"\n    minute: \"0\"\n    hour: \"12\"\n    day: \"1\"\n    month: \"*\"\n    weekday: \"*\"</code></pre>\n<h2>Cron tab</h2>\n<pre><code class=\"language-yaml\">\n---\n- name:  Cron control\n  become: yes\n  cron:\n    name: \" {{ item.value.name }}\"\n    state: \"{{ item.value.state }}\"\n    user: \"{{ item.value.user }}\"\n    minute: \"{{ item.value.minute }}\"\n    hour: \"{{ item.value.hour }}\"\n    day: \"{{ item.value.day }}\"\n    month: \"{{ item.value.month }}\"\n    weekday: \"{{ item.value.weekday }}\"\n    job: \"{{ item.value.job }}\"\n  with_dict:\n    - \"{{ crontab }}\"</code></pre>\n<h2>letsencrypt_virtualhost.conf (Jinja2 template)</h2>\n<pre><code class=\"language-conf\"><VirtualHost *:443>\n  ServerName {{ item.value.httpd.hostname }}\n  DocumentRoot {{ item.value.httpd.host_dir }}{{ item.value.httpd.public_dir }}\n  SSLEngine on\n  SSLCipherSuite AES256+EECDH:AES256+EDH\n  SSLProtocol All -SSLv2 -SSLv3\n  SSLHonorCipherOrder On\n  SSLCertificateFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/cert.pem\n  SSLCertificateKeyFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/privkey.pem\n  SSLCertificateChainFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/chain.pem\n  <Directory \"{{ item.value.httpd.host_dir }}{{ item.value.httpd.public_dir }}\">\n  {% for n in item.value.httpd.conf_ssl_options %}\n    {{ n }}\n  {% endfor %}\n  </Directory>\n  ErrorLog {{ item.value.httpd.log }}/error.log\n  CustomLog {{ item.value.httpd.log }}/access.log combined\n</VirtualHost>\n</code></pre>','Ansible, Let\'s Encrypt','今後\"Let\'s Encrypt\"の設定はAnsibleで行いたい。\r\nAnsibleのLet\'s Encryptテンプレート','publish','closed','open','','ansible_letsencrypt','','','2020-12-14 13:15:14','2020-12-14 04:15:14','## Install cerbot tasks\r\n```yaml\r\n- name: check installed cerbot\r\n  command: bash -lc &quot;certbot --version&quot;\r\n  register: certbot_exists\r\n  changed_when: False\r\n  ignore_errors: yes\r\n\r\n\r\n- name: install epel-release\r\n  become: true\r\n  yum:\r\n    name: epel-release\r\n    state: present\r\n    #when:\r\n    #  - certbot_exists is failed\r\n\r\n- name: Install certbot,certbot-apache\r\n  become: true\r\n  yum: name=certbot,certbot-apache state=present\r\n\r\n- name: Install python-certbot-apache\r\n  become: true\r\n  yum: name=python-certbot-apache state=present\r\n\r\n- name: Set config to stop and restart with running certbot\r\n  become: yes\r\n  replace:\r\n    dest: /etc/sysconfig/certbot\r\n    regexp: &quot;{{ item.regexp }}&quot;\r\n    replace: &quot;{{ item.replace }}&quot;\r\n    backup: yes\r\n  with_items:\r\n    - {&#039;regexp&#039; : &#039;^PRE_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;PRE_HOOK=&quot;--pre-hook &#039;&#039;systemctl stop httpd&#039;&#039;&quot;&#039;}\r\n    - {&#039;regexp&#039; : &#039;^POST_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;POST_HOOK=&quot;--post-hook &#039;&#039;systemctl restart httpd&#039;&#039;&quot;&#039;}\r\n    - {&#039;regexp&#039; : &#039;^RENEW_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;RENEW_HOOK=&quot;--renew-hook &#039;&#039;systemctl restart httpd&#039;&#039;&quot;&#039;}\r\n```\r\n\r\n## VirtualHost vars\r\n ```yaml\r\nhttpd:\r\n  virtualhosts:\r\n    - hostname: \"virtualexample1.com\"\r\n      ssl: true\r\n      document_root: \"/var/www/vhosts/virtualexample1.com\"\r\n      log: \"/var/www/vhosts/virtualexample1.com/LOG\"\r\n      conf_options:\r\n        - AllowOverride All\r\n        - Options -Indexes +FollowSymLinks\r\n        - Options +ExecCGI\r\n        - AddHandler cgi-script .pl .cgi\r\n        - Order allow,deny\r\n        - Allow from all\r\n      conf_ssl_options:\r\n        - AllowOverride All\r\n        - Options -Indexes +FollowSymLinks\r\n        - Options +ExecCGI\r\n        - AddHandler cgi-script .pl .cgi\r\n        - Order allow,deny\r\n        - Allow from all\r\n      owner: \"vh1\"\r\n      group: \"vh1\"\r\n      recurse: \"yes\"\r\n      server_crt: \'/etc/pki/tls/certs/localhost.crt\'\r\n      server_key: \'/etc/pki/tls/private/localhost.key\'\r\n      server_chain: \'/etc/pki/tls/certs/ca-bundle.crt\'\r\n      letsencrypt:\r\n        state: \'present\'\r\n        name: \'letsencrypt virtualexample1.com\'\r\n        email: \'admin@virtualhostexample1.com\'\r\n        cron:\r\n          - name: \"letsencrypt 001\"\r\n            state: \"present\"\r\n            user: \'root\'\r\n            minute: \"0\"\r\n            hour: \"12\"\r\n            day: \"1\"\r\n            month: \"*\"\r\n            weekday: \"*\"\r\n          - name: \"letsencrypt 002\"\r\n            state: \"present\"\r\n            user: \'root\'\r\n            minute: \"0\"\r\n            hour: \"13\"\r\n            day: \"1\"\r\n            month: \"*\"\r\n            weekday: \"*\"\r\n\r\n ```\r\n\r\n ## Get cert\r\n ```yaml\r\n ---\r\n# tasks file for roles/httpd\r\n# letsncryp\r\n\r\n- name: Check privkey.pem exists\r\n  become: true\r\n  stat:\r\n    path: \"/etc/letsencrypt/live/{{ item.value.httpd.hostname }}/privkey.pem\"\r\n  register: key_exists\r\n  when:\r\n    - item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\r\n  with_dict:\r\n    - \"{{ virtualhosts }}\"\r\n\r\n- name: Get certs\r\n  become: yes\r\n  shell: >\r\n    certbot certonly -m {{ item.item.value.httpd.ssl.letsencrypt.email }}\r\n    --agree-tos\r\n    --non-interactive $*\r\n    --webroot\r\n    -w {{ item.item.value.httpd.host_dir }}{{ item.item.value.httpd.public_dir }}\r\n    -d {{ item.item.value.httpd.hostname }}\r\n  when:\r\n    - item.item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\r\n    - item.stat.exists is false\r\n    - item.item.value.httpd.ssl.letsencrypt.state == \'present\'\r\n  with_items:\r\n    - \"{{ key_exists.results }}\"\r\n\r\n- name: Install VirtualHost(https)\r\n  become: true\r\n  template:\r\n    src: templates/letsencrypt_virtualhost.conf.j2\r\n    dest: \"/etc/httpd/conf.d/letsencrypt_{{ item.value.httpd.hostname }}.conf\"\r\n  when:\r\n    - item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\r\n  with_dict:\r\n    - \"{{ virtualhosts }}\"\r\n  notify:\r\n    - Restart httpd\r\n\r\n- name: Remove VirtualHost(https)\r\n  become: true\r\n  file:\r\n    path: \"/etc/httpd/conf.d/letsencrypt_{{ item.value.httpd.hostname }}.conf\"\r\n    state: absent\r\n  when:\r\n    - item.value.httpd.ssl.ssl_provider != \'letsencrypt\'\r\n  with_dict:\r\n    - \"{{ virtualhosts }}\"\r\n  notify:\r\n    - Restart httpd\r\n\r\n- name: Remove keys\r\n  become: true\r\n  include: letsencrypt_delete_loop.yml\r\n  when:\r\n    - item.value.httpd.ssl.ssl_provider != \'letsencrypt\'\r\n  with_dict:\r\n    - \"{{ virtualhosts }}\"\r\n  notify:\r\n    - Restart httpd\r\n\r\n\r\n```\r\n\r\n\r\n## Cron vars\r\n```yaml\r\ncrontab:\r\n  letsencrypt:\r\n    name: \"letsencrypt {{ httpd_domain }}\"\r\n    state: \'present\'\r\n    user: \'root\'\r\n    job: /bin/bash -lc \"certbot certonly --force-renew --webroot -w {{ httpd_document_root }}{{ httpd_public_dir }} -d {{ httpd_domain }} --post-hook \'systemctl reload httpd\' > /dev/null 2>&1\"\r\n    minute: \"0\"\r\n    hour: \"12\"\r\n    day: \"1\"\r\n    month: \"*\"\r\n    weekday: \"*\"\r\n```\r\n\r\n## Cron tab\r\n```yaml\r\n\r\n---\r\n- name:  Cron control\r\n  become: yes\r\n  cron:\r\n    name: \" {{ item.value.name }}\"\r\n    state: \"{{ item.value.state }}\"\r\n    user: \"{{ item.value.user }}\"\r\n    minute: \"{{ item.value.minute }}\"\r\n    hour: \"{{ item.value.hour }}\"\r\n    day: \"{{ item.value.day }}\"\r\n    month: \"{{ item.value.month }}\"\r\n    weekday: \"{{ item.value.weekday }}\"\r\n    job: \"{{ item.value.job }}\"\r\n  with_dict:\r\n    - \"{{ crontab }}\"\r\n```\r\n\r\n## letsencrypt_virtualhost.conf (Jinja2 template)\r\n```conf\r\n<VirtualHost *:443>\r\n  ServerName {{ item.value.httpd.hostname }}\r\n  DocumentRoot {{ item.value.httpd.host_dir }}{{ item.value.httpd.public_dir }}\r\n  SSLEngine on\r\n  SSLCipherSuite AES256+EECDH:AES256+EDH\r\n  SSLProtocol All -SSLv2 -SSLv3\r\n  SSLHonorCipherOrder On\r\n  SSLCertificateFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/cert.pem\r\n  SSLCertificateKeyFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/privkey.pem\r\n  SSLCertificateChainFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/chain.pem\r\n  <Directory \"{{ item.value.httpd.host_dir }}{{ item.value.httpd.public_dir }}\">\r\n  {% for n in item.value.httpd.conf_ssl_options %}\r\n    {{ n }}\r\n  {% endfor %}\r\n  </Directory>\r\n  ErrorLog {{ item.value.httpd.log }}/error.log\r\n  CustomLog {{ item.value.httpd.log }}/access.log combined\r\n</VirtualHost>\r\n\r\n\r\n```',0,'https://blog.webdimension.jp/?p=601',0,'post','',0),(602,1,'2020-12-14 13:01:41','2020-12-14 04:01:41','<h2>Install cerbot tasks</h2>\n<pre><code class=\"language-yaml\">- name: check installed cerbot\n  command: bash -lc &quot;certbot --version&quot;\n  register: certbot_exists\n  changed_when: False\n  ignore_errors: yes\n\n- name: install epel-release\n  become: true\n  yum:\n    name: epel-release\n    state: present\n    #when:\n    #  - certbot_exists is failed\n\n- name: Install certbot,certbot-apache\n  become: true\n  yum: name=certbot,certbot-apache state=present\n\n- name: Install python-certbot-apache\n  become: true\n  yum: name=python-certbot-apache state=present\n\n- name: Set config to stop and restart with running certbot\n  become: yes\n  replace:\n    dest: /etc/sysconfig/certbot\n    regexp: &quot;{{ item.regexp }}&quot;\n    replace: &quot;{{ item.replace }}&quot;\n    backup: yes\n  with_items:\n    - {&#039;regexp&#039; : &#039;^PRE_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;PRE_HOOK=&quot;--pre-hook &#039;&#039;systemctl stop httpd&#039;&#039;&quot;&#039;}\n    - {&#039;regexp&#039; : &#039;^POST_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;POST_HOOK=&quot;--post-hook &#039;&#039;systemctl restart httpd&#039;&#039;&quot;&#039;}\n    - {&#039;regexp&#039; : &#039;^RENEW_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;RENEW_HOOK=&quot;--renew-hook &#039;&#039;systemctl restart httpd&#039;&#039;&quot;&#039;}</code></pre>\n<h2>VirtualHost vars</h2>\n<pre><code class=\"language-yaml\">httpd:\n  virtualhosts:\n    - hostname: \"virtualexample1.com\"\n      ssl: true\n      document_root: \"/var/www/vhosts/virtualexample1.com\"\n      log: \"/var/www/vhosts/virtualexample1.com/LOG\"\n      conf_options:\n        - AllowOverride All\n        - Options -Indexes +FollowSymLinks\n        - Options +ExecCGI\n        - AddHandler cgi-script .pl .cgi\n        - Order allow,deny\n        - Allow from all\n      conf_ssl_options:\n        - AllowOverride All\n        - Options -Indexes +FollowSymLinks\n        - Options +ExecCGI\n        - AddHandler cgi-script .pl .cgi\n        - Order allow,deny\n        - Allow from all\n      owner: \"vh1\"\n      group: \"vh1\"\n      recurse: \"yes\"\n      server_crt: \'/etc/pki/tls/certs/localhost.crt\'\n      server_key: \'/etc/pki/tls/private/localhost.key\'\n      server_chain: \'/etc/pki/tls/certs/ca-bundle.crt\'\n      letsencrypt:\n        state: \'present\'\n        name: \'letsencrypt virtualexample1.com\'\n        email: \'admin@virtualhostexample1.com\'\n        cron:\n          - name: \"letsencrypt 001\"\n            state: \"present\"\n            user: \'root\'\n            minute: \"0\"\n            hour: \"12\"\n            day: \"1\"\n            month: \"*\"\n            weekday: \"*\"\n          - name: \"letsencrypt 002\"\n            state: \"present\"\n            user: \'root\'\n            minute: \"0\"\n            hour: \"13\"\n            day: \"1\"\n            month: \"*\"\n            weekday: \"*\"\n</code></pre>\n<h2>Get cert</h2>\n<pre><code class=\"language-yaml\"> ---\n# tasks file for roles/httpd\n# letsncryp\n\n- name: Check privkey.pem exists\n  become: true\n  stat:\n    path: \"/etc/letsencrypt/live/{{ item.value.httpd.hostname }}/privkey.pem\"\n  register: key_exists\n  when:\n    - item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\n  with_dict:\n    - \"{{ virtualhosts }}\"\n\n- name: Get certs\n  become: yes\n  shell: >\n    certbot certonly -m {{ item.item.value.httpd.ssl.letsencrypt.email }}\n    --agree-tos\n    --non-interactive $*\n    --webroot\n    -w {{ item.item.value.httpd.host_dir }}{{ item.item.value.httpd.public_dir }}\n    -d {{ item.item.value.httpd.hostname }}\n  when:\n    - item.item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\n    - item.stat.exists is false\n    - item.item.value.httpd.ssl.letsencrypt.state == \'present\'\n  with_items:\n    - \"{{ key_exists.results }}\"\n\n- name: Install VirtualHost(https)\n  become: true\n  template:\n    src: templates/letsencrypt_virtualhost.conf.j2\n    dest: \"/etc/httpd/conf.d/letsencrypt_{{ item.value.httpd.hostname }}.conf\"\n  when:\n    - item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\n  with_dict:\n    - \"{{ virtualhosts }}\"\n  notify:\n    - Restart httpd\n\n- name: Remove VirtualHost(https)\n  become: true\n  file:\n    path: \"/etc/httpd/conf.d/letsencrypt_{{ item.value.httpd.hostname }}.conf\"\n    state: absent\n  when:\n    - item.value.httpd.ssl.ssl_provider != \'letsencrypt\'\n  with_dict:\n    - \"{{ virtualhosts }}\"\n  notify:\n    - Restart httpd\n\n- name: Remove keys\n  become: true\n  include: letsencrypt_delete_loop.yml\n  when:\n    - item.value.httpd.ssl.ssl_provider != \'letsencrypt\'\n  with_dict:\n    - \"{{ virtualhosts }}\"\n  notify:\n    - Restart httpd\n</code></pre>\n<h2>Cron vars</h2>\n<pre><code class=\"language-yaml\">crontab:\n  letsencrypt:\n    name: \"letsencrypt {{ httpd_domain }}\"\n    state: \'present\'\n    user: \'root\'\n    job: /bin/bash -lc \"certbot certonly --force-renew --webroot -w {{ httpd_document_root }}{{ httpd_public_dir }} -d {{ httpd_domain }} --post-hook \'systemctl reload httpd\' > /dev/null 2>&1\"\n    minute: \"0\"\n    hour: \"12\"\n    day: \"1\"\n    month: \"*\"\n    weekday: \"*\"</code></pre>\n<h2>Cron tab</h2>\n<pre><code class=\"language-yaml\">\n---\n- name:  Cron control\n  become: yes\n  cron:\n    name: \" {{ item.value.name }}\"\n    state: \"{{ item.value.state }}\"\n    user: \"{{ item.value.user }}\"\n    minute: \"{{ item.value.minute }}\"\n    hour: \"{{ item.value.hour }}\"\n    day: \"{{ item.value.day }}\"\n    month: \"{{ item.value.month }}\"\n    weekday: \"{{ item.value.weekday }}\"\n    job: \"{{ item.value.job }}\"\n  with_dict:\n    - \"{{ crontab }}\"</code></pre>\n<h2>letsencrypt_virtualhost.conf (Jinja2 template)</h2>\n<pre><code class=\"language-conf\"><VirtualHost *:443>\n  ServerName {{ item.value.httpd.hostname }}\n  DocumentRoot {{ item.value.httpd.host_dir }}{{ item.value.httpd.public_dir }}\n  SSLEngine on\n  SSLCipherSuite AES256+EECDH:AES256+EDH\n  SSLProtocol All -SSLv2 -SSLv3\n  SSLHonorCipherOrder On\n  SSLCertificateFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/cert.pem\n  SSLCertificateKeyFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/privkey.pem\n  SSLCertificateChainFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/chain.pem\n  <Directory \"{{ item.value.httpd.host_dir }}{{ item.value.httpd.public_dir }}\">\n  {% for n in item.value.httpd.conf_ssl_options %}\n    {{ n }}\n  {% endfor %}\n  </Directory>\n  ErrorLog {{ item.value.httpd.log }}/error.log\n  CustomLog {{ item.value.httpd.log }}/access.log combined\n</VirtualHost>\n</code></pre>','Ansible, Let\'s Encrypt','','inherit','closed','closed','','601-revision-v1','','','2020-12-14 13:01:41','2020-12-14 04:01:41','## Install cerbot tasks\r\n```yaml\r\n- name: check installed cerbot\r\n  command: bash -lc &quot;certbot --version&quot;\r\n  register: certbot_exists\r\n  changed_when: False\r\n  ignore_errors: yes\r\n\r\n\r\n- name: install epel-release\r\n  become: true\r\n  yum:\r\n    name: epel-release\r\n    state: present\r\n    #when:\r\n    #  - certbot_exists is failed\r\n\r\n- name: Install certbot,certbot-apache\r\n  become: true\r\n  yum: name=certbot,certbot-apache state=present\r\n\r\n- name: Install python-certbot-apache\r\n  become: true\r\n  yum: name=python-certbot-apache state=present\r\n\r\n- name: Set config to stop and restart with running certbot\r\n  become: yes\r\n  replace:\r\n    dest: /etc/sysconfig/certbot\r\n    regexp: &quot;{{ item.regexp }}&quot;\r\n    replace: &quot;{{ item.replace }}&quot;\r\n    backup: yes\r\n  with_items:\r\n    - {&#039;regexp&#039; : &#039;^PRE_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;PRE_HOOK=&quot;--pre-hook &#039;&#039;systemctl stop httpd&#039;&#039;&quot;&#039;}\r\n    - {&#039;regexp&#039; : &#039;^POST_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;POST_HOOK=&quot;--post-hook &#039;&#039;systemctl restart httpd&#039;&#039;&quot;&#039;}\r\n    - {&#039;regexp&#039; : &#039;^RENEW_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;RENEW_HOOK=&quot;--renew-hook &#039;&#039;systemctl restart httpd&#039;&#039;&quot;&#039;}\r\n```\r\n\r\n## VirtualHost vars\r\n ```yaml\r\nhttpd:\r\n  virtualhosts:\r\n    - hostname: \"virtualexample1.com\"\r\n      ssl: true\r\n      document_root: \"/var/www/vhosts/virtualexample1.com\"\r\n      log: \"/var/www/vhosts/virtualexample1.com/LOG\"\r\n      conf_options:\r\n        - AllowOverride All\r\n        - Options -Indexes +FollowSymLinks\r\n        - Options +ExecCGI\r\n        - AddHandler cgi-script .pl .cgi\r\n        - Order allow,deny\r\n        - Allow from all\r\n      conf_ssl_options:\r\n        - AllowOverride All\r\n        - Options -Indexes +FollowSymLinks\r\n        - Options +ExecCGI\r\n        - AddHandler cgi-script .pl .cgi\r\n        - Order allow,deny\r\n        - Allow from all\r\n      owner: \"vh1\"\r\n      group: \"vh1\"\r\n      recurse: \"yes\"\r\n      server_crt: \'/etc/pki/tls/certs/localhost.crt\'\r\n      server_key: \'/etc/pki/tls/private/localhost.key\'\r\n      server_chain: \'/etc/pki/tls/certs/ca-bundle.crt\'\r\n      letsencrypt:\r\n        state: \'present\'\r\n        name: \'letsencrypt virtualexample1.com\'\r\n        email: \'admin@virtualhostexample1.com\'\r\n        cron:\r\n          - name: \"letsencrypt 001\"\r\n            state: \"present\"\r\n            user: \'root\'\r\n            minute: \"0\"\r\n            hour: \"12\"\r\n            day: \"1\"\r\n            month: \"*\"\r\n            weekday: \"*\"\r\n          - name: \"letsencrypt 002\"\r\n            state: \"present\"\r\n            user: \'root\'\r\n            minute: \"0\"\r\n            hour: \"13\"\r\n            day: \"1\"\r\n            month: \"*\"\r\n            weekday: \"*\"\r\n\r\n ```\r\n\r\n ## Get cert\r\n ```yaml\r\n ---\r\n# tasks file for roles/httpd\r\n# letsncryp\r\n\r\n- name: Check privkey.pem exists\r\n  become: true\r\n  stat:\r\n    path: \"/etc/letsencrypt/live/{{ item.value.httpd.hostname }}/privkey.pem\"\r\n  register: key_exists\r\n  when:\r\n    - item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\r\n  with_dict:\r\n    - \"{{ virtualhosts }}\"\r\n\r\n- name: Get certs\r\n  become: yes\r\n  shell: >\r\n    certbot certonly -m {{ item.item.value.httpd.ssl.letsencrypt.email }}\r\n    --agree-tos\r\n    --non-interactive $*\r\n    --webroot\r\n    -w {{ item.item.value.httpd.host_dir }}{{ item.item.value.httpd.public_dir }}\r\n    -d {{ item.item.value.httpd.hostname }}\r\n  when:\r\n    - item.item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\r\n    - item.stat.exists is false\r\n    - item.item.value.httpd.ssl.letsencrypt.state == \'present\'\r\n  with_items:\r\n    - \"{{ key_exists.results }}\"\r\n\r\n- name: Install VirtualHost(https)\r\n  become: true\r\n  template:\r\n    src: templates/letsencrypt_virtualhost.conf.j2\r\n    dest: \"/etc/httpd/conf.d/letsencrypt_{{ item.value.httpd.hostname }}.conf\"\r\n  when:\r\n    - item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\r\n  with_dict:\r\n    - \"{{ virtualhosts }}\"\r\n  notify:\r\n    - Restart httpd\r\n\r\n- name: Remove VirtualHost(https)\r\n  become: true\r\n  file:\r\n    path: \"/etc/httpd/conf.d/letsencrypt_{{ item.value.httpd.hostname }}.conf\"\r\n    state: absent\r\n  when:\r\n    - item.value.httpd.ssl.ssl_provider != \'letsencrypt\'\r\n  with_dict:\r\n    - \"{{ virtualhosts }}\"\r\n  notify:\r\n    - Restart httpd\r\n\r\n- name: Remove keys\r\n  become: true\r\n  include: letsencrypt_delete_loop.yml\r\n  when:\r\n    - item.value.httpd.ssl.ssl_provider != \'letsencrypt\'\r\n  with_dict:\r\n    - \"{{ virtualhosts }}\"\r\n  notify:\r\n    - Restart httpd\r\n\r\n\r\n```\r\n\r\n\r\n## Cron vars\r\n```yaml\r\ncrontab:\r\n  letsencrypt:\r\n    name: \"letsencrypt {{ httpd_domain }}\"\r\n    state: \'present\'\r\n    user: \'root\'\r\n    job: /bin/bash -lc \"certbot certonly --force-renew --webroot -w {{ httpd_document_root }}{{ httpd_public_dir }} -d {{ httpd_domain }} --post-hook \'systemctl reload httpd\' > /dev/null 2>&1\"\r\n    minute: \"0\"\r\n    hour: \"12\"\r\n    day: \"1\"\r\n    month: \"*\"\r\n    weekday: \"*\"\r\n```\r\n\r\n## Cron tab\r\n```yaml\r\n\r\n---\r\n- name:  Cron control\r\n  become: yes\r\n  cron:\r\n    name: \" {{ item.value.name }}\"\r\n    state: \"{{ item.value.state }}\"\r\n    user: \"{{ item.value.user }}\"\r\n    minute: \"{{ item.value.minute }}\"\r\n    hour: \"{{ item.value.hour }}\"\r\n    day: \"{{ item.value.day }}\"\r\n    month: \"{{ item.value.month }}\"\r\n    weekday: \"{{ item.value.weekday }}\"\r\n    job: \"{{ item.value.job }}\"\r\n  with_dict:\r\n    - \"{{ crontab }}\"\r\n```\r\n\r\n## letsencrypt_virtualhost.conf (Jinja2 template)\r\n```conf\r\n<VirtualHost *:443>\r\n  ServerName {{ item.value.httpd.hostname }}\r\n  DocumentRoot {{ item.value.httpd.host_dir }}{{ item.value.httpd.public_dir }}\r\n  SSLEngine on\r\n  SSLCipherSuite AES256+EECDH:AES256+EDH\r\n  SSLProtocol All -SSLv2 -SSLv3\r\n  SSLHonorCipherOrder On\r\n  SSLCertificateFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/cert.pem\r\n  SSLCertificateKeyFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/privkey.pem\r\n  SSLCertificateChainFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/chain.pem\r\n  <Directory \"{{ item.value.httpd.host_dir }}{{ item.value.httpd.public_dir }}\">\r\n  {% for n in item.value.httpd.conf_ssl_options %}\r\n    {{ n }}\r\n  {% endfor %}\r\n  </Directory>\r\n  ErrorLog {{ item.value.httpd.log }}/error.log\r\n  CustomLog {{ item.value.httpd.log }}/access.log combined\r\n</VirtualHost>\r\n\r\n\r\n```',601,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/601-revision-v1/',0,'revision','',0),(603,1,'2020-12-14 13:07:17','2020-12-14 04:07:17','<h2>Install cerbot tasks</h2>\n<pre><code class=\"language-yaml\">- name: check installed cerbot\n  command: bash -lc &quot;certbot --version&quot;\n  register: certbot_exists\n  changed_when: False\n  ignore_errors: yes\n\n- name: install epel-release\n  become: true\n  yum:\n    name: epel-release\n    state: present\n    #when:\n    #  - certbot_exists is failed\n\n- name: Install certbot,certbot-apache\n  become: true\n  yum: name=certbot,certbot-apache state=present\n\n- name: Install python-certbot-apache\n  become: true\n  yum: name=python-certbot-apache state=present\n\n- name: Set config to stop and restart with running certbot\n  become: yes\n  replace:\n    dest: /etc/sysconfig/certbot\n    regexp: &quot;{{ item.regexp }}&quot;\n    replace: &quot;{{ item.replace }}&quot;\n    backup: yes\n  with_items:\n    - {&#039;regexp&#039; : &#039;^PRE_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;PRE_HOOK=&quot;--pre-hook &#039;&#039;systemctl stop httpd&#039;&#039;&quot;&#039;}\n    - {&#039;regexp&#039; : &#039;^POST_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;POST_HOOK=&quot;--post-hook &#039;&#039;systemctl restart httpd&#039;&#039;&quot;&#039;}\n    - {&#039;regexp&#039; : &#039;^RENEW_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;RENEW_HOOK=&quot;--renew-hook &#039;&#039;systemctl restart httpd&#039;&#039;&quot;&#039;}</code></pre>\n<h2>VirtualHost vars</h2>\n<pre><code class=\"language-yaml\">httpd:\n  virtualhosts:\n    - hostname: \"virtualexample1.com\"\n      ssl: true\n      document_root: \"/var/www/vhosts/virtualexample1.com\"\n      log: \"/var/www/vhosts/virtualexample1.com/LOG\"\n      conf_options:\n        - AllowOverride All\n        - Options -Indexes +FollowSymLinks\n        - Options +ExecCGI\n        - AddHandler cgi-script .pl .cgi\n        - Order allow,deny\n        - Allow from all\n      conf_ssl_options:\n        - AllowOverride All\n        - Options -Indexes +FollowSymLinks\n        - Options +ExecCGI\n        - AddHandler cgi-script .pl .cgi\n        - Order allow,deny\n        - Allow from all\n      owner: \"vh1\"\n      group: \"vh1\"\n      recurse: \"yes\"\n      server_crt: \'/etc/pki/tls/certs/localhost.crt\'\n      server_key: \'/etc/pki/tls/private/localhost.key\'\n      server_chain: \'/etc/pki/tls/certs/ca-bundle.crt\'\n      letsencrypt:\n        state: \'present\'\n        name: \'letsencrypt virtualexample1.com\'\n        email: \'admin@virtualhostexample1.com\'\n        cron:\n          - name: \"letsencrypt 001\"\n            state: \"present\"\n            user: \'root\'\n            minute: \"0\"\n            hour: \"12\"\n            day: \"1\"\n            month: \"*\"\n            weekday: \"*\"\n          - name: \"letsencrypt 002\"\n            state: \"present\"\n            user: \'root\'\n            minute: \"0\"\n            hour: \"13\"\n            day: \"1\"\n            month: \"*\"\n            weekday: \"*\"\n</code></pre>\n<h2>Get cert</h2>\n<pre><code class=\"language-yaml\"> ---\n# tasks file for roles/httpd\n# letsncryp\n\n- name: Check privkey.pem exists\n  become: true\n  stat:\n    path: \"/etc/letsencrypt/live/{{ item.value.httpd.hostname }}/privkey.pem\"\n  register: key_exists\n  when:\n    - item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\n  with_dict:\n    - \"{{ virtualhosts }}\"\n\n- name: Get certs\n  become: yes\n  shell: >\n    certbot certonly -m {{ item.item.value.httpd.ssl.letsencrypt.email }}\n    --agree-tos\n    --non-interactive $*\n    --webroot\n    -w {{ item.item.value.httpd.host_dir }}{{ item.item.value.httpd.public_dir }}\n    -d {{ item.item.value.httpd.hostname }}\n  when:\n    - item.item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\n    - item.stat.exists is false\n    - item.item.value.httpd.ssl.letsencrypt.state == \'present\'\n  with_items:\n    - \"{{ key_exists.results }}\"\n\n- name: Install VirtualHost(https)\n  become: true\n  template:\n    src: templates/letsencrypt_virtualhost.conf.j2\n    dest: \"/etc/httpd/conf.d/letsencrypt_{{ item.value.httpd.hostname }}.conf\"\n  when:\n    - item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\n  with_dict:\n    - \"{{ virtualhosts }}\"\n  notify:\n    - Restart httpd\n\n- name: Remove VirtualHost(https)\n  become: true\n  file:\n    path: \"/etc/httpd/conf.d/letsencrypt_{{ item.value.httpd.hostname }}.conf\"\n    state: absent\n  when:\n    - item.value.httpd.ssl.ssl_provider != \'letsencrypt\'\n  with_dict:\n    - \"{{ virtualhosts }}\"\n  notify:\n    - Restart httpd\n\n- name: Remove keys\n  become: true\n  include: letsencrypt_delete_loop.yml\n  when:\n    - item.value.httpd.ssl.ssl_provider != \'letsencrypt\'\n  with_dict:\n    - \"{{ virtualhosts }}\"\n  notify:\n    - Restart httpd\n</code></pre>\n<h2>Cron vars</h2>\n<pre><code class=\"language-yaml\">crontab:\n  letsencrypt:\n    name: \"letsencrypt {{ httpd_domain }}\"\n    state: \'present\'\n    user: \'root\'\n    job: /bin/bash -lc \"certbot certonly --force-renew --webroot -w {{ httpd_document_root }}{{ httpd_public_dir }} -d {{ httpd_domain }} --post-hook \'systemctl reload httpd\' > /dev/null 2>&1\"\n    minute: \"0\"\n    hour: \"12\"\n    day: \"1\"\n    month: \"*\"\n    weekday: \"*\"</code></pre>\n<h2>Cron tab</h2>\n<pre><code class=\"language-yaml\">\n---\n- name:  Cron control\n  become: yes\n  cron:\n    name: \" {{ item.value.name }}\"\n    state: \"{{ item.value.state }}\"\n    user: \"{{ item.value.user }}\"\n    minute: \"{{ item.value.minute }}\"\n    hour: \"{{ item.value.hour }}\"\n    day: \"{{ item.value.day }}\"\n    month: \"{{ item.value.month }}\"\n    weekday: \"{{ item.value.weekday }}\"\n    job: \"{{ item.value.job }}\"\n  with_dict:\n    - \"{{ crontab }}\"</code></pre>\n<h2>letsencrypt_virtualhost.conf (Jinja2 template)</h2>\n<pre><code class=\"language-conf\"><VirtualHost *:443>\n  ServerName {{ item.value.httpd.hostname }}\n  DocumentRoot {{ item.value.httpd.host_dir }}{{ item.value.httpd.public_dir }}\n  SSLEngine on\n  SSLCipherSuite AES256+EECDH:AES256+EDH\n  SSLProtocol All -SSLv2 -SSLv3\n  SSLHonorCipherOrder On\n  SSLCertificateFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/cert.pem\n  SSLCertificateKeyFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/privkey.pem\n  SSLCertificateChainFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/chain.pem\n  <Directory \"{{ item.value.httpd.host_dir }}{{ item.value.httpd.public_dir }}\">\n  {% for n in item.value.httpd.conf_ssl_options %}\n    {{ n }}\n  {% endfor %}\n  </Directory>\n  ErrorLog {{ item.value.httpd.log }}/error.log\n  CustomLog {{ item.value.httpd.log }}/access.log combined\n</VirtualHost>\n</code></pre>','Ansible, Let\'s Encrypt','今後\"Let\'s Encrypt\"の設定はAnsibleで行いたい。\r\nAnsibleのLet\'s Encryptテンプレート','inherit','closed','closed','','601-revision-v1','','','2020-12-14 13:07:17','2020-12-14 04:07:17','## Install cerbot tasks\r\n```yaml\r\n- name: check installed cerbot\r\n  command: bash -lc &quot;certbot --version&quot;\r\n  register: certbot_exists\r\n  changed_when: False\r\n  ignore_errors: yes\r\n\r\n\r\n- name: install epel-release\r\n  become: true\r\n  yum:\r\n    name: epel-release\r\n    state: present\r\n    #when:\r\n    #  - certbot_exists is failed\r\n\r\n- name: Install certbot,certbot-apache\r\n  become: true\r\n  yum: name=certbot,certbot-apache state=present\r\n\r\n- name: Install python-certbot-apache\r\n  become: true\r\n  yum: name=python-certbot-apache state=present\r\n\r\n- name: Set config to stop and restart with running certbot\r\n  become: yes\r\n  replace:\r\n    dest: /etc/sysconfig/certbot\r\n    regexp: &quot;{{ item.regexp }}&quot;\r\n    replace: &quot;{{ item.replace }}&quot;\r\n    backup: yes\r\n  with_items:\r\n    - {&#039;regexp&#039; : &#039;^PRE_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;PRE_HOOK=&quot;--pre-hook &#039;&#039;systemctl stop httpd&#039;&#039;&quot;&#039;}\r\n    - {&#039;regexp&#039; : &#039;^POST_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;POST_HOOK=&quot;--post-hook &#039;&#039;systemctl restart httpd&#039;&#039;&quot;&#039;}\r\n    - {&#039;regexp&#039; : &#039;^RENEW_HOOK=&quot;&quot;$&#039;, &#039;replace&#039; : &#039;RENEW_HOOK=&quot;--renew-hook &#039;&#039;systemctl restart httpd&#039;&#039;&quot;&#039;}\r\n```\r\n\r\n## VirtualHost vars\r\n ```yaml\r\nhttpd:\r\n  virtualhosts:\r\n    - hostname: \"virtualexample1.com\"\r\n      ssl: true\r\n      document_root: \"/var/www/vhosts/virtualexample1.com\"\r\n      log: \"/var/www/vhosts/virtualexample1.com/LOG\"\r\n      conf_options:\r\n        - AllowOverride All\r\n        - Options -Indexes +FollowSymLinks\r\n        - Options +ExecCGI\r\n        - AddHandler cgi-script .pl .cgi\r\n        - Order allow,deny\r\n        - Allow from all\r\n      conf_ssl_options:\r\n        - AllowOverride All\r\n        - Options -Indexes +FollowSymLinks\r\n        - Options +ExecCGI\r\n        - AddHandler cgi-script .pl .cgi\r\n        - Order allow,deny\r\n        - Allow from all\r\n      owner: \"vh1\"\r\n      group: \"vh1\"\r\n      recurse: \"yes\"\r\n      server_crt: \'/etc/pki/tls/certs/localhost.crt\'\r\n      server_key: \'/etc/pki/tls/private/localhost.key\'\r\n      server_chain: \'/etc/pki/tls/certs/ca-bundle.crt\'\r\n      letsencrypt:\r\n        state: \'present\'\r\n        name: \'letsencrypt virtualexample1.com\'\r\n        email: \'admin@virtualhostexample1.com\'\r\n        cron:\r\n          - name: \"letsencrypt 001\"\r\n            state: \"present\"\r\n            user: \'root\'\r\n            minute: \"0\"\r\n            hour: \"12\"\r\n            day: \"1\"\r\n            month: \"*\"\r\n            weekday: \"*\"\r\n          - name: \"letsencrypt 002\"\r\n            state: \"present\"\r\n            user: \'root\'\r\n            minute: \"0\"\r\n            hour: \"13\"\r\n            day: \"1\"\r\n            month: \"*\"\r\n            weekday: \"*\"\r\n\r\n ```\r\n\r\n ## Get cert\r\n ```yaml\r\n ---\r\n# tasks file for roles/httpd\r\n# letsncryp\r\n\r\n- name: Check privkey.pem exists\r\n  become: true\r\n  stat:\r\n    path: \"/etc/letsencrypt/live/{{ item.value.httpd.hostname }}/privkey.pem\"\r\n  register: key_exists\r\n  when:\r\n    - item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\r\n  with_dict:\r\n    - \"{{ virtualhosts }}\"\r\n\r\n- name: Get certs\r\n  become: yes\r\n  shell: >\r\n    certbot certonly -m {{ item.item.value.httpd.ssl.letsencrypt.email }}\r\n    --agree-tos\r\n    --non-interactive $*\r\n    --webroot\r\n    -w {{ item.item.value.httpd.host_dir }}{{ item.item.value.httpd.public_dir }}\r\n    -d {{ item.item.value.httpd.hostname }}\r\n  when:\r\n    - item.item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\r\n    - item.stat.exists is false\r\n    - item.item.value.httpd.ssl.letsencrypt.state == \'present\'\r\n  with_items:\r\n    - \"{{ key_exists.results }}\"\r\n\r\n- name: Install VirtualHost(https)\r\n  become: true\r\n  template:\r\n    src: templates/letsencrypt_virtualhost.conf.j2\r\n    dest: \"/etc/httpd/conf.d/letsencrypt_{{ item.value.httpd.hostname }}.conf\"\r\n  when:\r\n    - item.value.httpd.ssl.ssl_provider == \'letsencrypt\'\r\n  with_dict:\r\n    - \"{{ virtualhosts }}\"\r\n  notify:\r\n    - Restart httpd\r\n\r\n- name: Remove VirtualHost(https)\r\n  become: true\r\n  file:\r\n    path: \"/etc/httpd/conf.d/letsencrypt_{{ item.value.httpd.hostname }}.conf\"\r\n    state: absent\r\n  when:\r\n    - item.value.httpd.ssl.ssl_provider != \'letsencrypt\'\r\n  with_dict:\r\n    - \"{{ virtualhosts }}\"\r\n  notify:\r\n    - Restart httpd\r\n\r\n- name: Remove keys\r\n  become: true\r\n  include: letsencrypt_delete_loop.yml\r\n  when:\r\n    - item.value.httpd.ssl.ssl_provider != \'letsencrypt\'\r\n  with_dict:\r\n    - \"{{ virtualhosts }}\"\r\n  notify:\r\n    - Restart httpd\r\n\r\n\r\n```\r\n\r\n\r\n## Cron vars\r\n```yaml\r\ncrontab:\r\n  letsencrypt:\r\n    name: \"letsencrypt {{ httpd_domain }}\"\r\n    state: \'present\'\r\n    user: \'root\'\r\n    job: /bin/bash -lc \"certbot certonly --force-renew --webroot -w {{ httpd_document_root }}{{ httpd_public_dir }} -d {{ httpd_domain }} --post-hook \'systemctl reload httpd\' > /dev/null 2>&1\"\r\n    minute: \"0\"\r\n    hour: \"12\"\r\n    day: \"1\"\r\n    month: \"*\"\r\n    weekday: \"*\"\r\n```\r\n\r\n## Cron tab\r\n```yaml\r\n\r\n---\r\n- name:  Cron control\r\n  become: yes\r\n  cron:\r\n    name: \" {{ item.value.name }}\"\r\n    state: \"{{ item.value.state }}\"\r\n    user: \"{{ item.value.user }}\"\r\n    minute: \"{{ item.value.minute }}\"\r\n    hour: \"{{ item.value.hour }}\"\r\n    day: \"{{ item.value.day }}\"\r\n    month: \"{{ item.value.month }}\"\r\n    weekday: \"{{ item.value.weekday }}\"\r\n    job: \"{{ item.value.job }}\"\r\n  with_dict:\r\n    - \"{{ crontab }}\"\r\n```\r\n\r\n## letsencrypt_virtualhost.conf (Jinja2 template)\r\n```conf\r\n<VirtualHost *:443>\r\n  ServerName {{ item.value.httpd.hostname }}\r\n  DocumentRoot {{ item.value.httpd.host_dir }}{{ item.value.httpd.public_dir }}\r\n  SSLEngine on\r\n  SSLCipherSuite AES256+EECDH:AES256+EDH\r\n  SSLProtocol All -SSLv2 -SSLv3\r\n  SSLHonorCipherOrder On\r\n  SSLCertificateFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/cert.pem\r\n  SSLCertificateKeyFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/privkey.pem\r\n  SSLCertificateChainFile /etc/letsencrypt/live/{{ item.value.httpd.hostname }}/chain.pem\r\n  <Directory \"{{ item.value.httpd.host_dir }}{{ item.value.httpd.public_dir }}\">\r\n  {% for n in item.value.httpd.conf_ssl_options %}\r\n    {{ n }}\r\n  {% endfor %}\r\n  </Directory>\r\n  ErrorLog {{ item.value.httpd.log }}/error.log\r\n  CustomLog {{ item.value.httpd.log }}/access.log combined\r\n</VirtualHost>\r\n\r\n\r\n```',601,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/601-revision-v1/',0,'revision','',0),(604,1,'2020-12-14 13:13:38','2020-12-14 04:13:38','','ansible_letsencrypt','','inherit','closed','closed','','ansible_letsencrypt-2','','','2020-12-14 13:13:38','2020-12-14 04:13:38','',601,'https://blog.webdimension.jp/wp-content/uploads/2020/12/ansible_letsencrypt.png',0,'attachment','image/png',0),(605,1,'2020-12-14 13:59:44','2020-12-14 04:59:44','<h2>GitHub Actions</h2>\n<p>Project top dir に .github/workflows を作る</p>\n<pre><code class=\"language-bash\">mkdir -p .github/workflows</code></pre>\n<p>workflow ファイルを作成</p>\n<pre><code class=\"language-bash\">vim tests.yml</code></pre>\n<p>*参照<br />\n<a href=\"https://github.com/WEBDIMENSION/ansible-softether-for-conoha\">VPNサーバー(SoftEhter)をAnsibleでConoha-VPNサーバーへ構築</a></p>\n<pre><code class=\"language-yaml\">name: softeher_tests\non:\n  push:\n    branches: [ develop ] # Branch:develop へpush時に実行\n  pull_request:\n    branches: [ master ]  # Branch:maser へプルリクエスト時に実行\n\njobs:\n  build:\n    runs-on: ubuntu-1804  # Ubuntu18.04イメージを使用\n    steps:\n      - uses: actions/checkout@v2\n      - name: docker server start\n        run: |\n          docker build -f dockerfiles/centos7/Dockerfile . -t softether_server\n          docker run -itd --privileged --name softether_server softether_server\n          sleep 5\n          container_ip=$(docker inspect --format &quot;{{ .NetworkSettings.IPAddress }}&quot; softether_server)\n          echo &quot;server ip :  $container_ip&quot;\n          echo &quot;\n          [softether]\n          $container_ip\n          [softether:vars]\n          ansible_user=root\n          ansible_ssh_pass=password\n          &quot; &gt;&gt; hosts/act_root\n\n          echo &quot;\n          [softether]\n          $container_ip\n          [softether:vars]\n          ansible_user=ansible\n          ansible_port=50022\n          ansible_ssh_private_key_file=roles/ansible_user/files/ansible_rsa\n          &quot; &gt;&gt; hosts/act_user\n\n          ls -ls hosts/*\n\n          mkdir /github/home/.ssh\n          chmod 700 /github/home/.ssh\n          echo &quot;Host *\n                StrictHostKeyChecking no\n\n          ServerAliveInterval 60\n          ServerAliveCountMax 10&quot;  &gt;&gt; /github/home/.ssh/config\n\n          chmod 600 /github/home/.ssh/config\n          cat /github/home/.ssh/config\n\n          apt -y install make build-essential libssl-dev zlib1g-dev libbz2-dev \\\n          libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\\n          xz-utils tk-dev libffi-dev liblzma-dev\n\n          curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash\n          export PATH=&quot;/github/home/.pyenv/bin:$PATH&quot;\n          pyenv install 3.6.7\n          pyenv global 3.6.7\n          /github/home/.pyenv/shims/pip install -r requirements.txt\n\n          /github/home/.pyenv/shims/ansible-lint site.yml\n          /github/home/.pyenv/shims/black tests tests.py deploy deploy.py\n          /github/home/.pyenv/shims/flake8 tests tests.py deploy deploy.py\n\n          echo &#039;password&#039; &gt;&gt; vaultpass\n          /github/home/.pyenv/shims/ansible-playbook site.yml -i hosts/act_root -t softether\n          /github/home/.pyenv/shims/ansible-playbook site.yml -i hosts/act_user -t tools\n\n          /github/home/.pyenv/shims/py.test -v tests/testinfra.py \\\n          --connection=ssh \\\n          --hosts=&#039;ansible://softether&#039; \\\n          --ansible-inventory=&#039;hosts/act_user&#039; \\\n          --ssh-config=&#039;/github/home/.ssh/config&#039;\n\n# todo: variable from vars_file</code></pre>\n<h2>Matirx</h2>\n<pre><code class=\"language-yaml\"># Example\nname: tests\non:\n  push:\n    branches: [ develop ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n    strategy:\n      matrix:\n        docker_image: [ ubuntu18.04, ubuntu20.04 ] # &lt;- 指定したイメージで実行\n    runs-on: ${{ matrix.docker_image }}-latest\n    env:\n      DOCKER_USER: &quot;vagrant&quot;\n    steps:\n      - uses: actions/checkout@v2\n      - name: docker build\n        run: |\n          docker build -f dockerfiles/${{ matrix.docker_image }}/Dockerfile . -t ${{ matrix.docker_image }}\n          docker run -itd --privileged --name ${{ matrix.docker_image }} ${{ matrix.docker_image }}\n          sleep 5\n\n      - name: Ansible\n        run: |\n          container_ip=$(docker inspect --format &quot;{{ .NetworkSettings.IPAddress }}&quot; ${{ matrix.docker_image }})\n          echo &quot;ssh :  ${{ env.DOCKER_USER }}@$container_ip&quot;\n          chmod 600 .ssh/ansible_rsa\n          ssh -o StrictHostKeyChecking=no ${{ env.DOCKER_USER }}@$container_ip -i .ssh/ansible_rsa &quot;cd  ~/ansible &amp;&amp; \\\n          pip3 install -r requirements.txt &amp;&amp; \\\n          source ~/.profile &amp;&amp; \\\n          ansible-lint site.yml &amp;&amp; \\\n          black &amp;&amp; \\\n          flake8 tests &amp;&amp; \\\n          ansible-playbook -i hosts/develop site.yml -l ${{ matrix.docker_image }}&quot;</code></pre>\n<h2>ACT ( Exec Github Actions on local )</h2>\n<p>Install  for Linux , Mac</p>\n<pre><code class=\"language-bash\">curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash</code></pre>\n<p>Ansible tasks</p>\n<pre><code class=\"language-yaml\">---\n# tasks file for roles/act\n- name: check installed act\n  command: bash -lc &quot;act --version&quot;\n  register: act_exists\n  changed_when: False\n  ignore_errors: yes\n\n- name: Install act\n  become: yes\n  shell: |\n    bash -lc &quot;curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash&quot;\n  when: act_exists is failed</code></pre>','Github Actions 基本','Github Actions, Act (GitHub Actions の local実行)','publish','closed','open','','github_actions','','','2020-12-14 13:59:44','2020-12-14 04:59:44','## GitHub Actions\r\nProject top dir に .github/workflows を作る\r\n```bash\r\nmkdir -p .github/workflows\r\n```\r\nworkflow ファイルを作成\r\n```bash\r\nvim tests.yml\r\n```\r\n*参照    \r\n[VPNサーバー(SoftEhter)をAnsibleでConoha-VPNサーバーへ構築](https://github.com/WEBDIMENSION/ansible-softether-for-conoha)\r\n\r\n```yaml\r\nname: softeher_tests\r\non:\r\n  push:\r\n    branches: [ develop ] # Branch:develop へpush時に実行\r\n  pull_request:\r\n    branches: [ master ]  # Branch:maser へプルリクエスト時に実行\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-1804  # Ubuntu18.04イメージを使用\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n      - name: docker server start\r\n        run: |\r\n          docker build -f dockerfiles/centos7/Dockerfile . -t softether_server\r\n          docker run -itd --privileged --name softether_server softether_server\r\n          sleep 5\r\n          container_ip=$(docker inspect --format &quot;{{ .NetworkSettings.IPAddress }}&quot; softether_server)\r\n          echo &quot;server ip :  $container_ip&quot;\r\n          echo &quot;\r\n          [softether]\r\n          $container_ip\r\n          [softether:vars]\r\n          ansible_user=root\r\n          ansible_ssh_pass=password\r\n          &quot; &gt;&gt; hosts/act_root\r\n\r\n          echo &quot;\r\n          [softether]\r\n          $container_ip\r\n          [softether:vars]\r\n          ansible_user=ansible\r\n          ansible_port=50022\r\n          ansible_ssh_private_key_file=roles/ansible_user/files/ansible_rsa\r\n          &quot; &gt;&gt; hosts/act_user\r\n\r\n          ls -ls hosts/*\r\n\r\n          mkdir /github/home/.ssh\r\n          chmod 700 /github/home/.ssh\r\n          echo &quot;Host *\r\n                StrictHostKeyChecking no\r\n\r\n          ServerAliveInterval 60\r\n          ServerAliveCountMax 10&quot;  &gt;&gt; /github/home/.ssh/config\r\n\r\n          chmod 600 /github/home/.ssh/config\r\n          cat /github/home/.ssh/config\r\n\r\n          apt -y install make build-essential libssl-dev zlib1g-dev libbz2-dev \\\r\n          libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\\r\n          xz-utils tk-dev libffi-dev liblzma-dev\r\n\r\n          curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash\r\n          export PATH=&quot;/github/home/.pyenv/bin:$PATH&quot;\r\n          pyenv install 3.6.7\r\n          pyenv global 3.6.7\r\n          /github/home/.pyenv/shims/pip install -r requirements.txt\r\n\r\n\r\n\r\n          /github/home/.pyenv/shims/ansible-lint site.yml\r\n          /github/home/.pyenv/shims/black tests tests.py deploy deploy.py\r\n          /github/home/.pyenv/shims/flake8 tests tests.py deploy deploy.py\r\n\r\n          echo &#039;password&#039; &gt;&gt; vaultpass\r\n          /github/home/.pyenv/shims/ansible-playbook site.yml -i hosts/act_root -t softether\r\n          /github/home/.pyenv/shims/ansible-playbook site.yml -i hosts/act_user -t tools\r\n\r\n\r\n          /github/home/.pyenv/shims/py.test -v tests/testinfra.py \\\r\n          --connection=ssh \\\r\n          --hosts=&#039;ansible://softether&#039; \\\r\n          --ansible-inventory=&#039;hosts/act_user&#039; \\\r\n		  --ssh-config=&#039;/github/home/.ssh/config&#039;\r\n\r\n# todo: variable from vars_file\r\n```\r\n\r\n## Matirx\r\n```yaml\r\n# Example\r\nname: tests\r\non:\r\n  push:\r\n    branches: [ develop ]\r\n  pull_request:\r\n    branches: [ master ]\r\n\r\njobs:\r\n  build:\r\n    strategy:\r\n      matrix:\r\n        docker_image: [ ubuntu18.04, ubuntu20.04 ] # &lt;- 指定したイメージで実行\r\n    runs-on: ${{ matrix.docker_image }}-latest\r\n    env:\r\n      DOCKER_USER: &quot;vagrant&quot;\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n      - name: docker build\r\n        run: |\r\n          docker build -f dockerfiles/${{ matrix.docker_image }}/Dockerfile . -t ${{ matrix.docker_image }}\r\n          docker run -itd --privileged --name ${{ matrix.docker_image }} ${{ matrix.docker_image }}\r\n          sleep 5\r\n\r\n      - name: Ansible\r\n        run: |\r\n          container_ip=$(docker inspect --format &quot;{{ .NetworkSettings.IPAddress }}&quot; ${{ matrix.docker_image }})\r\n          echo &quot;ssh :  ${{ env.DOCKER_USER }}@$container_ip&quot;\r\n          chmod 600 .ssh/ansible_rsa\r\n          ssh -o StrictHostKeyChecking=no ${{ env.DOCKER_USER }}@$container_ip -i .ssh/ansible_rsa &quot;cd  ~/ansible &amp;&amp; \\\r\n          pip3 install -r requirements.txt &amp;&amp; \\\r\n          source ~/.profile &amp;&amp; \\\r\n          ansible-lint site.yml &amp;&amp; \\\r\n          black &amp;&amp; \\\r\n          flake8 tests &amp;&amp; \\\r\n          ansible-playbook -i hosts/develop site.yml -l ${{ matrix.docker_image }}&quot;\r\n```\r\n\r\n\r\n## ACT ( Exec Github Actions on local )\r\nInstall  for Linux , Mac\r\n```bash\r\ncurl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash\r\n```\r\nAnsible tasks\r\n```yaml\r\n---\r\n# tasks file for roles/act\r\n- name: check installed act\r\n  command: bash -lc &quot;act --version&quot;\r\n  register: act_exists\r\n  changed_when: False\r\n  ignore_errors: yes\r\n\r\n\r\n- name: Install act\r\n  become: yes\r\n  shell: |\r\n    bash -lc &quot;curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash&quot;\r\n  when: act_exists is failed\r\n```',0,'https://blog.webdimension.jp/?p=605',0,'post','',0),(606,1,'2020-12-14 13:19:49','2020-12-14 04:19:49','<h2>GitHub Actions</h2>\n<p>Project top dir に .github/workflows を作る</p>\n<pre><code class=\"language-bash\">mkdir -p .github/workflows</code></pre>\n<p>workflow ファイルを作成</p>\n<pre><code class=\"language-bash\">vim tests.yml</code></pre>\n<p>*参照<br />\n<a href=\"https://github.com/WEBDIMENSION/ansible-softether-for-conoha\">VPNサーバー(SoftEhter)をAnsibleでConoha-VPNサーバーへ構築</a></p>\n<pre><code class=\"language-yaml\">name: softeher_tests\non:\n  push:\n    branches: [ develop ] # Branch:develop へpush時に実行\n  pull_request:\n    branches: [ master ]  # Branch:maser へプルリクエスト時に実行\n\njobs:\n  build:\n    runs-on: ubuntu-1804  # Ubuntu18.04イメージを使用\n    steps:\n      - uses: actions/checkout@v2\n      - name: docker server start\n        run: |\n          docker build -f dockerfiles/centos7/Dockerfile . -t softether_server\n          docker run -itd --privileged --name softether_server softether_server\n          sleep 5\n          container_ip=$(docker inspect --format &quot;{{ .NetworkSettings.IPAddress }}&quot; softether_server)\n          echo &quot;server ip :  $container_ip&quot;\n          echo &quot;\n          [softether]\n          $container_ip\n          [softether:vars]\n          ansible_user=root\n          ansible_ssh_pass=password\n          &quot; &gt;&gt; hosts/act_root\n\n          echo &quot;\n          [softether]\n          $container_ip\n          [softether:vars]\n          ansible_user=ansible\n          ansible_port=50022\n          ansible_ssh_private_key_file=roles/ansible_user/files/ansible_rsa\n          &quot; &gt;&gt; hosts/act_user\n\n          ls -ls hosts/*\n\n          mkdir /github/home/.ssh\n          chmod 700 /github/home/.ssh\n          echo &quot;Host *\n                StrictHostKeyChecking no\n\n          ServerAliveInterval 60\n          ServerAliveCountMax 10&quot;  &gt;&gt; /github/home/.ssh/config\n\n          chmod 600 /github/home/.ssh/config\n          cat /github/home/.ssh/config\n\n          apt -y install make build-essential libssl-dev zlib1g-dev libbz2-dev \\\n          libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\\n          xz-utils tk-dev libffi-dev liblzma-dev\n\n          curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash\n          export PATH=&quot;/github/home/.pyenv/bin:$PATH&quot;\n          pyenv install 3.6.7\n          pyenv global 3.6.7\n          /github/home/.pyenv/shims/pip install -r requirements.txt\n\n          /github/home/.pyenv/shims/ansible-lint site.yml\n          /github/home/.pyenv/shims/black tests tests.py deploy deploy.py\n          /github/home/.pyenv/shims/flake8 tests tests.py deploy deploy.py\n\n          echo &#039;password&#039; &gt;&gt; vaultpass\n          /github/home/.pyenv/shims/ansible-playbook site.yml -i hosts/act_root -t softether\n          /github/home/.pyenv/shims/ansible-playbook site.yml -i hosts/act_user -t tools\n\n          /github/home/.pyenv/shims/py.test -v tests/testinfra.py \\\n          --connection=ssh \\\n          --hosts=&#039;ansible://softether&#039; \\\n          --ansible-inventory=&#039;hosts/act_user&#039; \\\n          --ssh-config=&#039;/github/home/.ssh/config&#039;\n\n# todo: variable from vars_file</code></pre>\n<h2>Matirx</h2>\n<pre><code class=\"language-yaml\"># Example\nname: tests\non:\n  push:\n    branches: [ develop ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n    strategy:\n      matrix:\n        docker_image: [ ubuntu18.04, ubuntu20.04 ] # &lt;- 指定したイメージで実行\n    runs-on: ${{ matrix.docker_image }}-latest\n    env:\n      DOCKER_USER: &quot;vagrant&quot;\n    steps:\n      - uses: actions/checkout@v2\n      - name: docker build\n        run: |\n          docker build -f dockerfiles/${{ matrix.docker_image }}/Dockerfile . -t ${{ matrix.docker_image }}\n          docker run -itd --privileged --name ${{ matrix.docker_image }} ${{ matrix.docker_image }}\n          sleep 5\n\n      - name: Ansible\n        run: |\n          container_ip=$(docker inspect --format &quot;{{ .NetworkSettings.IPAddress }}&quot; ${{ matrix.docker_image }})\n          echo &quot;ssh :  ${{ env.DOCKER_USER }}@$container_ip&quot;\n          chmod 600 .ssh/ansible_rsa\n          ssh -o StrictHostKeyChecking=no ${{ env.DOCKER_USER }}@$container_ip -i .ssh/ansible_rsa &quot;cd  ~/ansible &amp;&amp; \\\n          pip3 install -r requirements.txt &amp;&amp; \\\n          source ~/.profile &amp;&amp; \\\n          ansible-lint site.yml &amp;&amp; \\\n          black &amp;&amp; \\\n          flake8 tests &amp;&amp; \\\n          ansible-playbook -i hosts/develop site.yml -l ${{ matrix.docker_image }}&quot;</code></pre>\n<h2>ACT ( Exec Github Actions on local )</h2>\n<p>Install  for Linux , Mac</p>\n<pre><code class=\"language-bash\">curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash</code></pre>\n<p>Ansible tasks</p>\n<pre><code class=\"language-yaml\">---\n# tasks file for roles/act\n- name: check installed act\n  command: bash -lc &quot;act --version&quot;\n  register: act_exists\n  changed_when: False\n  ignore_errors: yes\n\n- name: Install act\n  become: yes\n  shell: |\n    bash -lc &quot;curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash&quot;\n  when: act_exists is failed</code></pre>','Github Actions 基本','Github Actions, Act (GitHub Actions の local実行)','inherit','closed','closed','','605-revision-v1','','','2020-12-14 13:19:49','2020-12-14 04:19:49','## GitHub Actions\r\nProject top dir に .github/workflows を作る\r\n```bash\r\nmkdir -p .github/workflows\r\n```\r\nworkflow ファイルを作成\r\n```bash\r\nvim tests.yml\r\n```\r\n*参照    \r\n[VPNサーバー(SoftEhter)をAnsibleでConoha-VPNサーバーへ構築](https://github.com/WEBDIMENSION/ansible-softether-for-conoha)\r\n\r\n```yaml\r\nname: softeher_tests\r\non:\r\n  push:\r\n    branches: [ develop ] # Branch:develop へpush時に実行\r\n  pull_request:\r\n    branches: [ master ]  # Branch:maser へプルリクエスト時に実行\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-1804  # Ubuntu18.04イメージを使用\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n      - name: docker server start\r\n        run: |\r\n          docker build -f dockerfiles/centos7/Dockerfile . -t softether_server\r\n          docker run -itd --privileged --name softether_server softether_server\r\n          sleep 5\r\n          container_ip=$(docker inspect --format &quot;{{ .NetworkSettings.IPAddress }}&quot; softether_server)\r\n          echo &quot;server ip :  $container_ip&quot;\r\n          echo &quot;\r\n          [softether]\r\n          $container_ip\r\n          [softether:vars]\r\n          ansible_user=root\r\n          ansible_ssh_pass=password\r\n          &quot; &gt;&gt; hosts/act_root\r\n\r\n          echo &quot;\r\n          [softether]\r\n          $container_ip\r\n          [softether:vars]\r\n          ansible_user=ansible\r\n          ansible_port=50022\r\n          ansible_ssh_private_key_file=roles/ansible_user/files/ansible_rsa\r\n          &quot; &gt;&gt; hosts/act_user\r\n\r\n          ls -ls hosts/*\r\n\r\n          mkdir /github/home/.ssh\r\n          chmod 700 /github/home/.ssh\r\n          echo &quot;Host *\r\n                StrictHostKeyChecking no\r\n\r\n          ServerAliveInterval 60\r\n          ServerAliveCountMax 10&quot;  &gt;&gt; /github/home/.ssh/config\r\n\r\n          chmod 600 /github/home/.ssh/config\r\n          cat /github/home/.ssh/config\r\n\r\n          apt -y install make build-essential libssl-dev zlib1g-dev libbz2-dev \\\r\n          libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\\r\n          xz-utils tk-dev libffi-dev liblzma-dev\r\n\r\n          curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash\r\n          export PATH=&quot;/github/home/.pyenv/bin:$PATH&quot;\r\n          pyenv install 3.6.7\r\n          pyenv global 3.6.7\r\n          /github/home/.pyenv/shims/pip install -r requirements.txt\r\n\r\n\r\n\r\n          /github/home/.pyenv/shims/ansible-lint site.yml\r\n          /github/home/.pyenv/shims/black tests tests.py deploy deploy.py\r\n          /github/home/.pyenv/shims/flake8 tests tests.py deploy deploy.py\r\n\r\n          echo &#039;password&#039; &gt;&gt; vaultpass\r\n          /github/home/.pyenv/shims/ansible-playbook site.yml -i hosts/act_root -t softether\r\n          /github/home/.pyenv/shims/ansible-playbook site.yml -i hosts/act_user -t tools\r\n\r\n\r\n          /github/home/.pyenv/shims/py.test -v tests/testinfra.py \\\r\n          --connection=ssh \\\r\n          --hosts=&#039;ansible://softether&#039; \\\r\n          --ansible-inventory=&#039;hosts/act_user&#039; \\\r\n		  --ssh-config=&#039;/github/home/.ssh/config&#039;\r\n\r\n# todo: variable from vars_file\r\n```\r\n\r\n## Matirx\r\n```yaml\r\n# Example\r\nname: tests\r\non:\r\n  push:\r\n    branches: [ develop ]\r\n  pull_request:\r\n    branches: [ master ]\r\n\r\njobs:\r\n  build:\r\n    strategy:\r\n      matrix:\r\n        docker_image: [ ubuntu18.04, ubuntu20.04 ] # &lt;- 指定したイメージで実行\r\n    runs-on: ${{ matrix.docker_image }}-latest\r\n    env:\r\n      DOCKER_USER: &quot;vagrant&quot;\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n      - name: docker build\r\n        run: |\r\n          docker build -f dockerfiles/${{ matrix.docker_image }}/Dockerfile . -t ${{ matrix.docker_image }}\r\n          docker run -itd --privileged --name ${{ matrix.docker_image }} ${{ matrix.docker_image }}\r\n          sleep 5\r\n\r\n      - name: Ansible\r\n        run: |\r\n          container_ip=$(docker inspect --format &quot;{{ .NetworkSettings.IPAddress }}&quot; ${{ matrix.docker_image }})\r\n          echo &quot;ssh :  ${{ env.DOCKER_USER }}@$container_ip&quot;\r\n          chmod 600 .ssh/ansible_rsa\r\n          ssh -o StrictHostKeyChecking=no ${{ env.DOCKER_USER }}@$container_ip -i .ssh/ansible_rsa &quot;cd  ~/ansible &amp;&amp; \\\r\n          pip3 install -r requirements.txt &amp;&amp; \\\r\n          source ~/.profile &amp;&amp; \\\r\n          ansible-lint site.yml &amp;&amp; \\\r\n          black &amp;&amp; \\\r\n          flake8 tests &amp;&amp; \\\r\n          ansible-playbook -i hosts/develop site.yml -l ${{ matrix.docker_image }}&quot;\r\n```\r\n\r\n\r\n## ACT ( Exec Github Actions on local )\r\nInstall  for Linux , Mac\r\n```bash\r\ncurl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash\r\n```\r\nAnsible tasks\r\n```yaml\r\n---\r\n# tasks file for roles/act\r\n- name: check installed act\r\n  command: bash -lc &quot;act --version&quot;\r\n  register: act_exists\r\n  changed_when: False\r\n  ignore_errors: yes\r\n\r\n\r\n- name: Install act\r\n  become: yes\r\n  shell: |\r\n    bash -lc &quot;curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash&quot;\r\n  when: act_exists is failed\r\n```',605,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/605-revision-v1/',0,'revision','',0),(607,1,'2020-12-14 13:56:20','2020-12-14 04:56:20','','github_actions','','inherit','closed','closed','','github_actions-2','','','2020-12-14 13:56:20','2020-12-14 04:56:20','',605,'https://blog.webdimension.jp/wp-content/uploads/2020/12/github_actions.png',0,'attachment','image/png',0),(608,1,'2020-12-15 11:56:02','2020-12-15 02:56:02','<h2>Model Middleware 登録</h2>\n<pre><code class=\"language-bash\">// Model 作成\nphp artisan make:model Models/Admin/AccessReport -m\n// Middleware 作成\nphp artisan make:middleware AccessReportMiddleware</code></pre>\n<h3>Models/Admin/AccessReport.php</h3>\n<pre><code class=\"language-php\">\nnamespace App\\Models\\Admin;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass AccessReport extends Model\n{\n    // カラム CREATED_AT を &#039;access_datetime&#039;に変更\n    const CREATED_AT = &#039;access_datetime&#039;;\n    const UPDATED_AT = null;\n    // Table名を&#039;access_report&#039;と指定\n    protected $table = &#039;access_report&#039;;\n    // primary key を admin_id と指定\n    protected $primaryKey = &#039;admin_id&#039;;\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        // 変更許可カラム\n        &#039;staff_id&#039;, &#039;execution_file&#039;, &#039;from_ipaddress&#039;, &#039;project_id&#039;\n    ];\n\n    /**\n     * The attributes that should be hidden for arrays.\n     *\n     * @var array\n     */\n    protected $hidden = [\n    ];\n\n}</code></pre>\n<h2>laravel/app/Http/Middleware/AccessReportMiddleware.php</h2>\n<pre><code class=\"language-php\">\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse App\\Models\\Admin\\AccessReport;\nuse \\Route;\n\nclass AccessReportMiddleware\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        $response = $next($request);\n\n        $this-&gt;accessReport($request, $response-&gt;status());\n\n        return $response;\n//        return $next($request);\n    }\n    public function accessReport($request, $status)\n    {\n        $user = $request -&gt; user();\n        $data = [\n//            &#039;staff_id&#039; =&gt; $user ? $user-&gt;id : 0,\n            &#039;staff_id&#039; =&gt; 1,\n            &#039;execution_file&#039; =&gt; $request -&gt; path(), // URIを格納\n            &#039;from_ipaddress&#039; =&gt; $request -&gt; ip(), //アクセス元IPを格納\n            &#039;project_id&#039; =&gt; 0,\n        ];\n        AccessReport::create($data);\n    }\n}</code></pre>\n<h2>App/Http/Kernel.php</h2>\n<pre><code class=\"language-php\">    protected $routeMiddleware = [\n        &#039;auth&#039; =&gt; \\App\\Http\\Middleware\\Authenticate::class,\n        // Middleware へ 登録\n        &#039;acr&#039; =&gt; \\App\\Http\\Middleware\\AccessReportMiddleware::class,\n        &#039;auth.basic&#039; =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n        &#039;bindings&#039; =&gt; \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        &#039;cache.headers&#039; =&gt; \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,\n        &#039;can&#039; =&gt; \\Illuminate\\Auth\\Middleware\\Authorize::class,\n        &#039;guest&#039; =&gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n        &#039;password.confirm&#039; =&gt; \\Illuminate\\Auth\\Middleware\\RequirePassword::class,\n        &#039;signed&#039; =&gt; \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n        &#039;throttle&#039; =&gt; \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n        &#039;verified&#039; =&gt; \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,\n    ];</code></pre>\n<h2>database/migrations/[DATETIME]_create_access_reports_table.php</h2>\n<pre><code class=\"language-php\">\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateAccessReportsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create(&#039;access_report&#039;, function (Blueprint $table) {\n            $table-&gt;bigIncrements(&#039;report_id&#039;);\n            $table-&gt;bigInteger(&#039;staff_id&#039;);\n            $table-&gt;text(&#039;execution_file&#039;);\n            $table-&gt;char(&#039;from_ipaddress&#039;, 15);\n            $table-&gt;dateTime(&#039;access_datetime&#039;);\n            $table-&gt;bigInteger(&#039;project_id&#039;);\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists(&#039;access_report&#039;);\n    }\n}</code></pre>\n<ul>\n<li>\n</li>\n</ul>','laravel middleware で access履歴','Laravel middleware を実践してみる','publish','closed','open','','laravel_middleware-_accesslog','','','2020-12-15 11:56:02','2020-12-15 02:56:02','## Model Middleware 登録\r\n```bash\r\n// Model 作成\r\nphp artisan make:model Models/Admin/AccessReport -m\r\n// Middleware 作成\r\nphp artisan make:middleware AccessReportMiddleware\r\n```\r\n### Models/Admin/AccessReport.php \r\n```php\r\n\r\nnamespace App\\Models\\Admin;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass AccessReport extends Model\r\n{\r\n	// カラム CREATED_AT を &#039;access_datetime&#039;に変更\r\n    const CREATED_AT = &#039;access_datetime&#039;;\r\n	const UPDATED_AT = null;\r\n	// Table名を&#039;access_report&#039;と指定\r\n	protected $table = &#039;access_report&#039;;\r\n	// primary key を admin_id と指定\r\n    protected $primaryKey = &#039;admin_id&#039;;\r\n    /**\r\n     * The attributes that are mass assignable.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $fillable = [\r\n		// 変更許可カラム\r\n        &#039;staff_id&#039;, &#039;execution_file&#039;, &#039;from_ipaddress&#039;, &#039;project_id&#039;\r\n    ];\r\n\r\n    /**\r\n     * The attributes that should be hidden for arrays.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $hidden = [\r\n    ];\r\n\r\n\r\n}\r\n```\r\n## laravel/app/Http/Middleware/AccessReportMiddleware.php\r\n```php\r\n\r\nnamespace App\\Http\\Middleware;\r\n\r\nuse Closure;\r\nuse App\\Models\\Admin\\AccessReport;\r\nuse \\Route;\r\n\r\nclass AccessReportMiddleware\r\n{\r\n    /**\r\n     * Handle an incoming request.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @param  \\Closure  $next\r\n     * @return mixed\r\n     */\r\n    public function handle($request, Closure $next)\r\n    {\r\n        $response = $next($request);\r\n\r\n        $this-&gt;accessReport($request, $response-&gt;status());\r\n\r\n        return $response;\r\n//        return $next($request);\r\n    }\r\n    public function accessReport($request, $status)\r\n    {\r\n        $user = $request -&gt; user();\r\n        $data = [\r\n//            &#039;staff_id&#039; =&gt; $user ? $user-&gt;id : 0,\r\n            &#039;staff_id&#039; =&gt; 1,\r\n            &#039;execution_file&#039; =&gt; $request -&gt; path(), // URIを格納\r\n            &#039;from_ipaddress&#039; =&gt; $request -&gt; ip(), //アクセス元IPを格納\r\n            &#039;project_id&#039; =&gt; 0,\r\n        ];\r\n        AccessReport::create($data);\r\n    }\r\n}\r\n```\r\n## App/Http/Kernel.php \r\n```php\r\n    protected $routeMiddleware = [\r\n		&#039;auth&#039; =&gt; \\App\\Http\\Middleware\\Authenticate::class,\r\n		// Middleware へ 登録\r\n        &#039;acr&#039; =&gt; \\App\\Http\\Middleware\\AccessReportMiddleware::class,\r\n        &#039;auth.basic&#039; =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\r\n        &#039;bindings&#039; =&gt; \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\r\n        &#039;cache.headers&#039; =&gt; \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,\r\n        &#039;can&#039; =&gt; \\Illuminate\\Auth\\Middleware\\Authorize::class,\r\n        &#039;guest&#039; =&gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\r\n        &#039;password.confirm&#039; =&gt; \\Illuminate\\Auth\\Middleware\\RequirePassword::class,\r\n        &#039;signed&#039; =&gt; \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\r\n        &#039;throttle&#039; =&gt; \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\r\n        &#039;verified&#039; =&gt; \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,\r\n    ];\r\n```\r\n\r\n## database/migrations/[DATETIME]_create_access_reports_table.php\r\n```php\r\n\r\nuse Illuminate\\Database\\Migrations\\Migration;\r\nuse Illuminate\\Database\\Schema\\Blueprint;\r\nuse Illuminate\\Support\\Facades\\Schema;\r\n\r\nclass CreateAccessReportsTable extends Migration\r\n{\r\n    /**\r\n     * Run the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function up()\r\n    {\r\n        Schema::create(&#039;access_report&#039;, function (Blueprint $table) {\r\n            $table-&gt;bigIncrements(&#039;report_id&#039;);\r\n            $table-&gt;bigInteger(&#039;staff_id&#039;);\r\n            $table-&gt;text(&#039;execution_file&#039;);\r\n            $table-&gt;char(&#039;from_ipaddress&#039;, 15);\r\n            $table-&gt;dateTime(&#039;access_datetime&#039;);\r\n            $table-&gt;bigInteger(&#039;project_id&#039;);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reverse the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function down()\r\n    {\r\n        Schema::dropIfExists(&#039;access_report&#039;);\r\n    }\r\n}\r\n```\r\n- ',0,'https://blog.webdimension.jp/?p=608',0,'post','',0),(609,1,'2020-12-15 11:49:26','2020-12-15 02:49:26','','laravel_middelware','','inherit','closed','closed','','laravel_middelware','','','2020-12-15 11:49:26','2020-12-15 02:49:26','',608,'https://blog.webdimension.jp/wp-content/uploads/2020/12/laravel_middelware.png',0,'attachment','image/png',0),(610,1,'2020-12-15 11:49:40','2020-12-15 02:49:40','<h2>Model Middleware 登録</h2>\n<pre><code class=\"language-bash\">// Model 作成\nphp artisan make:model Models/Admin/AccessReport -m\n// Middleware 作成\nphp artisan make:middleware AccessReportMiddleware</code></pre>\n<h3>Models/Admin/AccessReport.php</h3>\n<pre><code class=\"language-php\">\nnamespace App\\Models\\Admin;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass AccessReport extends Model\n{\n    // カラム CREATED_AT を &#039;access_datetime&#039;に変更\n    const CREATED_AT = &#039;access_datetime&#039;;\n    const UPDATED_AT = null;\n    // Table名を&#039;access_report&#039;と指定\n    protected $table = &#039;access_report&#039;;\n    // primary key を admin_id と指定\n    protected $primaryKey = &#039;admin_id&#039;;\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        // 変更許可カラム\n        &#039;staff_id&#039;, &#039;execution_file&#039;, &#039;from_ipaddress&#039;, &#039;project_id&#039;\n    ];\n\n    /**\n     * The attributes that should be hidden for arrays.\n     *\n     * @var array\n     */\n    protected $hidden = [\n    ];\n\n}</code></pre>\n<h2>laravel/app/Http/Middleware/AccessReportMiddleware.php</h2>\n<pre><code class=\"language-php\">\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse App\\Models\\Admin\\AccessReport;\nuse \\Route;\n\nclass AccessReportMiddleware\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        $response = $next($request);\n\n        $this-&gt;accessReport($request, $response-&gt;status());\n\n        return $response;\n//        return $next($request);\n    }\n    public function accessReport($request, $status)\n    {\n        $user = $request -&gt; user();\n        $data = [\n//            &#039;staff_id&#039; =&gt; $user ? $user-&gt;id : 0,\n            &#039;staff_id&#039; =&gt; 1,\n            &#039;execution_file&#039; =&gt; $request -&gt; path(), // URIを格納\n            &#039;from_ipaddress&#039; =&gt; $request -&gt; ip(), //アクセス元IPを格納\n            &#039;project_id&#039; =&gt; 0,\n        ];\n        AccessReport::create($data);\n    }\n}</code></pre>\n<h2>App/Http/Kernel.php</h2>\n<pre><code class=\"language-php\">    protected $routeMiddleware = [\n        &#039;auth&#039; =&gt; \\App\\Http\\Middleware\\Authenticate::class,\n        // Middleware へ 登録\n        &#039;acr&#039; =&gt; \\App\\Http\\Middleware\\AccessReportMiddleware::class,\n        &#039;auth.basic&#039; =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n        &#039;bindings&#039; =&gt; \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        &#039;cache.headers&#039; =&gt; \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,\n        &#039;can&#039; =&gt; \\Illuminate\\Auth\\Middleware\\Authorize::class,\n        &#039;guest&#039; =&gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n        &#039;password.confirm&#039; =&gt; \\Illuminate\\Auth\\Middleware\\RequirePassword::class,\n        &#039;signed&#039; =&gt; \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n        &#039;throttle&#039; =&gt; \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n        &#039;verified&#039; =&gt; \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,\n    ];</code></pre>\n<h2>database/migrations/[DATETIME]_create_access_reports_table.php</h2>\n<pre><code class=\"language-php\">\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateAccessReportsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create(&#039;access_report&#039;, function (Blueprint $table) {\n            $table-&gt;bigIncrements(&#039;report_id&#039;);\n            $table-&gt;bigInteger(&#039;staff_id&#039;);\n            $table-&gt;text(&#039;execution_file&#039;);\n            $table-&gt;char(&#039;from_ipaddress&#039;, 15);\n            $table-&gt;dateTime(&#039;access_datetime&#039;);\n            $table-&gt;bigInteger(&#039;project_id&#039;);\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists(&#039;access_report&#039;);\n    }\n}</code></pre>\n<ul>\n<li>\n</li>\n</ul>','laravel middleware で access履歴','Laravel middleware を実践してみる','inherit','closed','closed','','608-revision-v1','','','2020-12-15 11:49:40','2020-12-15 02:49:40','## Model Middleware 登録\r\n```bash\r\n// Model 作成\r\nphp artisan make:model Models/Admin/AccessReport -m\r\n// Middleware 作成\r\nphp artisan make:middleware AccessReportMiddleware\r\n```\r\n### Models/Admin/AccessReport.php \r\n```php\r\n\r\nnamespace App\\Models\\Admin;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass AccessReport extends Model\r\n{\r\n	// カラム CREATED_AT を &#039;access_datetime&#039;に変更\r\n    const CREATED_AT = &#039;access_datetime&#039;;\r\n	const UPDATED_AT = null;\r\n	// Table名を&#039;access_report&#039;と指定\r\n	protected $table = &#039;access_report&#039;;\r\n	// primary key を admin_id と指定\r\n    protected $primaryKey = &#039;admin_id&#039;;\r\n    /**\r\n     * The attributes that are mass assignable.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $fillable = [\r\n		// 変更許可カラム\r\n        &#039;staff_id&#039;, &#039;execution_file&#039;, &#039;from_ipaddress&#039;, &#039;project_id&#039;\r\n    ];\r\n\r\n    /**\r\n     * The attributes that should be hidden for arrays.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $hidden = [\r\n    ];\r\n\r\n\r\n}\r\n```\r\n## laravel/app/Http/Middleware/AccessReportMiddleware.php\r\n```php\r\n\r\nnamespace App\\Http\\Middleware;\r\n\r\nuse Closure;\r\nuse App\\Models\\Admin\\AccessReport;\r\nuse \\Route;\r\n\r\nclass AccessReportMiddleware\r\n{\r\n    /**\r\n     * Handle an incoming request.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @param  \\Closure  $next\r\n     * @return mixed\r\n     */\r\n    public function handle($request, Closure $next)\r\n    {\r\n        $response = $next($request);\r\n\r\n        $this-&gt;accessReport($request, $response-&gt;status());\r\n\r\n        return $response;\r\n//        return $next($request);\r\n    }\r\n    public function accessReport($request, $status)\r\n    {\r\n        $user = $request -&gt; user();\r\n        $data = [\r\n//            &#039;staff_id&#039; =&gt; $user ? $user-&gt;id : 0,\r\n            &#039;staff_id&#039; =&gt; 1,\r\n            &#039;execution_file&#039; =&gt; $request -&gt; path(), // URIを格納\r\n            &#039;from_ipaddress&#039; =&gt; $request -&gt; ip(), //アクセス元IPを格納\r\n            &#039;project_id&#039; =&gt; 0,\r\n        ];\r\n        AccessReport::create($data);\r\n    }\r\n}\r\n```\r\n## App/Http/Kernel.php \r\n```php\r\n    protected $routeMiddleware = [\r\n		&#039;auth&#039; =&gt; \\App\\Http\\Middleware\\Authenticate::class,\r\n		// Middleware へ 登録\r\n        &#039;acr&#039; =&gt; \\App\\Http\\Middleware\\AccessReportMiddleware::class,\r\n        &#039;auth.basic&#039; =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\r\n        &#039;bindings&#039; =&gt; \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\r\n        &#039;cache.headers&#039; =&gt; \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,\r\n        &#039;can&#039; =&gt; \\Illuminate\\Auth\\Middleware\\Authorize::class,\r\n        &#039;guest&#039; =&gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\r\n        &#039;password.confirm&#039; =&gt; \\Illuminate\\Auth\\Middleware\\RequirePassword::class,\r\n        &#039;signed&#039; =&gt; \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\r\n        &#039;throttle&#039; =&gt; \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\r\n        &#039;verified&#039; =&gt; \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,\r\n    ];\r\n```\r\n\r\n## database/migrations/[DATETIME]_create_access_reports_table.php\r\n```php\r\n\r\nuse Illuminate\\Database\\Migrations\\Migration;\r\nuse Illuminate\\Database\\Schema\\Blueprint;\r\nuse Illuminate\\Support\\Facades\\Schema;\r\n\r\nclass CreateAccessReportsTable extends Migration\r\n{\r\n    /**\r\n     * Run the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function up()\r\n    {\r\n        Schema::create(&#039;access_report&#039;, function (Blueprint $table) {\r\n            $table-&gt;bigIncrements(&#039;report_id&#039;);\r\n            $table-&gt;bigInteger(&#039;staff_id&#039;);\r\n            $table-&gt;text(&#039;execution_file&#039;);\r\n            $table-&gt;char(&#039;from_ipaddress&#039;, 15);\r\n            $table-&gt;dateTime(&#039;access_datetime&#039;);\r\n            $table-&gt;bigInteger(&#039;project_id&#039;);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reverse the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function down()\r\n    {\r\n        Schema::dropIfExists(&#039;access_report&#039;);\r\n    }\r\n}\r\n```\r\n- ',608,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/608-revision-v1/',0,'revision','',0),(611,1,'2020-12-15 12:04:49','2020-12-15 03:04:49','<h2>Laravel cache clear</h2>\n<pre><code class=\"language-bash\"># Seed時 class 生成後\ncomposer dump-autoload\n\n#  Cache Basic clear\nphp artisan cache:clear\nphp artisan config:clear\nphp artisan route:clear\nphp artisan view:clear\ncomposer dump-autoload\n\n# Deep\ncomposer dump-autoload\nphp artisan clear-compiled\nphp artisan optimize\nphp artisan config:cache</code></pre>','Laravel よく使うCache系のコマンド','Laravelで開発中、変更分が反映されないときによく使うキャッシュクリア','publish','closed','open','','laravel_cache_clear','','','2020-12-15 12:04:49','2020-12-15 03:04:49','## Laravel cache clear\r\n\r\n```bash\r\n# Seed時 class 生成後\r\ncomposer dump-autoload\r\n\r\n#  Cache Basic clear\r\nphp artisan cache:clear\r\nphp artisan config:clear\r\nphp artisan route:clear\r\nphp artisan view:clear\r\ncomposer dump-autoload\r\n\r\n# Deep\r\ncomposer dump-autoload\r\nphp artisan clear-compiled\r\nphp artisan optimize\r\nphp artisan config:cache\r\n```',0,'https://blog.webdimension.jp/?p=611',0,'post','',0),(612,1,'2020-12-15 12:00:16','2020-12-15 03:00:16','<h2>Laravel cache clear</h2>\n<pre><code class=\"language-bash\"># Seed時 class 生成後\ncomposer dump-autoload\n\n#  Cache Basic clear\nphp artisan cache:clear\nphp artisan config:clear\nphp artisan route:clear\nphp artisan view:clear\ncomposer dump-autoload\n\n# Deep\ncomposer dump-autoload\nphp artisan clear-compiled\nphp artisan optimize\nphp artisan config:cache</code></pre>','Laravel よく使うCache系のコマンド','Laravelで開発中、変更分が反映されないときによく使うキャッシュクリア','inherit','closed','closed','','611-revision-v1','','','2020-12-15 12:00:16','2020-12-15 03:00:16','## Laravel cache clear\r\n\r\n```bash\r\n# Seed時 class 生成後\r\ncomposer dump-autoload\r\n\r\n#  Cache Basic clear\r\nphp artisan cache:clear\r\nphp artisan config:clear\r\nphp artisan route:clear\r\nphp artisan view:clear\r\ncomposer dump-autoload\r\n\r\n# Deep\r\ncomposer dump-autoload\r\nphp artisan clear-compiled\r\nphp artisan optimize\r\nphp artisan config:cache\r\n```',611,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/611-revision-v1/',0,'revision','',0),(613,1,'2020-12-15 12:03:41','2020-12-15 03:03:41','','laravel_cache','','inherit','closed','closed','','laravel_cache','','','2020-12-15 12:03:41','2020-12-15 03:03:41','',611,'https://blog.webdimension.jp/wp-content/uploads/2020/12/laravel_cache.png',0,'attachment','image/png',0),(614,1,'2020-12-15 12:08:38','2020-12-15 03:08:38','<p>f#(というかFrameWork全般)</p>\n<p>下記だと便利に振る舞ってくれる。</p>\n<ul>\n<li>TABLE名：複数形</li>\n<li>MODEL：単数形</li>\n<li>PRIMARY KEY: ID</li>\n<li>FOREIGN KEY: TABLE名の単数形</li>\n</ul>\n<h3>例外時</h3>\n<pre><code class=\"language-php\"># table name\nclass Car extends Model\n{\n    // Default is cars table.\n    // set any name\n    protected $table = &#039;anything&#039;; \n\n    // Default is &#039;id&#039;.\n    // set any name\n    protected $primaryKey = &#039;ether_id&#039;;\n}\n</code></pre>','Laravel DB　命名規則','Laravel (他のFWも？ )  Tabele名、カラム名のやっとくと楽できるお作法','publish','closed','open','','laravel_db_rule','','','2020-12-15 12:13:31','2020-12-15 03:13:31','f#(というかFrameWork全般)\r\n\r\n下記だと便利に振る舞ってくれる。\r\n- TABLE名：複数形\r\n- MODEL：単数形\r\n- PRIMARY KEY: ID\r\n- FOREIGN KEY: TABLE名の単数形\r\n\r\n\r\n### 例外時\r\n```php\r\n# table name\r\nclass Car extends Model\r\n{\r\n	// Default is cars table.\r\n	// set any name\r\n	protected $table = &#039;anything&#039;; \r\n\r\n\r\n	// Default is &#039;id&#039;.\r\n	// set any name\r\n	protected $primaryKey = &#039;ether_id&#039;;\r\n}\r\n\r\n```',0,'https://blog.webdimension.jp/?p=614',0,'post','',0),(615,1,'2020-12-15 12:08:29','2020-12-15 03:08:29','<h1>(というかFrameWork全般)</h1>\n<p>下記だと便利に振る舞ってくれる。</p>\n<ul>\n<li>TABLE名：複数形</li>\n<li>MODEL：単数形</li>\n<li>PRIMARY KEY: ID</li>\n<li>FOREIGN KEY: TABLE名の単数形</li>\n</ul>\n<h3>例外時</h3>\n<pre><code class=\"language-php\"># table name\nclass Car extends Model\n{\n    // Default is cars table.\n    // set any name\n    protected $table = &#039;anything&#039;; \n\n    // Default is &#039;id&#039;.\n    // set any name\n    protected $primaryKey = &#039;ether_id&#039;;\n}\n</code></pre>','Laravel DB　命名規則','Laravel (他のFWも？ )  Tabele名、カラム名のやっとくと楽できるお作法','inherit','closed','closed','','614-revision-v1','','','2020-12-15 12:08:29','2020-12-15 03:08:29','#(というかFrameWork全般)\r\n\r\n下記だと便利に振る舞ってくれる。\r\n- TABLE名：複数形\r\n- MODEL：単数形\r\n- PRIMARY KEY: ID\r\n- FOREIGN KEY: TABLE名の単数形\r\n\r\n\r\n### 例外時\r\n```php\r\n# table name\r\nclass Car extends Model\r\n{\r\n	// Default is cars table.\r\n	// set any name\r\n	protected $table = &#039;anything&#039;; \r\n\r\n\r\n	// Default is &#039;id&#039;.\r\n	// set any name\r\n	protected $primaryKey = &#039;ether_id&#039;;\r\n}\r\n\r\n```',614,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/614-revision-v1/',0,'revision','',0),(616,1,'2020-12-15 12:13:08','2020-12-15 03:13:08','','laravel_db_name','','inherit','closed','closed','','laravel_db_name','','','2020-12-15 12:13:08','2020-12-15 03:13:08','',614,'https://blog.webdimension.jp/wp-content/uploads/2020/12/laravel_db_name.png',0,'attachment','image/png',0),(617,1,'2020-12-15 12:13:31','2020-12-15 03:13:31','<p>f#(というかFrameWork全般)</p>\n<p>下記だと便利に振る舞ってくれる。</p>\n<ul>\n<li>TABLE名：複数形</li>\n<li>MODEL：単数形</li>\n<li>PRIMARY KEY: ID</li>\n<li>FOREIGN KEY: TABLE名の単数形</li>\n</ul>\n<h3>例外時</h3>\n<pre><code class=\"language-php\"># table name\nclass Car extends Model\n{\n    // Default is cars table.\n    // set any name\n    protected $table = &#039;anything&#039;; \n\n    // Default is &#039;id&#039;.\n    // set any name\n    protected $primaryKey = &#039;ether_id&#039;;\n}\n</code></pre>','Laravel DB　命名規則','Laravel (他のFWも？ )  Tabele名、カラム名のやっとくと楽できるお作法','inherit','closed','closed','','614-revision-v1','','','2020-12-15 12:13:31','2020-12-15 03:13:31','f#(というかFrameWork全般)\r\n\r\n下記だと便利に振る舞ってくれる。\r\n- TABLE名：複数形\r\n- MODEL：単数形\r\n- PRIMARY KEY: ID\r\n- FOREIGN KEY: TABLE名の単数形\r\n\r\n\r\n### 例外時\r\n```php\r\n# table name\r\nclass Car extends Model\r\n{\r\n	// Default is cars table.\r\n	// set any name\r\n	protected $table = &#039;anything&#039;; \r\n\r\n\r\n	// Default is &#039;id&#039;.\r\n	// set any name\r\n	protected $primaryKey = &#039;ether_id&#039;;\r\n}\r\n\r\n```',614,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/614-revision-v1/',0,'revision','',0),(618,1,'2020-12-15 12:19:59','2020-12-15 03:19:59','<h2>docker-compose.yml</h2>\n<pre><code class=\"language-yaml\">version: &#039;3&#039;\nservices:\n  php:\n    build: ${DIR_PATH}/php\n    container_name: ${COMPOSE_PROJECT_NAME}_php\n    volumes:\n      - ${DIR_PATH}/../Laravel:/var/www/html\n      - .${DIR_PATH}/php/php.ini:/usr/local/etc/php/php.ini\n      - ${DIR_PATH}/php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini\n    external_links:\n      - smtp\n#      - mysql5.7:mysql5.7\n    depends_on:\n      - mysql\n    links:\n      - mysql:mysql\n  nginx:\n    image: nginx\n    container_name: ${COMPOSE_PROJECT_NAME}_nginx\n    environment:\n        - VIRTUAL_HOST=${VIRTUAL_HOST}\n        - CERT_NAME=server\n    volumes:\n      - ${DIR_PATH}/php/logs:/var/logs/nginx\n      - ${DIR_PATH}/../Laravel:/var/www/html\n      - ${DIR_PATH}/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf\n    links:\n      - php:php\n    depends_on:\n      - php\n  mysql:\n    image: mysql:5.7\n    container_name: ${COMPOSE_PROJECT_NAME}_mysql5_7\n    user: &quot;1000:50&quot;\n    volumes:\n      - ${DIR_PATH}/mysql/my.cnf:/etc/mysql/my.cnf\n      - ${DIR_PATH}/mysql/data:/var/lib/mysql\n      - ${DIR_PATH}/mysql/init:/docker-entrypoint-initdb.d\n      - ${DIR_PATH}/mysql/logs:/var/log/mysql\n    environment:\n       MYSQL_DATABASE: ${DB_DATABASE}\n       MYSQL_USER: ${DB_USERNAME}\n       MYSQL_PASSWORD: ${DB_PASSWORD}\n       MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}\n    ports:\n      - ${DB_PORT}:3306\n    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --innodb-buffer-pool-size=256M --innodb_use_native_aio=0\n  redis:\n    image: redis:latest\n    container_name: ${COMPOSE_PROJECT_NAME}_redis\n    user: &quot;999:redis&quot;\n    ports:\n      - ${REDIS_PORT}:6379\n    volumes:\n      - ${DIR_PATH}/redis/data:/data\n\n  node:\n    image: node:10\n    container_name: ${COMPOSE_PROJECT_NAME}_node\n    volumes:\n      - ${DIR_PATH}/../Laravel/node:/node\n      - ${DIR_PATH}/node/certs:/certs\n    working_dir: /node\n    environment:\n      CERTS_DIR_PATH: /certs/\n      REDIS_HOST: ${REDIS_HOST}\n      REDIS_PORT: ${REDIS_PORT}\n      MIX_NODE_PORT: ${MIX_NODE_PORT}\n    ports:\n      - ${MIX_NODE_PORT}:3000\n    command: bash -c  &quot;npm install &amp;&amp; npm start&quot;\n    depends_on:\n      - mysql\nnetworks:\n  default:\n    external:\n      name: nginx-proxy\n</code></pre>\n<h2>.env</h2>\n<p><em>Require</em> &lt;Your xxx&gt;</p>\n<pre><code class=\"language-env\">COMPOSE_PROJECT_NAME=&lt;Your project name&gt;\nDIR_PATH=&lt;Your Absolute path&gt; # /var/www/xxxxx\nAPP_NAME=Tournament\nAPP_ENV=local\nAPP_KEY=&lt;Your APP_KEY&gt;\nAPP_DEBUG=true\nVIRTUAL_HOST=&lt;Your host&gt; # example.local\nAPP_URL=https://&quot;${VIRTUAL_HOST}&quot;\n\nLOG_CHANNEL=stack\n\nDB_CONNECTION=mysql\nDB_HOST=mysql\nDB_PORT=3306\nDB_DATABASE=laravel\nDB_USERNAME=laravel\nDB_PASSWORD=laravel\nDB_ROOT_PASSWORD=root\n\nBROADCAST_DRIVER=log\nCACHE_DRIVER=redis\nQUEUE_CONNECTION=sync\nSESSION_DRIVER=database\nSESSION_LIFETIME=120\n\nREDIS_HOST=redis\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nMAIL_DRIVER=smtp\nMAIL_HOST=smtp.mailtrap.io\nMAIL_PORT=2525\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\n\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=\n\nPUSHER_APP_ID=\nPUSHER_APP_KEY=\nPUSHER_APP_SECRET=\nPUSHER_APP_CLUSTER=mt1\n\nMIX_PUSHER_APP_KEY=&quot;${PUSHER_APP_KEY}&quot;\nMIX_PUSHER_APP_CLUSTER=&quot;${PUSHER_APP_CLUSTER}&quot;\n\nDEV_FAKER_LOCALE=ja_JP\n\nMIX_NODE_HOST=&quot;${VIRTUAL_HOST}&quot;\nMIX_NODE_INTERNAL_HOST=node\nMIX_NODE_PORT=3000\n</code></pre>\n<h2>Dockerfile</h2>\n<pre><code class=\"language-Docer\">FROM php:7.2.8-fpm\nRUN apt-get update &amp;&amp; apt-get install -y \\\n  libssl-dev \\\n  git \\\n  wget \\\n  unzip \\\n  vim\nRUN apt-get -y update\nRUN apt-get install -y \\\n    curl \\\n    gnupg\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n# PDO\nRUN docker-php-ext-install pdo_mysql\n# redis\nRUN docker-php-source extract\nRUN git clone -b 4.1.1 --depth 1 https://github.com/phpredis/phpredis.git /usr/src/php/ext/redis &amp;&amp; \\\n    docker-php-ext-install redis\n# xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug\n# php-zip\nRUN apt-get install -y zlib1g-dev \\\n    &amp;&amp; docker-php-ext-install zip\n##Chrome Driver RUN apt-get install -y libnss3\n#RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\n#RUN echo &quot;deb http://dl.googlttcom/linux/chrome/deb/ stable main&quot; &gt;&gt; /etc/apt/sources.list.d/google.list\n#RUN apt-get update &amp;&amp; apt-get install -y google-chrome-stable\n# GD\nRUN apt-get update &amp;&amp; apt-get install -y \\\n        libfreetype6-dev \\\n        libjpeg62-turbo-dev \\\n        libmcrypt-dev \\\n        libpng-dev \\\n    &amp;&amp; docker-php-ext-install -j$(nproc) iconv \\\n    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n    &amp;&amp; docker-php-ext-install -j$(nproc) gd\n# install composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n</code></pre>\n<h2>nginx default.conf</h2>\n<pre><code class=\"language-conf\">server {\n  listen      80;\n  server_name YOUR_HOSTNAME;  // maybe equals VIRTUAL_HOST in .env\n    root /var/www/html/public;\n  location / {\n    try_files $uri $uri/ /index.php$is_args$args;\n    index index.html index.php;\n  }\n  location ~ \\.php$ {\n    fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n    fastcgi_pass php:9000;\n    fastcgi_index index.php;\n    include fastcgi_params;\n      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n      fastcgi_param PATH_INFO $fastcgi_path_info;\n  }\n}</code></pre>','Laravel を動かすDocker環境(Docker-compose)','laravelを動かすDocker-compose の一例','publish','closed','open','','laravel_docker','','','2020-12-15 12:29:11','2020-12-15 03:29:11','## docker-compose.yml\r\n```yaml\r\nversion: &#039;3&#039;\r\nservices:\r\n  php:\r\n    build: ${DIR_PATH}/php\r\n    container_name: ${COMPOSE_PROJECT_NAME}_php\r\n    volumes:\r\n      - ${DIR_PATH}/../Laravel:/var/www/html\r\n      - .${DIR_PATH}/php/php.ini:/usr/local/etc/php/php.ini\r\n      - ${DIR_PATH}/php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini\r\n    external_links:\r\n      - smtp\r\n#      - mysql5.7:mysql5.7\r\n    depends_on:\r\n      - mysql\r\n    links:\r\n      - mysql:mysql\r\n  nginx:\r\n    image: nginx\r\n    container_name: ${COMPOSE_PROJECT_NAME}_nginx\r\n    environment:\r\n        - VIRTUAL_HOST=${VIRTUAL_HOST}\r\n        - CERT_NAME=server\r\n    volumes:\r\n      - ${DIR_PATH}/php/logs:/var/logs/nginx\r\n      - ${DIR_PATH}/../Laravel:/var/www/html\r\n      - ${DIR_PATH}/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf\r\n    links:\r\n      - php:php\r\n    depends_on:\r\n      - php\r\n  mysql:\r\n    image: mysql:5.7\r\n    container_name: ${COMPOSE_PROJECT_NAME}_mysql5_7\r\n    user: &quot;1000:50&quot;\r\n    volumes:\r\n      - ${DIR_PATH}/mysql/my.cnf:/etc/mysql/my.cnf\r\n      - ${DIR_PATH}/mysql/data:/var/lib/mysql\r\n      - ${DIR_PATH}/mysql/init:/docker-entrypoint-initdb.d\r\n      - ${DIR_PATH}/mysql/logs:/var/log/mysql\r\n    environment:\r\n       MYSQL_DATABASE: ${DB_DATABASE}\r\n       MYSQL_USER: ${DB_USERNAME}\r\n       MYSQL_PASSWORD: ${DB_PASSWORD}\r\n       MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}\r\n    ports:\r\n      - ${DB_PORT}:3306\r\n    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --innodb-buffer-pool-size=256M --innodb_use_native_aio=0\r\n  redis:\r\n    image: redis:latest\r\n    container_name: ${COMPOSE_PROJECT_NAME}_redis\r\n    user: &quot;999:redis&quot;\r\n    ports:\r\n      - ${REDIS_PORT}:6379\r\n    volumes:\r\n      - ${DIR_PATH}/redis/data:/data\r\n\r\n  node:\r\n    image: node:10\r\n    container_name: ${COMPOSE_PROJECT_NAME}_node\r\n    volumes:\r\n      - ${DIR_PATH}/../Laravel/node:/node\r\n      - ${DIR_PATH}/node/certs:/certs\r\n    working_dir: /node\r\n    environment:\r\n      CERTS_DIR_PATH: /certs/\r\n      REDIS_HOST: ${REDIS_HOST}\r\n      REDIS_PORT: ${REDIS_PORT}\r\n      MIX_NODE_PORT: ${MIX_NODE_PORT}\r\n    ports:\r\n      - ${MIX_NODE_PORT}:3000\r\n    command: bash -c  &quot;npm install &amp;&amp; npm start&quot;\r\n    depends_on:\r\n      - mysql\r\nnetworks:\r\n  default:\r\n    external:\r\n      name: nginx-proxy\r\n\r\n```\r\n\r\n## .env   \r\n*Require* &lt;Your xxx&gt;\r\n```env\r\nCOMPOSE_PROJECT_NAME=&lt;Your project name&gt;\r\nDIR_PATH=&lt;Your Absolute path&gt; # /var/www/xxxxx\r\nAPP_NAME=Tournament\r\nAPP_ENV=local\r\nAPP_KEY=&lt;Your APP_KEY&gt;\r\nAPP_DEBUG=true\r\nVIRTUAL_HOST=&lt;Your host&gt; # example.local\r\nAPP_URL=https://&quot;${VIRTUAL_HOST}&quot;\r\n\r\nLOG_CHANNEL=stack\r\n\r\nDB_CONNECTION=mysql\r\nDB_HOST=mysql\r\nDB_PORT=3306\r\nDB_DATABASE=laravel\r\nDB_USERNAME=laravel\r\nDB_PASSWORD=laravel\r\nDB_ROOT_PASSWORD=root\r\n\r\nBROADCAST_DRIVER=log\r\nCACHE_DRIVER=redis\r\nQUEUE_CONNECTION=sync\r\nSESSION_DRIVER=database\r\nSESSION_LIFETIME=120\r\n\r\nREDIS_HOST=redis\r\nREDIS_PASSWORD=null\r\nREDIS_PORT=6379\r\n\r\nMAIL_DRIVER=smtp\r\nMAIL_HOST=smtp.mailtrap.io\r\nMAIL_PORT=2525\r\nMAIL_USERNAME=null\r\nMAIL_PASSWORD=null\r\nMAIL_ENCRYPTION=null\r\n\r\nAWS_ACCESS_KEY_ID=\r\nAWS_SECRET_ACCESS_KEY=\r\nAWS_DEFAULT_REGION=us-east-1\r\nAWS_BUCKET=\r\n\r\nPUSHER_APP_ID=\r\nPUSHER_APP_KEY=\r\nPUSHER_APP_SECRET=\r\nPUSHER_APP_CLUSTER=mt1\r\n\r\nMIX_PUSHER_APP_KEY=&quot;${PUSHER_APP_KEY}&quot;\r\nMIX_PUSHER_APP_CLUSTER=&quot;${PUSHER_APP_CLUSTER}&quot;\r\n\r\nDEV_FAKER_LOCALE=ja_JP\r\n\r\nMIX_NODE_HOST=&quot;${VIRTUAL_HOST}&quot;\r\nMIX_NODE_INTERNAL_HOST=node\r\nMIX_NODE_PORT=3000\r\n\r\n\r\n\r\n```\r\n\r\n\r\n## Dockerfile\r\n```Docer\r\nFROM php:7.2.8-fpm\r\nRUN apt-get update &amp;&amp; apt-get install -y \\\r\n  libssl-dev \\\r\n  git \\\r\n  wget \\\r\n  unzip \\\r\n  vim\r\nRUN apt-get -y update\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n# PDO\r\nRUN docker-php-ext-install pdo_mysql\r\n# redis\r\nRUN docker-php-source extract\r\nRUN git clone -b 4.1.1 --depth 1 https://github.com/phpredis/phpredis.git /usr/src/php/ext/redis &amp;&amp; \\\r\n    docker-php-ext-install redis\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n# php-zip\r\nRUN apt-get install -y zlib1g-dev \\\r\n    &amp;&amp; docker-php-ext-install zip\r\n##Chrome Driver RUN apt-get install -y libnss3\r\n#RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\r\n#RUN echo &quot;deb http://dl.googlttcom/linux/chrome/deb/ stable main&quot; &gt;&gt; /etc/apt/sources.list.d/google.list\r\n#RUN apt-get update &amp;&amp; apt-get install -y google-chrome-stable\r\n# GD\r\nRUN apt-get update &amp;&amp; apt-get install -y \\\r\n        libfreetype6-dev \\\r\n        libjpeg62-turbo-dev \\\r\n        libmcrypt-dev \\\r\n        libpng-dev \\\r\n    &amp;&amp; docker-php-ext-install -j$(nproc) iconv \\\r\n    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\r\n    &amp;&amp; docker-php-ext-install -j$(nproc) gd\r\n# install composer\r\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\r\n\r\n```\r\n\r\n\r\n\r\n## nginx default.conf\r\n```conf\r\nserver {\r\n  listen      80;\r\n  server_name YOUR_HOSTNAME;  // maybe equals VIRTUAL_HOST in .env\r\n    root /var/www/html/public;\r\n  location / {\r\n    try_files $uri $uri/ /index.php$is_args$args;\r\n    index index.html index.php;\r\n  }\r\n  location ~ \\.php$ {\r\n    fastcgi_split_path_info ^(.+\\.php)(/.+)$;\r\n    fastcgi_pass php:9000;\r\n    fastcgi_index index.php;\r\n    include fastcgi_params;\r\n      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\r\n      fastcgi_param PATH_INFO $fastcgi_path_info;\r\n  }\r\n}\r\n```',0,'https://blog.webdimension.jp/?p=618',0,'post','',0),(619,1,'2020-12-15 12:17:30','2020-12-15 03:17:30','<p>docker-compose.yml</p>\n<pre><code class=\"language-yaml\">version: &#039;3&#039;\nservices:\n  php:\n    build: ${DIR_PATH}/php\n    container_name: ${COMPOSE_PROJECT_NAME}_php\n    volumes:\n      - ${DIR_PATH}/../Laravel:/var/www/html\n      - .${DIR_PATH}/php/php.ini:/usr/local/etc/php/php.ini\n      - ${DIR_PATH}/php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini\n    external_links:\n      - smtp\n#      - mysql5.7:mysql5.7\n    depends_on:\n      - mysql\n    links:\n      - mysql:mysql\n  nginx:\n    image: nginx\n    container_name: ${COMPOSE_PROJECT_NAME}_nginx\n    environment:\n        - VIRTUAL_HOST=${VIRTUAL_HOST}\n        - CERT_NAME=server\n    volumes:\n      - ${DIR_PATH}/php/logs:/var/logs/nginx\n      - ${DIR_PATH}/../Laravel:/var/www/html\n      - ${DIR_PATH}/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf\n    links:\n      - php:php\n    depends_on:\n      - php\n  mysql:\n    image: mysql:5.7\n    container_name: ${COMPOSE_PROJECT_NAME}_mysql5_7\n    user: &quot;1000:50&quot;\n    volumes:\n      - ${DIR_PATH}/mysql/my.cnf:/etc/mysql/my.cnf\n      - ${DIR_PATH}/mysql/data:/var/lib/mysql\n      - ${DIR_PATH}/mysql/init:/docker-entrypoint-initdb.d\n      - ${DIR_PATH}/mysql/logs:/var/log/mysql\n    environment:\n       MYSQL_DATABASE: ${DB_DATABASE}\n       MYSQL_USER: ${DB_USERNAME}\n       MYSQL_PASSWORD: ${DB_PASSWORD}\n       MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}\n    ports:\n      - ${DB_PORT}:3306\n    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --innodb-buffer-pool-size=256M --innodb_use_native_aio=0\n  redis:\n    image: redis:latest\n    container_name: ${COMPOSE_PROJECT_NAME}_redis\n    user: &quot;999:redis&quot;\n    ports:\n      - ${REDIS_PORT}:6379\n    volumes:\n      - ${DIR_PATH}/redis/data:/data\n\n  node:\n    image: node:10\n    container_name: ${COMPOSE_PROJECT_NAME}_node\n    volumes:\n      - ${DIR_PATH}/../Laravel/node:/node\n      - ${DIR_PATH}/node/certs:/certs\n    working_dir: /node\n    environment:\n      CERTS_DIR_PATH: /certs/\n      REDIS_HOST: ${REDIS_HOST}\n      REDIS_PORT: ${REDIS_PORT}\n      MIX_NODE_PORT: ${MIX_NODE_PORT}\n    ports:\n      - ${MIX_NODE_PORT}:3000\n    command: bash -c  &quot;npm install &amp;&amp; npm start&quot;\n    depends_on:\n      - mysql\nnetworks:\n  default:\n    external:\n      name: nginx-proxy\n</code></pre>\n<p>.env<br />\n<em>Require</em> &lt;Your xxx&gt;</p>\n<pre><code class=\"language-env\">COMPOSE_PROJECT_NAME=&lt;Your project name&gt;\nDIR_PATH=&lt;Your Absolute path&gt; # /var/www/xxxxx\nAPP_NAME=Tournament\nAPP_ENV=local\nAPP_KEY=&lt;Your APP_KEY&gt;\nAPP_DEBUG=true\nVIRTUAL_HOST=&lt;Your host&gt; # example.local\nAPP_URL=https://&quot;${VIRTUAL_HOST}&quot;\n\nLOG_CHANNEL=stack\n\nDB_CONNECTION=mysql\nDB_HOST=mysql\nDB_PORT=3306\nDB_DATABASE=laravel\nDB_USERNAME=laravel\nDB_PASSWORD=laravel\nDB_ROOT_PASSWORD=root\n\nBROADCAST_DRIVER=log\nCACHE_DRIVER=redis\nQUEUE_CONNECTION=sync\nSESSION_DRIVER=database\nSESSION_LIFETIME=120\n\nREDIS_HOST=redis\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nMAIL_DRIVER=smtp\nMAIL_HOST=smtp.mailtrap.io\nMAIL_PORT=2525\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\n\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=\n\nPUSHER_APP_ID=\nPUSHER_APP_KEY=\nPUSHER_APP_SECRET=\nPUSHER_APP_CLUSTER=mt1\n\nMIX_PUSHER_APP_KEY=&quot;${PUSHER_APP_KEY}&quot;\nMIX_PUSHER_APP_CLUSTER=&quot;${PUSHER_APP_CLUSTER}&quot;\n\nDEV_FAKER_LOCALE=ja_JP\n\nMIX_NODE_HOST=&quot;${VIRTUAL_HOST}&quot;\nMIX_NODE_INTERNAL_HOST=node\nMIX_NODE_PORT=3000\n</code></pre>\n<p>Dockerfile</p>\n<pre><code class=\"language-Docer\">FROM php:7.2.8-fpm\nRUN apt-get update &amp;&amp; apt-get install -y \\\n  libssl-dev \\\n  git \\\n  wget \\\n  unzip \\\n  vim\nRUN apt-get -y update\nRUN apt-get install -y \\\n    curl \\\n    gnupg\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n# PDO\nRUN docker-php-ext-install pdo_mysql\n# redis\nRUN docker-php-source extract\nRUN git clone -b 4.1.1 --depth 1 https://github.com/phpredis/phpredis.git /usr/src/php/ext/redis &amp;&amp; \\\n    docker-php-ext-install redis\n# xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug\n# php-zip\nRUN apt-get install -y zlib1g-dev \\\n    &amp;&amp; docker-php-ext-install zip\n##Chrome Driver RUN apt-get install -y libnss3\n#RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\n#RUN echo &quot;deb http://dl.googlttcom/linux/chrome/deb/ stable main&quot; &gt;&gt; /etc/apt/sources.list.d/google.list\n#RUN apt-get update &amp;&amp; apt-get install -y google-chrome-stable\n# GD\nRUN apt-get update &amp;&amp; apt-get install -y \\\n        libfreetype6-dev \\\n        libjpeg62-turbo-dev \\\n        libmcrypt-dev \\\n        libpng-dev \\\n    &amp;&amp; docker-php-ext-install -j$(nproc) iconv \\\n    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n    &amp;&amp; docker-php-ext-install -j$(nproc) gd\n# install composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n</code></pre>\n<p>nginx default.conf</p>\n<pre><code class=\"language-conf\">server {\n  listen      80;\n  server_name YOUR_HOSTNAME;  // maybe equals VIRTUAL_HOST in .env\n    root /var/www/html/public;\n  location / {\n    try_files $uri $uri/ /index.php$is_args$args;\n    index index.html index.php;\n  }\n  location ~ \\.php$ {\n    fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n    fastcgi_pass php:9000;\n    fastcgi_index index.php;\n    include fastcgi_params;\n      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n      fastcgi_param PATH_INFO $fastcgi_path_info;\n  }\n}</code></pre>','Laravel を動かすDocker環境(Docker-compose)','laravelを動かすDocker-compose の一例','inherit','closed','closed','','618-revision-v1','','','2020-12-15 12:17:30','2020-12-15 03:17:30',' docker-compose.yml\r\n```yaml\r\nversion: &#039;3&#039;\r\nservices:\r\n  php:\r\n    build: ${DIR_PATH}/php\r\n    container_name: ${COMPOSE_PROJECT_NAME}_php\r\n    volumes:\r\n      - ${DIR_PATH}/../Laravel:/var/www/html\r\n      - .${DIR_PATH}/php/php.ini:/usr/local/etc/php/php.ini\r\n      - ${DIR_PATH}/php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini\r\n    external_links:\r\n      - smtp\r\n#      - mysql5.7:mysql5.7\r\n    depends_on:\r\n      - mysql\r\n    links:\r\n      - mysql:mysql\r\n  nginx:\r\n    image: nginx\r\n    container_name: ${COMPOSE_PROJECT_NAME}_nginx\r\n    environment:\r\n        - VIRTUAL_HOST=${VIRTUAL_HOST}\r\n        - CERT_NAME=server\r\n    volumes:\r\n      - ${DIR_PATH}/php/logs:/var/logs/nginx\r\n      - ${DIR_PATH}/../Laravel:/var/www/html\r\n      - ${DIR_PATH}/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf\r\n    links:\r\n      - php:php\r\n    depends_on:\r\n      - php\r\n  mysql:\r\n    image: mysql:5.7\r\n    container_name: ${COMPOSE_PROJECT_NAME}_mysql5_7\r\n    user: &quot;1000:50&quot;\r\n    volumes:\r\n      - ${DIR_PATH}/mysql/my.cnf:/etc/mysql/my.cnf\r\n      - ${DIR_PATH}/mysql/data:/var/lib/mysql\r\n      - ${DIR_PATH}/mysql/init:/docker-entrypoint-initdb.d\r\n      - ${DIR_PATH}/mysql/logs:/var/log/mysql\r\n    environment:\r\n       MYSQL_DATABASE: ${DB_DATABASE}\r\n       MYSQL_USER: ${DB_USERNAME}\r\n       MYSQL_PASSWORD: ${DB_PASSWORD}\r\n       MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}\r\n    ports:\r\n      - ${DB_PORT}:3306\r\n    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --innodb-buffer-pool-size=256M --innodb_use_native_aio=0\r\n  redis:\r\n    image: redis:latest\r\n    container_name: ${COMPOSE_PROJECT_NAME}_redis\r\n    user: &quot;999:redis&quot;\r\n    ports:\r\n      - ${REDIS_PORT}:6379\r\n    volumes:\r\n      - ${DIR_PATH}/redis/data:/data\r\n\r\n  node:\r\n    image: node:10\r\n    container_name: ${COMPOSE_PROJECT_NAME}_node\r\n    volumes:\r\n      - ${DIR_PATH}/../Laravel/node:/node\r\n      - ${DIR_PATH}/node/certs:/certs\r\n    working_dir: /node\r\n    environment:\r\n      CERTS_DIR_PATH: /certs/\r\n      REDIS_HOST: ${REDIS_HOST}\r\n      REDIS_PORT: ${REDIS_PORT}\r\n      MIX_NODE_PORT: ${MIX_NODE_PORT}\r\n    ports:\r\n      - ${MIX_NODE_PORT}:3000\r\n    command: bash -c  &quot;npm install &amp;&amp; npm start&quot;\r\n    depends_on:\r\n      - mysql\r\nnetworks:\r\n  default:\r\n    external:\r\n      name: nginx-proxy\r\n\r\n```\r\n\r\n.env   \r\n*Require* &lt;Your xxx&gt;\r\n```env\r\nCOMPOSE_PROJECT_NAME=&lt;Your project name&gt;\r\nDIR_PATH=&lt;Your Absolute path&gt; # /var/www/xxxxx\r\nAPP_NAME=Tournament\r\nAPP_ENV=local\r\nAPP_KEY=&lt;Your APP_KEY&gt;\r\nAPP_DEBUG=true\r\nVIRTUAL_HOST=&lt;Your host&gt; # example.local\r\nAPP_URL=https://&quot;${VIRTUAL_HOST}&quot;\r\n\r\nLOG_CHANNEL=stack\r\n\r\nDB_CONNECTION=mysql\r\nDB_HOST=mysql\r\nDB_PORT=3306\r\nDB_DATABASE=laravel\r\nDB_USERNAME=laravel\r\nDB_PASSWORD=laravel\r\nDB_ROOT_PASSWORD=root\r\n\r\nBROADCAST_DRIVER=log\r\nCACHE_DRIVER=redis\r\nQUEUE_CONNECTION=sync\r\nSESSION_DRIVER=database\r\nSESSION_LIFETIME=120\r\n\r\nREDIS_HOST=redis\r\nREDIS_PASSWORD=null\r\nREDIS_PORT=6379\r\n\r\nMAIL_DRIVER=smtp\r\nMAIL_HOST=smtp.mailtrap.io\r\nMAIL_PORT=2525\r\nMAIL_USERNAME=null\r\nMAIL_PASSWORD=null\r\nMAIL_ENCRYPTION=null\r\n\r\nAWS_ACCESS_KEY_ID=\r\nAWS_SECRET_ACCESS_KEY=\r\nAWS_DEFAULT_REGION=us-east-1\r\nAWS_BUCKET=\r\n\r\nPUSHER_APP_ID=\r\nPUSHER_APP_KEY=\r\nPUSHER_APP_SECRET=\r\nPUSHER_APP_CLUSTER=mt1\r\n\r\nMIX_PUSHER_APP_KEY=&quot;${PUSHER_APP_KEY}&quot;\r\nMIX_PUSHER_APP_CLUSTER=&quot;${PUSHER_APP_CLUSTER}&quot;\r\n\r\nDEV_FAKER_LOCALE=ja_JP\r\n\r\nMIX_NODE_HOST=&quot;${VIRTUAL_HOST}&quot;\r\nMIX_NODE_INTERNAL_HOST=node\r\nMIX_NODE_PORT=3000\r\n\r\n\r\n\r\n```\r\n\r\n\r\nDockerfile\r\n```Docer\r\nFROM php:7.2.8-fpm\r\nRUN apt-get update &amp;&amp; apt-get install -y \\\r\n  libssl-dev \\\r\n  git \\\r\n  wget \\\r\n  unzip \\\r\n  vim\r\nRUN apt-get -y update\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n# PDO\r\nRUN docker-php-ext-install pdo_mysql\r\n# redis\r\nRUN docker-php-source extract\r\nRUN git clone -b 4.1.1 --depth 1 https://github.com/phpredis/phpredis.git /usr/src/php/ext/redis &amp;&amp; \\\r\n    docker-php-ext-install redis\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n# php-zip\r\nRUN apt-get install -y zlib1g-dev \\\r\n    &amp;&amp; docker-php-ext-install zip\r\n##Chrome Driver RUN apt-get install -y libnss3\r\n#RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\r\n#RUN echo &quot;deb http://dl.googlttcom/linux/chrome/deb/ stable main&quot; &gt;&gt; /etc/apt/sources.list.d/google.list\r\n#RUN apt-get update &amp;&amp; apt-get install -y google-chrome-stable\r\n# GD\r\nRUN apt-get update &amp;&amp; apt-get install -y \\\r\n        libfreetype6-dev \\\r\n        libjpeg62-turbo-dev \\\r\n        libmcrypt-dev \\\r\n        libpng-dev \\\r\n    &amp;&amp; docker-php-ext-install -j$(nproc) iconv \\\r\n    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\r\n    &amp;&amp; docker-php-ext-install -j$(nproc) gd\r\n# install composer\r\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\r\n\r\n```\r\n\r\n\r\n\r\nnginx default.conf\r\n```conf\r\nserver {\r\n  listen      80;\r\n  server_name YOUR_HOSTNAME;  // maybe equals VIRTUAL_HOST in .env\r\n    root /var/www/html/public;\r\n  location / {\r\n    try_files $uri $uri/ /index.php$is_args$args;\r\n    index index.html index.php;\r\n  }\r\n  location ~ \\.php$ {\r\n    fastcgi_split_path_info ^(.+\\.php)(/.+)$;\r\n    fastcgi_pass php:9000;\r\n    fastcgi_index index.php;\r\n    include fastcgi_params;\r\n      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\r\n      fastcgi_param PATH_INFO $fastcgi_path_info;\r\n  }\r\n}\r\n```',618,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/618-revision-v1/',0,'revision','',0),(620,1,'2020-12-15 12:19:11','2020-12-15 03:19:11','<h2>docker-compose.yml</h2>\n<pre><code class=\"language-yaml\">version: &#039;3&#039;\nservices:\n  php:\n    build: ${DIR_PATH}/php\n    container_name: ${COMPOSE_PROJECT_NAME}_php\n    volumes:\n      - ${DIR_PATH}/../Laravel:/var/www/html\n      - .${DIR_PATH}/php/php.ini:/usr/local/etc/php/php.ini\n      - ${DIR_PATH}/php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini\n    external_links:\n      - smtp\n#      - mysql5.7:mysql5.7\n    depends_on:\n      - mysql\n    links:\n      - mysql:mysql\n  nginx:\n    image: nginx\n    container_name: ${COMPOSE_PROJECT_NAME}_nginx\n    environment:\n        - VIRTUAL_HOST=${VIRTUAL_HOST}\n        - CERT_NAME=server\n    volumes:\n      - ${DIR_PATH}/php/logs:/var/logs/nginx\n      - ${DIR_PATH}/../Laravel:/var/www/html\n      - ${DIR_PATH}/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf\n    links:\n      - php:php\n    depends_on:\n      - php\n  mysql:\n    image: mysql:5.7\n    container_name: ${COMPOSE_PROJECT_NAME}_mysql5_7\n    user: &quot;1000:50&quot;\n    volumes:\n      - ${DIR_PATH}/mysql/my.cnf:/etc/mysql/my.cnf\n      - ${DIR_PATH}/mysql/data:/var/lib/mysql\n      - ${DIR_PATH}/mysql/init:/docker-entrypoint-initdb.d\n      - ${DIR_PATH}/mysql/logs:/var/log/mysql\n    environment:\n       MYSQL_DATABASE: ${DB_DATABASE}\n       MYSQL_USER: ${DB_USERNAME}\n       MYSQL_PASSWORD: ${DB_PASSWORD}\n       MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}\n    ports:\n      - ${DB_PORT}:3306\n    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --innodb-buffer-pool-size=256M --innodb_use_native_aio=0\n  redis:\n    image: redis:latest\n    container_name: ${COMPOSE_PROJECT_NAME}_redis\n    user: &quot;999:redis&quot;\n    ports:\n      - ${REDIS_PORT}:6379\n    volumes:\n      - ${DIR_PATH}/redis/data:/data\n\n  node:\n    image: node:10\n    container_name: ${COMPOSE_PROJECT_NAME}_node\n    volumes:\n      - ${DIR_PATH}/../Laravel/node:/node\n      - ${DIR_PATH}/node/certs:/certs\n    working_dir: /node\n    environment:\n      CERTS_DIR_PATH: /certs/\n      REDIS_HOST: ${REDIS_HOST}\n      REDIS_PORT: ${REDIS_PORT}\n      MIX_NODE_PORT: ${MIX_NODE_PORT}\n    ports:\n      - ${MIX_NODE_PORT}:3000\n    command: bash -c  &quot;npm install &amp;&amp; npm start&quot;\n    depends_on:\n      - mysql\nnetworks:\n  default:\n    external:\n      name: nginx-proxy\n</code></pre>\n<h2>.env</h2>\n<p><em>Require</em> &lt;Your xxx&gt;</p>\n<pre><code class=\"language-env\">COMPOSE_PROJECT_NAME=&lt;Your project name&gt;\nDIR_PATH=&lt;Your Absolute path&gt; # /var/www/xxxxx\nAPP_NAME=Tournament\nAPP_ENV=local\nAPP_KEY=&lt;Your APP_KEY&gt;\nAPP_DEBUG=true\nVIRTUAL_HOST=&lt;Your host&gt; # example.local\nAPP_URL=https://&quot;${VIRTUAL_HOST}&quot;\n\nLOG_CHANNEL=stack\n\nDB_CONNECTION=mysql\nDB_HOST=mysql\nDB_PORT=3306\nDB_DATABASE=laravel\nDB_USERNAME=laravel\nDB_PASSWORD=laravel\nDB_ROOT_PASSWORD=root\n\nBROADCAST_DRIVER=log\nCACHE_DRIVER=redis\nQUEUE_CONNECTION=sync\nSESSION_DRIVER=database\nSESSION_LIFETIME=120\n\nREDIS_HOST=redis\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nMAIL_DRIVER=smtp\nMAIL_HOST=smtp.mailtrap.io\nMAIL_PORT=2525\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\n\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=\n\nPUSHER_APP_ID=\nPUSHER_APP_KEY=\nPUSHER_APP_SECRET=\nPUSHER_APP_CLUSTER=mt1\n\nMIX_PUSHER_APP_KEY=&quot;${PUSHER_APP_KEY}&quot;\nMIX_PUSHER_APP_CLUSTER=&quot;${PUSHER_APP_CLUSTER}&quot;\n\nDEV_FAKER_LOCALE=ja_JP\n\nMIX_NODE_HOST=&quot;${VIRTUAL_HOST}&quot;\nMIX_NODE_INTERNAL_HOST=node\nMIX_NODE_PORT=3000\n</code></pre>\n<h2>Dockerfile</h2>\n<pre><code class=\"language-Docer\">FROM php:7.2.8-fpm\nRUN apt-get update &amp;&amp; apt-get install -y \\\n  libssl-dev \\\n  git \\\n  wget \\\n  unzip \\\n  vim\nRUN apt-get -y update\nRUN apt-get install -y \\\n    curl \\\n    gnupg\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\nRUN apt-get install -y nodejs\nRUN npm install npm@latest -g\n# PDO\nRUN docker-php-ext-install pdo_mysql\n# redis\nRUN docker-php-source extract\nRUN git clone -b 4.1.1 --depth 1 https://github.com/phpredis/phpredis.git /usr/src/php/ext/redis &amp;&amp; \\\n    docker-php-ext-install redis\n# xdebug\nRUN pecl install xdebug \\\n  &amp;&amp; docker-php-ext-enable xdebug\n# php-zip\nRUN apt-get install -y zlib1g-dev \\\n    &amp;&amp; docker-php-ext-install zip\n##Chrome Driver RUN apt-get install -y libnss3\n#RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\n#RUN echo &quot;deb http://dl.googlttcom/linux/chrome/deb/ stable main&quot; &gt;&gt; /etc/apt/sources.list.d/google.list\n#RUN apt-get update &amp;&amp; apt-get install -y google-chrome-stable\n# GD\nRUN apt-get update &amp;&amp; apt-get install -y \\\n        libfreetype6-dev \\\n        libjpeg62-turbo-dev \\\n        libmcrypt-dev \\\n        libpng-dev \\\n    &amp;&amp; docker-php-ext-install -j$(nproc) iconv \\\n    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\n    &amp;&amp; docker-php-ext-install -j$(nproc) gd\n# install composer\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n</code></pre>\n<h2>nginx default.conf</h2>\n<pre><code class=\"language-conf\">server {\n  listen      80;\n  server_name YOUR_HOSTNAME;  // maybe equals VIRTUAL_HOST in .env\n    root /var/www/html/public;\n  location / {\n    try_files $uri $uri/ /index.php$is_args$args;\n    index index.html index.php;\n  }\n  location ~ \\.php$ {\n    fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n    fastcgi_pass php:9000;\n    fastcgi_index index.php;\n    include fastcgi_params;\n      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n      fastcgi_param PATH_INFO $fastcgi_path_info;\n  }\n}</code></pre>','Laravel を動かすDocker環境(Docker-compose)','laravelを動かすDocker-compose の一例','inherit','closed','closed','','618-revision-v1','','','2020-12-15 12:19:11','2020-12-15 03:19:11','## docker-compose.yml\r\n```yaml\r\nversion: &#039;3&#039;\r\nservices:\r\n  php:\r\n    build: ${DIR_PATH}/php\r\n    container_name: ${COMPOSE_PROJECT_NAME}_php\r\n    volumes:\r\n      - ${DIR_PATH}/../Laravel:/var/www/html\r\n      - .${DIR_PATH}/php/php.ini:/usr/local/etc/php/php.ini\r\n      - ${DIR_PATH}/php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini\r\n    external_links:\r\n      - smtp\r\n#      - mysql5.7:mysql5.7\r\n    depends_on:\r\n      - mysql\r\n    links:\r\n      - mysql:mysql\r\n  nginx:\r\n    image: nginx\r\n    container_name: ${COMPOSE_PROJECT_NAME}_nginx\r\n    environment:\r\n        - VIRTUAL_HOST=${VIRTUAL_HOST}\r\n        - CERT_NAME=server\r\n    volumes:\r\n      - ${DIR_PATH}/php/logs:/var/logs/nginx\r\n      - ${DIR_PATH}/../Laravel:/var/www/html\r\n      - ${DIR_PATH}/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf\r\n    links:\r\n      - php:php\r\n    depends_on:\r\n      - php\r\n  mysql:\r\n    image: mysql:5.7\r\n    container_name: ${COMPOSE_PROJECT_NAME}_mysql5_7\r\n    user: &quot;1000:50&quot;\r\n    volumes:\r\n      - ${DIR_PATH}/mysql/my.cnf:/etc/mysql/my.cnf\r\n      - ${DIR_PATH}/mysql/data:/var/lib/mysql\r\n      - ${DIR_PATH}/mysql/init:/docker-entrypoint-initdb.d\r\n      - ${DIR_PATH}/mysql/logs:/var/log/mysql\r\n    environment:\r\n       MYSQL_DATABASE: ${DB_DATABASE}\r\n       MYSQL_USER: ${DB_USERNAME}\r\n       MYSQL_PASSWORD: ${DB_PASSWORD}\r\n       MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}\r\n    ports:\r\n      - ${DB_PORT}:3306\r\n    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --innodb-buffer-pool-size=256M --innodb_use_native_aio=0\r\n  redis:\r\n    image: redis:latest\r\n    container_name: ${COMPOSE_PROJECT_NAME}_redis\r\n    user: &quot;999:redis&quot;\r\n    ports:\r\n      - ${REDIS_PORT}:6379\r\n    volumes:\r\n      - ${DIR_PATH}/redis/data:/data\r\n\r\n  node:\r\n    image: node:10\r\n    container_name: ${COMPOSE_PROJECT_NAME}_node\r\n    volumes:\r\n      - ${DIR_PATH}/../Laravel/node:/node\r\n      - ${DIR_PATH}/node/certs:/certs\r\n    working_dir: /node\r\n    environment:\r\n      CERTS_DIR_PATH: /certs/\r\n      REDIS_HOST: ${REDIS_HOST}\r\n      REDIS_PORT: ${REDIS_PORT}\r\n      MIX_NODE_PORT: ${MIX_NODE_PORT}\r\n    ports:\r\n      - ${MIX_NODE_PORT}:3000\r\n    command: bash -c  &quot;npm install &amp;&amp; npm start&quot;\r\n    depends_on:\r\n      - mysql\r\nnetworks:\r\n  default:\r\n    external:\r\n      name: nginx-proxy\r\n\r\n```\r\n\r\n## .env   \r\n*Require* &lt;Your xxx&gt;\r\n```env\r\nCOMPOSE_PROJECT_NAME=&lt;Your project name&gt;\r\nDIR_PATH=&lt;Your Absolute path&gt; # /var/www/xxxxx\r\nAPP_NAME=Tournament\r\nAPP_ENV=local\r\nAPP_KEY=&lt;Your APP_KEY&gt;\r\nAPP_DEBUG=true\r\nVIRTUAL_HOST=&lt;Your host&gt; # example.local\r\nAPP_URL=https://&quot;${VIRTUAL_HOST}&quot;\r\n\r\nLOG_CHANNEL=stack\r\n\r\nDB_CONNECTION=mysql\r\nDB_HOST=mysql\r\nDB_PORT=3306\r\nDB_DATABASE=laravel\r\nDB_USERNAME=laravel\r\nDB_PASSWORD=laravel\r\nDB_ROOT_PASSWORD=root\r\n\r\nBROADCAST_DRIVER=log\r\nCACHE_DRIVER=redis\r\nQUEUE_CONNECTION=sync\r\nSESSION_DRIVER=database\r\nSESSION_LIFETIME=120\r\n\r\nREDIS_HOST=redis\r\nREDIS_PASSWORD=null\r\nREDIS_PORT=6379\r\n\r\nMAIL_DRIVER=smtp\r\nMAIL_HOST=smtp.mailtrap.io\r\nMAIL_PORT=2525\r\nMAIL_USERNAME=null\r\nMAIL_PASSWORD=null\r\nMAIL_ENCRYPTION=null\r\n\r\nAWS_ACCESS_KEY_ID=\r\nAWS_SECRET_ACCESS_KEY=\r\nAWS_DEFAULT_REGION=us-east-1\r\nAWS_BUCKET=\r\n\r\nPUSHER_APP_ID=\r\nPUSHER_APP_KEY=\r\nPUSHER_APP_SECRET=\r\nPUSHER_APP_CLUSTER=mt1\r\n\r\nMIX_PUSHER_APP_KEY=&quot;${PUSHER_APP_KEY}&quot;\r\nMIX_PUSHER_APP_CLUSTER=&quot;${PUSHER_APP_CLUSTER}&quot;\r\n\r\nDEV_FAKER_LOCALE=ja_JP\r\n\r\nMIX_NODE_HOST=&quot;${VIRTUAL_HOST}&quot;\r\nMIX_NODE_INTERNAL_HOST=node\r\nMIX_NODE_PORT=3000\r\n\r\n\r\n\r\n```\r\n\r\n\r\n## Dockerfile\r\n```Docer\r\nFROM php:7.2.8-fpm\r\nRUN apt-get update &amp;&amp; apt-get install -y \\\r\n  libssl-dev \\\r\n  git \\\r\n  wget \\\r\n  unzip \\\r\n  vim\r\nRUN apt-get -y update\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    gnupg\r\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\r\nRUN apt-get install -y nodejs\r\nRUN npm install npm@latest -g\r\n# PDO\r\nRUN docker-php-ext-install pdo_mysql\r\n# redis\r\nRUN docker-php-source extract\r\nRUN git clone -b 4.1.1 --depth 1 https://github.com/phpredis/phpredis.git /usr/src/php/ext/redis &amp;&amp; \\\r\n    docker-php-ext-install redis\r\n# xdebug\r\nRUN pecl install xdebug \\\r\n  &amp;&amp; docker-php-ext-enable xdebug\r\n# php-zip\r\nRUN apt-get install -y zlib1g-dev \\\r\n    &amp;&amp; docker-php-ext-install zip\r\n##Chrome Driver RUN apt-get install -y libnss3\r\n#RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\r\n#RUN echo &quot;deb http://dl.googlttcom/linux/chrome/deb/ stable main&quot; &gt;&gt; /etc/apt/sources.list.d/google.list\r\n#RUN apt-get update &amp;&amp; apt-get install -y google-chrome-stable\r\n# GD\r\nRUN apt-get update &amp;&amp; apt-get install -y \\\r\n        libfreetype6-dev \\\r\n        libjpeg62-turbo-dev \\\r\n        libmcrypt-dev \\\r\n        libpng-dev \\\r\n    &amp;&amp; docker-php-ext-install -j$(nproc) iconv \\\r\n    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\\r\n    &amp;&amp; docker-php-ext-install -j$(nproc) gd\r\n# install composer\r\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\r\n\r\n```\r\n\r\n\r\n\r\n## nginx default.conf\r\n```conf\r\nserver {\r\n  listen      80;\r\n  server_name YOUR_HOSTNAME;  // maybe equals VIRTUAL_HOST in .env\r\n    root /var/www/html/public;\r\n  location / {\r\n    try_files $uri $uri/ /index.php$is_args$args;\r\n    index index.html index.php;\r\n  }\r\n  location ~ \\.php$ {\r\n    fastcgi_split_path_info ^(.+\\.php)(/.+)$;\r\n    fastcgi_pass php:9000;\r\n    fastcgi_index index.php;\r\n    include fastcgi_params;\r\n      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\r\n      fastcgi_param PATH_INFO $fastcgi_path_info;\r\n  }\r\n}\r\n```',618,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/618-revision-v1/',0,'revision','',0),(621,1,'2020-12-15 12:25:40','2020-12-15 03:25:40','<h2>laravel Eloquent</h2>\n<p><em>Example</em></p>\n<pre><code class=\"language-php\">class Article extends Model\n{\n    public $timestamps = true;\n    protected $guarded = [\n        &#039;id&#039;\n    ];\n\n    public function articleImages()\n    {\n        return $this-&gt;hasMany(&#039;App\\Models\\Admin\\ArticleImage&#039;)-&gt;orderBy(&#039;sort&#039;, &#039;asc&#039;);\n        // 1:n order by\n    }\n\n    public function project()\n    {\n        return $this-&gt;belongsTo(&#039;App\\Models\\Admin\\Project&#039;)-&gt;withTrashed();\n        // n:n  論理削除を含める\n    }\n}\n</code></pre>\n<ul>\n<li>$this-&gt;hasOne 1:1</li>\n<li>$this-&gt;hasMany 1:N</li>\n<li>$this-&gt;belongsTo N:1</li>\n<li>this-&gt;belognsToMany N:N</li>\n<li>$this-&gt;hasManyThrough  中間テーブル</li>\n</ul>\n<h3>sql 確認</h3>\n<pre><code class=\"language-php\">$sql = User::where(&#039;status&#039;, &#039;&lt;&gt;&#039;, 1)\n            -&gt;toSql();\nvar_dump($sql);</code></pre>','Laravel Eloquent 備忘録','Laravel Eloquent の概要メモ','publish','closed','open','','laravel_eloquent','','','2020-12-15 12:25:40','2020-12-15 03:25:40','## laravel Eloquent\r\n*Example*\r\n```php\r\nclass Article extends Model\r\n{\r\n    public $timestamps = true;\r\n    protected $guarded = [\r\n        &#039;id&#039;\r\n    ];\r\n\r\n    public function articleImages()\r\n    {\r\n		return $this-&gt;hasMany(&#039;App\\Models\\Admin\\ArticleImage&#039;)-&gt;orderBy(&#039;sort&#039;, &#039;asc&#039;);\r\n		// 1:n order by\r\n    }\r\n\r\n    public function project()\r\n    {\r\n		return $this-&gt;belongsTo(&#039;App\\Models\\Admin\\Project&#039;)-&gt;withTrashed();\r\n		// n:n  論理削除を含める\r\n    }\r\n}\r\n\r\n\r\n```\r\n- $this->hasOne 1:1\r\n- $this->hasMany 1:N\r\n- $this->belongsTo N:1\r\n- this->belognsToMany N:N\r\n- $this->hasManyThrough  中間テーブル\r\n\r\n### sql 確認\r\n```php\r\n$sql = User::where(&#039;status&#039;, &#039;&lt;&gt;&#039;, 1)\r\n            -&gt;toSql();\r\nvar_dump($sql);\r\n```',0,'https://blog.webdimension.jp/?p=621',0,'post','',0),(622,1,'2020-12-15 12:22:34','2020-12-15 03:22:34','<h2>laravel Eloquent</h2>\n<p><em>Example</em></p>\n<pre><code class=\"language-php\">class Article extends Model\n{\n    public $timestamps = true;\n    protected $guarded = [\n        &#039;id&#039;\n    ];\n\n    public function articleImages()\n    {\n        return $this-&gt;hasMany(&#039;App\\Models\\Admin\\ArticleImage&#039;)-&gt;orderBy(&#039;sort&#039;, &#039;asc&#039;);\n        // 1:n order by\n    }\n\n    public function project()\n    {\n        return $this-&gt;belongsTo(&#039;App\\Models\\Admin\\Project&#039;)-&gt;withTrashed();\n        // n:n  論理削除を含める\n    }\n}\n</code></pre>\n<ul>\n<li>$this-&gt;hasOne 1:1</li>\n<li>$this-&gt;hasMany 1:N</li>\n<li>$this-&gt;belongsTo N:1</li>\n<li>this-&gt;belognsToMany N:N</li>\n<li>$this-&gt;hasManyThrough  中間テーブル</li>\n</ul>\n<h3>sql 確認</h3>\n<pre><code class=\"language-php\">$sql = User::where(&#039;status&#039;, &#039;&lt;&gt;&#039;, 1)\n            -&gt;toSql();\nvar_dump($sql);</code></pre>','Laravel Eloquent 備忘録','Laravel Eloquent の概要メモ','inherit','closed','closed','','621-revision-v1','','','2020-12-15 12:22:34','2020-12-15 03:22:34','## laravel Eloquent\r\n*Example*\r\n```php\r\nclass Article extends Model\r\n{\r\n    public $timestamps = true;\r\n    protected $guarded = [\r\n        &#039;id&#039;\r\n    ];\r\n\r\n    public function articleImages()\r\n    {\r\n		return $this-&gt;hasMany(&#039;App\\Models\\Admin\\ArticleImage&#039;)-&gt;orderBy(&#039;sort&#039;, &#039;asc&#039;);\r\n		// 1:n order by\r\n    }\r\n\r\n    public function project()\r\n    {\r\n		return $this-&gt;belongsTo(&#039;App\\Models\\Admin\\Project&#039;)-&gt;withTrashed();\r\n		// n:n  論理削除を含める\r\n    }\r\n}\r\n\r\n\r\n```\r\n- $this->hasOne 1:1\r\n- $this->hasMany 1:N\r\n- $this->belongsTo N:1\r\n- this->belognsToMany N:N\r\n- $this->hasManyThrough  中間テーブル\r\n\r\n### sql 確認\r\n```php\r\n$sql = User::where(&#039;status&#039;, &#039;&lt;&gt;&#039;, 1)\r\n            -&gt;toSql();\r\nvar_dump($sql);\r\n```',621,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/621-revision-v1/',0,'revision','',0),(623,1,'2020-12-15 12:25:20','2020-12-15 03:25:20','','laravel_eloquent','','inherit','closed','closed','','laravel_eloquent-2','','','2020-12-15 12:25:20','2020-12-15 03:25:20','',621,'https://blog.webdimension.jp/wp-content/uploads/2020/12/laravel_eloquent.png',0,'attachment','image/png',0),(624,1,'2020-12-15 12:28:59','2020-12-15 03:28:59','','laravel_docker','','inherit','closed','closed','','laravel_docker-2','','','2020-12-15 12:28:59','2020-12-15 03:28:59','',618,'https://blog.webdimension.jp/wp-content/uploads/2020/12/laravel_docker.png',0,'attachment','image/png',0),(625,1,'2020-12-15 12:38:34','2020-12-15 03:38:34','<h2>laravel form facade</h2>\n<p><a href=\"http://recipes.laravel.jp/category/17\">参考</a>\n記述が楽。<br />\n<em>Example</em></p>\n<pre><code class=\"language-html\">@extends(&#039;layouts.app_user&#039;)\n\n@section(&#039;content&#039;)\n&lt;div&gt;\n    &lt;h3&gt;会員編集&lt;/h3&gt;\n    {{Form::open(\n        [\n            &#039;route&#039; =&gt; [&#039;user.update&#039;, $currentData-&gt;id],\n            &#039;method&#039; =&gt; &#039;post&#039;\n        ]\n    ) }}\n    {{-- PUTにできないのなぜかわからない --}}\n    {{-- @method(&#039;PUT&#039;) --}}\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;last_name&quot;&gt;名前（性）&lt;/label&gt;\n        {{ Form::text(&#039;last_name&#039;, $currentData-&gt;last_name)}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;first_name&quot;&gt;名前（名）&lt;/label&gt;\n        {{ Form::text(&#039;first_name&#039;, $currentData-&gt;first_name)}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;last_name_kana&quot;&gt;フリガナ（性）&lt;/label&gt;\n        {{ Form::text(&#039;last_name_kana&#039;, $currentData-&gt;last_name_kana)}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;first_name_kana&quot;&gt;フリガナ（名）&lt;/label&gt;\n        {{ Form::text(&#039;first_name_kana&#039;, $currentData-&gt;last_name_kana)}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;birthday&quot;&gt;誕生日&lt;/label&gt;\n        {{ Form::date(&#039;birthday&#039;, $currentData-&gt;birthday)}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;zip&quot;&gt;郵便番号&lt;/label&gt;\n        {{ Form::text(&#039;zip&#039;, $currentData-&gt;zip)}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;pref&quot;&gt;都道府県&lt;/label&gt;\n        {{ Form::select(\n            &#039;pref&#039;,\n            $prefs,\n            $currentData-&gt;pref,\n            [&#039;placeholder&#039; =&gt; &#039;選択してください&#039;]\n        )}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;addr2&quot;&gt;住所&lt;/label&gt;\n        {{ Form::text(&#039;addr2&#039;), $currentData-&gt;addr2}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;addr3&quot;&gt;住所&lt;/label&gt;\n        {{ Form::text(&#039;addr3&#039;), $currentData-&gt;addr3}}\n    &lt;/div&gt;\n\n    {{-- &lt;button class=&quot;form-group&quot; id=&quot;btn&quot;&gt;送信&lt;/button&gt; --}}\n    &lt;div class=&quot;form-group&quot;&gt;\n        {{ Form::submit(&#039;送信&#039;) }}\n    &lt;/div&gt;\n    {{ Form::close() }}\n&lt;/div&gt;\n@endsection</code></pre>','Laravel form facede','Form の記述を楽にしてくれるLaravelCollective Formファサード','publish','closed','open','','laravel_form_facade','','','2020-12-15 12:38:34','2020-12-15 03:38:34','## laravel form facade\r\n[参考](http://recipes.laravel.jp/category/17)\r\n記述が楽。   \r\n*Example*\r\n```html\r\n@extends(&#039;layouts.app_user&#039;)\r\n\r\n@section(&#039;content&#039;)\r\n&lt;div&gt;\r\n    &lt;h3&gt;会員編集&lt;/h3&gt;\r\n    {{Form::open(\r\n        [\r\n            &#039;route&#039; =&gt; [&#039;user.update&#039;, $currentData-&gt;id],\r\n            &#039;method&#039; =&gt; &#039;post&#039;\r\n        ]\r\n    ) }}\r\n    {{-- PUTにできないのなぜかわからない --}}\r\n    {{-- @method(&#039;PUT&#039;) --}}\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;last_name&quot;&gt;名前（性）&lt;/label&gt;\r\n        {{ Form::text(&#039;last_name&#039;, $currentData-&gt;last_name)}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;first_name&quot;&gt;名前（名）&lt;/label&gt;\r\n        {{ Form::text(&#039;first_name&#039;, $currentData-&gt;first_name)}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;last_name_kana&quot;&gt;フリガナ（性）&lt;/label&gt;\r\n        {{ Form::text(&#039;last_name_kana&#039;, $currentData-&gt;last_name_kana)}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;first_name_kana&quot;&gt;フリガナ（名）&lt;/label&gt;\r\n        {{ Form::text(&#039;first_name_kana&#039;, $currentData-&gt;last_name_kana)}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;birthday&quot;&gt;誕生日&lt;/label&gt;\r\n        {{ Form::date(&#039;birthday&#039;, $currentData-&gt;birthday)}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;zip&quot;&gt;郵便番号&lt;/label&gt;\r\n        {{ Form::text(&#039;zip&#039;, $currentData-&gt;zip)}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;pref&quot;&gt;都道府県&lt;/label&gt;\r\n        {{ Form::select(\r\n            &#039;pref&#039;,\r\n            $prefs,\r\n            $currentData-&gt;pref,\r\n            [&#039;placeholder&#039; =&gt; &#039;選択してください&#039;]\r\n        )}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;addr2&quot;&gt;住所&lt;/label&gt;\r\n        {{ Form::text(&#039;addr2&#039;), $currentData-&gt;addr2}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;addr3&quot;&gt;住所&lt;/label&gt;\r\n        {{ Form::text(&#039;addr3&#039;), $currentData-&gt;addr3}}\r\n    &lt;/div&gt;\r\n\r\n    {{-- &lt;button class=&quot;form-group&quot; id=&quot;btn&quot;&gt;送信&lt;/button&gt; --}}\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        {{ Form::submit(&#039;送信&#039;) }}\r\n    &lt;/div&gt;\r\n    {{ Form::close() }}\r\n&lt;/div&gt;\r\n@endsection\r\n```',0,'https://blog.webdimension.jp/?p=625',0,'post','',0),(626,1,'2020-12-15 12:34:54','2020-12-15 03:34:54','<h2>laravel form facade</h2>\n<p><a href=\"http://recipes.laravel.jp/category/17\">参考</a>\n記述が楽。<br />\n<em>Example</em></p>\n<pre><code class=\"language-html\">@extends(&#039;layouts.app_user&#039;)\n\n@section(&#039;content&#039;)\n&lt;div&gt;\n    &lt;h3&gt;会員編集&lt;/h3&gt;\n    {{Form::open(\n        [\n            &#039;route&#039; =&gt; [&#039;user.update&#039;, $currentData-&gt;id],\n            &#039;method&#039; =&gt; &#039;post&#039;\n        ]\n    ) }}\n    {{-- PUTにできないのなぜかわからない --}}\n    {{-- @method(&#039;PUT&#039;) --}}\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;last_name&quot;&gt;名前（性）&lt;/label&gt;\n        {{ Form::text(&#039;last_name&#039;, $currentData-&gt;last_name)}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;first_name&quot;&gt;名前（名）&lt;/label&gt;\n        {{ Form::text(&#039;first_name&#039;, $currentData-&gt;first_name)}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;last_name_kana&quot;&gt;フリガナ（性）&lt;/label&gt;\n        {{ Form::text(&#039;last_name_kana&#039;, $currentData-&gt;last_name_kana)}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;first_name_kana&quot;&gt;フリガナ（名）&lt;/label&gt;\n        {{ Form::text(&#039;first_name_kana&#039;, $currentData-&gt;last_name_kana)}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;birthday&quot;&gt;誕生日&lt;/label&gt;\n        {{ Form::date(&#039;birthday&#039;, $currentData-&gt;birthday)}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;zip&quot;&gt;郵便番号&lt;/label&gt;\n        {{ Form::text(&#039;zip&#039;, $currentData-&gt;zip)}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;pref&quot;&gt;都道府県&lt;/label&gt;\n        {{ Form::select(\n            &#039;pref&#039;,\n            $prefs,\n            $currentData-&gt;pref,\n            [&#039;placeholder&#039; =&gt; &#039;選択してください&#039;]\n        )}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;addr2&quot;&gt;住所&lt;/label&gt;\n        {{ Form::text(&#039;addr2&#039;), $currentData-&gt;addr2}}\n    &lt;/div&gt;\n\n    &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;addr3&quot;&gt;住所&lt;/label&gt;\n        {{ Form::text(&#039;addr3&#039;), $currentData-&gt;addr3}}\n    &lt;/div&gt;\n\n    {{-- &lt;button class=&quot;form-group&quot; id=&quot;btn&quot;&gt;送信&lt;/button&gt; --}}\n    &lt;div class=&quot;form-group&quot;&gt;\n        {{ Form::submit(&#039;送信&#039;) }}\n    &lt;/div&gt;\n    {{ Form::close() }}\n&lt;/div&gt;\n@endsection</code></pre>','Laravel form facede','Form の記述を楽にしてくれるLaravelCollective Formファサード','inherit','closed','closed','','625-revision-v1','','','2020-12-15 12:34:54','2020-12-15 03:34:54','## laravel form facade\r\n[参考](http://recipes.laravel.jp/category/17)\r\n記述が楽。   \r\n*Example*\r\n```html\r\n@extends(&#039;layouts.app_user&#039;)\r\n\r\n@section(&#039;content&#039;)\r\n&lt;div&gt;\r\n    &lt;h3&gt;会員編集&lt;/h3&gt;\r\n    {{Form::open(\r\n        [\r\n            &#039;route&#039; =&gt; [&#039;user.update&#039;, $currentData-&gt;id],\r\n            &#039;method&#039; =&gt; &#039;post&#039;\r\n        ]\r\n    ) }}\r\n    {{-- PUTにできないのなぜかわからない --}}\r\n    {{-- @method(&#039;PUT&#039;) --}}\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;last_name&quot;&gt;名前（性）&lt;/label&gt;\r\n        {{ Form::text(&#039;last_name&#039;, $currentData-&gt;last_name)}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;first_name&quot;&gt;名前（名）&lt;/label&gt;\r\n        {{ Form::text(&#039;first_name&#039;, $currentData-&gt;first_name)}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;last_name_kana&quot;&gt;フリガナ（性）&lt;/label&gt;\r\n        {{ Form::text(&#039;last_name_kana&#039;, $currentData-&gt;last_name_kana)}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;first_name_kana&quot;&gt;フリガナ（名）&lt;/label&gt;\r\n        {{ Form::text(&#039;first_name_kana&#039;, $currentData-&gt;last_name_kana)}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;birthday&quot;&gt;誕生日&lt;/label&gt;\r\n        {{ Form::date(&#039;birthday&#039;, $currentData-&gt;birthday)}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;zip&quot;&gt;郵便番号&lt;/label&gt;\r\n        {{ Form::text(&#039;zip&#039;, $currentData-&gt;zip)}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;pref&quot;&gt;都道府県&lt;/label&gt;\r\n        {{ Form::select(\r\n            &#039;pref&#039;,\r\n            $prefs,\r\n            $currentData-&gt;pref,\r\n            [&#039;placeholder&#039; =&gt; &#039;選択してください&#039;]\r\n        )}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;addr2&quot;&gt;住所&lt;/label&gt;\r\n        {{ Form::text(&#039;addr2&#039;), $currentData-&gt;addr2}}\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        &lt;label for=&quot;addr3&quot;&gt;住所&lt;/label&gt;\r\n        {{ Form::text(&#039;addr3&#039;), $currentData-&gt;addr3}}\r\n    &lt;/div&gt;\r\n\r\n    {{-- &lt;button class=&quot;form-group&quot; id=&quot;btn&quot;&gt;送信&lt;/button&gt; --}}\r\n    &lt;div class=&quot;form-group&quot;&gt;\r\n        {{ Form::submit(&#039;送信&#039;) }}\r\n    &lt;/div&gt;\r\n    {{ Form::close() }}\r\n&lt;/div&gt;\r\n@endsection\r\n```',625,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/625-revision-v1/',0,'revision','',0),(627,1,'2020-12-15 12:38:04','2020-12-15 03:38:04','','laravel_formfacade','','inherit','closed','closed','','laravel_formfacade','','','2020-12-15 12:38:04','2020-12-15 03:38:04','',625,'https://blog.webdimension.jp/wp-content/uploads/2020/12/laravel_formfacade.png',0,'attachment','image/png',0),(629,1,'2020-12-15 12:53:19','2020-12-15 03:53:19','<p>In Model<br />\nホワイトリストかブラックリストか、みたいなもの。。。</p>\n<h2>Fillable</h2>\n<pre><code class=\"language-php\">// これらが変更可能\n    protected $fillable = [\n        &#039;email&#039;,\n        &#039;pass&#039;,\n        &#039;name&#039;,\n        &#039;kana&#039;,\n        &#039;company&#039;,\n        &#039;stat&#039;,\n        &#039;dept&#039;,\n        &#039;sales_flg&#039;,\n    ];</code></pre>\n<h2>Gurd</h2>\n<pre><code class=\"language-php\">// これらが変更禁止\nprotected $guarded = [\n        &#039;id&#039;,\n        &#039;email&#039;,\n        &#039;password&#039;\n    ];</code></pre>','Laravel Filable or Gurd','カラム指定でDataの保護。意図しない変更を防ぐ','publish','closed','open','','laravel_fillable_gurd','','','2020-12-15 12:53:19','2020-12-15 03:53:19','In Model   \r\nホワイトリストかブラックリストか、みたいなもの。。。\r\n## Fillable\r\n```php\r\n// これらが変更可能\r\n    protected $fillable = [\r\n        &#039;email&#039;,\r\n        &#039;pass&#039;,\r\n        &#039;name&#039;,\r\n        &#039;kana&#039;,\r\n        &#039;company&#039;,\r\n        &#039;stat&#039;,\r\n        &#039;dept&#039;,\r\n        &#039;sales_flg&#039;,\r\n    ];\r\n```\r\n## Gurd\r\n```php\r\n// これらが変更禁止\r\nprotected $guarded = [\r\n        &#039;id&#039;,\r\n        &#039;email&#039;,\r\n        &#039;password&#039;\r\n    ];\r\n```\r\n\r\n',0,'https://blog.webdimension.jp/?p=629',0,'post','',0),(630,1,'2020-12-15 12:44:12','2020-12-15 03:44:12','<h2>laravel CRUD</h2>\n<h3>Fillable or Gurd</h3>\n<p>In Model</p>\n<pre><code class=\"language-php\">// これらが変更可能\n    protected $fillable = [\n        &#039;email&#039;,\n        &#039;pass&#039;,\n        &#039;name&#039;,\n        &#039;kana&#039;,\n        &#039;company&#039;,\n        &#039;stat&#039;,\n        &#039;dept&#039;,\n        &#039;sales_flg&#039;,\n    ];</code></pre>\n<p>or</p>\n<pre><code class=\"language-php\">// これらが変更禁止\nprotected $guarded = [\n        &#039;id&#039;,\n        &#039;email&#039;,\n        &#039;password&#039;\n    ];</code></pre>','Laravel Filable or Gurd','','inherit','closed','closed','','629-revision-v1','','','2020-12-15 12:44:12','2020-12-15 03:44:12','## laravel CRUD\r\n### Fillable or Gurd\r\nIn Model\r\n```php\r\n// これらが変更可能\r\n    protected $fillable = [\r\n        &#039;email&#039;,\r\n        &#039;pass&#039;,\r\n        &#039;name&#039;,\r\n        &#039;kana&#039;,\r\n        &#039;company&#039;,\r\n        &#039;stat&#039;,\r\n        &#039;dept&#039;,\r\n        &#039;sales_flg&#039;,\r\n    ];\r\n```\r\nor\r\n```php\r\n// これらが変更禁止\r\nprotected $guarded = [\r\n        &#039;id&#039;,\r\n        &#039;email&#039;,\r\n        &#039;password&#039;\r\n    ];\r\n```\r\n',629,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/629-revision-v1/',0,'revision','',0),(631,1,'2020-12-15 12:50:07','2020-12-15 03:50:07','<p>In Model<br />\nホワイトリストかブラックリストか、みたいなもの。。。</p>\n<h2>Fillable</h2>\n<pre><code class=\"language-php\">// これらが変更可能\n    protected $fillable = [\n        &#039;email&#039;,\n        &#039;pass&#039;,\n        &#039;name&#039;,\n        &#039;kana&#039;,\n        &#039;company&#039;,\n        &#039;stat&#039;,\n        &#039;dept&#039;,\n        &#039;sales_flg&#039;,\n    ];</code></pre>\n<h2>Gurd</h2>\n<pre><code class=\"language-php\">// これらが変更禁止\nprotected $guarded = [\n        &#039;id&#039;,\n        &#039;email&#039;,\n        &#039;password&#039;\n    ];</code></pre>','Laravel Filable or Gurd','カラム指定でDataの保護。意図しない変更を防ぐ','inherit','closed','closed','','629-revision-v1','','','2020-12-15 12:50:07','2020-12-15 03:50:07','In Model   \r\nホワイトリストかブラックリストか、みたいなもの。。。\r\n## Fillable\r\n```php\r\n// これらが変更可能\r\n    protected $fillable = [\r\n        &#039;email&#039;,\r\n        &#039;pass&#039;,\r\n        &#039;name&#039;,\r\n        &#039;kana&#039;,\r\n        &#039;company&#039;,\r\n        &#039;stat&#039;,\r\n        &#039;dept&#039;,\r\n        &#039;sales_flg&#039;,\r\n    ];\r\n```\r\n## Gurd\r\n```php\r\n// これらが変更禁止\r\nprotected $guarded = [\r\n        &#039;id&#039;,\r\n        &#039;email&#039;,\r\n        &#039;password&#039;\r\n    ];\r\n```\r\n\r\n',629,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/629-revision-v1/',0,'revision','',0),(632,1,'2020-12-15 12:52:57','2020-12-15 03:52:57','','laravel_fillable_gurd','','inherit','closed','closed','','laravel_fillable_gurd-2','','','2020-12-15 12:52:57','2020-12-15 03:52:57','',629,'https://blog.webdimension.jp/wp-content/uploads/2020/12/laravel_fillable_gurd.png',0,'attachment','image/png',0),(633,1,'2020-12-15 13:02:54','2020-12-15 04:02:54','<h2>Setup</h2>\n<h3>Create Model Dir</h3>\n<pre><code class=\"language-bash\">mkdir -p App/Models/Admin</code></pre>\n<h3>Create  Controller Dir</h3>\n<pre><code class=\"language-bash\">mkdir -p App/Http/Controllers/</code></pre>\n<h3>Create Model and table</h3>\n<pre><code class=\"language-bash\">php artisan make:model Models/Admin/Admin -m</code></pre>\n<h3>Copy Auth</h3>\n<pre><code class=\"language-bash\">cp -rf App/Http/Controllers/auth App/Http/Controllers/Admin/auth</code></pre>\n<h3>Copy HomeController</h3>\n<pre><code class=\"language-bash\">cp App/Http/Controllers/HomeController.php App/Http/Controllers/Admin/HomeController.php</code></pre>\n<h3>Views</h3>\n<pre><code class=\"language-bash\">cp /resources/views/home.blade.php /resources/views/admin/home.blade.php\ncp /resources/views/auth/login.blade.php /resources/views/admin/auth/login.blade.php</code></pre>\n<h3>Add admin-routing</h3>\n<pre><code class=\"language-bash\">touch /routes/admin.php</code></pre>\n<h2>Admin Login</h2>\n<h3>App/Models/Admin/Admin.php</h3>\n<pre><code class=\"language-bash\"># Table固有設定追記\n    const CREATED_AT = &#039;reg_date&#039;;\n    const UPDATED_AT = &#039;upd_date&#039;;\n    protected $table = &#039;admin&#039;;\n    protected $primaryKey = &#039;admin_id&#039;;\n\n...\n...\n...\n...\n# Password カラム指定\n    public function getAuthPassword()\n    {\n        return $this-&gt;pass;\n    }\n</code></pre>\n<h3>App/Http/Controllers/Admin/HomeController.php</h3>\n<pre><code class=\"language-bash\">#middlewear auth.admin に設定\n$this-&gt;middleware(&#039;auth:admin&#039;);</code></pre>\n<h3>App/Http/Controllers/Admin/Auth/LoginController.php</h3>\n<pre><code class=\"language-bash\"># Redirect URL when login success\nprotected $redirectTo = &#039;/admin/home&#039;;\n...\n...\n...\n# Add middlewear admin\npublic function __construct()\n    {\n        $this-&gt;middleware(&#039;guest:admin&#039;)-&gt;except(&#039;logout&#039;); //変更\n    }\n...\n...\n...\n# 管理者認証のguardを指定\n    protected function guard()\n    {\n        return \\Auth::guard(&#039;admin&#039;);\n    }\n...\n...\n...\n# View login-form\npublic function showLoginForm()\n    {\n        return view(&#039;admin.login&#039;);  //変更\n    }\n...\n...\n...\n# Login logic\n    public function login(Request $request)\n    {\n        // Validate the form data\n        $this-&gt;validate($request, [\n            &#039;email&#039; =&gt; &#039;required|email&#039;,\n            &#039;password&#039; =&gt; &#039;required|min:3&#039;\n        ]);\n        // Attempt to log the user in\n        if (Auth::guard(&#039;admin&#039;)-&gt;attempt([&#039;email&#039; =&gt; $request-&gt;email, &#039;password&#039; =&gt; $request-&gt;password], $request-&gt;remember)) {\n            // if successful, then redirect to their intended location\n            return redirect()-&gt;intended(route(&#039;admin.home&#039;));\n        }\n\n        // if unsuccessful, then redirect back to the login with the form data\n        return redirect()-&gt;back()-&gt;withInput($request-&gt;only(&#039;email&#039;, &#039;remember&#039;));\n    }\n...\n...\n...\n# Login-key column name\n    public function username() // このメソッドを追記\n    {\n        return &#039;email&#039;; \n    }</code></pre>\n<h3>config/auth.php</h3>\n<pre><code class=\"language-bash\">    &#039;defaults&#039; =&gt; [\n      - &#039;guard&#039; =&gt; &#039;web&#039;,\n      + &#039;guard&#039; =&gt; &#039;user&#039;,\n        &#039;passwords&#039; =&gt; &#039;users&#039;,\n    ],\n...\n...\n...\n\n    &#039;guards&#039; =&gt; [\n        &#039;web&#039; =&gt; [\n            &#039;driver&#039; =&gt; &#039;session&#039;,\n            &#039;provider&#039; =&gt; &#039;users&#039;,\n        ],\n        &#039;user&#039; =&gt; [\n            &#039;driver&#039; =&gt; &#039;session&#039;,\n            &#039;provider&#039; =&gt; &#039;users&#039;,\n        ],\n\n        &#039;api&#039; =&gt; [\n            &#039;driver&#039; =&gt; &#039;token&#039;,\n            &#039;provider&#039; =&gt; &#039;users&#039;,\n            &#039;hash&#039; =&gt; false,\n        ],\n    +   &#039;admin&#039; =&gt; [\n    +       &#039;driver&#039; =&gt; &#039;session&#039;,\n    +       &#039;provider&#039; =&gt; &#039;admins&#039;,\n    +   ],\n    ],\n\n...\n...\n...\n\n    &#039;providers&#039; =&gt; [\n        &#039;users&#039; =&gt; [\n            &#039;driver&#039; =&gt; &#039;eloquent&#039;,\n            &#039;model&#039; =&gt; App\\User::class,\n        ],\n    +    &#039;admins&#039; =&gt; [\n    +        &#039;driver&#039; =&gt; &#039;eloquent&#039;,\n    +        &#039;model&#039; =&gt; App\\Models\\Admin\\Admin::class,\n    +    ]\n...\n...\n...\n\n    &#039;passwords&#039; =&gt; [\n        &#039;users&#039; =&gt; [\n            &#039;provider&#039; =&gt; &#039;users&#039;,\n            &#039;table&#039; =&gt; &#039;password_resets&#039;,\n            &#039;expire&#039; =&gt; 60,\n            &#039;throttle&#039; =&gt; 60,\n        ],\n    +    &#039;admins&#039; =&gt; [\n    +        &#039;provider&#039; =&gt; &#039;admins&#039;,\n    +        &#039;table&#039; =&gt; &#039;password_resets&#039;,\n    +        &#039;expire&#039; =&gt; 15\n    +    ]\n    ],</code></pre>\n<h3>app/Exceptions/Handler.php</h3>\n<pre><code class=\"language-php\">//追記\n&lt;?php\n    /**\n     * Convert an authentication exception into an unauthenticated response.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Illuminate\\Auth\\AuthenticationException  $exception\n     * @return \\Illuminate\\Http\\Response\n     */\n    protected function unauthenticated($request, AuthenticationException $exception)\n    {\n        if ($request-&gt;expectsJson()) {\n            return response()-&gt;json([&#039;error&#039; =&gt; &#039;Unauthenticated.&#039;], 401);\n        }\n        if (in_array(&#039;admin&#039;, $exception-&gt;guards(), true)) {\n            return redirect()-&gt;guest(route(&#039;admin.login&#039;));\n        }\n\n        return redirect()-&gt;guest(route(&#039;login&#039;));\n    }</code></pre>\n<h2>Admin Faker</h2>\n<pre><code class=\"language-bash\">php artisan make:factory AdminFactory</code></pre>\n<pre><code class=\"language-php\">// database/seeds/AdminsTableSeeder.php\n    public function run()\n    {\n        //\n        DB::table(&#039;admins&#039;)-&gt;insert([\n            [&#039;id&#039; =&gt; &#039;1&#039;,\n                &#039;email&#039; =&gt; &#039;admin@sports-funding.com&#039;,\n                &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\n                &#039;name&#039; =&gt; &#039;管理者てすと&#039;,\n                &#039;name_kana&#039; =&gt; &#039;かんりしゃてすと&#039;,\n                &#039;company_name&#039; =&gt; &#039;株式会社テスト&#039;,\n                &#039;created_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\n                &#039;deleted_at&#039; =&gt; null,\n            ],\n            [&#039;id&#039; =&gt; &#039;2&#039;,\n                &#039;email&#039; =&gt; &#039;admin2@sports-funding.com&#039;,\n                &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\n                &#039;name&#039; =&gt; &#039;山田太郎&#039;,\n                &#039;name_kana&#039; =&gt; &#039;やまだたろう&#039;,\n                &#039;company_name&#039; =&gt; &#039;株式会社山田&#039;,\n                &#039;created_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\n                &#039;deleted_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\n            ],\n        ]);\n\n      factory(App\\Models\\Admin\\Admin::class, 30)-&gt;create();\n    }</code></pre>\n<pre><code class=\"language-php\">// database/factories/AdminFactory.php\nuse App\\Models\\Admin\\Admin;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Faker\\Generator as Faker;\n\n$factory-&gt;define(Admin::class, function (Faker $faker) {\n    return [\n        &#039;email&#039; =&gt; $faker-&gt;email,\n            &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\n        &#039;name&#039; =&gt; $faker-&gt;name,\n        &#039;name_kana&#039; =&gt; $faker-&gt;kanaName,\n        &#039;company_name&#039; =&gt; $faker-&gt;company,\n    ];\n});\n</code></pre>','Laravel login機能追加','Laravelにログイン機能追加の一例','publish','closed','open','','laravel_login_feature','','','2020-12-15 13:02:54','2020-12-15 04:02:54','## Setup\r\n### Create Model Dir\r\n```bash\r\nmkdir -p App/Models/Admin\r\n```\r\n### Create  Controller Dir\r\n```bash\r\nmkdir -p App/Http/Controllers/\r\n```\r\n\r\n### Create Model and table\r\n```bash\r\nphp artisan make:model Models/Admin/Admin -m\r\n```\r\n### Copy Auth\r\n```bash\r\ncp -rf App/Http/Controllers/auth App/Http/Controllers/Admin/auth\r\n```\r\n### Copy HomeController\r\n```bash\r\ncp App/Http/Controllers/HomeController.php App/Http/Controllers/Admin/HomeController.php\r\n```\r\n### Views \r\n```bash\r\ncp /resources/views/home.blade.php /resources/views/admin/home.blade.php\r\ncp /resources/views/auth/login.blade.php /resources/views/admin/auth/login.blade.php\r\n```\r\n### Add admin-routing\r\n```bash\r\ntouch /routes/admin.php\r\n```\r\n\r\n\r\n## Admin Login\r\n### App/Models/Admin/Admin.php\r\n```bash\r\n# Table固有設定追記\r\n    const CREATED_AT = &#039;reg_date&#039;;\r\n    const UPDATED_AT = &#039;upd_date&#039;;\r\n    protected $table = &#039;admin&#039;;\r\n    protected $primaryKey = &#039;admin_id&#039;;\r\n\r\n...\r\n...\r\n...\r\n...\r\n# Password カラム指定\r\n    public function getAuthPassword()\r\n    {\r\n        return $this-&gt;pass;\r\n    }\r\n\r\n\r\n```\r\n### App/Http/Controllers/Admin/HomeController.php\r\n```bash\r\n#middlewear auth.admin に設定\r\n$this-&gt;middleware(&#039;auth:admin&#039;);\r\n```\r\n### App/Http/Controllers/Admin/Auth/LoginController.php\r\n```bash\r\n# Redirect URL when login success\r\nprotected $redirectTo = &#039;/admin/home&#039;;\r\n...\r\n...\r\n...\r\n# Add middlewear admin\r\npublic function __construct()\r\n    {\r\n        $this-&gt;middleware(&#039;guest:admin&#039;)-&gt;except(&#039;logout&#039;); //変更\r\n    }\r\n...\r\n...\r\n...\r\n# 管理者認証のguardを指定\r\n    protected function guard()\r\n    {\r\n        return \\Auth::guard(&#039;admin&#039;);\r\n    }\r\n...\r\n...\r\n...\r\n# View login-form\r\npublic function showLoginForm()\r\n    {\r\n        return view(&#039;admin.login&#039;);  //変更\r\n    }\r\n...\r\n...\r\n...\r\n# Login logic\r\n    public function login(Request $request)\r\n    {\r\n        // Validate the form data\r\n        $this-&gt;validate($request, [\r\n            &#039;email&#039; =&gt; &#039;required|email&#039;,\r\n            &#039;password&#039; =&gt; &#039;required|min:3&#039;\r\n        ]);\r\n        // Attempt to log the user in\r\n        if (Auth::guard(&#039;admin&#039;)-&gt;attempt([&#039;email&#039; =&gt; $request-&gt;email, &#039;password&#039; =&gt; $request-&gt;password], $request-&gt;remember)) {\r\n            // if successful, then redirect to their intended location\r\n            return redirect()-&gt;intended(route(&#039;admin.home&#039;));\r\n        }\r\n\r\n        // if unsuccessful, then redirect back to the login with the form data\r\n        return redirect()-&gt;back()-&gt;withInput($request-&gt;only(&#039;email&#039;, &#039;remember&#039;));\r\n    }\r\n...\r\n...\r\n...\r\n# Login-key column name\r\n    public function username() // このメソッドを追記\r\n    {\r\n        return &#039;email&#039;; \r\n    }\r\n```\r\n### config/auth.php\r\n```bash\r\n    &#039;defaults&#039; =&gt; [\r\n      - &#039;guard&#039; =&gt; &#039;web&#039;,\r\n      + &#039;guard&#039; =&gt; &#039;user&#039;,\r\n        &#039;passwords&#039; =&gt; &#039;users&#039;,\r\n    ],\r\n...\r\n...\r\n...\r\n\r\n    &#039;guards&#039; =&gt; [\r\n        &#039;web&#039; =&gt; [\r\n            &#039;driver&#039; =&gt; &#039;session&#039;,\r\n            &#039;provider&#039; =&gt; &#039;users&#039;,\r\n        ],\r\n        &#039;user&#039; =&gt; [\r\n            &#039;driver&#039; =&gt; &#039;session&#039;,\r\n            &#039;provider&#039; =&gt; &#039;users&#039;,\r\n        ],\r\n\r\n        &#039;api&#039; =&gt; [\r\n            &#039;driver&#039; =&gt; &#039;token&#039;,\r\n            &#039;provider&#039; =&gt; &#039;users&#039;,\r\n            &#039;hash&#039; =&gt; false,\r\n        ],\r\n    +   &#039;admin&#039; =&gt; [\r\n    +       &#039;driver&#039; =&gt; &#039;session&#039;,\r\n    +       &#039;provider&#039; =&gt; &#039;admins&#039;,\r\n    +   ],\r\n    ],\r\n\r\n...\r\n...\r\n...\r\n\r\n    &#039;providers&#039; =&gt; [\r\n        &#039;users&#039; =&gt; [\r\n            &#039;driver&#039; =&gt; &#039;eloquent&#039;,\r\n            &#039;model&#039; =&gt; App\\User::class,\r\n        ],\r\n    +    &#039;admins&#039; =&gt; [\r\n    +        &#039;driver&#039; =&gt; &#039;eloquent&#039;,\r\n    +        &#039;model&#039; =&gt; App\\Models\\Admin\\Admin::class,\r\n    +    ]\r\n...\r\n...\r\n...\r\n\r\n    &#039;passwords&#039; =&gt; [\r\n        &#039;users&#039; =&gt; [\r\n            &#039;provider&#039; =&gt; &#039;users&#039;,\r\n            &#039;table&#039; =&gt; &#039;password_resets&#039;,\r\n            &#039;expire&#039; =&gt; 60,\r\n            &#039;throttle&#039; =&gt; 60,\r\n        ],\r\n    +    &#039;admins&#039; =&gt; [\r\n    +        &#039;provider&#039; =&gt; &#039;admins&#039;,\r\n    +        &#039;table&#039; =&gt; &#039;password_resets&#039;,\r\n    +        &#039;expire&#039; =&gt; 15\r\n    +    ]\r\n    ],\r\n```\r\n### app/Exceptions/Handler.php \r\n```php\r\n//追記\r\n&lt;?php\r\n    /**\r\n     * Convert an authentication exception into an unauthenticated response.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @param  \\Illuminate\\Auth\\AuthenticationException  $exception\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    protected function unauthenticated($request, AuthenticationException $exception)\r\n    {\r\n        if ($request-&gt;expectsJson()) {\r\n            return response()-&gt;json([&#039;error&#039; =&gt; &#039;Unauthenticated.&#039;], 401);\r\n        }\r\n        if (in_array(&#039;admin&#039;, $exception-&gt;guards(), true)) {\r\n            return redirect()-&gt;guest(route(&#039;admin.login&#039;));\r\n        }\r\n\r\n        return redirect()-&gt;guest(route(&#039;login&#039;));\r\n    }\r\n```\r\n\r\n## Admin Faker\r\n```bash\r\nphp artisan make:factory AdminFactory\r\n```\r\n```php\r\n// database/seeds/AdminsTableSeeder.php\r\n    public function run()\r\n    {\r\n        //\r\n        DB::table(&#039;admins&#039;)-&gt;insert([\r\n            [&#039;id&#039; =&gt; &#039;1&#039;,\r\n                &#039;email&#039; =&gt; &#039;admin@sports-funding.com&#039;,\r\n                &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\r\n                &#039;name&#039; =&gt; &#039;管理者てすと&#039;,\r\n                &#039;name_kana&#039; =&gt; &#039;かんりしゃてすと&#039;,\r\n                &#039;company_name&#039; =&gt; &#039;株式会社テスト&#039;,\r\n                &#039;created_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\r\n                &#039;deleted_at&#039; =&gt; null,\r\n            ],\r\n            [&#039;id&#039; =&gt; &#039;2&#039;,\r\n                &#039;email&#039; =&gt; &#039;admin2@sports-funding.com&#039;,\r\n                &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\r\n                &#039;name&#039; =&gt; &#039;山田太郎&#039;,\r\n                &#039;name_kana&#039; =&gt; &#039;やまだたろう&#039;,\r\n                &#039;company_name&#039; =&gt; &#039;株式会社山田&#039;,\r\n                &#039;created_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\r\n                &#039;deleted_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\r\n            ],\r\n        ]);\r\n\r\n      factory(App\\Models\\Admin\\Admin::class, 30)-&gt;create();\r\n    }\r\n```\r\n```php\r\n// database/factories/AdminFactory.php\r\nuse App\\Models\\Admin\\Admin;\r\nuse Illuminate\\Support\\Facades\\Hash;\r\nuse Faker\\Generator as Faker;\r\n\r\n$factory-&gt;define(Admin::class, function (Faker $faker) {\r\n    return [\r\n        &#039;email&#039; =&gt; $faker-&gt;email,\r\n	        &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\r\n        &#039;name&#039; =&gt; $faker-&gt;name,\r\n        &#039;name_kana&#039; =&gt; $faker-&gt;kanaName,\r\n        &#039;company_name&#039; =&gt; $faker-&gt;company,\r\n    ];\r\n});\r\n\r\n```',0,'https://blog.webdimension.jp/?p=633',0,'post','',0),(634,1,'2020-12-15 12:57:32','2020-12-15 03:57:32','<h2>Setup</h2>\n<h3>Create Model Dir</h3>\n<pre><code class=\"language-bash\">mkdir -p App/Models/Admin</code></pre>\n<h3>Create  Controller Dir</h3>\n<pre><code class=\"language-bash\">mkdir -p App/Http/Controllers/</code></pre>\n<h3>Create Model and table</h3>\n<pre><code class=\"language-bash\">php artisan make:model Models/Admin/Admin -m</code></pre>\n<h3>Copy Auth</h3>\n<pre><code class=\"language-bash\">cp -rf App/Http/Controllers/auth App/Http/Controllers/Admin/auth</code></pre>\n<h3>Copy HomeController</h3>\n<pre><code class=\"language-bash\">cp App/Http/Controllers/HomeController.php App/Http/Controllers/Admin/HomeController.php</code></pre>\n<h3>Views</h3>\n<pre><code class=\"language-bash\">cp /resources/views/home.blade.php /resources/views/admin/home.blade.php\ncp /resources/views/auth/login.blade.php /resources/views/admin/auth/login.blade.php</code></pre>\n<h3>Add admin-routing</h3>\n<pre><code class=\"language-bash\">touch /routes/admin.php</code></pre>\n<h2>Admin Login</h2>\n<h3>App/Models/Admin/Admin.php</h3>\n<pre><code class=\"language-bash\"># Table固有設定追記\n    const CREATED_AT = &#039;reg_date&#039;;\n    const UPDATED_AT = &#039;upd_date&#039;;\n    protected $table = &#039;admin&#039;;\n    protected $primaryKey = &#039;admin_id&#039;;\n\n...\n...\n...\n...\n# Password カラム指定\n    public function getAuthPassword()\n    {\n        return $this-&gt;pass;\n    }\n</code></pre>\n<h3>App/Http/Controllers/Admin/HomeController.php</h3>\n<pre><code class=\"language-bash\">#middlewear auth.admin に設定\n$this-&gt;middleware(&#039;auth:admin&#039;);</code></pre>\n<h3>App/Http/Controllers/Admin/Auth/LoginController.php</h3>\n<pre><code class=\"language-bash\"># Redirect URL when login success\nprotected $redirectTo = &#039;/admin/home&#039;;\n...\n...\n...\n# Add middlewear admin\npublic function __construct()\n    {\n        $this-&gt;middleware(&#039;guest:admin&#039;)-&gt;except(&#039;logout&#039;); //変更\n    }\n...\n...\n...\n# 管理者認証のguardを指定\n    protected function guard()\n    {\n        return \\Auth::guard(&#039;admin&#039;);\n    }\n...\n...\n...\n# View login-form\npublic function showLoginForm()\n    {\n        return view(&#039;admin.login&#039;);  //変更\n    }\n...\n...\n...\n# Login logic\n    public function login(Request $request)\n    {\n        // Validate the form data\n        $this-&gt;validate($request, [\n            &#039;email&#039; =&gt; &#039;required|email&#039;,\n            &#039;password&#039; =&gt; &#039;required|min:3&#039;\n        ]);\n        // Attempt to log the user in\n        if (Auth::guard(&#039;admin&#039;)-&gt;attempt([&#039;email&#039; =&gt; $request-&gt;email, &#039;password&#039; =&gt; $request-&gt;password], $request-&gt;remember)) {\n            // if successful, then redirect to their intended location\n            return redirect()-&gt;intended(route(&#039;admin.home&#039;));\n        }\n\n        // if unsuccessful, then redirect back to the login with the form data\n        return redirect()-&gt;back()-&gt;withInput($request-&gt;only(&#039;email&#039;, &#039;remember&#039;));\n    }\n...\n...\n...\n# Login-key column name\n    public function username() // このメソッドを追記\n    {\n        return &#039;email&#039;; \n    }</code></pre>\n<h3>config/auth.php</h3>\n<pre><code class=\"language-bash\">    &#039;defaults&#039; =&gt; [\n      - &#039;guard&#039; =&gt; &#039;web&#039;,\n      + &#039;guard&#039; =&gt; &#039;user&#039;,\n        &#039;passwords&#039; =&gt; &#039;users&#039;,\n    ],\n...\n...\n...\n\n    &#039;guards&#039; =&gt; [\n        &#039;web&#039; =&gt; [\n            &#039;driver&#039; =&gt; &#039;session&#039;,\n            &#039;provider&#039; =&gt; &#039;users&#039;,\n        ],\n        &#039;user&#039; =&gt; [\n            &#039;driver&#039; =&gt; &#039;session&#039;,\n            &#039;provider&#039; =&gt; &#039;users&#039;,\n        ],\n\n        &#039;api&#039; =&gt; [\n            &#039;driver&#039; =&gt; &#039;token&#039;,\n            &#039;provider&#039; =&gt; &#039;users&#039;,\n            &#039;hash&#039; =&gt; false,\n        ],\n    +   &#039;admin&#039; =&gt; [\n    +       &#039;driver&#039; =&gt; &#039;session&#039;,\n    +       &#039;provider&#039; =&gt; &#039;admins&#039;,\n    +   ],\n    ],\n\n...\n...\n...\n\n    &#039;providers&#039; =&gt; [\n        &#039;users&#039; =&gt; [\n            &#039;driver&#039; =&gt; &#039;eloquent&#039;,\n            &#039;model&#039; =&gt; App\\User::class,\n        ],\n    +    &#039;admins&#039; =&gt; [\n    +        &#039;driver&#039; =&gt; &#039;eloquent&#039;,\n    +        &#039;model&#039; =&gt; App\\Models\\Admin\\Admin::class,\n    +    ]\n...\n...\n...\n\n    &#039;passwords&#039; =&gt; [\n        &#039;users&#039; =&gt; [\n            &#039;provider&#039; =&gt; &#039;users&#039;,\n            &#039;table&#039; =&gt; &#039;password_resets&#039;,\n            &#039;expire&#039; =&gt; 60,\n            &#039;throttle&#039; =&gt; 60,\n        ],\n    +    &#039;admins&#039; =&gt; [\n    +        &#039;provider&#039; =&gt; &#039;admins&#039;,\n    +        &#039;table&#039; =&gt; &#039;password_resets&#039;,\n    +        &#039;expire&#039; =&gt; 15\n    +    ]\n    ],</code></pre>\n<h3>app/Exceptions/Handler.php</h3>\n<pre><code class=\"language-php\">//追記\n&lt;?php\n    /**\n     * Convert an authentication exception into an unauthenticated response.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Illuminate\\Auth\\AuthenticationException  $exception\n     * @return \\Illuminate\\Http\\Response\n     */\n    protected function unauthenticated($request, AuthenticationException $exception)\n    {\n        if ($request-&gt;expectsJson()) {\n            return response()-&gt;json([&#039;error&#039; =&gt; &#039;Unauthenticated.&#039;], 401);\n        }\n        if (in_array(&#039;admin&#039;, $exception-&gt;guards(), true)) {\n            return redirect()-&gt;guest(route(&#039;admin.login&#039;));\n        }\n\n        return redirect()-&gt;guest(route(&#039;login&#039;));\n    }</code></pre>\n<h2>Admin Faker</h2>\n<pre><code class=\"language-bash\">php artisan make:factory AdminFactory</code></pre>\n<h3></h3>\n<pre><code class=\"language-php\">// database/seeds/AdminsTableSeeder.php\n    public function run()\n    {\n        //\n        DB::table(&#039;admins&#039;)-&gt;insert([\n            [&#039;id&#039; =&gt; &#039;1&#039;,\n                &#039;email&#039; =&gt; &#039;admin@sports-funding.com&#039;,\n                &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\n                &#039;name&#039; =&gt; &#039;管理者てすと&#039;,\n                &#039;name_kana&#039; =&gt; &#039;かんりしゃてすと&#039;,\n                &#039;company_name&#039; =&gt; &#039;株式会社テスト&#039;,\n                &#039;created_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\n                &#039;deleted_at&#039; =&gt; null,\n            ],\n            [&#039;id&#039; =&gt; &#039;2&#039;,\n                &#039;email&#039; =&gt; &#039;admin2@sports-funding.com&#039;,\n                &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\n                &#039;name&#039; =&gt; &#039;山田太郎&#039;,\n                &#039;name_kana&#039; =&gt; &#039;やまだたろう&#039;,\n                &#039;company_name&#039; =&gt; &#039;株式会社山田&#039;,\n                &#039;created_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\n                &#039;deleted_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\n            ],\n        ]);\n\n      factory(App\\Models\\Admin\\Admin::class, 30)-&gt;create();\n    }</code></pre>\n<pre><code class=\"language-php\">// database/factories/AdminFactory.php\nuse App\\Models\\Admin\\Admin;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Faker\\Generator as Faker;\n\n$factory-&gt;define(Admin::class, function (Faker $faker) {\n    return [\n        &#039;email&#039; =&gt; $faker-&gt;email,\n            &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\n        &#039;name&#039; =&gt; $faker-&gt;name,\n        &#039;name_kana&#039; =&gt; $faker-&gt;kanaName,\n        &#039;company_name&#039; =&gt; $faker-&gt;company,\n    ];\n});\n</code></pre>','Laravel login機能追加','Laravelにログイン機能追加の一例','inherit','closed','closed','','633-revision-v1','','','2020-12-15 12:57:32','2020-12-15 03:57:32','## Setup\r\n### Create Model Dir\r\n```bash\r\nmkdir -p App/Models/Admin\r\n```\r\n### Create  Controller Dir\r\n```bash\r\nmkdir -p App/Http/Controllers/\r\n```\r\n\r\n### Create Model and table\r\n```bash\r\nphp artisan make:model Models/Admin/Admin -m\r\n```\r\n### Copy Auth\r\n```bash\r\ncp -rf App/Http/Controllers/auth App/Http/Controllers/Admin/auth\r\n```\r\n### Copy HomeController\r\n```bash\r\ncp App/Http/Controllers/HomeController.php App/Http/Controllers/Admin/HomeController.php\r\n```\r\n### Views \r\n```bash\r\ncp /resources/views/home.blade.php /resources/views/admin/home.blade.php\r\ncp /resources/views/auth/login.blade.php /resources/views/admin/auth/login.blade.php\r\n```\r\n### Add admin-routing\r\n```bash\r\ntouch /routes/admin.php\r\n```\r\n\r\n\r\n## Admin Login\r\n### App/Models/Admin/Admin.php\r\n```bash\r\n# Table固有設定追記\r\n    const CREATED_AT = &#039;reg_date&#039;;\r\n    const UPDATED_AT = &#039;upd_date&#039;;\r\n    protected $table = &#039;admin&#039;;\r\n    protected $primaryKey = &#039;admin_id&#039;;\r\n\r\n...\r\n...\r\n...\r\n...\r\n# Password カラム指定\r\n    public function getAuthPassword()\r\n    {\r\n        return $this-&gt;pass;\r\n    }\r\n\r\n\r\n```\r\n### App/Http/Controllers/Admin/HomeController.php\r\n```bash\r\n#middlewear auth.admin に設定\r\n$this-&gt;middleware(&#039;auth:admin&#039;);\r\n```\r\n### App/Http/Controllers/Admin/Auth/LoginController.php\r\n```bash\r\n# Redirect URL when login success\r\nprotected $redirectTo = &#039;/admin/home&#039;;\r\n...\r\n...\r\n...\r\n# Add middlewear admin\r\npublic function __construct()\r\n    {\r\n        $this-&gt;middleware(&#039;guest:admin&#039;)-&gt;except(&#039;logout&#039;); //変更\r\n    }\r\n...\r\n...\r\n...\r\n# 管理者認証のguardを指定\r\n    protected function guard()\r\n    {\r\n        return \\Auth::guard(&#039;admin&#039;);\r\n    }\r\n...\r\n...\r\n...\r\n# View login-form\r\npublic function showLoginForm()\r\n    {\r\n        return view(&#039;admin.login&#039;);  //変更\r\n    }\r\n...\r\n...\r\n...\r\n# Login logic\r\n    public function login(Request $request)\r\n    {\r\n        // Validate the form data\r\n        $this-&gt;validate($request, [\r\n            &#039;email&#039; =&gt; &#039;required|email&#039;,\r\n            &#039;password&#039; =&gt; &#039;required|min:3&#039;\r\n        ]);\r\n        // Attempt to log the user in\r\n        if (Auth::guard(&#039;admin&#039;)-&gt;attempt([&#039;email&#039; =&gt; $request-&gt;email, &#039;password&#039; =&gt; $request-&gt;password], $request-&gt;remember)) {\r\n            // if successful, then redirect to their intended location\r\n            return redirect()-&gt;intended(route(&#039;admin.home&#039;));\r\n        }\r\n\r\n        // if unsuccessful, then redirect back to the login with the form data\r\n        return redirect()-&gt;back()-&gt;withInput($request-&gt;only(&#039;email&#039;, &#039;remember&#039;));\r\n    }\r\n...\r\n...\r\n...\r\n# Login-key column name\r\n    public function username() // このメソッドを追記\r\n    {\r\n        return &#039;email&#039;; \r\n    }\r\n```\r\n### config/auth.php\r\n```bash\r\n    &#039;defaults&#039; =&gt; [\r\n      - &#039;guard&#039; =&gt; &#039;web&#039;,\r\n      + &#039;guard&#039; =&gt; &#039;user&#039;,\r\n        &#039;passwords&#039; =&gt; &#039;users&#039;,\r\n    ],\r\n...\r\n...\r\n...\r\n\r\n    &#039;guards&#039; =&gt; [\r\n        &#039;web&#039; =&gt; [\r\n            &#039;driver&#039; =&gt; &#039;session&#039;,\r\n            &#039;provider&#039; =&gt; &#039;users&#039;,\r\n        ],\r\n        &#039;user&#039; =&gt; [\r\n            &#039;driver&#039; =&gt; &#039;session&#039;,\r\n            &#039;provider&#039; =&gt; &#039;users&#039;,\r\n        ],\r\n\r\n        &#039;api&#039; =&gt; [\r\n            &#039;driver&#039; =&gt; &#039;token&#039;,\r\n            &#039;provider&#039; =&gt; &#039;users&#039;,\r\n            &#039;hash&#039; =&gt; false,\r\n        ],\r\n    +   &#039;admin&#039; =&gt; [\r\n    +       &#039;driver&#039; =&gt; &#039;session&#039;,\r\n    +       &#039;provider&#039; =&gt; &#039;admins&#039;,\r\n    +   ],\r\n    ],\r\n\r\n...\r\n...\r\n...\r\n\r\n    &#039;providers&#039; =&gt; [\r\n        &#039;users&#039; =&gt; [\r\n            &#039;driver&#039; =&gt; &#039;eloquent&#039;,\r\n            &#039;model&#039; =&gt; App\\User::class,\r\n        ],\r\n    +    &#039;admins&#039; =&gt; [\r\n    +        &#039;driver&#039; =&gt; &#039;eloquent&#039;,\r\n    +        &#039;model&#039; =&gt; App\\Models\\Admin\\Admin::class,\r\n    +    ]\r\n...\r\n...\r\n...\r\n\r\n    &#039;passwords&#039; =&gt; [\r\n        &#039;users&#039; =&gt; [\r\n            &#039;provider&#039; =&gt; &#039;users&#039;,\r\n            &#039;table&#039; =&gt; &#039;password_resets&#039;,\r\n            &#039;expire&#039; =&gt; 60,\r\n            &#039;throttle&#039; =&gt; 60,\r\n        ],\r\n    +    &#039;admins&#039; =&gt; [\r\n    +        &#039;provider&#039; =&gt; &#039;admins&#039;,\r\n    +        &#039;table&#039; =&gt; &#039;password_resets&#039;,\r\n    +        &#039;expire&#039; =&gt; 15\r\n    +    ]\r\n    ],\r\n```\r\n### app/Exceptions/Handler.php \r\n```php\r\n//追記\r\n&lt;?php\r\n    /**\r\n     * Convert an authentication exception into an unauthenticated response.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @param  \\Illuminate\\Auth\\AuthenticationException  $exception\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    protected function unauthenticated($request, AuthenticationException $exception)\r\n    {\r\n        if ($request-&gt;expectsJson()) {\r\n            return response()-&gt;json([&#039;error&#039; =&gt; &#039;Unauthenticated.&#039;], 401);\r\n        }\r\n        if (in_array(&#039;admin&#039;, $exception-&gt;guards(), true)) {\r\n            return redirect()-&gt;guest(route(&#039;admin.login&#039;));\r\n        }\r\n\r\n        return redirect()-&gt;guest(route(&#039;login&#039;));\r\n    }\r\n```\r\n\r\n## Admin Faker\r\n```bash\r\nphp artisan make:factory AdminFactory\r\n```\r\n###\r\n```php\r\n// database/seeds/AdminsTableSeeder.php\r\n    public function run()\r\n    {\r\n        //\r\n        DB::table(&#039;admins&#039;)-&gt;insert([\r\n            [&#039;id&#039; =&gt; &#039;1&#039;,\r\n                &#039;email&#039; =&gt; &#039;admin@sports-funding.com&#039;,\r\n                &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\r\n                &#039;name&#039; =&gt; &#039;管理者てすと&#039;,\r\n                &#039;name_kana&#039; =&gt; &#039;かんりしゃてすと&#039;,\r\n                &#039;company_name&#039; =&gt; &#039;株式会社テスト&#039;,\r\n                &#039;created_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\r\n                &#039;deleted_at&#039; =&gt; null,\r\n            ],\r\n            [&#039;id&#039; =&gt; &#039;2&#039;,\r\n                &#039;email&#039; =&gt; &#039;admin2@sports-funding.com&#039;,\r\n                &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\r\n                &#039;name&#039; =&gt; &#039;山田太郎&#039;,\r\n                &#039;name_kana&#039; =&gt; &#039;やまだたろう&#039;,\r\n                &#039;company_name&#039; =&gt; &#039;株式会社山田&#039;,\r\n                &#039;created_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\r\n                &#039;deleted_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\r\n            ],\r\n        ]);\r\n\r\n      factory(App\\Models\\Admin\\Admin::class, 30)-&gt;create();\r\n    }\r\n```\r\n```php\r\n// database/factories/AdminFactory.php\r\nuse App\\Models\\Admin\\Admin;\r\nuse Illuminate\\Support\\Facades\\Hash;\r\nuse Faker\\Generator as Faker;\r\n\r\n$factory-&gt;define(Admin::class, function (Faker $faker) {\r\n    return [\r\n        &#039;email&#039; =&gt; $faker-&gt;email,\r\n	        &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\r\n        &#039;name&#039; =&gt; $faker-&gt;name,\r\n        &#039;name_kana&#039; =&gt; $faker-&gt;kanaName,\r\n        &#039;company_name&#039; =&gt; $faker-&gt;company,\r\n    ];\r\n});\r\n\r\n```',633,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/633-revision-v1/',0,'revision','',0),(635,1,'2020-12-15 12:58:11','2020-12-15 03:58:11','<h2>Setup</h2>\n<h3>Create Model Dir</h3>\n<pre><code class=\"language-bash\">mkdir -p App/Models/Admin</code></pre>\n<h3>Create  Controller Dir</h3>\n<pre><code class=\"language-bash\">mkdir -p App/Http/Controllers/</code></pre>\n<h3>Create Model and table</h3>\n<pre><code class=\"language-bash\">php artisan make:model Models/Admin/Admin -m</code></pre>\n<h3>Copy Auth</h3>\n<pre><code class=\"language-bash\">cp -rf App/Http/Controllers/auth App/Http/Controllers/Admin/auth</code></pre>\n<h3>Copy HomeController</h3>\n<pre><code class=\"language-bash\">cp App/Http/Controllers/HomeController.php App/Http/Controllers/Admin/HomeController.php</code></pre>\n<h3>Views</h3>\n<pre><code class=\"language-bash\">cp /resources/views/home.blade.php /resources/views/admin/home.blade.php\ncp /resources/views/auth/login.blade.php /resources/views/admin/auth/login.blade.php</code></pre>\n<h3>Add admin-routing</h3>\n<pre><code class=\"language-bash\">touch /routes/admin.php</code></pre>\n<h2>Admin Login</h2>\n<h3>App/Models/Admin/Admin.php</h3>\n<pre><code class=\"language-bash\"># Table固有設定追記\n    const CREATED_AT = &#039;reg_date&#039;;\n    const UPDATED_AT = &#039;upd_date&#039;;\n    protected $table = &#039;admin&#039;;\n    protected $primaryKey = &#039;admin_id&#039;;\n\n...\n...\n...\n...\n# Password カラム指定\n    public function getAuthPassword()\n    {\n        return $this-&gt;pass;\n    }\n</code></pre>\n<h3>App/Http/Controllers/Admin/HomeController.php</h3>\n<pre><code class=\"language-bash\">#middlewear auth.admin に設定\n$this-&gt;middleware(&#039;auth:admin&#039;);</code></pre>\n<h3>App/Http/Controllers/Admin/Auth/LoginController.php</h3>\n<pre><code class=\"language-bash\"># Redirect URL when login success\nprotected $redirectTo = &#039;/admin/home&#039;;\n...\n...\n...\n# Add middlewear admin\npublic function __construct()\n    {\n        $this-&gt;middleware(&#039;guest:admin&#039;)-&gt;except(&#039;logout&#039;); //変更\n    }\n...\n...\n...\n# 管理者認証のguardを指定\n    protected function guard()\n    {\n        return \\Auth::guard(&#039;admin&#039;);\n    }\n...\n...\n...\n# View login-form\npublic function showLoginForm()\n    {\n        return view(&#039;admin.login&#039;);  //変更\n    }\n...\n...\n...\n# Login logic\n    public function login(Request $request)\n    {\n        // Validate the form data\n        $this-&gt;validate($request, [\n            &#039;email&#039; =&gt; &#039;required|email&#039;,\n            &#039;password&#039; =&gt; &#039;required|min:3&#039;\n        ]);\n        // Attempt to log the user in\n        if (Auth::guard(&#039;admin&#039;)-&gt;attempt([&#039;email&#039; =&gt; $request-&gt;email, &#039;password&#039; =&gt; $request-&gt;password], $request-&gt;remember)) {\n            // if successful, then redirect to their intended location\n            return redirect()-&gt;intended(route(&#039;admin.home&#039;));\n        }\n\n        // if unsuccessful, then redirect back to the login with the form data\n        return redirect()-&gt;back()-&gt;withInput($request-&gt;only(&#039;email&#039;, &#039;remember&#039;));\n    }\n...\n...\n...\n# Login-key column name\n    public function username() // このメソッドを追記\n    {\n        return &#039;email&#039;; \n    }</code></pre>\n<h3>config/auth.php</h3>\n<pre><code class=\"language-bash\">    &#039;defaults&#039; =&gt; [\n      - &#039;guard&#039; =&gt; &#039;web&#039;,\n      + &#039;guard&#039; =&gt; &#039;user&#039;,\n        &#039;passwords&#039; =&gt; &#039;users&#039;,\n    ],\n...\n...\n...\n\n    &#039;guards&#039; =&gt; [\n        &#039;web&#039; =&gt; [\n            &#039;driver&#039; =&gt; &#039;session&#039;,\n            &#039;provider&#039; =&gt; &#039;users&#039;,\n        ],\n        &#039;user&#039; =&gt; [\n            &#039;driver&#039; =&gt; &#039;session&#039;,\n            &#039;provider&#039; =&gt; &#039;users&#039;,\n        ],\n\n        &#039;api&#039; =&gt; [\n            &#039;driver&#039; =&gt; &#039;token&#039;,\n            &#039;provider&#039; =&gt; &#039;users&#039;,\n            &#039;hash&#039; =&gt; false,\n        ],\n    +   &#039;admin&#039; =&gt; [\n    +       &#039;driver&#039; =&gt; &#039;session&#039;,\n    +       &#039;provider&#039; =&gt; &#039;admins&#039;,\n    +   ],\n    ],\n\n...\n...\n...\n\n    &#039;providers&#039; =&gt; [\n        &#039;users&#039; =&gt; [\n            &#039;driver&#039; =&gt; &#039;eloquent&#039;,\n            &#039;model&#039; =&gt; App\\User::class,\n        ],\n    +    &#039;admins&#039; =&gt; [\n    +        &#039;driver&#039; =&gt; &#039;eloquent&#039;,\n    +        &#039;model&#039; =&gt; App\\Models\\Admin\\Admin::class,\n    +    ]\n...\n...\n...\n\n    &#039;passwords&#039; =&gt; [\n        &#039;users&#039; =&gt; [\n            &#039;provider&#039; =&gt; &#039;users&#039;,\n            &#039;table&#039; =&gt; &#039;password_resets&#039;,\n            &#039;expire&#039; =&gt; 60,\n            &#039;throttle&#039; =&gt; 60,\n        ],\n    +    &#039;admins&#039; =&gt; [\n    +        &#039;provider&#039; =&gt; &#039;admins&#039;,\n    +        &#039;table&#039; =&gt; &#039;password_resets&#039;,\n    +        &#039;expire&#039; =&gt; 15\n    +    ]\n    ],</code></pre>\n<h3>app/Exceptions/Handler.php</h3>\n<pre><code class=\"language-php\">//追記\n&lt;?php\n    /**\n     * Convert an authentication exception into an unauthenticated response.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Illuminate\\Auth\\AuthenticationException  $exception\n     * @return \\Illuminate\\Http\\Response\n     */\n    protected function unauthenticated($request, AuthenticationException $exception)\n    {\n        if ($request-&gt;expectsJson()) {\n            return response()-&gt;json([&#039;error&#039; =&gt; &#039;Unauthenticated.&#039;], 401);\n        }\n        if (in_array(&#039;admin&#039;, $exception-&gt;guards(), true)) {\n            return redirect()-&gt;guest(route(&#039;admin.login&#039;));\n        }\n\n        return redirect()-&gt;guest(route(&#039;login&#039;));\n    }</code></pre>\n<h2>Admin Faker</h2>\n<pre><code class=\"language-bash\">php artisan make:factory AdminFactory</code></pre>\n<pre><code class=\"language-php\">// database/seeds/AdminsTableSeeder.php\n    public function run()\n    {\n        //\n        DB::table(&#039;admins&#039;)-&gt;insert([\n            [&#039;id&#039; =&gt; &#039;1&#039;,\n                &#039;email&#039; =&gt; &#039;admin@sports-funding.com&#039;,\n                &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\n                &#039;name&#039; =&gt; &#039;管理者てすと&#039;,\n                &#039;name_kana&#039; =&gt; &#039;かんりしゃてすと&#039;,\n                &#039;company_name&#039; =&gt; &#039;株式会社テスト&#039;,\n                &#039;created_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\n                &#039;deleted_at&#039; =&gt; null,\n            ],\n            [&#039;id&#039; =&gt; &#039;2&#039;,\n                &#039;email&#039; =&gt; &#039;admin2@sports-funding.com&#039;,\n                &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\n                &#039;name&#039; =&gt; &#039;山田太郎&#039;,\n                &#039;name_kana&#039; =&gt; &#039;やまだたろう&#039;,\n                &#039;company_name&#039; =&gt; &#039;株式会社山田&#039;,\n                &#039;created_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\n                &#039;deleted_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\n            ],\n        ]);\n\n      factory(App\\Models\\Admin\\Admin::class, 30)-&gt;create();\n    }</code></pre>\n<pre><code class=\"language-php\">// database/factories/AdminFactory.php\nuse App\\Models\\Admin\\Admin;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Faker\\Generator as Faker;\n\n$factory-&gt;define(Admin::class, function (Faker $faker) {\n    return [\n        &#039;email&#039; =&gt; $faker-&gt;email,\n            &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\n        &#039;name&#039; =&gt; $faker-&gt;name,\n        &#039;name_kana&#039; =&gt; $faker-&gt;kanaName,\n        &#039;company_name&#039; =&gt; $faker-&gt;company,\n    ];\n});\n</code></pre>','Laravel login機能追加','Laravelにログイン機能追加の一例','inherit','closed','closed','','633-revision-v1','','','2020-12-15 12:58:11','2020-12-15 03:58:11','## Setup\r\n### Create Model Dir\r\n```bash\r\nmkdir -p App/Models/Admin\r\n```\r\n### Create  Controller Dir\r\n```bash\r\nmkdir -p App/Http/Controllers/\r\n```\r\n\r\n### Create Model and table\r\n```bash\r\nphp artisan make:model Models/Admin/Admin -m\r\n```\r\n### Copy Auth\r\n```bash\r\ncp -rf App/Http/Controllers/auth App/Http/Controllers/Admin/auth\r\n```\r\n### Copy HomeController\r\n```bash\r\ncp App/Http/Controllers/HomeController.php App/Http/Controllers/Admin/HomeController.php\r\n```\r\n### Views \r\n```bash\r\ncp /resources/views/home.blade.php /resources/views/admin/home.blade.php\r\ncp /resources/views/auth/login.blade.php /resources/views/admin/auth/login.blade.php\r\n```\r\n### Add admin-routing\r\n```bash\r\ntouch /routes/admin.php\r\n```\r\n\r\n\r\n## Admin Login\r\n### App/Models/Admin/Admin.php\r\n```bash\r\n# Table固有設定追記\r\n    const CREATED_AT = &#039;reg_date&#039;;\r\n    const UPDATED_AT = &#039;upd_date&#039;;\r\n    protected $table = &#039;admin&#039;;\r\n    protected $primaryKey = &#039;admin_id&#039;;\r\n\r\n...\r\n...\r\n...\r\n...\r\n# Password カラム指定\r\n    public function getAuthPassword()\r\n    {\r\n        return $this-&gt;pass;\r\n    }\r\n\r\n\r\n```\r\n### App/Http/Controllers/Admin/HomeController.php\r\n```bash\r\n#middlewear auth.admin に設定\r\n$this-&gt;middleware(&#039;auth:admin&#039;);\r\n```\r\n### App/Http/Controllers/Admin/Auth/LoginController.php\r\n```bash\r\n# Redirect URL when login success\r\nprotected $redirectTo = &#039;/admin/home&#039;;\r\n...\r\n...\r\n...\r\n# Add middlewear admin\r\npublic function __construct()\r\n    {\r\n        $this-&gt;middleware(&#039;guest:admin&#039;)-&gt;except(&#039;logout&#039;); //変更\r\n    }\r\n...\r\n...\r\n...\r\n# 管理者認証のguardを指定\r\n    protected function guard()\r\n    {\r\n        return \\Auth::guard(&#039;admin&#039;);\r\n    }\r\n...\r\n...\r\n...\r\n# View login-form\r\npublic function showLoginForm()\r\n    {\r\n        return view(&#039;admin.login&#039;);  //変更\r\n    }\r\n...\r\n...\r\n...\r\n# Login logic\r\n    public function login(Request $request)\r\n    {\r\n        // Validate the form data\r\n        $this-&gt;validate($request, [\r\n            &#039;email&#039; =&gt; &#039;required|email&#039;,\r\n            &#039;password&#039; =&gt; &#039;required|min:3&#039;\r\n        ]);\r\n        // Attempt to log the user in\r\n        if (Auth::guard(&#039;admin&#039;)-&gt;attempt([&#039;email&#039; =&gt; $request-&gt;email, &#039;password&#039; =&gt; $request-&gt;password], $request-&gt;remember)) {\r\n            // if successful, then redirect to their intended location\r\n            return redirect()-&gt;intended(route(&#039;admin.home&#039;));\r\n        }\r\n\r\n        // if unsuccessful, then redirect back to the login with the form data\r\n        return redirect()-&gt;back()-&gt;withInput($request-&gt;only(&#039;email&#039;, &#039;remember&#039;));\r\n    }\r\n...\r\n...\r\n...\r\n# Login-key column name\r\n    public function username() // このメソッドを追記\r\n    {\r\n        return &#039;email&#039;; \r\n    }\r\n```\r\n### config/auth.php\r\n```bash\r\n    &#039;defaults&#039; =&gt; [\r\n      - &#039;guard&#039; =&gt; &#039;web&#039;,\r\n      + &#039;guard&#039; =&gt; &#039;user&#039;,\r\n        &#039;passwords&#039; =&gt; &#039;users&#039;,\r\n    ],\r\n...\r\n...\r\n...\r\n\r\n    &#039;guards&#039; =&gt; [\r\n        &#039;web&#039; =&gt; [\r\n            &#039;driver&#039; =&gt; &#039;session&#039;,\r\n            &#039;provider&#039; =&gt; &#039;users&#039;,\r\n        ],\r\n        &#039;user&#039; =&gt; [\r\n            &#039;driver&#039; =&gt; &#039;session&#039;,\r\n            &#039;provider&#039; =&gt; &#039;users&#039;,\r\n        ],\r\n\r\n        &#039;api&#039; =&gt; [\r\n            &#039;driver&#039; =&gt; &#039;token&#039;,\r\n            &#039;provider&#039; =&gt; &#039;users&#039;,\r\n            &#039;hash&#039; =&gt; false,\r\n        ],\r\n    +   &#039;admin&#039; =&gt; [\r\n    +       &#039;driver&#039; =&gt; &#039;session&#039;,\r\n    +       &#039;provider&#039; =&gt; &#039;admins&#039;,\r\n    +   ],\r\n    ],\r\n\r\n...\r\n...\r\n...\r\n\r\n    &#039;providers&#039; =&gt; [\r\n        &#039;users&#039; =&gt; [\r\n            &#039;driver&#039; =&gt; &#039;eloquent&#039;,\r\n            &#039;model&#039; =&gt; App\\User::class,\r\n        ],\r\n    +    &#039;admins&#039; =&gt; [\r\n    +        &#039;driver&#039; =&gt; &#039;eloquent&#039;,\r\n    +        &#039;model&#039; =&gt; App\\Models\\Admin\\Admin::class,\r\n    +    ]\r\n...\r\n...\r\n...\r\n\r\n    &#039;passwords&#039; =&gt; [\r\n        &#039;users&#039; =&gt; [\r\n            &#039;provider&#039; =&gt; &#039;users&#039;,\r\n            &#039;table&#039; =&gt; &#039;password_resets&#039;,\r\n            &#039;expire&#039; =&gt; 60,\r\n            &#039;throttle&#039; =&gt; 60,\r\n        ],\r\n    +    &#039;admins&#039; =&gt; [\r\n    +        &#039;provider&#039; =&gt; &#039;admins&#039;,\r\n    +        &#039;table&#039; =&gt; &#039;password_resets&#039;,\r\n    +        &#039;expire&#039; =&gt; 15\r\n    +    ]\r\n    ],\r\n```\r\n### app/Exceptions/Handler.php \r\n```php\r\n//追記\r\n&lt;?php\r\n    /**\r\n     * Convert an authentication exception into an unauthenticated response.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @param  \\Illuminate\\Auth\\AuthenticationException  $exception\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    protected function unauthenticated($request, AuthenticationException $exception)\r\n    {\r\n        if ($request-&gt;expectsJson()) {\r\n            return response()-&gt;json([&#039;error&#039; =&gt; &#039;Unauthenticated.&#039;], 401);\r\n        }\r\n        if (in_array(&#039;admin&#039;, $exception-&gt;guards(), true)) {\r\n            return redirect()-&gt;guest(route(&#039;admin.login&#039;));\r\n        }\r\n\r\n        return redirect()-&gt;guest(route(&#039;login&#039;));\r\n    }\r\n```\r\n\r\n## Admin Faker\r\n```bash\r\nphp artisan make:factory AdminFactory\r\n```\r\n```php\r\n// database/seeds/AdminsTableSeeder.php\r\n    public function run()\r\n    {\r\n        //\r\n        DB::table(&#039;admins&#039;)-&gt;insert([\r\n            [&#039;id&#039; =&gt; &#039;1&#039;,\r\n                &#039;email&#039; =&gt; &#039;admin@sports-funding.com&#039;,\r\n                &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\r\n                &#039;name&#039; =&gt; &#039;管理者てすと&#039;,\r\n                &#039;name_kana&#039; =&gt; &#039;かんりしゃてすと&#039;,\r\n                &#039;company_name&#039; =&gt; &#039;株式会社テスト&#039;,\r\n                &#039;created_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\r\n                &#039;deleted_at&#039; =&gt; null,\r\n            ],\r\n            [&#039;id&#039; =&gt; &#039;2&#039;,\r\n                &#039;email&#039; =&gt; &#039;admin2@sports-funding.com&#039;,\r\n                &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\r\n                &#039;name&#039; =&gt; &#039;山田太郎&#039;,\r\n                &#039;name_kana&#039; =&gt; &#039;やまだたろう&#039;,\r\n                &#039;company_name&#039; =&gt; &#039;株式会社山田&#039;,\r\n                &#039;created_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\r\n                &#039;deleted_at&#039; =&gt; date(&#039;Y-m-d H:i:s&#039;),\r\n            ],\r\n        ]);\r\n\r\n      factory(App\\Models\\Admin\\Admin::class, 30)-&gt;create();\r\n    }\r\n```\r\n```php\r\n// database/factories/AdminFactory.php\r\nuse App\\Models\\Admin\\Admin;\r\nuse Illuminate\\Support\\Facades\\Hash;\r\nuse Faker\\Generator as Faker;\r\n\r\n$factory-&gt;define(Admin::class, function (Faker $faker) {\r\n    return [\r\n        &#039;email&#039; =&gt; $faker-&gt;email,\r\n	        &#039;password&#039; =&gt; Hash::make(&#039;password&#039;),\r\n        &#039;name&#039; =&gt; $faker-&gt;name,\r\n        &#039;name_kana&#039; =&gt; $faker-&gt;kanaName,\r\n        &#039;company_name&#039; =&gt; $faker-&gt;company,\r\n    ];\r\n});\r\n\r\n```',633,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/633-revision-v1/',0,'revision','',0),(636,1,'2020-12-15 13:00:45','2020-12-15 04:00:45','','laravel_login_feature','','inherit','closed','closed','','laravel_login_feature-2','','','2020-12-15 13:00:45','2020-12-15 04:00:45','',633,'https://blog.webdimension.jp/wp-content/uploads/2020/12/laravel_login_feature.png',0,'attachment','image/png',0),(637,1,'2020-12-15 13:11:09','2020-12-15 04:11:09','<p><em>データ再生時によく使う</em></p>\n<pre><code class=\"language-bash\">php artisan migrate:refresh --seed</code></pre>\n<h2>faker,seeder</h2>\n<pre><code class=\"language-php\">    public function run()\n    {\n        // 以下の userを作成\n        DB::table(&quot;users&quot;)-&gt;insert([\n            &#039;name&#039; =&gt; &#039;hogehoge&#039;,\n            &#039;email&#039; =&gt; &#039;hoge@hogehoge.com&#039;,\n            &#039;email_verified_at&#039; =&gt; now(),\n            &#039;password&#039; =&gt; Hash::make(&#039;pass&#039;),\n            &#039;remember_token&#039; =&gt; Str::random(10),\n            &#039;created_at&#039; =&gt; now(),\n            &#039;updated_at&#039; =&gt; now()\n        ]);\n         // database/factories/UserFactory.php を 10回実行\n        factory(App\\User::class, 10)-&gt;create();</code></pre>\n<pre><code class=\"language-php\">// database/factories/UserFactory.php\n$factory-&gt;define(User::class, function (Faker $faker) {\n    return [\n        &#039;name&#039; =&gt; $faker-&gt;name,\n        &#039;email&#039; =&gt; $faker-&gt;unique()-&gt;safeEmail,\n        &#039;email_verified_at&#039; =&gt; now(),\n        &#039;password&#039; =&gt; &#039;$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi&#039;, // password\n        &#039;remember_token&#039; =&gt; Str::random(10),\n    ];\n});</code></pre>\n<h2>seedr relation 例</h2>\n<pre><code class=\"language-php\">\n    public function run()\n    {\n        $test_player = [\n            [\'id\' => \'1\',\n                \'last_name\' => \'Yamada\',\n                \'first_name\' => \'Taro\',\n                \'last_name_kana\' => \'ヤマダ\',\n                \'first_name_kana\' => \'タロウ\',\n                \'email\' => \'yamada@hoge.com\',\n                \'password\' => Hash::make(\'password\'),\n                \'type\' => \'1\',\n                \'introduction\' => \'Yamada Taroのテストイントロダクション\',\n                \'player_image\' => \'YamadaTaro.jpg\',\n                \'organization\' => \'Yamada Taro所属のテスト\',\n                \'publish\' => \'0\',\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\n                \'deleted_at\' => null,\n            ],\n            [\'id\' => \'2\',\n                \'last_name\' => \'Tanaka\',\n                \'first_name\' => \'Ichiro\',\n                \'last_name_kana\' => \'タナカ\',\n                \'first_name_kana\' => \'Ichiro\',\n                \'email\' => \'tanaka@hoge.com\',\n                \'password\' => Hash::make(\'password\'),\n                \'type\' => \'2\',\n                \'introduction\' => \'Tanaka Ichiroのテストイントロダックション\',\n                \'player_image\' => \'TanakaIchiro.jpg\',\n                \'organization\' => \'TanakaIchiro所属のテスト\',\n                \'publish\' => \'1\',\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\n                \'deleted_at\' => date(\'Y-m-d H:i:s\'),\n            ],\n        ];\n\n        for ($i = 0; $i < count($test_player); $i++) {\n            // Create　User\n            DB::table(\'players\')->insert(\n                $test_player[$i]\n            );\n\n            factory(Project::class, 1)->create(  // Project model 1回実行\n                [\n                    \'player_id\' => $test_player[$i][\'id\'],\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject\',\n                    \'type\' => 2,\n                ]\n            )\n                // Reration \n                ->each(function ($project) {\n                    // reword\n                    $project->rewards()->savemany(factory(Reward::class, 1)->create(\n                        [\n                            \'admin_id\' => $project->admin_id,\n                            \'project_id\' => $project->id,\n                        ]\n                    ))->each(\n                // Reration \n                        function ($reward) {\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                [\n                                    \'reward_id\' => $reward->id,\n                                    \'amount\' => $reward->amount,\n                                ]\n                            ))->each(\n                                function ($order) {\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\n                                        [\n                                            \'id\' => $order->id,\n                                            \'amount\' => $order->amount,\n                                        ]\n                                    ));\n                                }\n                            );\n                        }\n                    );\n                    // article\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                        [\n                            \'project_id\' => $project->id,\n                        ]\n                    ))\n                        ->each(\n                            function ($article) {\n                                // article image\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                    [\n                                        \'article_id\' => $article->id,\n                                    ]\n                                ));\n                            }\n                        );\n                });\n            // project\n            factory(Project::class, rand(1, 5))->create(\n                [\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject2\',\n                    \'player_id\' => $test_player[$i][\'id\'],\n\n                ]\n            )\n                ->each(function ($project) {\n                    // reword\n                    $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\n                        [\n                            \'admin_id\' => $project->admin_id,\n                            \'project_id\' => $project->id,\n                        ]\n                    ))->each(\n                        function ($reward) {\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                [\n                                    \'reward_id\' => $reward->id,\n                                    \'amount\' => $reward->amount,\n                                ]\n                            ))->each(\n                                function ($order) {\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\n                                        [\n                                            \'id\' => $order->id,\n                                            \'amount\' => $order->amount,\n                                        ]\n                                    ));\n                                }\n                            );\n                        }\n                    );\n                    // article\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                        [\n                            \'project_id\' => $project->id,\n                        ]\n                    ))\n                        ->each(\n                            function ($article) {\n                                // article image\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                    [\n                                        \'article_id\' => $article->id,\n                                    ]\n                                ));\n                            }\n                        );\n                });\n\n        }\n\n        factory(Player::class, 50)->create()\n            ->each(function ($player) {\n\n                // funclub\n                $player->projects()->savemany(factory(Project::class, 1)->create(\n                    [\n                        \'player_id\' => $player->id,\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject\',\n                        \'type\' => 2,\n                    ]\n                ))\n                    ->each(function ($project) {\n                        // reword\n                        $project->rewards()->savemany(factory(Reward::class, 1)->create(\n                            [\n                                \'admin_id\' => $project->admin_id,\n                                \'project_id\' => $project->id,\n                            ]\n                        ))->each(\n                            function ($reward) {\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                    [\n                                        \'reward_id\' => $reward->id,\n                                        \'amount\' => $reward->amount,\n                                    ]\n                                ))->each(\n                                    function ($order) {\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\n                                            [\n                                                \'id\' => $order->id,\n                                                \'amount\' => $order->amount,\n                                            ]\n                                        ));\n                                    }\n                                );\n                            }\n                        );\n                        // article\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                            [\n                                \'project_id\' => $project->id,\n                            ]\n                        ))\n                            ->each(\n                                function ($article) {\n                                    // article image\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                        [\n                                            \'article_id\' => $article->id,\n                                        ]\n                                    ));\n                                }\n                            );\n                    });\n\n                // project\n                $player->projects()->savemany(factory(Project::class, rand(1, 5))->create(\n                    [\n                        \'player_id\' => $player->id,\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject2\',\n                    ]\n                ))\n                    ->each(function ($project) {\n                        // reword\n                        $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\n                            [\n                                \'admin_id\' => $project->admin_id,\n                                \'project_id\' => $project->id,\n                            ]\n                        ))->each(\n                            function ($reward) {\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                    [\n                                        \'reward_id\' => $reward->id,\n                                        \'amount\' => $reward->amount,\n                                    ]\n                                ))->each(\n                                    function ($order) {\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\n                                            [\n                                                \'id\' => $order->id,\n                                                \'amount\' => $order->amount,\n                                            ]\n                                        ));\n                                    }\n                                );\n                            }\n                        );\n                        // article\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                            [\n                                \'project_id\' => $project->id,\n                            ]\n                        ))\n                            ->each(\n                                function ($article) {\n                                    // article image\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                        [\n                                            \'article_id\' => $article->id,\n                                        ]\n                                    ));\n                                }\n                            );\n                    });\n            });\n    }</code></pre>','Laravel migration seed facker','Seeder , Fackerを使ってテスト様データを生成','publish','closed','open','','laravel_seeder_facker','','','2020-12-15 13:11:09','2020-12-15 04:11:09','*データ再生時によく使う*\r\n```bash\r\nphp artisan migrate:refresh --seed\r\n```\r\n## faker,seeder\r\n```php\r\n    public function run()\r\n    {\r\n		// 以下の userを作成\r\n        DB::table(&quot;users&quot;)-&gt;insert([\r\n            &#039;name&#039; =&gt; &#039;hogehoge&#039;,\r\n            &#039;email&#039; =&gt; &#039;hoge@hogehoge.com&#039;,\r\n            &#039;email_verified_at&#039; =&gt; now(),\r\n            &#039;password&#039; =&gt; Hash::make(&#039;pass&#039;),\r\n            &#039;remember_token&#039; =&gt; Str::random(10),\r\n            &#039;created_at&#039; =&gt; now(),\r\n            &#039;updated_at&#039; =&gt; now()\r\n		]);\r\n		 // database/factories/UserFactory.php を 10回実行\r\n        factory(App\\User::class, 10)-&gt;create();\r\n```\r\n\r\n```php\r\n// database/factories/UserFactory.php\r\n$factory-&gt;define(User::class, function (Faker $faker) {\r\n    return [\r\n        &#039;name&#039; =&gt; $faker-&gt;name,\r\n        &#039;email&#039; =&gt; $faker-&gt;unique()-&gt;safeEmail,\r\n        &#039;email_verified_at&#039; =&gt; now(),\r\n        &#039;password&#039; =&gt; &#039;$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi&#039;, // password\r\n        &#039;remember_token&#039; =&gt; Str::random(10),\r\n    ];\r\n});\r\n```\r\n\r\n\r\n## seedr relation 例\r\n```php\r\n    public function run()\r\n    {\r\n        $test_player = [\r\n            [\'id\' => \'1\',\r\n                \'last_name\' => \'Yamada\',\r\n                \'first_name\' => \'Taro\',\r\n                \'last_name_kana\' => \'ヤマダ\',\r\n                \'first_name_kana\' => \'タロウ\',\r\n                \'email\' => \'yamada@hoge.com\',\r\n                \'password\' => Hash::make(\'password\'),\r\n                \'type\' => \'1\',\r\n                \'introduction\' => \'Yamada Taroのテストイントロダクション\',\r\n                \'player_image\' => \'YamadaTaro.jpg\',\r\n                \'organization\' => \'Yamada Taro所属のテスト\',\r\n                \'publish\' => \'0\',\r\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\r\n                \'deleted_at\' => null,\r\n            ],\r\n            [\'id\' => \'2\',\r\n                \'last_name\' => \'Tanaka\',\r\n                \'first_name\' => \'Ichiro\',\r\n                \'last_name_kana\' => \'タナカ\',\r\n                \'first_name_kana\' => \'Ichiro\',\r\n                \'email\' => \'tanaka@hoge.com\',\r\n                \'password\' => Hash::make(\'password\'),\r\n                \'type\' => \'2\',\r\n                \'introduction\' => \'Tanaka Ichiroのテストイントロダックション\',\r\n                \'player_image\' => \'TanakaIchiro.jpg\',\r\n                \'organization\' => \'TanakaIchiro所属のテスト\',\r\n                \'publish\' => \'1\',\r\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\r\n                \'deleted_at\' => date(\'Y-m-d H:i:s\'),\r\n            ],\r\n        ];\r\n\r\n        for ($i = 0; $i < count($test_player); $i++) {\r\n			// Create　User\r\n            DB::table(\'players\')->insert(\r\n                $test_player[$i]\r\n			);\r\n\r\n            factory(Project::class, 1)->create(  // Project model 1回実行\r\n                [\r\n                    \'player_id\' => $test_player[$i][\'id\'],\r\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject\',\r\n                    \'type\' => 2,\r\n                ]\r\n			)\r\n			    // Reration \r\n                ->each(function ($project) {\r\n                    // reword\r\n                    $project->rewards()->savemany(factory(Reward::class, 1)->create(\r\n                        [\r\n                            \'admin_id\' => $project->admin_id,\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))->each(\r\n			    // Reration \r\n                        function ($reward) {\r\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                [\r\n                                    \'reward_id\' => $reward->id,\r\n                                    \'amount\' => $reward->amount,\r\n                                ]\r\n                            ))->each(\r\n                                function ($order) {\r\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                        [\r\n                                            \'id\' => $order->id,\r\n                                            \'amount\' => $order->amount,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                        }\r\n                    );\r\n                    // article\r\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                        [\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))\r\n                        ->each(\r\n                            function ($article) {\r\n                                // article image\r\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'article_id\' => $article->id,\r\n                                    ]\r\n                                ));\r\n                            }\r\n                        );\r\n                });\r\n            // project\r\n            factory(Project::class, rand(1, 5))->create(\r\n                [\r\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject2\',\r\n                    \'player_id\' => $test_player[$i][\'id\'],\r\n\r\n                ]\r\n            )\r\n                ->each(function ($project) {\r\n                    // reword\r\n                    $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\r\n                        [\r\n                            \'admin_id\' => $project->admin_id,\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))->each(\r\n                        function ($reward) {\r\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                [\r\n                                    \'reward_id\' => $reward->id,\r\n                                    \'amount\' => $reward->amount,\r\n                                ]\r\n                            ))->each(\r\n                                function ($order) {\r\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                        [\r\n                                            \'id\' => $order->id,\r\n                                            \'amount\' => $order->amount,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                        }\r\n                    );\r\n                    // article\r\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                        [\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))\r\n                        ->each(\r\n                            function ($article) {\r\n                                // article image\r\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'article_id\' => $article->id,\r\n                                    ]\r\n                                ));\r\n                            }\r\n                        );\r\n                });\r\n\r\n        }\r\n\r\n        factory(Player::class, 50)->create()\r\n            ->each(function ($player) {\r\n\r\n                // funclub\r\n                $player->projects()->savemany(factory(Project::class, 1)->create(\r\n                    [\r\n                        \'player_id\' => $player->id,\r\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject\',\r\n                        \'type\' => 2,\r\n                    ]\r\n                ))\r\n                    ->each(function ($project) {\r\n                        // reword\r\n                        $project->rewards()->savemany(factory(Reward::class, 1)->create(\r\n                            [\r\n                                \'admin_id\' => $project->admin_id,\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))->each(\r\n                            function ($reward) {\r\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'reward_id\' => $reward->id,\r\n                                        \'amount\' => $reward->amount,\r\n                                    ]\r\n                                ))->each(\r\n                                    function ($order) {\r\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                            [\r\n                                                \'id\' => $order->id,\r\n                                                \'amount\' => $order->amount,\r\n                                            ]\r\n                                        ));\r\n                                    }\r\n                                );\r\n                            }\r\n                        );\r\n                        // article\r\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                            [\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))\r\n                            ->each(\r\n                                function ($article) {\r\n                                    // article image\r\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                        [\r\n                                            \'article_id\' => $article->id,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                    });\r\n\r\n\r\n                // project\r\n                $player->projects()->savemany(factory(Project::class, rand(1, 5))->create(\r\n                    [\r\n                        \'player_id\' => $player->id,\r\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject2\',\r\n                    ]\r\n                ))\r\n                    ->each(function ($project) {\r\n                        // reword\r\n                        $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\r\n                            [\r\n                                \'admin_id\' => $project->admin_id,\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))->each(\r\n                            function ($reward) {\r\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'reward_id\' => $reward->id,\r\n                                        \'amount\' => $reward->amount,\r\n                                    ]\r\n                                ))->each(\r\n                                    function ($order) {\r\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                            [\r\n                                                \'id\' => $order->id,\r\n                                                \'amount\' => $order->amount,\r\n                                            ]\r\n                                        ));\r\n                                    }\r\n                                );\r\n                            }\r\n                        );\r\n                        // article\r\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                            [\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))\r\n                            ->each(\r\n                                function ($article) {\r\n                                    // article image\r\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                        [\r\n                                            \'article_id\' => $article->id,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                    });\r\n            });\r\n    }\r\n',0,'https://blog.webdimension.jp/?p=637',0,'post','',0),(638,1,'2020-12-15 13:04:38','2020-12-15 04:04:38','<p><em>データ再生時によく使う</em></p>\n<pre><code class=\"language-bash\">php artisan migrate:refresh --seed</code></pre>\n<p>faker,seeder</p>\n<pre><code class=\"language-php\">    public function run()\n    {\n        // 以下の userを作成\n        DB::table(&quot;users&quot;)-&gt;insert([\n            &#039;name&#039; =&gt; &#039;hogehoge&#039;,\n            &#039;email&#039; =&gt; &#039;hoge@hogehoge.com&#039;,\n            &#039;email_verified_at&#039; =&gt; now(),\n            &#039;password&#039; =&gt; Hash::make(&#039;pass&#039;),\n            &#039;remember_token&#039; =&gt; Str::random(10),\n            &#039;created_at&#039; =&gt; now(),\n            &#039;updated_at&#039; =&gt; now()\n        ]);\n         // database/factories/UserFactory.php を 10回実行\n        factory(App\\User::class, 10)-&gt;create();</code></pre>\n<pre><code class=\"language-php\">// database/factories/UserFactory.php\n$factory-&gt;define(User::class, function (Faker $faker) {\n    return [\n        &#039;name&#039; =&gt; $faker-&gt;name,\n        &#039;email&#039; =&gt; $faker-&gt;unique()-&gt;safeEmail,\n        &#039;email_verified_at&#039; =&gt; now(),\n        &#039;password&#039; =&gt; &#039;$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi&#039;, // password\n        &#039;remember_token&#039; =&gt; Str::random(10),\n    ];\n});</code></pre>\n<h2>seedr relation 例</h2>\n<pre><code class=\"language-php\">\n    public function run()\n    {\n        $test_player = [\n            [\'id\' => \'1\',\n                \'last_name\' => \'Yamada\',\n                \'first_name\' => \'Taro\',\n                \'last_name_kana\' => \'ヤマダ\',\n                \'first_name_kana\' => \'タロウ\',\n                \'email\' => \'yamada@hoge.com\',\n                \'password\' => Hash::make(\'password\'),\n                \'type\' => \'1\',\n                \'introduction\' => \'Yamada Taroのテストイントロダクション\',\n                \'player_image\' => \'YamadaTaro.jpg\',\n                \'organization\' => \'Yamada Taro所属のテスト\',\n                \'publish\' => \'0\',\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\n                \'deleted_at\' => null,\n            ],\n            [\'id\' => \'2\',\n                \'last_name\' => \'Tanaka\',\n                \'first_name\' => \'Ichiro\',\n                \'last_name_kana\' => \'タナカ\',\n                \'first_name_kana\' => \'Ichiro\',\n                \'email\' => \'tanaka@hoge.com\',\n                \'password\' => Hash::make(\'password\'),\n                \'type\' => \'2\',\n                \'introduction\' => \'Tanaka Ichiroのテストイントロダックション\',\n                \'player_image\' => \'TanakaIchiro.jpg\',\n                \'organization\' => \'TanakaIchiro所属のテスト\',\n                \'publish\' => \'1\',\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\n                \'deleted_at\' => date(\'Y-m-d H:i:s\'),\n            ],\n        ];\n\n        for ($i = 0; $i < count($test_player); $i++) {\n            // Create　User\n            DB::table(\'players\')->insert(\n                $test_player[$i]\n            );\n\n            factory(Project::class, 1)->create(  // Project model 1回実行\n                [\n                    \'player_id\' => $test_player[$i][\'id\'],\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject\',\n                    \'type\' => 2,\n                ]\n            )\n                // Reration \n                ->each(function ($project) {\n                    // reword\n                    $project->rewards()->savemany(factory(Reward::class, 1)->create(\n                        [\n                            \'admin_id\' => $project->admin_id,\n                            \'project_id\' => $project->id,\n                        ]\n                    ))->each(\n                // Reration \n                        function ($reward) {\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                [\n                                    \'reward_id\' => $reward->id,\n                                    \'amount\' => $reward->amount,\n                                ]\n                            ))->each(\n                                function ($order) {\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\n                                        [\n                                            \'id\' => $order->id,\n                                            \'amount\' => $order->amount,\n                                        ]\n                                    ));\n                                }\n                            );\n                        }\n                    );\n                    // article\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                        [\n                            \'project_id\' => $project->id,\n                        ]\n                    ))\n                        ->each(\n                            function ($article) {\n                                // article image\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                    [\n                                        \'article_id\' => $article->id,\n                                    ]\n                                ));\n                            }\n                        );\n                });\n            // project\n            factory(Project::class, rand(1, 5))->create(\n                [\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject2\',\n                    \'player_id\' => $test_player[$i][\'id\'],\n\n                ]\n            )\n                ->each(function ($project) {\n                    // reword\n                    $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\n                        [\n                            \'admin_id\' => $project->admin_id,\n                            \'project_id\' => $project->id,\n                        ]\n                    ))->each(\n                        function ($reward) {\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                [\n                                    \'reward_id\' => $reward->id,\n                                    \'amount\' => $reward->amount,\n                                ]\n                            ))->each(\n                                function ($order) {\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\n                                        [\n                                            \'id\' => $order->id,\n                                            \'amount\' => $order->amount,\n                                        ]\n                                    ));\n                                }\n                            );\n                        }\n                    );\n                    // article\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                        [\n                            \'project_id\' => $project->id,\n                        ]\n                    ))\n                        ->each(\n                            function ($article) {\n                                // article image\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                    [\n                                        \'article_id\' => $article->id,\n                                    ]\n                                ));\n                            }\n                        );\n                });\n\n        }\n\n        factory(Player::class, 50)->create()\n            ->each(function ($player) {\n\n                // funclub\n                $player->projects()->savemany(factory(Project::class, 1)->create(\n                    [\n                        \'player_id\' => $player->id,\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject\',\n                        \'type\' => 2,\n                    ]\n                ))\n                    ->each(function ($project) {\n                        // reword\n                        $project->rewards()->savemany(factory(Reward::class, 1)->create(\n                            [\n                                \'admin_id\' => $project->admin_id,\n                                \'project_id\' => $project->id,\n                            ]\n                        ))->each(\n                            function ($reward) {\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                    [\n                                        \'reward_id\' => $reward->id,\n                                        \'amount\' => $reward->amount,\n                                    ]\n                                ))->each(\n                                    function ($order) {\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\n                                            [\n                                                \'id\' => $order->id,\n                                                \'amount\' => $order->amount,\n                                            ]\n                                        ));\n                                    }\n                                );\n                            }\n                        );\n                        // article\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                            [\n                                \'project_id\' => $project->id,\n                            ]\n                        ))\n                            ->each(\n                                function ($article) {\n                                    // article image\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                        [\n                                            \'article_id\' => $article->id,\n                                        ]\n                                    ));\n                                }\n                            );\n                    });\n\n                // project\n                $player->projects()->savemany(factory(Project::class, rand(1, 5))->create(\n                    [\n                        \'player_id\' => $player->id,\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject2\',\n                    ]\n                ))\n                    ->each(function ($project) {\n                        // reword\n                        $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\n                            [\n                                \'admin_id\' => $project->admin_id,\n                                \'project_id\' => $project->id,\n                            ]\n                        ))->each(\n                            function ($reward) {\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                    [\n                                        \'reward_id\' => $reward->id,\n                                        \'amount\' => $reward->amount,\n                                    ]\n                                ))->each(\n                                    function ($order) {\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\n                                            [\n                                                \'id\' => $order->id,\n                                                \'amount\' => $order->amount,\n                                            ]\n                                        ));\n                                    }\n                                );\n                            }\n                        );\n                        // article\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                            [\n                                \'project_id\' => $project->id,\n                            ]\n                        ))\n                            ->each(\n                                function ($article) {\n                                    // article image\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                        [\n                                            \'article_id\' => $article->id,\n                                        ]\n                                    ));\n                                }\n                            );\n                    });\n            });\n    }</code></pre>','Laravel migration seed facker','','inherit','closed','closed','','637-revision-v1','','','2020-12-15 13:04:38','2020-12-15 04:04:38','\r\n\r\n*データ再生時によく使う*\r\n```bash\r\nphp artisan migrate:refresh --seed\r\n```\r\nfaker,seeder\r\n```php\r\n    public function run()\r\n    {\r\n		// 以下の userを作成\r\n        DB::table(&quot;users&quot;)-&gt;insert([\r\n            &#039;name&#039; =&gt; &#039;hogehoge&#039;,\r\n            &#039;email&#039; =&gt; &#039;hoge@hogehoge.com&#039;,\r\n            &#039;email_verified_at&#039; =&gt; now(),\r\n            &#039;password&#039; =&gt; Hash::make(&#039;pass&#039;),\r\n            &#039;remember_token&#039; =&gt; Str::random(10),\r\n            &#039;created_at&#039; =&gt; now(),\r\n            &#039;updated_at&#039; =&gt; now()\r\n		]);\r\n		 // database/factories/UserFactory.php を 10回実行\r\n        factory(App\\User::class, 10)-&gt;create();\r\n```\r\n\r\n```php\r\n// database/factories/UserFactory.php\r\n$factory-&gt;define(User::class, function (Faker $faker) {\r\n    return [\r\n        &#039;name&#039; =&gt; $faker-&gt;name,\r\n        &#039;email&#039; =&gt; $faker-&gt;unique()-&gt;safeEmail,\r\n        &#039;email_verified_at&#039; =&gt; now(),\r\n        &#039;password&#039; =&gt; &#039;$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi&#039;, // password\r\n        &#039;remember_token&#039; =&gt; Str::random(10),\r\n    ];\r\n});\r\n```\r\n\r\n\r\n## seedr relation 例\r\n```php\r\n    public function run()\r\n    {\r\n        $test_player = [\r\n            [\'id\' => \'1\',\r\n                \'last_name\' => \'Yamada\',\r\n                \'first_name\' => \'Taro\',\r\n                \'last_name_kana\' => \'ヤマダ\',\r\n                \'first_name_kana\' => \'タロウ\',\r\n                \'email\' => \'yamada@hoge.com\',\r\n                \'password\' => Hash::make(\'password\'),\r\n                \'type\' => \'1\',\r\n                \'introduction\' => \'Yamada Taroのテストイントロダクション\',\r\n                \'player_image\' => \'YamadaTaro.jpg\',\r\n                \'organization\' => \'Yamada Taro所属のテスト\',\r\n                \'publish\' => \'0\',\r\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\r\n                \'deleted_at\' => null,\r\n            ],\r\n            [\'id\' => \'2\',\r\n                \'last_name\' => \'Tanaka\',\r\n                \'first_name\' => \'Ichiro\',\r\n                \'last_name_kana\' => \'タナカ\',\r\n                \'first_name_kana\' => \'Ichiro\',\r\n                \'email\' => \'tanaka@hoge.com\',\r\n                \'password\' => Hash::make(\'password\'),\r\n                \'type\' => \'2\',\r\n                \'introduction\' => \'Tanaka Ichiroのテストイントロダックション\',\r\n                \'player_image\' => \'TanakaIchiro.jpg\',\r\n                \'organization\' => \'TanakaIchiro所属のテスト\',\r\n                \'publish\' => \'1\',\r\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\r\n                \'deleted_at\' => date(\'Y-m-d H:i:s\'),\r\n            ],\r\n        ];\r\n\r\n        for ($i = 0; $i < count($test_player); $i++) {\r\n			// Create　User\r\n            DB::table(\'players\')->insert(\r\n                $test_player[$i]\r\n			);\r\n\r\n            factory(Project::class, 1)->create(  // Project model 1回実行\r\n                [\r\n                    \'player_id\' => $test_player[$i][\'id\'],\r\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject\',\r\n                    \'type\' => 2,\r\n                ]\r\n			)\r\n			    // Reration \r\n                ->each(function ($project) {\r\n                    // reword\r\n                    $project->rewards()->savemany(factory(Reward::class, 1)->create(\r\n                        [\r\n                            \'admin_id\' => $project->admin_id,\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))->each(\r\n			    // Reration \r\n                        function ($reward) {\r\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                [\r\n                                    \'reward_id\' => $reward->id,\r\n                                    \'amount\' => $reward->amount,\r\n                                ]\r\n                            ))->each(\r\n                                function ($order) {\r\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                        [\r\n                                            \'id\' => $order->id,\r\n                                            \'amount\' => $order->amount,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                        }\r\n                    );\r\n                    // article\r\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                        [\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))\r\n                        ->each(\r\n                            function ($article) {\r\n                                // article image\r\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'article_id\' => $article->id,\r\n                                    ]\r\n                                ));\r\n                            }\r\n                        );\r\n                });\r\n            // project\r\n            factory(Project::class, rand(1, 5))->create(\r\n                [\r\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject2\',\r\n                    \'player_id\' => $test_player[$i][\'id\'],\r\n\r\n                ]\r\n            )\r\n                ->each(function ($project) {\r\n                    // reword\r\n                    $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\r\n                        [\r\n                            \'admin_id\' => $project->admin_id,\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))->each(\r\n                        function ($reward) {\r\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                [\r\n                                    \'reward_id\' => $reward->id,\r\n                                    \'amount\' => $reward->amount,\r\n                                ]\r\n                            ))->each(\r\n                                function ($order) {\r\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                        [\r\n                                            \'id\' => $order->id,\r\n                                            \'amount\' => $order->amount,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                        }\r\n                    );\r\n                    // article\r\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                        [\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))\r\n                        ->each(\r\n                            function ($article) {\r\n                                // article image\r\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'article_id\' => $article->id,\r\n                                    ]\r\n                                ));\r\n                            }\r\n                        );\r\n                });\r\n\r\n        }\r\n\r\n        factory(Player::class, 50)->create()\r\n            ->each(function ($player) {\r\n\r\n                // funclub\r\n                $player->projects()->savemany(factory(Project::class, 1)->create(\r\n                    [\r\n                        \'player_id\' => $player->id,\r\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject\',\r\n                        \'type\' => 2,\r\n                    ]\r\n                ))\r\n                    ->each(function ($project) {\r\n                        // reword\r\n                        $project->rewards()->savemany(factory(Reward::class, 1)->create(\r\n                            [\r\n                                \'admin_id\' => $project->admin_id,\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))->each(\r\n                            function ($reward) {\r\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'reward_id\' => $reward->id,\r\n                                        \'amount\' => $reward->amount,\r\n                                    ]\r\n                                ))->each(\r\n                                    function ($order) {\r\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                            [\r\n                                                \'id\' => $order->id,\r\n                                                \'amount\' => $order->amount,\r\n                                            ]\r\n                                        ));\r\n                                    }\r\n                                );\r\n                            }\r\n                        );\r\n                        // article\r\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                            [\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))\r\n                            ->each(\r\n                                function ($article) {\r\n                                    // article image\r\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                        [\r\n                                            \'article_id\' => $article->id,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                    });\r\n\r\n\r\n                // project\r\n                $player->projects()->savemany(factory(Project::class, rand(1, 5))->create(\r\n                    [\r\n                        \'player_id\' => $player->id,\r\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject2\',\r\n                    ]\r\n                ))\r\n                    ->each(function ($project) {\r\n                        // reword\r\n                        $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\r\n                            [\r\n                                \'admin_id\' => $project->admin_id,\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))->each(\r\n                            function ($reward) {\r\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'reward_id\' => $reward->id,\r\n                                        \'amount\' => $reward->amount,\r\n                                    ]\r\n                                ))->each(\r\n                                    function ($order) {\r\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                            [\r\n                                                \'id\' => $order->id,\r\n                                                \'amount\' => $order->amount,\r\n                                            ]\r\n                                        ));\r\n                                    }\r\n                                );\r\n                            }\r\n                        );\r\n                        // article\r\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                            [\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))\r\n                            ->each(\r\n                                function ($article) {\r\n                                    // article image\r\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                        [\r\n                                            \'article_id\' => $article->id,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                    });\r\n            });\r\n    }\r\n',637,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/637-revision-v1/',0,'revision','',0),(639,1,'2020-12-15 13:05:07','2020-12-15 04:05:07','<p><em>データ再生時によく使う</em></p>\n<pre><code class=\"language-bash\">php artisan migrate:refresh --seed</code></pre>\n<h2>faker,seeder</h2>\n<pre><code class=\"language-php\">    public function run()\n    {\n        // 以下の userを作成\n        DB::table(&quot;users&quot;)-&gt;insert([\n            &#039;name&#039; =&gt; &#039;hogehoge&#039;,\n            &#039;email&#039; =&gt; &#039;hoge@hogehoge.com&#039;,\n            &#039;email_verified_at&#039; =&gt; now(),\n            &#039;password&#039; =&gt; Hash::make(&#039;pass&#039;),\n            &#039;remember_token&#039; =&gt; Str::random(10),\n            &#039;created_at&#039; =&gt; now(),\n            &#039;updated_at&#039; =&gt; now()\n        ]);\n         // database/factories/UserFactory.php を 10回実行\n        factory(App\\User::class, 10)-&gt;create();</code></pre>\n<pre><code class=\"language-php\">// database/factories/UserFactory.php\n$factory-&gt;define(User::class, function (Faker $faker) {\n    return [\n        &#039;name&#039; =&gt; $faker-&gt;name,\n        &#039;email&#039; =&gt; $faker-&gt;unique()-&gt;safeEmail,\n        &#039;email_verified_at&#039; =&gt; now(),\n        &#039;password&#039; =&gt; &#039;$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi&#039;, // password\n        &#039;remember_token&#039; =&gt; Str::random(10),\n    ];\n});</code></pre>\n<h2>seedr relation 例</h2>\n<pre><code class=\"language-php\">\n    public function run()\n    {\n        $test_player = [\n            [\'id\' => \'1\',\n                \'last_name\' => \'Yamada\',\n                \'first_name\' => \'Taro\',\n                \'last_name_kana\' => \'ヤマダ\',\n                \'first_name_kana\' => \'タロウ\',\n                \'email\' => \'yamada@hoge.com\',\n                \'password\' => Hash::make(\'password\'),\n                \'type\' => \'1\',\n                \'introduction\' => \'Yamada Taroのテストイントロダクション\',\n                \'player_image\' => \'YamadaTaro.jpg\',\n                \'organization\' => \'Yamada Taro所属のテスト\',\n                \'publish\' => \'0\',\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\n                \'deleted_at\' => null,\n            ],\n            [\'id\' => \'2\',\n                \'last_name\' => \'Tanaka\',\n                \'first_name\' => \'Ichiro\',\n                \'last_name_kana\' => \'タナカ\',\n                \'first_name_kana\' => \'Ichiro\',\n                \'email\' => \'tanaka@hoge.com\',\n                \'password\' => Hash::make(\'password\'),\n                \'type\' => \'2\',\n                \'introduction\' => \'Tanaka Ichiroのテストイントロダックション\',\n                \'player_image\' => \'TanakaIchiro.jpg\',\n                \'organization\' => \'TanakaIchiro所属のテスト\',\n                \'publish\' => \'1\',\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\n                \'deleted_at\' => date(\'Y-m-d H:i:s\'),\n            ],\n        ];\n\n        for ($i = 0; $i < count($test_player); $i++) {\n            // Create　User\n            DB::table(\'players\')->insert(\n                $test_player[$i]\n            );\n\n            factory(Project::class, 1)->create(  // Project model 1回実行\n                [\n                    \'player_id\' => $test_player[$i][\'id\'],\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject\',\n                    \'type\' => 2,\n                ]\n            )\n                // Reration \n                ->each(function ($project) {\n                    // reword\n                    $project->rewards()->savemany(factory(Reward::class, 1)->create(\n                        [\n                            \'admin_id\' => $project->admin_id,\n                            \'project_id\' => $project->id,\n                        ]\n                    ))->each(\n                // Reration \n                        function ($reward) {\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                [\n                                    \'reward_id\' => $reward->id,\n                                    \'amount\' => $reward->amount,\n                                ]\n                            ))->each(\n                                function ($order) {\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\n                                        [\n                                            \'id\' => $order->id,\n                                            \'amount\' => $order->amount,\n                                        ]\n                                    ));\n                                }\n                            );\n                        }\n                    );\n                    // article\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                        [\n                            \'project_id\' => $project->id,\n                        ]\n                    ))\n                        ->each(\n                            function ($article) {\n                                // article image\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                    [\n                                        \'article_id\' => $article->id,\n                                    ]\n                                ));\n                            }\n                        );\n                });\n            // project\n            factory(Project::class, rand(1, 5))->create(\n                [\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject2\',\n                    \'player_id\' => $test_player[$i][\'id\'],\n\n                ]\n            )\n                ->each(function ($project) {\n                    // reword\n                    $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\n                        [\n                            \'admin_id\' => $project->admin_id,\n                            \'project_id\' => $project->id,\n                        ]\n                    ))->each(\n                        function ($reward) {\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                [\n                                    \'reward_id\' => $reward->id,\n                                    \'amount\' => $reward->amount,\n                                ]\n                            ))->each(\n                                function ($order) {\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\n                                        [\n                                            \'id\' => $order->id,\n                                            \'amount\' => $order->amount,\n                                        ]\n                                    ));\n                                }\n                            );\n                        }\n                    );\n                    // article\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                        [\n                            \'project_id\' => $project->id,\n                        ]\n                    ))\n                        ->each(\n                            function ($article) {\n                                // article image\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                    [\n                                        \'article_id\' => $article->id,\n                                    ]\n                                ));\n                            }\n                        );\n                });\n\n        }\n\n        factory(Player::class, 50)->create()\n            ->each(function ($player) {\n\n                // funclub\n                $player->projects()->savemany(factory(Project::class, 1)->create(\n                    [\n                        \'player_id\' => $player->id,\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject\',\n                        \'type\' => 2,\n                    ]\n                ))\n                    ->each(function ($project) {\n                        // reword\n                        $project->rewards()->savemany(factory(Reward::class, 1)->create(\n                            [\n                                \'admin_id\' => $project->admin_id,\n                                \'project_id\' => $project->id,\n                            ]\n                        ))->each(\n                            function ($reward) {\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                    [\n                                        \'reward_id\' => $reward->id,\n                                        \'amount\' => $reward->amount,\n                                    ]\n                                ))->each(\n                                    function ($order) {\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\n                                            [\n                                                \'id\' => $order->id,\n                                                \'amount\' => $order->amount,\n                                            ]\n                                        ));\n                                    }\n                                );\n                            }\n                        );\n                        // article\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                            [\n                                \'project_id\' => $project->id,\n                            ]\n                        ))\n                            ->each(\n                                function ($article) {\n                                    // article image\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                        [\n                                            \'article_id\' => $article->id,\n                                        ]\n                                    ));\n                                }\n                            );\n                    });\n\n                // project\n                $player->projects()->savemany(factory(Project::class, rand(1, 5))->create(\n                    [\n                        \'player_id\' => $player->id,\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject2\',\n                    ]\n                ))\n                    ->each(function ($project) {\n                        // reword\n                        $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\n                            [\n                                \'admin_id\' => $project->admin_id,\n                                \'project_id\' => $project->id,\n                            ]\n                        ))->each(\n                            function ($reward) {\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                    [\n                                        \'reward_id\' => $reward->id,\n                                        \'amount\' => $reward->amount,\n                                    ]\n                                ))->each(\n                                    function ($order) {\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\n                                            [\n                                                \'id\' => $order->id,\n                                                \'amount\' => $order->amount,\n                                            ]\n                                        ));\n                                    }\n                                );\n                            }\n                        );\n                        // article\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                            [\n                                \'project_id\' => $project->id,\n                            ]\n                        ))\n                            ->each(\n                                function ($article) {\n                                    // article image\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                        [\n                                            \'article_id\' => $article->id,\n                                        ]\n                                    ));\n                                }\n                            );\n                    });\n            });\n    }</code></pre>','Laravel migration seed facker','','inherit','closed','closed','','637-revision-v1','','','2020-12-15 13:05:07','2020-12-15 04:05:07','\r\n*データ再生時によく使う*\r\n```bash\r\nphp artisan migrate:refresh --seed\r\n```\r\n## faker,seeder\r\n```php\r\n    public function run()\r\n    {\r\n		// 以下の userを作成\r\n        DB::table(&quot;users&quot;)-&gt;insert([\r\n            &#039;name&#039; =&gt; &#039;hogehoge&#039;,\r\n            &#039;email&#039; =&gt; &#039;hoge@hogehoge.com&#039;,\r\n            &#039;email_verified_at&#039; =&gt; now(),\r\n            &#039;password&#039; =&gt; Hash::make(&#039;pass&#039;),\r\n            &#039;remember_token&#039; =&gt; Str::random(10),\r\n            &#039;created_at&#039; =&gt; now(),\r\n            &#039;updated_at&#039; =&gt; now()\r\n		]);\r\n		 // database/factories/UserFactory.php を 10回実行\r\n        factory(App\\User::class, 10)-&gt;create();\r\n```\r\n\r\n```php\r\n// database/factories/UserFactory.php\r\n$factory-&gt;define(User::class, function (Faker $faker) {\r\n    return [\r\n        &#039;name&#039; =&gt; $faker-&gt;name,\r\n        &#039;email&#039; =&gt; $faker-&gt;unique()-&gt;safeEmail,\r\n        &#039;email_verified_at&#039; =&gt; now(),\r\n        &#039;password&#039; =&gt; &#039;$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi&#039;, // password\r\n        &#039;remember_token&#039; =&gt; Str::random(10),\r\n    ];\r\n});\r\n```\r\n\r\n\r\n## seedr relation 例\r\n```php\r\n    public function run()\r\n    {\r\n        $test_player = [\r\n            [\'id\' => \'1\',\r\n                \'last_name\' => \'Yamada\',\r\n                \'first_name\' => \'Taro\',\r\n                \'last_name_kana\' => \'ヤマダ\',\r\n                \'first_name_kana\' => \'タロウ\',\r\n                \'email\' => \'yamada@hoge.com\',\r\n                \'password\' => Hash::make(\'password\'),\r\n                \'type\' => \'1\',\r\n                \'introduction\' => \'Yamada Taroのテストイントロダクション\',\r\n                \'player_image\' => \'YamadaTaro.jpg\',\r\n                \'organization\' => \'Yamada Taro所属のテスト\',\r\n                \'publish\' => \'0\',\r\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\r\n                \'deleted_at\' => null,\r\n            ],\r\n            [\'id\' => \'2\',\r\n                \'last_name\' => \'Tanaka\',\r\n                \'first_name\' => \'Ichiro\',\r\n                \'last_name_kana\' => \'タナカ\',\r\n                \'first_name_kana\' => \'Ichiro\',\r\n                \'email\' => \'tanaka@hoge.com\',\r\n                \'password\' => Hash::make(\'password\'),\r\n                \'type\' => \'2\',\r\n                \'introduction\' => \'Tanaka Ichiroのテストイントロダックション\',\r\n                \'player_image\' => \'TanakaIchiro.jpg\',\r\n                \'organization\' => \'TanakaIchiro所属のテスト\',\r\n                \'publish\' => \'1\',\r\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\r\n                \'deleted_at\' => date(\'Y-m-d H:i:s\'),\r\n            ],\r\n        ];\r\n\r\n        for ($i = 0; $i < count($test_player); $i++) {\r\n			// Create　User\r\n            DB::table(\'players\')->insert(\r\n                $test_player[$i]\r\n			);\r\n\r\n            factory(Project::class, 1)->create(  // Project model 1回実行\r\n                [\r\n                    \'player_id\' => $test_player[$i][\'id\'],\r\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject\',\r\n                    \'type\' => 2,\r\n                ]\r\n			)\r\n			    // Reration \r\n                ->each(function ($project) {\r\n                    // reword\r\n                    $project->rewards()->savemany(factory(Reward::class, 1)->create(\r\n                        [\r\n                            \'admin_id\' => $project->admin_id,\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))->each(\r\n			    // Reration \r\n                        function ($reward) {\r\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                [\r\n                                    \'reward_id\' => $reward->id,\r\n                                    \'amount\' => $reward->amount,\r\n                                ]\r\n                            ))->each(\r\n                                function ($order) {\r\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                        [\r\n                                            \'id\' => $order->id,\r\n                                            \'amount\' => $order->amount,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                        }\r\n                    );\r\n                    // article\r\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                        [\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))\r\n                        ->each(\r\n                            function ($article) {\r\n                                // article image\r\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'article_id\' => $article->id,\r\n                                    ]\r\n                                ));\r\n                            }\r\n                        );\r\n                });\r\n            // project\r\n            factory(Project::class, rand(1, 5))->create(\r\n                [\r\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject2\',\r\n                    \'player_id\' => $test_player[$i][\'id\'],\r\n\r\n                ]\r\n            )\r\n                ->each(function ($project) {\r\n                    // reword\r\n                    $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\r\n                        [\r\n                            \'admin_id\' => $project->admin_id,\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))->each(\r\n                        function ($reward) {\r\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                [\r\n                                    \'reward_id\' => $reward->id,\r\n                                    \'amount\' => $reward->amount,\r\n                                ]\r\n                            ))->each(\r\n                                function ($order) {\r\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                        [\r\n                                            \'id\' => $order->id,\r\n                                            \'amount\' => $order->amount,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                        }\r\n                    );\r\n                    // article\r\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                        [\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))\r\n                        ->each(\r\n                            function ($article) {\r\n                                // article image\r\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'article_id\' => $article->id,\r\n                                    ]\r\n                                ));\r\n                            }\r\n                        );\r\n                });\r\n\r\n        }\r\n\r\n        factory(Player::class, 50)->create()\r\n            ->each(function ($player) {\r\n\r\n                // funclub\r\n                $player->projects()->savemany(factory(Project::class, 1)->create(\r\n                    [\r\n                        \'player_id\' => $player->id,\r\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject\',\r\n                        \'type\' => 2,\r\n                    ]\r\n                ))\r\n                    ->each(function ($project) {\r\n                        // reword\r\n                        $project->rewards()->savemany(factory(Reward::class, 1)->create(\r\n                            [\r\n                                \'admin_id\' => $project->admin_id,\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))->each(\r\n                            function ($reward) {\r\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'reward_id\' => $reward->id,\r\n                                        \'amount\' => $reward->amount,\r\n                                    ]\r\n                                ))->each(\r\n                                    function ($order) {\r\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                            [\r\n                                                \'id\' => $order->id,\r\n                                                \'amount\' => $order->amount,\r\n                                            ]\r\n                                        ));\r\n                                    }\r\n                                );\r\n                            }\r\n                        );\r\n                        // article\r\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                            [\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))\r\n                            ->each(\r\n                                function ($article) {\r\n                                    // article image\r\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                        [\r\n                                            \'article_id\' => $article->id,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                    });\r\n\r\n\r\n                // project\r\n                $player->projects()->savemany(factory(Project::class, rand(1, 5))->create(\r\n                    [\r\n                        \'player_id\' => $player->id,\r\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject2\',\r\n                    ]\r\n                ))\r\n                    ->each(function ($project) {\r\n                        // reword\r\n                        $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\r\n                            [\r\n                                \'admin_id\' => $project->admin_id,\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))->each(\r\n                            function ($reward) {\r\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'reward_id\' => $reward->id,\r\n                                        \'amount\' => $reward->amount,\r\n                                    ]\r\n                                ))->each(\r\n                                    function ($order) {\r\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                            [\r\n                                                \'id\' => $order->id,\r\n                                                \'amount\' => $order->amount,\r\n                                            ]\r\n                                        ));\r\n                                    }\r\n                                );\r\n                            }\r\n                        );\r\n                        // article\r\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                            [\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))\r\n                            ->each(\r\n                                function ($article) {\r\n                                    // article image\r\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                        [\r\n                                            \'article_id\' => $article->id,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                    });\r\n            });\r\n    }\r\n',637,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/637-revision-v1/',0,'revision','',0),(640,1,'2020-12-15 13:06:37','2020-12-15 04:06:37','<p><em>データ再生時によく使う</em></p>\n<pre><code class=\"language-bash\">php artisan migrate:refresh --seed</code></pre>\n<h2>faker,seeder</h2>\n<pre><code class=\"language-php\">    public function run()\n    {\n        // 以下の userを作成\n        DB::table(&quot;users&quot;)-&gt;insert([\n            &#039;name&#039; =&gt; &#039;hogehoge&#039;,\n            &#039;email&#039; =&gt; &#039;hoge@hogehoge.com&#039;,\n            &#039;email_verified_at&#039; =&gt; now(),\n            &#039;password&#039; =&gt; Hash::make(&#039;pass&#039;),\n            &#039;remember_token&#039; =&gt; Str::random(10),\n            &#039;created_at&#039; =&gt; now(),\n            &#039;updated_at&#039; =&gt; now()\n        ]);\n         // database/factories/UserFactory.php を 10回実行\n        factory(App\\User::class, 10)-&gt;create();</code></pre>\n<pre><code class=\"language-php\">// database/factories/UserFactory.php\n$factory-&gt;define(User::class, function (Faker $faker) {\n    return [\n        &#039;name&#039; =&gt; $faker-&gt;name,\n        &#039;email&#039; =&gt; $faker-&gt;unique()-&gt;safeEmail,\n        &#039;email_verified_at&#039; =&gt; now(),\n        &#039;password&#039; =&gt; &#039;$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi&#039;, // password\n        &#039;remember_token&#039; =&gt; Str::random(10),\n    ];\n});</code></pre>\n<h2>seedr relation 例</h2>\n<pre><code class=\"language-php\">\n    public function run()\n    {\n        $test_player = [\n            [\'id\' => \'1\',\n                \'last_name\' => \'Yamada\',\n                \'first_name\' => \'Taro\',\n                \'last_name_kana\' => \'ヤマダ\',\n                \'first_name_kana\' => \'タロウ\',\n                \'email\' => \'yamada@hoge.com\',\n                \'password\' => Hash::make(\'password\'),\n                \'type\' => \'1\',\n                \'introduction\' => \'Yamada Taroのテストイントロダクション\',\n                \'player_image\' => \'YamadaTaro.jpg\',\n                \'organization\' => \'Yamada Taro所属のテスト\',\n                \'publish\' => \'0\',\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\n                \'deleted_at\' => null,\n            ],\n            [\'id\' => \'2\',\n                \'last_name\' => \'Tanaka\',\n                \'first_name\' => \'Ichiro\',\n                \'last_name_kana\' => \'タナカ\',\n                \'first_name_kana\' => \'Ichiro\',\n                \'email\' => \'tanaka@hoge.com\',\n                \'password\' => Hash::make(\'password\'),\n                \'type\' => \'2\',\n                \'introduction\' => \'Tanaka Ichiroのテストイントロダックション\',\n                \'player_image\' => \'TanakaIchiro.jpg\',\n                \'organization\' => \'TanakaIchiro所属のテスト\',\n                \'publish\' => \'1\',\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\n                \'deleted_at\' => date(\'Y-m-d H:i:s\'),\n            ],\n        ];\n\n        for ($i = 0; $i < count($test_player); $i++) {\n            // Create　User\n            DB::table(\'players\')->insert(\n                $test_player[$i]\n            );\n\n            factory(Project::class, 1)->create(  // Project model 1回実行\n                [\n                    \'player_id\' => $test_player[$i][\'id\'],\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject\',\n                    \'type\' => 2,\n                ]\n            )\n                // Reration \n                ->each(function ($project) {\n                    // reword\n                    $project->rewards()->savemany(factory(Reward::class, 1)->create(\n                        [\n                            \'admin_id\' => $project->admin_id,\n                            \'project_id\' => $project->id,\n                        ]\n                    ))->each(\n                // Reration \n                        function ($reward) {\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                [\n                                    \'reward_id\' => $reward->id,\n                                    \'amount\' => $reward->amount,\n                                ]\n                            ))->each(\n                                function ($order) {\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\n                                        [\n                                            \'id\' => $order->id,\n                                            \'amount\' => $order->amount,\n                                        ]\n                                    ));\n                                }\n                            );\n                        }\n                    );\n                    // article\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                        [\n                            \'project_id\' => $project->id,\n                        ]\n                    ))\n                        ->each(\n                            function ($article) {\n                                // article image\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                    [\n                                        \'article_id\' => $article->id,\n                                    ]\n                                ));\n                            }\n                        );\n                });\n            // project\n            factory(Project::class, rand(1, 5))->create(\n                [\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject2\',\n                    \'player_id\' => $test_player[$i][\'id\'],\n\n                ]\n            )\n                ->each(function ($project) {\n                    // reword\n                    $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\n                        [\n                            \'admin_id\' => $project->admin_id,\n                            \'project_id\' => $project->id,\n                        ]\n                    ))->each(\n                        function ($reward) {\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                [\n                                    \'reward_id\' => $reward->id,\n                                    \'amount\' => $reward->amount,\n                                ]\n                            ))->each(\n                                function ($order) {\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\n                                        [\n                                            \'id\' => $order->id,\n                                            \'amount\' => $order->amount,\n                                        ]\n                                    ));\n                                }\n                            );\n                        }\n                    );\n                    // article\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                        [\n                            \'project_id\' => $project->id,\n                        ]\n                    ))\n                        ->each(\n                            function ($article) {\n                                // article image\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                    [\n                                        \'article_id\' => $article->id,\n                                    ]\n                                ));\n                            }\n                        );\n                });\n\n        }\n\n        factory(Player::class, 50)->create()\n            ->each(function ($player) {\n\n                // funclub\n                $player->projects()->savemany(factory(Project::class, 1)->create(\n                    [\n                        \'player_id\' => $player->id,\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject\',\n                        \'type\' => 2,\n                    ]\n                ))\n                    ->each(function ($project) {\n                        // reword\n                        $project->rewards()->savemany(factory(Reward::class, 1)->create(\n                            [\n                                \'admin_id\' => $project->admin_id,\n                                \'project_id\' => $project->id,\n                            ]\n                        ))->each(\n                            function ($reward) {\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                    [\n                                        \'reward_id\' => $reward->id,\n                                        \'amount\' => $reward->amount,\n                                    ]\n                                ))->each(\n                                    function ($order) {\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\n                                            [\n                                                \'id\' => $order->id,\n                                                \'amount\' => $order->amount,\n                                            ]\n                                        ));\n                                    }\n                                );\n                            }\n                        );\n                        // article\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                            [\n                                \'project_id\' => $project->id,\n                            ]\n                        ))\n                            ->each(\n                                function ($article) {\n                                    // article image\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                        [\n                                            \'article_id\' => $article->id,\n                                        ]\n                                    ));\n                                }\n                            );\n                    });\n\n                // project\n                $player->projects()->savemany(factory(Project::class, rand(1, 5))->create(\n                    [\n                        \'player_id\' => $player->id,\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject2\',\n                    ]\n                ))\n                    ->each(function ($project) {\n                        // reword\n                        $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\n                            [\n                                \'admin_id\' => $project->admin_id,\n                                \'project_id\' => $project->id,\n                            ]\n                        ))->each(\n                            function ($reward) {\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\n                                    [\n                                        \'reward_id\' => $reward->id,\n                                        \'amount\' => $reward->amount,\n                                    ]\n                                ))->each(\n                                    function ($order) {\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\n                                            [\n                                                \'id\' => $order->id,\n                                                \'amount\' => $order->amount,\n                                            ]\n                                        ));\n                                    }\n                                );\n                            }\n                        );\n                        // article\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\n                            [\n                                \'project_id\' => $project->id,\n                            ]\n                        ))\n                            ->each(\n                                function ($article) {\n                                    // article image\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\n                                        [\n                                            \'article_id\' => $article->id,\n                                        ]\n                                    ));\n                                }\n                            );\n                    });\n            });\n    }</code></pre>','Laravel migration seed facker','Seeder , Fackerを使ってテスト様データを生成','inherit','closed','closed','','637-revision-v1','','','2020-12-15 13:06:37','2020-12-15 04:06:37','*データ再生時によく使う*\r\n```bash\r\nphp artisan migrate:refresh --seed\r\n```\r\n## faker,seeder\r\n```php\r\n    public function run()\r\n    {\r\n		// 以下の userを作成\r\n        DB::table(&quot;users&quot;)-&gt;insert([\r\n            &#039;name&#039; =&gt; &#039;hogehoge&#039;,\r\n            &#039;email&#039; =&gt; &#039;hoge@hogehoge.com&#039;,\r\n            &#039;email_verified_at&#039; =&gt; now(),\r\n            &#039;password&#039; =&gt; Hash::make(&#039;pass&#039;),\r\n            &#039;remember_token&#039; =&gt; Str::random(10),\r\n            &#039;created_at&#039; =&gt; now(),\r\n            &#039;updated_at&#039; =&gt; now()\r\n		]);\r\n		 // database/factories/UserFactory.php を 10回実行\r\n        factory(App\\User::class, 10)-&gt;create();\r\n```\r\n\r\n```php\r\n// database/factories/UserFactory.php\r\n$factory-&gt;define(User::class, function (Faker $faker) {\r\n    return [\r\n        &#039;name&#039; =&gt; $faker-&gt;name,\r\n        &#039;email&#039; =&gt; $faker-&gt;unique()-&gt;safeEmail,\r\n        &#039;email_verified_at&#039; =&gt; now(),\r\n        &#039;password&#039; =&gt; &#039;$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi&#039;, // password\r\n        &#039;remember_token&#039; =&gt; Str::random(10),\r\n    ];\r\n});\r\n```\r\n\r\n\r\n## seedr relation 例\r\n```php\r\n    public function run()\r\n    {\r\n        $test_player = [\r\n            [\'id\' => \'1\',\r\n                \'last_name\' => \'Yamada\',\r\n                \'first_name\' => \'Taro\',\r\n                \'last_name_kana\' => \'ヤマダ\',\r\n                \'first_name_kana\' => \'タロウ\',\r\n                \'email\' => \'yamada@hoge.com\',\r\n                \'password\' => Hash::make(\'password\'),\r\n                \'type\' => \'1\',\r\n                \'introduction\' => \'Yamada Taroのテストイントロダクション\',\r\n                \'player_image\' => \'YamadaTaro.jpg\',\r\n                \'organization\' => \'Yamada Taro所属のテスト\',\r\n                \'publish\' => \'0\',\r\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\r\n                \'deleted_at\' => null,\r\n            ],\r\n            [\'id\' => \'2\',\r\n                \'last_name\' => \'Tanaka\',\r\n                \'first_name\' => \'Ichiro\',\r\n                \'last_name_kana\' => \'タナカ\',\r\n                \'first_name_kana\' => \'Ichiro\',\r\n                \'email\' => \'tanaka@hoge.com\',\r\n                \'password\' => Hash::make(\'password\'),\r\n                \'type\' => \'2\',\r\n                \'introduction\' => \'Tanaka Ichiroのテストイントロダックション\',\r\n                \'player_image\' => \'TanakaIchiro.jpg\',\r\n                \'organization\' => \'TanakaIchiro所属のテスト\',\r\n                \'publish\' => \'1\',\r\n                \'created_at\' => date(\'Y-m-d H:i:s\'),\r\n                \'deleted_at\' => date(\'Y-m-d H:i:s\'),\r\n            ],\r\n        ];\r\n\r\n        for ($i = 0; $i < count($test_player); $i++) {\r\n			// Create　User\r\n            DB::table(\'players\')->insert(\r\n                $test_player[$i]\r\n			);\r\n\r\n            factory(Project::class, 1)->create(  // Project model 1回実行\r\n                [\r\n                    \'player_id\' => $test_player[$i][\'id\'],\r\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject\',\r\n                    \'type\' => 2,\r\n                ]\r\n			)\r\n			    // Reration \r\n                ->each(function ($project) {\r\n                    // reword\r\n                    $project->rewards()->savemany(factory(Reward::class, 1)->create(\r\n                        [\r\n                            \'admin_id\' => $project->admin_id,\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))->each(\r\n			    // Reration \r\n                        function ($reward) {\r\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                [\r\n                                    \'reward_id\' => $reward->id,\r\n                                    \'amount\' => $reward->amount,\r\n                                ]\r\n                            ))->each(\r\n                                function ($order) {\r\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                        [\r\n                                            \'id\' => $order->id,\r\n                                            \'amount\' => $order->amount,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                        }\r\n                    );\r\n                    // article\r\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                        [\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))\r\n                        ->each(\r\n                            function ($article) {\r\n                                // article image\r\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'article_id\' => $article->id,\r\n                                    ]\r\n                                ));\r\n                            }\r\n                        );\r\n                });\r\n            // project\r\n            factory(Project::class, rand(1, 5))->create(\r\n                [\r\n                    \'name\' => $test_player[$i][\'last_name\'] . $test_player[$i][\'first_name\'] . \' - testProject2\',\r\n                    \'player_id\' => $test_player[$i][\'id\'],\r\n\r\n                ]\r\n            )\r\n                ->each(function ($project) {\r\n                    // reword\r\n                    $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\r\n                        [\r\n                            \'admin_id\' => $project->admin_id,\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))->each(\r\n                        function ($reward) {\r\n                            $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                [\r\n                                    \'reward_id\' => $reward->id,\r\n                                    \'amount\' => $reward->amount,\r\n                                ]\r\n                            ))->each(\r\n                                function ($order) {\r\n                                    $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                        [\r\n                                            \'id\' => $order->id,\r\n                                            \'amount\' => $order->amount,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                        }\r\n                    );\r\n                    // article\r\n                    $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                        [\r\n                            \'project_id\' => $project->id,\r\n                        ]\r\n                    ))\r\n                        ->each(\r\n                            function ($article) {\r\n                                // article image\r\n                                $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'article_id\' => $article->id,\r\n                                    ]\r\n                                ));\r\n                            }\r\n                        );\r\n                });\r\n\r\n        }\r\n\r\n        factory(Player::class, 50)->create()\r\n            ->each(function ($player) {\r\n\r\n                // funclub\r\n                $player->projects()->savemany(factory(Project::class, 1)->create(\r\n                    [\r\n                        \'player_id\' => $player->id,\r\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject\',\r\n                        \'type\' => 2,\r\n                    ]\r\n                ))\r\n                    ->each(function ($project) {\r\n                        // reword\r\n                        $project->rewards()->savemany(factory(Reward::class, 1)->create(\r\n                            [\r\n                                \'admin_id\' => $project->admin_id,\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))->each(\r\n                            function ($reward) {\r\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'reward_id\' => $reward->id,\r\n                                        \'amount\' => $reward->amount,\r\n                                    ]\r\n                                ))->each(\r\n                                    function ($order) {\r\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                            [\r\n                                                \'id\' => $order->id,\r\n                                                \'amount\' => $order->amount,\r\n                                            ]\r\n                                        ));\r\n                                    }\r\n                                );\r\n                            }\r\n                        );\r\n                        // article\r\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                            [\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))\r\n                            ->each(\r\n                                function ($article) {\r\n                                    // article image\r\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                        [\r\n                                            \'article_id\' => $article->id,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                    });\r\n\r\n\r\n                // project\r\n                $player->projects()->savemany(factory(Project::class, rand(1, 5))->create(\r\n                    [\r\n                        \'player_id\' => $player->id,\r\n                        \'name\' => $player->last_name . $player->first_name . \' - testProject2\',\r\n                    ]\r\n                ))\r\n                    ->each(function ($project) {\r\n                        // reword\r\n                        $project->rewards()->savemany(factory(Reward::class, rand(1, 3))->create(\r\n                            [\r\n                                \'admin_id\' => $project->admin_id,\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))->each(\r\n                            function ($reward) {\r\n                                $reward->orders()->savemany(factory(Order::class, rand(1, 3))->create(\r\n                                    [\r\n                                        \'reward_id\' => $reward->id,\r\n                                        \'amount\' => $reward->amount,\r\n                                    ]\r\n                                ))->each(\r\n                                    function ($order) {\r\n                                        $order->orderLog()->save(factory(OrderLog::class)->create(\r\n                                            [\r\n                                                \'id\' => $order->id,\r\n                                                \'amount\' => $order->amount,\r\n                                            ]\r\n                                        ));\r\n                                    }\r\n                                );\r\n                            }\r\n                        );\r\n                        // article\r\n                        $project->articles()->savemany(factory(Article::class, rand(1, 5))->create(\r\n                            [\r\n                                \'project_id\' => $project->id,\r\n                            ]\r\n                        ))\r\n                            ->each(\r\n                                function ($article) {\r\n                                    // article image\r\n                                    $article->articleImages()->savemany(factory(ArticleImage::class, rand(1, 3))->create(\r\n                                        [\r\n                                            \'article_id\' => $article->id,\r\n                                        ]\r\n                                    ));\r\n                                }\r\n                            );\r\n                    });\r\n            });\r\n    }\r\n',637,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/637-revision-v1/',0,'revision','',0),(641,1,'2020-12-15 13:10:13','2020-12-15 04:10:13','','laravel_seeder_facker','','inherit','closed','closed','','laravel_seeder_facker-2','','','2020-12-15 13:10:13','2020-12-15 04:10:13','',637,'https://blog.webdimension.jp/wp-content/uploads/2020/12/laravel_seeder_facker.png',0,'attachment','image/png',0),(642,1,'2020-12-15 13:16:22','2020-12-15 04:16:22','<h2>modelに追加</h2>\n<pre><code class=\"language-php\">\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\n\nclass User extends Model\n{\n    use SoftDeletes;\n}</code></pre>\n<h2>Softdelete されているか</h2>\n<pre><code class=\"language-php\">\nif ($user-&gt;trashed()) {\n    // softdelete されている\n}</code></pre>\n<h2>Softdelete されているデータも含めて取得</h2>\n<pre><code class=\"language-php\">$users = App\\User::withTrashed()-&gt;get();</code></pre>\n<h2>Softdelete されているデータのみ取得</h2>\n<pre><code class=\"language-php\">$users = App\\User::onlyTrashed()-&gt;get();</code></pre>\n<h2>Softdeleteを復元</h2>\n<pre><code class=\"language-php\">$user-&gt;restore();</code></pre>\n<h2>物理削除</h2>\n<pre><code class=\"language-php\">$user-&gt;forceDelete();</code></pre>','Laravel Softdelete','Laravel softdeleteの振る舞い','publish','closed','open','','laravel_softdelete','','','2020-12-15 13:16:22','2020-12-15 04:16:22','## modelに追加\r\n```php\r\n\r\nnamespace App;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\r\n\r\nclass User extends Model\r\n{\r\n    use SoftDeletes;\r\n}\r\n```\r\n\r\n\r\n## Softdelete されているか\r\n```php\r\n\r\nif ($user-&gt;trashed()) {\r\n	// softdelete されている\r\n}\r\n```\r\n\r\n## Softdelete されているデータも含めて取得\r\n```php\r\n$users = App\\User::withTrashed()-&gt;get();\r\n```\r\n## Softdelete されているデータのみ取得\r\n```php\r\n$users = App\\User::onlyTrashed()-&gt;get();\r\n```\r\n## Softdeleteを復元\r\n```php\r\n$user-&gt;restore();\r\n```\r\n## 物理削除\r\n```php\r\n$user-&gt;forceDelete();\r\n```',0,'https://blog.webdimension.jp/?p=642',0,'post','',0),(643,1,'2020-12-15 13:12:29','2020-12-15 04:12:29','<p><em>modelに追加</em></p>\n<pre><code class=\"language-php\">\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\n\nclass User extends Model\n{\n    use SoftDeletes;\n}</code></pre>\n<p>Softdelete されているか</p>\n<pre><code class=\"language-php\">\nif ($user-&gt;trashed()) {\n    // softdelete されている\n}</code></pre>\n<p>Softdelete されているデータも含めて取得</p>\n<pre><code class=\"language-php\">$users = App\\User::withTrashed()-&gt;get();</code></pre>\n<p>Softdelete されているデータのみ取得</p>\n<pre><code class=\"language-php\">$users = App\\User::onlyTrashed()-&gt;get();</code></pre>\n<p>Softdeleteを復元</p>\n<pre><code class=\"language-php\">$user-&gt;restore();</code></pre>\n<p>物理削除</p>\n<pre><code class=\"language-php\">$user-&gt;forceDelete();</code></pre>','Laravel Softdelete','','inherit','closed','closed','','642-revision-v1','','','2020-12-15 13:12:29','2020-12-15 04:12:29','*modelに追加*\r\n```php\r\n\r\nnamespace App;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\r\n\r\nclass User extends Model\r\n{\r\n    use SoftDeletes;\r\n}\r\n```\r\n\r\n\r\nSoftdelete されているか\r\n```php\r\n\r\nif ($user-&gt;trashed()) {\r\n	// softdelete されている\r\n}\r\n```\r\n\r\nSoftdelete されているデータも含めて取得\r\n```php\r\n$users = App\\User::withTrashed()-&gt;get();\r\n```\r\nSoftdelete されているデータのみ取得\r\n```php\r\n$users = App\\User::onlyTrashed()-&gt;get();\r\n```\r\nSoftdeleteを復元\r\n```php\r\n$user-&gt;restore();\r\n```\r\n物理削除\r\n```php\r\n$user-&gt;forceDelete();\r\n```',642,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/642-revision-v1/',0,'revision','',0),(644,1,'2020-12-15 13:14:18','2020-12-15 04:14:18','<h2>modelに追加</h2>\n<pre><code class=\"language-php\">\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\n\nclass User extends Model\n{\n    use SoftDeletes;\n}</code></pre>\n<h2>Softdelete されているか</h2>\n<pre><code class=\"language-php\">\nif ($user-&gt;trashed()) {\n    // softdelete されている\n}</code></pre>\n<h2>Softdelete されているデータも含めて取得</h2>\n<pre><code class=\"language-php\">$users = App\\User::withTrashed()-&gt;get();</code></pre>\n<h2>Softdelete されているデータのみ取得</h2>\n<pre><code class=\"language-php\">$users = App\\User::onlyTrashed()-&gt;get();</code></pre>\n<h2>Softdeleteを復元</h2>\n<pre><code class=\"language-php\">$user-&gt;restore();</code></pre>\n<h2>物理削除</h2>\n<pre><code class=\"language-php\">$user-&gt;forceDelete();</code></pre>','Laravel Softdelete','Laravel softdeleteの振る舞い','inherit','closed','closed','','642-revision-v1','','','2020-12-15 13:14:18','2020-12-15 04:14:18','## modelに追加\r\n```php\r\n\r\nnamespace App;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\r\n\r\nclass User extends Model\r\n{\r\n    use SoftDeletes;\r\n}\r\n```\r\n\r\n\r\n## Softdelete されているか\r\n```php\r\n\r\nif ($user-&gt;trashed()) {\r\n	// softdelete されている\r\n}\r\n```\r\n\r\n## Softdelete されているデータも含めて取得\r\n```php\r\n$users = App\\User::withTrashed()-&gt;get();\r\n```\r\n## Softdelete されているデータのみ取得\r\n```php\r\n$users = App\\User::onlyTrashed()-&gt;get();\r\n```\r\n## Softdeleteを復元\r\n```php\r\n$user-&gt;restore();\r\n```\r\n## 物理削除\r\n```php\r\n$user-&gt;forceDelete();\r\n```',642,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/642-revision-v1/',0,'revision','',0),(645,1,'2020-12-15 13:16:09','2020-12-15 04:16:09','','laravel_softdelete','','inherit','closed','closed','','laravel_softdelete-2','','','2020-12-15 13:16:09','2020-12-15 04:16:09','',642,'https://blog.webdimension.jp/wp-content/uploads/2020/12/laravel_softdelete.png',0,'attachment','image/png',0),(647,1,'2020-12-15 13:20:56','2020-12-15 04:20:56','','laravel_varidation','','inherit','closed','closed','','laravel_varidation','','','2020-12-15 13:20:56','2020-12-15 04:20:56','',0,'https://blog.webdimension.jp/wp-content/uploads/2020/12/laravel_varidation.png',0,'attachment','image/png',0),(649,1,'2020-12-15 13:24:38','2020-12-15 04:24:38','<p><em>Controler内</em></p>\n<pre><code class=\"language-php\">    protected function validator(array $data)\n    {\n        return Validator::make($data, [\n            &#039;last_name&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;],\n            &#039;first_name&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;],\n            &#039;last_name_kana&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;,&#039;katakana&#039;],\n            &#039;first_name_kana&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;,&#039;katakana&#039;],\n            &#039;email&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;email&#039;, &#039;max:128&#039;, &#039;unique:players&#039;],\n            &#039;new_password&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;min:8&#039;,&#039;same:password_confirm&#039;],\n        ]);\n    }</code></pre>\n<p><em>Example login</em></p>\n<pre><code class=\"language-php\">    public function login(Request $request)\n    {\n        // Validate the form data\n        $this-&gt;validate($request, [\n            &#039;email&#039; =&gt; &#039;required|email&#039;,\n            &#039;password&#039; =&gt; &#039;required|min:3&#039;\n        ]);\n//        echo $request-&gt;email;\n        // Attempt to log the user in\n        if (Auth::guard(&#039;player&#039;)-&gt;attempt([&#039;email&#039; =&gt; $request-&gt;email, &#039;password&#039; =&gt; $request-&gt;password,&#039;deleted_at&#039; =&gt; null], $request-&gt;remember)) {\n            // if successful, then redirect to their intended location\n            return redirect()-&gt;intended(route(&#039;player.home&#039;));\n        }\n\n        // if unsuccessful, then redirect back to the login with the form data\n        return redirect()-&gt;back()-&gt;withInput($request-&gt;only(&#039;email&#039;, &#039;remember&#039;));\n    }</code></pre>','Laravel Varidation','Laravel varidationの一例','publish','closed','open','','laravel_varidation','','','2020-12-15 13:24:38','2020-12-15 04:24:38','*Controler内*\r\n```php\r\n    protected function validator(array $data)\r\n    {\r\n        return Validator::make($data, [\r\n            &#039;last_name&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;],\r\n            &#039;first_name&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;],\r\n            &#039;last_name_kana&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;,&#039;katakana&#039;],\r\n            &#039;first_name_kana&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;,&#039;katakana&#039;],\r\n            &#039;email&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;email&#039;, &#039;max:128&#039;, &#039;unique:players&#039;],\r\n            &#039;new_password&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;min:8&#039;,&#039;same:password_confirm&#039;],\r\n        ]);\r\n    }\r\n```\r\n\r\n*Example login*\r\n```php\r\n    public function login(Request $request)\r\n    {\r\n        // Validate the form data\r\n        $this-&gt;validate($request, [\r\n            &#039;email&#039; =&gt; &#039;required|email&#039;,\r\n            &#039;password&#039; =&gt; &#039;required|min:3&#039;\r\n        ]);\r\n//        echo $request-&gt;email;\r\n        // Attempt to log the user in\r\n        if (Auth::guard(&#039;player&#039;)-&gt;attempt([&#039;email&#039; =&gt; $request-&gt;email, &#039;password&#039; =&gt; $request-&gt;password,&#039;deleted_at&#039; =&gt; null], $request-&gt;remember)) {\r\n            // if successful, then redirect to their intended location\r\n            return redirect()-&gt;intended(route(&#039;player.home&#039;));\r\n        }\r\n\r\n        // if unsuccessful, then redirect back to the login with the form data\r\n        return redirect()-&gt;back()-&gt;withInput($request-&gt;only(&#039;email&#039;, &#039;remember&#039;));\r\n    }\r\n```',0,'https://blog.webdimension.jp/?p=649',0,'post','',0),(650,1,'2020-12-15 13:23:08','2020-12-15 04:23:08','<p><em>Controler内</em></p>\n<pre><code class=\"language-php\">    protected function validator(array $data)\n    {\n        return Validator::make($data, [\n            &#039;last_name&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;],\n            &#039;first_name&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;],\n            &#039;last_name_kana&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;,&#039;katakana&#039;],\n            &#039;first_name_kana&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;,&#039;katakana&#039;],\n            &#039;email&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;email&#039;, &#039;max:128&#039;, &#039;unique:players&#039;],\n            &#039;new_password&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;min:8&#039;,&#039;same:password_confirm&#039;],\n        ]);\n    }</code></pre>\n<p><em>Example login</em></p>\n<pre><code class=\"language-php\">    public function login(Request $request)\n    {\n        // Validate the form data\n        $this-&gt;validate($request, [\n            &#039;email&#039; =&gt; &#039;required|email&#039;,\n            &#039;password&#039; =&gt; &#039;required|min:3&#039;\n        ]);\n//        echo $request-&gt;email;\n        // Attempt to log the user in\n        if (Auth::guard(&#039;player&#039;)-&gt;attempt([&#039;email&#039; =&gt; $request-&gt;email, &#039;password&#039; =&gt; $request-&gt;password,&#039;deleted_at&#039; =&gt; null], $request-&gt;remember)) {\n            // if successful, then redirect to their intended location\n            return redirect()-&gt;intended(route(&#039;player.home&#039;));\n        }\n\n        // if unsuccessful, then redirect back to the login with the form data\n        return redirect()-&gt;back()-&gt;withInput($request-&gt;only(&#039;email&#039;, &#039;remember&#039;));\n    }</code></pre>','Laravel Varidation','','inherit','closed','closed','','649-revision-v1','','','2020-12-15 13:23:08','2020-12-15 04:23:08','*Controler内*\r\n```php\r\n    protected function validator(array $data)\r\n    {\r\n        return Validator::make($data, [\r\n            &#039;last_name&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;],\r\n            &#039;first_name&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;],\r\n            &#039;last_name_kana&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;,&#039;katakana&#039;],\r\n            &#039;first_name_kana&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;,&#039;katakana&#039;],\r\n            &#039;email&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;email&#039;, &#039;max:128&#039;, &#039;unique:players&#039;],\r\n            &#039;new_password&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;min:8&#039;,&#039;same:password_confirm&#039;],\r\n        ]);\r\n    }\r\n```\r\n\r\n*Example login*\r\n```php\r\n    public function login(Request $request)\r\n    {\r\n        // Validate the form data\r\n        $this-&gt;validate($request, [\r\n            &#039;email&#039; =&gt; &#039;required|email&#039;,\r\n            &#039;password&#039; =&gt; &#039;required|min:3&#039;\r\n        ]);\r\n//        echo $request-&gt;email;\r\n        // Attempt to log the user in\r\n        if (Auth::guard(&#039;player&#039;)-&gt;attempt([&#039;email&#039; =&gt; $request-&gt;email, &#039;password&#039; =&gt; $request-&gt;password,&#039;deleted_at&#039; =&gt; null], $request-&gt;remember)) {\r\n            // if successful, then redirect to their intended location\r\n            return redirect()-&gt;intended(route(&#039;player.home&#039;));\r\n        }\r\n\r\n        // if unsuccessful, then redirect back to the login with the form data\r\n        return redirect()-&gt;back()-&gt;withInput($request-&gt;only(&#039;email&#039;, &#039;remember&#039;));\r\n    }\r\n```',649,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/649-revision-v1/',0,'revision','',0),(652,1,'2020-12-15 13:24:38','2020-12-15 04:24:38','<p><em>Controler内</em></p>\n<pre><code class=\"language-php\">    protected function validator(array $data)\n    {\n        return Validator::make($data, [\n            &#039;last_name&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;],\n            &#039;first_name&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;],\n            &#039;last_name_kana&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;,&#039;katakana&#039;],\n            &#039;first_name_kana&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;,&#039;katakana&#039;],\n            &#039;email&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;email&#039;, &#039;max:128&#039;, &#039;unique:players&#039;],\n            &#039;new_password&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;min:8&#039;,&#039;same:password_confirm&#039;],\n        ]);\n    }</code></pre>\n<p><em>Example login</em></p>\n<pre><code class=\"language-php\">    public function login(Request $request)\n    {\n        // Validate the form data\n        $this-&gt;validate($request, [\n            &#039;email&#039; =&gt; &#039;required|email&#039;,\n            &#039;password&#039; =&gt; &#039;required|min:3&#039;\n        ]);\n//        echo $request-&gt;email;\n        // Attempt to log the user in\n        if (Auth::guard(&#039;player&#039;)-&gt;attempt([&#039;email&#039; =&gt; $request-&gt;email, &#039;password&#039; =&gt; $request-&gt;password,&#039;deleted_at&#039; =&gt; null], $request-&gt;remember)) {\n            // if successful, then redirect to their intended location\n            return redirect()-&gt;intended(route(&#039;player.home&#039;));\n        }\n\n        // if unsuccessful, then redirect back to the login with the form data\n        return redirect()-&gt;back()-&gt;withInput($request-&gt;only(&#039;email&#039;, &#039;remember&#039;));\n    }</code></pre>','Laravel Varidation','Laravel varidationの一例','inherit','closed','closed','','649-revision-v1','','','2020-12-15 13:24:38','2020-12-15 04:24:38','*Controler内*\r\n```php\r\n    protected function validator(array $data)\r\n    {\r\n        return Validator::make($data, [\r\n            &#039;last_name&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;],\r\n            &#039;first_name&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;],\r\n            &#039;last_name_kana&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;,&#039;katakana&#039;],\r\n            &#039;first_name_kana&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;max:32&#039;,&#039;katakana&#039;],\r\n            &#039;email&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;email&#039;, &#039;max:128&#039;, &#039;unique:players&#039;],\r\n            &#039;new_password&#039; =&gt; [&#039;required&#039;, &#039;string&#039;, &#039;min:8&#039;,&#039;same:password_confirm&#039;],\r\n        ]);\r\n    }\r\n```\r\n\r\n*Example login*\r\n```php\r\n    public function login(Request $request)\r\n    {\r\n        // Validate the form data\r\n        $this-&gt;validate($request, [\r\n            &#039;email&#039; =&gt; &#039;required|email&#039;,\r\n            &#039;password&#039; =&gt; &#039;required|min:3&#039;\r\n        ]);\r\n//        echo $request-&gt;email;\r\n        // Attempt to log the user in\r\n        if (Auth::guard(&#039;player&#039;)-&gt;attempt([&#039;email&#039; =&gt; $request-&gt;email, &#039;password&#039; =&gt; $request-&gt;password,&#039;deleted_at&#039; =&gt; null], $request-&gt;remember)) {\r\n            // if successful, then redirect to their intended location\r\n            return redirect()-&gt;intended(route(&#039;player.home&#039;));\r\n        }\r\n\r\n        // if unsuccessful, then redirect back to the login with the form data\r\n        return redirect()-&gt;back()-&gt;withInput($request-&gt;only(&#039;email&#039;, &#039;remember&#039;));\r\n    }\r\n```',649,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/649-revision-v1/',0,'revision','',0),(653,1,'2020-12-15 13:36:11','2020-12-15 04:36:11','<h2>Docker ip　取得</h2>\n<p>Ansible でのtestの際に inventory_file にhostのIPを動的に書き込みたい</p>\n<pre><code class=\"language-bash\">docker inspect -f &#039;{{ .NetworkSettings.IPAddress }}&#039; &lt;container&gt;</code></pre>\n<h2>\'docker exec\' is not road env</h2>\n<pre><code class=\"language-bash\">docke exec xxx</code></pre>\n<p>/etc/profile ~/.profile などは自動読み込まない。</p>\n<pre><code class=\"language-bash\">docke exec xxx bash</code></pre>\n<p>等でlogin後は環境変数が有効になる。</p>\n<pre><code class=\"language-bash\">docke exec xxx</code></pre>\n<p>で完結させたい場合は一手間必要。</p>','Docker Memo','Docker系小ネタメモ。随時更新','publish','closed','open','','docker_memo','','','2020-12-15 13:36:11','2020-12-15 04:36:11','## Docker ip　取得\r\nAnsible でのtestの際に inventory_file にhostのIPを動的に書き込みたい\r\n```bash\r\ndocker inspect -f &#039;{{ .NetworkSettings.IPAddress }}&#039; &lt;container&gt;\r\n```\r\n\r\n## \'docker exec\' is not road env\r\n```bash\r\ndocke exec xxx\r\n```\r\n/etc/profile ~/.profile などは自動読み込まない。\r\n\r\n```bash\r\ndocke exec xxx bash\r\n```\r\n等でlogin後は環境変数が有効になる。\r\n```bash\r\ndocke exec xxx\r\n```\r\nで完結させたい場合は一手間必要。\r\n',0,'https://blog.webdimension.jp/?p=653',0,'post','',0),(654,1,'2020-12-15 13:31:13','2020-12-15 04:31:13','<h2>Docker ip　取得</h2>\n<p>Ansible でのtestの際に inventory_file にhostのIPを動的に書き込みたい</p>\n<pre><code class=\"language-bash\">docker inspect -f &#039;{{ .NetworkSettings.IPAddress }}&#039; &lt;container&gt;</code></pre>\n<h2>\'docker exec\' is not road env</h2>\n<pre><code class=\"language-bash\">docke exec xxx</code></pre>\n<p>/etc/profile ~/.profile などは自動読み込まない。</p>\n<pre><code class=\"language-bash\">docke exec xxx bash</code></pre>\n<p>等でlogin後は環境変数が有効になる。</p>\n<pre><code class=\"language-bash\">docke exec xxx</code></pre>\n<p>で完結させたい場合は一手間必要。</p>','Docker Memo','Docker系小ネタメモ。随時更新','inherit','closed','closed','','653-revision-v1','','','2020-12-15 13:31:13','2020-12-15 04:31:13','## Docker ip　取得\r\nAnsible でのtestの際に inventory_file にhostのIPを動的に書き込みたい\r\n```bash\r\ndocker inspect -f &#039;{{ .NetworkSettings.IPAddress }}&#039; &lt;container&gt;\r\n```\r\n\r\n## \'docker exec\' is not road env\r\n```bash\r\ndocke exec xxx\r\n```\r\n/etc/profile ~/.profile などは自動読み込まない。\r\n\r\n```bash\r\ndocke exec xxx bash\r\n```\r\n等でlogin後は環境変数が有効になる。\r\n```bash\r\ndocke exec xxx\r\n```\r\nで完結させたい場合は一手間必要。\r\n',653,'https://blog.webdimension.jp/%e6%9c%aa%e5%88%86%e9%a1%9e/653-revision-v1/',0,'revision','',0),(655,1,'2020-12-15 13:35:56','2020-12-15 04:35:56','','docker_memo','','inherit','closed','closed','','docker_memo-2','','','2020-12-15 13:35:56','2020-12-15 04:35:56','',653,'https://blog.webdimension.jp/wp-content/uploads/2020/12/docker_memo.png',0,'attachment','image/png',0);
/*!40000 ALTER TABLE `wp_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_relationships`
--

DROP TABLE IF EXISTS `wp_term_relationships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_relationships`
--

LOCK TABLES `wp_term_relationships` WRITE;
/*!40000 ALTER TABLE `wp_term_relationships` DISABLE KEYS */;
INSERT INTO `wp_term_relationships` VALUES (7,17,0),(7,18,0),(7,21,0),(9,17,0),(9,18,0),(9,21,0),(14,9,0),(15,9,0),(16,9,0),(17,9,0),(18,9,0),(19,9,0),(26,9,0),(27,10,0),(28,10,0),(45,3,0),(45,12,0),(45,13,0),(58,11,0),(65,17,0),(65,18,0),(65,21,0),(70,10,0),(71,11,0),(110,15,0),(113,16,0),(116,11,0),(117,11,0),(118,17,0),(118,18,0),(118,21,0),(118,23,0),(124,16,0),(124,17,0),(124,18,0),(124,21,0),(126,11,0),(127,11,0),(128,17,0),(128,18,0),(128,19,0),(128,21,0),(131,11,0),(133,12,0),(133,14,0),(133,18,0),(133,21,0),(137,11,0),(138,17,0),(138,18,0),(138,20,0),(138,21,0),(143,17,0),(143,18,0),(143,19,0),(143,21,0),(143,22,0),(147,11,0),(148,11,0),(154,5,0),(154,17,0),(154,18,0),(154,21,0),(164,5,0),(164,17,0),(164,18,0),(164,21,0),(164,24,0),(164,25,0),(164,26,0),(202,7,0),(202,27,0),(202,28,0),(245,8,0),(245,29,0),(249,8,0),(249,30,0),(259,6,0),(259,21,0),(259,32,0),(259,33,0),(259,34,0),(273,4,0),(273,14,0),(294,3,0),(294,14,0),(294,20,0),(294,35,0),(344,5,0),(344,18,0),(344,36,0),(344,37,0),(354,7,0),(354,15,0),(354,38,0),(358,8,0),(358,30,0),(369,3,0),(369,23,0),(369,35,0),(373,5,0),(373,28,0),(373,39,0),(373,40,0),(383,8,0),(383,16,0),(383,41,0),(383,42,0),(438,3,0),(438,24,0),(438,43,0),(438,44,0),(461,1,0),(463,3,0),(463,12,0),(463,45,0),(467,3,0),(467,12,0),(467,45,0),(467,46,0),(469,3,0),(469,32,0),(469,45,0),(469,46,0),(471,3,0),(471,45,0),(471,46,0),(471,47,0),(473,3,0),(473,45,0),(473,48,0),(475,3,0),(475,33,0),(475,45,0),(475,46,0),(475,49,0),(477,3,0),(477,26,0),(477,45,0),(479,1,0),(481,1,0),(483,1,0),(486,1,0),(491,1,0),(494,1,0),(496,1,0),(498,1,0),(504,1,0),(506,1,0),(509,1,0),(511,1,0),(562,3,0),(562,33,0),(562,45,0),(562,49,0),(579,5,0),(579,8,0),(579,21,0),(579,24,0),(579,36,0),(588,1,0),(588,5,0),(588,17,0),(588,24,0),(588,43,0),(588,50,0),(588,51,0),(588,52,0),(594,3,0),(594,5,0),(594,12,0),(594,45,0),(594,53,0),(594,54,0),(601,5,0),(601,7,0),(601,17,0),(601,19,0),(601,50,0),(601,55,0),(601,56,0),(605,3,0),(605,5,0),(605,17,0),(605,24,0),(605,57,0),(608,3,0),(608,12,0),(608,45,0),(611,3,0),(611,12,0),(611,45,0),(614,3,0),(614,12,0),(614,45,0),(618,3,0),(618,5,0),(618,12,0),(618,24,0),(618,45,0),(621,3,0),(621,12,0),(621,45,0),(625,3,0),(625,12,0),(625,45,0),(629,3,0),(629,12,0),(629,45,0),(633,3,0),(633,12,0),(633,45,0),(637,3,0),(637,12,0),(637,45,0),(642,3,0),(642,12,0),(642,45,0),(649,3,0),(649,12,0),(649,45,0),(653,3,0),(653,5,0),(653,24,0),(653,58,0);
/*!40000 ALTER TABLE `wp_term_relationships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_term_taxonomy`
--

DROP TABLE IF EXISTS `wp_term_taxonomy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `description` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=InnoDB AUTO_INCREMENT=59 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_term_taxonomy`
--

LOCK TABLES `wp_term_taxonomy` WRITE;
/*!40000 ALTER TABLE `wp_term_taxonomy` DISABLE KEYS */;
INSERT INTO `wp_term_taxonomy` VALUES (1,1,'category','',0,1),(2,2,'link_category','',0,0),(3,3,'category','',0,26),(4,4,'category','',0,1),(5,5,'category','',0,11),(6,6,'category','',0,1),(7,7,'category','',0,3),(8,8,'category','',0,5),(9,9,'nav_menu','',0,7),(10,10,'nav_menu','',0,3),(11,11,'nav_menu','',0,10),(12,12,'post_tag','',0,16),(13,13,'post_tag','',0,1),(14,14,'post_tag','',0,3),(15,15,'post_tag','',0,2),(16,16,'post_tag','',0,3),(17,17,'post_tag','',0,13),(18,18,'post_tag','',0,12),(19,19,'post_tag','',0,3),(20,20,'post_tag','',0,2),(21,21,'post_tag','',0,13),(22,22,'post_tag','',0,1),(23,23,'post_tag','',0,2),(24,24,'post_tag','',0,7),(25,25,'post_tag','',0,1),(26,26,'post_tag','',0,2),(27,27,'post_tag','',0,1),(28,28,'post_tag','',0,2),(29,29,'post_tag','',0,1),(30,30,'post_tag','',0,2),(32,32,'post_tag','',0,2),(33,33,'post_tag','',0,3),(34,34,'post_tag','',0,1),(35,35,'post_tag','',0,2),(36,36,'post_tag','',0,2),(37,37,'post_tag','',0,1),(38,38,'post_tag','',0,1),(39,39,'post_tag','',0,1),(40,40,'post_tag','',0,1),(41,41,'post_tag','',0,1),(42,42,'post_tag','',0,1),(43,43,'post_tag','',0,2),(44,44,'post_tag','',0,1),(45,45,'post_tag','',0,20),(46,46,'post_tag','',0,4),(47,47,'post_tag','',0,1),(48,48,'post_tag','',0,1),(49,49,'post_tag','',0,2),(50,50,'post_tag','',0,2),(51,51,'post_tag','',0,1),(52,52,'post_tag','',0,1),(53,53,'post_tag','',0,1),(54,54,'post_tag','',0,1),(55,55,'post_tag','',0,1),(56,56,'post_tag','',0,1),(57,57,'post_tag','',0,1),(58,58,'post_tag','',0,1);
/*!40000 ALTER TABLE `wp_term_taxonomy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_termmeta`
--

DROP TABLE IF EXISTS `wp_termmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_termmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`meta_id`),
  KEY `term_id` (`term_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_termmeta`
--

LOCK TABLES `wp_termmeta` WRITE;
/*!40000 ALTER TABLE `wp_termmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_termmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_terms`
--

DROP TABLE IF EXISTS `wp_terms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `slug` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  `term_order` int(4) DEFAULT '0',
  PRIMARY KEY (`term_id`),
  KEY `slug` (`slug`(191)),
  KEY `name` (`name`(191))
) ENGINE=InnoDB AUTO_INCREMENT=59 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_terms`
--

LOCK TABLES `wp_terms` WRITE;
/*!40000 ALTER TABLE `wp_terms` DISABLE KEYS */;
INSERT INTO `wp_terms` VALUES (1,'未分類','%e6%9c%aa%e5%88%86%e9%a1%9e',0,0),(2,'Contributors','contributors',0,0),(3,'Programing','programing',0,0),(4,'DataBase','mysql',0,0),(5,'Linux','linux',0,0),(6,'FrontEnd','frontend',0,0),(7,'Security','security',0,0),(8,'Tools','tools',0,0),(9,'Global Menu','global-menu',0,0),(10,'environment','environment',0,0),(11,'environment-content','environment-content',0,0),(12,'PHP','php',0,0),(13,'Composer','composer',0,0),(14,'MySQL','mysql',0,0),(15,'Command','command',0,0),(16,'Vim','vim',0,0),(17,'CentOS7','centos7',0,0),(18,'Vagrant','vagrant',0,0),(19,'Apache','apache',0,0),(20,'Wordpress','wordpress',0,0),(21,'開発環境','%e9%96%8b%e7%99%ba%e7%92%b0%e5%a2%83',0,0),(22,'MailCatcher','mailcatcher',0,0),(23,'SSH','ssh',0,0),(24,'Docker','docker',0,0),(25,'Xdebug','xdebug',0,0),(26,'PHPUnit','phpunit',0,0),(27,'Aircracking-ng','aircracking-ng',0,0),(28,'Parrot Security OS','parrot-security-os',0,0),(29,'VPN','vpn',0,0),(30,'Chrome','chrome',0,0),(32,'Node','node',0,0),(33,'Npm','npm',0,0),(34,'IDEA','idea',0,0),(35,'Shell Script','shell',0,0),(36,'VMwear','vmwear',0,0),(37,'Network','network',0,0),(38,'Password','password',0,0),(39,'tmux','tmux',0,0),(40,'tmuxinator','tmuxinator',0,0),(41,'MAC','mac',0,0),(42,'便利','%e4%be%bf%e5%88%a9',0,0),(43,'Python','python',0,0),(44,'Jupyter','jupyter',0,0),(45,'Laravel','laravel',0,0),(46,'Vue.js','vue-js',0,0),(47,'Bootstrap','bootstrap',0,0),(48,'webpack','webpack',0,0),(49,'Stylelint','stylelint',0,0),(50,'Ansible','ansible',0,0),(51,'testinfra','testinfra',0,0),(52,'SoftEther VPN','softether-vpn',0,0),(53,'CI/CD','ci-cd',0,0),(54,'Circle-CI','circle-ci',0,0),(55,'Let\'s Encrypt','lets-encrypt',0,0),(56,'Cron','cron',0,0),(57,'GitHub Actions','github-actions',0,0),(58,'Linux','linux',0,0);
/*!40000 ALTER TABLE `wp_terms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_usermeta`
--

DROP TABLE IF EXISTS `wp_usermeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=44 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_usermeta`
--

LOCK TABLES `wp_usermeta` WRITE;
/*!40000 ALTER TABLE `wp_usermeta` DISABLE KEYS */;
INSERT INTO `wp_usermeta` VALUES (1,1,'nickname','garaccii'),(2,1,'first_name',''),(3,1,'last_name',''),(4,1,'description',''),(5,1,'rich_editing','false'),(6,1,'syntax_highlighting','true'),(7,1,'comment_shortcuts','false'),(8,1,'admin_color','fresh'),(9,1,'use_ssl','0'),(10,1,'show_admin_bar_front','true'),(11,1,'locale',''),(12,1,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(13,1,'wp_user_level','10'),(15,1,'show_welcome_panel','1'),(17,1,'wp_dashboard_quick_press_last_post_id','656'),(18,1,'community-events-location','a:1:{s:2:\"ip\";s:10:\"118.27.1.0\";}'),(19,1,'managenav-menuscolumnshidden','a:5:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";i:4;s:15:\"title-attribute\";}'),(20,1,'metaboxhidden_nav-menus','a:2:{i:0;s:12:\"add-post_tag\";i:1;s:15:\"add-post_format\";}'),(22,1,'closedpostboxes_environment','a:1:{i:0;s:11:\"categorydiv\";}'),(23,1,'metaboxhidden_environment','a:0:{}'),(24,1,'closedpostboxes_page','a:2:{i:0;s:22:\"html2markdown_meta_box\";i:1;s:10:\"postcustom\";}'),(25,1,'metaboxhidden_page','a:2:{i:0;s:16:\"commentstatusdiv\";i:1;s:9:\"authordiv\";}'),(26,1,'nav_menu_recently_edited','11'),(27,1,'wp_user-settings','libraryContent=browse&imgsize=full&widgets_access=off&posts_list_mode=list'),(28,1,'wp_user-settings-time','1581657611'),(31,1,'closedpostboxes_post','a:1:{i:0;s:9:\"formatdiv\";}'),(32,1,'metaboxhidden_post','a:4:{i:0;s:13:\"trackbacksdiv\";i:1;s:10:\"postcustom\";i:2;s:16:\"commentstatusdiv\";i:3;s:9:\"authordiv\";}'),(33,1,'meta-box-order_post','a:3:{s:4:\"side\";s:99:\"html2markdown_meta_box,formatdiv,submitdiv,categorydiv,tagsdiv-post_tag,postimagediv,sep_metabox_id\";s:6:\"normal\";s:71:\"trackbacksdiv,postcustom,slugdiv,postexcerpt,commentstatusdiv,authordiv\";s:8:\"advanced\";s:0:\"\";}'),(34,1,'screen_layout_post','2'),(35,1,'_pum_dismissed_alerts','a:0:{}'),(36,1,'closedpostboxes_dashboard','a:0:{}'),(37,1,'metaboxhidden_dashboard','a:0:{}'),(38,1,'wp_backwpup_dinotopt_backwpup_notice_promoter','1'),(39,1,'meta-box-order_dashboard','a:4:{s:6:\"normal\";s:48:\"dashboard_right_now,themeisle,dashboard_activity\";s:4:\"side\";s:39:\"dashboard_quick_press,dashboard_primary\";s:7:\"column3\";s:0:\"\";s:7:\"column4\";s:0:\"\";}'),(40,1,'dismissed_wp_pointers','custom-post-type-permalinks-settings'),(41,1,'wp_media_library_mode','grid'),(42,1,'edit_post_per_page','30'),(43,1,'wpcf7_hide_welcome_panel_on','a:1:{i:0;s:3:\"5.1\";}');
/*!40000 ALTER TABLE `wp_usermeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_users`
--

DROP TABLE IF EXISTS `wp_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_pass` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_nicename` varchar(50) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_email` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_url` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`),
  KEY `user_email` (`user_email`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_users`
--

LOCK TABLES `wp_users` WRITE;
/*!40000 ALTER TABLE `wp_users` DISABLE KEYS */;
INSERT INTO `wp_users` VALUES (1,'garaccii','$P$B0XUEjjte08pw7pN86X2l/rQo6hlMf0','garaccii','office@webdimension.jp','','2019-06-07 08:39:17','',0,'garaccii');
/*!40000 ALTER TABLE `wp_users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wp_wpmailsmtp_tasks_meta`
--

DROP TABLE IF EXISTS `wp_wpmailsmtp_tasks_meta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_wpmailsmtp_tasks_meta` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `action` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `data` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `date` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wp_wpmailsmtp_tasks_meta`
--

LOCK TABLES `wp_wpmailsmtp_tasks_meta` WRITE;
/*!40000 ALTER TABLE `wp_wpmailsmtp_tasks_meta` DISABLE KEYS */;
INSERT INTO `wp_wpmailsmtp_tasks_meta` VALUES (1,'wp_mail_smtp_admin_notifications_update','W10=','2020-12-09 11:16:03'),(2,'wp_mail_smtp_admin_notifications_update','W10=','2020-12-14 02:48:03'),(3,'wp_mail_smtp_admin_notifications_update','W10=','2020-12-14 02:48:28'),(4,'wp_mail_smtp_admin_notifications_update','W10=','2020-12-15 02:49:42'),(5,'wp_mail_smtp_admin_notifications_update','W10=','2021-10-25 08:29:53');
/*!40000 ALTER TABLE `wp_wpmailsmtp_tasks_meta` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-01-12 14:27:31
