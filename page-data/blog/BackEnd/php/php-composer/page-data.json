{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/BackEnd/php/php-composer/",
    "result": {"data":{"site":{"siteMetadata":{"title":"おっさんWEBエンジニア奮闘記"}},"markdownRemark":{"id":"1522379d-94bd-508d-b8f7-64bfd05e1ddc","excerpt":"PHP Composer PHP Composer とは PHP のパッケージ管理ツール と呼ばれてます。 Node.js や npm を使ったことある方にはなんとなくわかるでしょうか。 Node.js の npm と似た扱いになります。 Node.js では package.json に当たる部分が Composer…","html":"<h1>PHP Composer</h1>\n<h2>PHP Composer とは</h2>\n<p><em>PHP のパッケージ管理ツール</em> と呼ばれてます。<br>\nNode.js や npm を使ったことある方にはなんとなくわかるでしょうか。<br>\nNode.js の npm と似た扱いになります。<br>\nNode.js では package.json に当たる部分が Composer では composer.json になります。</p>\n<p><em>なにがいいのかというと</em></p>\n<ul>\n<li>ライブラリーを簡単にインストールできる</li>\n<li>ライブラリーの依存関係を解決してくれる</li>\n<li>composer.json の内容からパッケージをインストールするのでチームでの共有がしやすい。(プロジェクト進行中にパッケージの追加があっても composer.json を Git で共有すればよい)</li>\n<li>インストールされたパッケージは基本 Git の管理外なので Git-Repository\nに影響をあたえない。</li>\n</ul>\n<p>と言われてます。</p>\n<h3>Composer がない時代</h3>\n<p>経験談ですが・・・<br>\nあるシステム(仮に EC サイト)に Pear ライブラリ から PearDB\nをインストールしランキングを表示させるモジュールを作る。\nサイト内でランキングを表示する。</p>\n<p>その後</p>\n<p>ランミング結果を xml 化し軽量化および外部配信を試みる 。<br>\n<em>XML_Query2XML</em><br>\nという SQL の結果を簡単に xml ファイルへ変換してくれるライブラリーをインストール</p>\n<p>それなりのスクリプトを組んで実行してみる。</p>\n<p>PearDB には対応してません。　とエラーになる。<br>\nいろいろググって Pear から MDB2 というライブラリは PearDB 　の後継だと知る。<br>\nMDB2 をインストールおよび動作チェック。</p>\n<p>もう[めんどくさい]{.under_line}</p>\n<h3>Composer があると</h3>\n<p>composer.json に 必要なライブラリーを記述します。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"require\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"php\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\">=5.5.9\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"laravel/framework\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5.2.*\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span>\n  <span class=\"token property\">\"require-dev\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"phpunit/phpunit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3.7.*\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>この記述例をもとに Repository からダウンロートしてくれます。\nその時依存関係を解決を Composer が試みてくれます。</p>\n<h3>Autoloader</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"autoload\"</span><span class=\"token operator\">:</span>\n<span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"psr-4\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"myhoge\\\": \"</span>src/\"\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>オートローダーはファイルを自動で読み込んでくれる仕組みです。</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"> <span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">myhoge</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">hoge</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">hogehoge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token delimiter important\">?></span></span></code></pre></div>\n<p>ディレクトリ src を名前空間 ( namespace ) myhoge で読み込めます。</p>\n<h2>PHP Composer を CentOS7 にインストール</h2>\n<p>以下 Root 権限　もしくは sudo</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"</span></code></pre></div>\n<p>公式サイト推奨のインストール方法です。<br>\ncomposer-setup.php のダウンロードをしてます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># php composer-setup.php</span></code></pre></div>\n<p>composer の本体である composer.phar を作ります。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># php -r \"unlink('composer-setup.php');\"</span></code></pre></div>\n<p>composer.phar ができたのでダウンロードした omposer-setup.php を削除します。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># mv composer.phar /usr/local/bin/composer</span></code></pre></div>\n<p>composer をグローバルで使えるよう/usr/local/bin/ に配置してます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># which composer</span>\n/usr/local/bin/composer</code></pre></div>\n<p>composer が配置されたか確認</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># composer --version</span>\nComposer version <span class=\"token number\">1.8</span>.3 <span class=\"token number\">2019</span>-01-30 08:31:33</code></pre></div>\n<p>Version 確認</p>\n<p>これで Composer の準備が整いました。</p>","frontmatter":{"title":"PHP Composer","date":"June 09, 2019","post_modified":"September 23, 2019","description":"PHP のパッケージマネージャー Composer .その特徴とインストール","tags":["PHP","Composer"],"draft":false}},"previous":null,"next":{"fields":{"slug":"/Environment/vagrant-template-centos7/"},"frontmatter":{"title":"汎用的なVagrant( CentOS7 )"}}},"pageContext":{"id":"1522379d-94bd-508d-b8f7-64bfd05e1ddc","previousPostId":null,"nextPostId":"e2ca663a-e6a8-550c-8225-cdebabd3af6f","draft":false}},
    "staticQueryHashes": ["1126706167","1176493165","1188992244","1314910092","1760060771","2772418575"]}