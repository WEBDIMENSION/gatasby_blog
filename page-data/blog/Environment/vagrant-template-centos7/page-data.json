{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/Environment/vagrant-template-centos7/",
    "result": {"data":{"site":{"siteMetadata":{"title":"おっさんWEBエンジニア奮闘記"}},"markdownRemark":{"id":"e2ca663a-e6a8-550c-8225-cdebabd3af6f","excerpt":"汎用的な Vagrant( CentOS7 ) おれおれ Vagrantfile といっても特別なにかすごいことやってるわけでなく汎用的なテンプレートです。 Docker のようなコンテナ型ではなくガチの CentOS…","html":"<h1>汎用的な Vagrant( CentOS7 )</h1>\n<h2>おれおれ Vagrantfile</h2>\n<p>といっても特別なにかすごいことやってるわけでなく汎用的なテンプレートです。<br>\nDocker のようなコンテナ型ではなくガチの CentOS 上で何か実験したい、遊びたい時などなど用途です。<br>\n毎回一から構築するのは[めんどくさい]{.under_line}ので Vagrant の Provisioning で自動化します。</p>\n<p>VirtualBOx,Vagrant はインストール済み前提です。</p>\n<p>provision/provision/settings_local.yaml</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">vm:\n <span class=\"token comment\"># Box名 なんでも可</span>\n boxName: <span class=\"token string\">\"centos7\"</span>\n <span class=\"token comment\"># 元となるboxのURL</span>\n boxURL: <span class=\"token string\">\"https://vagrantcloud.com/centos/boxes/7/versions/1905.1/providers/virtualbox.box\"</span>\n <span class=\"token comment\"># IPアドレスを指定</span>\n localIP: <span class=\"token string\">\"192.168.33.100\"</span>\nsync:\n <span class=\"token comment\"># 同期するディレクトリを配列で指定</span>\n  dir:\n    - localPath: <span class=\"token string\">\"../../workspace/http_doc\"</span>\n      vmPath: <span class=\"token string\">\"/var/www/html\"</span>\n    - localPath: <span class=\"token string\">\"../../workspace/mysql\"</span>\n      vmPath: <span class=\"token string\">\"/var/lib/mysql\"</span>\ncopyFiles:\n <span class=\"token comment\"># Vagrantへコピーしたいファイル配列で指定</span>\n <span class=\"token comment\"># localPathで指定したファイルがVagrant上 /vagrant/に　fileNameに指定した名前でコピーされる。</span>\n <span class=\"token comment\"># command: に記述したコマンドを実行される。</span>\n <span class=\"token comment\"># 下記ではHost側のssh-keyをVagrantへコピー。sshやgit cloneなどHost側と同じ設定で行える</span>\n <span class=\"token comment\"># sshを多様する場合は ~/.ssh/config をコピーしてもよいかも。</span>\n\n  - fileName: <span class=\"token string\">\"id_rsa.pub\"</span>\n    localPath: <span class=\"token string\">\"~/.ssh/id_rsa.pub\"</span>\n    command: <span class=\"token string\">\"cat /vagrant/id_rsa.pub >> ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; rm /vagrant/id_rsa.pub\"</span>\n  - fileName: <span class=\"token string\">\"id_rsa\"</span>\n    localPath: <span class=\"token string\">\"~/.ssh/id_rsa\"</span>\n    command: <span class=\"token string\">\"cp /vagrant/id_rsa ~/.ssh/id_rsa &amp;&amp; rm /vagrant/id_rsa\"</span>\n  - fileName: <span class=\"token string\">\".bash_aliases\"</span>\n    localPath: <span class=\"token string\">\"~/.bash_aliases\"</span>\n    command: <span class=\"token string\">\"cp /vagrant/.bash_aliases ~/.bash_aliases &amp;&amp; rm /vagrant/.bash_aliases\"</span></code></pre></div>\n<p>Vagrantfile</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># provision/settings-local.yml を load する</span>\nrequire <span class=\"token string\">'yaml'</span>\nsettings <span class=\"token operator\">=</span> YAML.load_file <span class=\"token string\">'provision/settings_local.yaml'</span>\n\n<span class=\"token comment\"># provision/settings-local.yml 内 copyFiles: をHost側の ~/vagrant/box名/ にコピーする。</span>\n<span class=\"token comment\"># ここに置かれたファイルはVagrant 立ち上げ時Vagrant側 /vagrant/へコピーされる</span>\nsettings<span class=\"token punctuation\">[</span><span class=\"token string\">'copyFiles'</span><span class=\"token punctuation\">]</span>.each <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>i<span class=\"token operator\">|</span>\n  system<span class=\"token punctuation\">(</span><span class=\"token string\">'cp '</span> + i<span class=\"token punctuation\">[</span><span class=\"token string\">'localPath'</span><span class=\"token punctuation\">]</span> + <span class=\"token string\">' '</span> + Dir.home + <span class=\"token string\">'/vagrant/'</span> + settings<span class=\"token punctuation\">[</span><span class=\"token string\">'vm'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'boxName'</span><span class=\"token punctuation\">]</span>+ <span class=\"token string\">'/'</span> + i<span class=\"token punctuation\">[</span><span class=\"token string\">'fileName'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nend\n\n<span class=\"token comment\"># provision/settings-local.yml 内の sync: の共有ディレクトリをマウント</span>\n<span class=\"token comment\"># マウントタイプは デフォルトの virtualbox にしてますが Mac の場合は nfs もあり。</span>\n<span class=\"token comment\"># nfs は早いがパーミッションにちょっと難あり? Win なら SMB?</span>\nsettings<span class=\"token punctuation\">[</span><span class=\"token string\">'sync'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'dir'</span><span class=\"token punctuation\">]</span>.each <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>i<span class=\"token operator\">|</span>\n  <span class=\"token comment\">#config.vm.synced_folder i['localPath'], i['vmPath'], type: \"nfs\", nfs_export: true</span>\n  config.vm.synced_folder i<span class=\"token punctuation\">[</span><span class=\"token string\">'localPath'</span><span class=\"token punctuation\">]</span>, i<span class=\"token punctuation\">[</span><span class=\"token string\">'vmPath'</span><span class=\"token punctuation\">]</span>, type: <span class=\"token string\">\"virtualbox\"</span>\n  end\n\n<span class=\"token comment\"># provision.sh では wget git をインストール しています。</span>\n  config.vm.provision :shell, :path <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"provision/provision.sh\"</span>\n\n<span class=\"token comment\"># privileged: false はroot権限でなく一般ユーザー権限で実行</span>\n<span class=\"token comment\"># ここでは bash_id, vim (lua,python3....)をインストール</span>\n  config.vm.provision :shell, privileged: false, :path <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"provision/privileged.sh\"</span>\n\n<span class=\"token comment\"># provision/settings-local.yml 内 copyFiles: のコマンド実行</span>\n<span class=\"token comment\"># run: \"always\" は Vagrant立ち上げ時 vagrant up --provision としなくても vagrant up でも実行される。</span>\nsettings<span class=\"token punctuation\">[</span><span class=\"token string\">'copyFiles'</span><span class=\"token punctuation\">]</span>.each <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>i<span class=\"token operator\">|</span>\n        <span class=\"token variable\">$script</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">[</span><span class=\"token string\">'command'</span><span class=\"token punctuation\">]</span>\n        config.vm.provision :shell, run: <span class=\"token string\">\"always\"</span>, privileged: false, inline: <span class=\"token variable\">$script</span>\n    end\n\n<span class=\"token comment\"># Vagrant側のHost名を設定</span>\n <span class=\"token variable\">$host_script</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hostnamectl set-hostname \"</span> + settings<span class=\"token punctuation\">[</span><span class=\"token string\">'vm'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hostName'</span><span class=\"token punctuation\">]</span>.to_s\n   config.vm.provision :shell, run: <span class=\"token string\">\"always\"</span>, inline: <span class=\"token variable\">$host_script</span>\n\n<span class=\"token comment\"># この場合は~/.ssh/configに</span>\n<span class=\"token comment\"># host *</span>\n<span class=\"token comment\"># 10     StrictHostKeyChecking no</span>\n<span class=\"token comment\"># を追記。ssh接続の際の確認メッセージを無視する。</span>\n<span class=\"token comment\"># vimrcをレポジトリからダウンロード をしてます。</span>\nconfig.vm.provision :shell, privileged: false, :path <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"provision/custom_after.sh\"</span></code></pre></div>\n<p>~/vagrant/box_name に配置。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> ~/vagrant/box_name/\n$ vagrant up</code></pre></div>\n<p>でインストール開始。初回起動時は box を生成するため時間がかかります。<br>\n壊れても</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ vagrant up --provision</code></pre></div>\n<p>すれば再生成されます。(時間かかるけど…)</p>","frontmatter":{"title":"汎用的なVagrant( CentOS7 )","date":"September 15, 2019","post_modified":"September 23, 2019","description":" ' vagrant up' ワンコマンドで Git, Vimをインストール。ホスと側ssh-keyをコピー、.vimrcを git cloneする。'すぐに使える' がテーマ。設定ファイルを外部ファイル化し使い回しも楽。 ","tags":["Linux","Vagrant","開発環境"],"draft":false}},"previous":{"fields":{"slug":"/BackEnd/php/php-composer/"},"frontmatter":{"title":"PHP Composer"}},"next":{"fields":{"slug":"/Environment/docke-on-vagrant/"},"frontmatter":{"title":"Docker on Vagrant をがんばってみた"}}},"pageContext":{"id":"e2ca663a-e6a8-550c-8225-cdebabd3af6f","previousPostId":"1522379d-94bd-508d-b8f7-64bfd05e1ddc","nextPostId":"4ec9c476-89a3-5c19-b832-5360b75c701c","draft":false}},
    "staticQueryHashes": ["1126706167","1176493165","1188992244","1314910092","1760060771","2772418575","3679674316"]}