{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/Tools/Intellij/snippet/",
    "result": {"data":{"site":{"siteMetadata":{"title":"おっさんWEBエンジニア奮闘記"}},"markdownRemark":{"id":"3ba1e3fc-2552-5977-a4db-81071ffa135b","excerpt":"","html":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">annotated(&lt;annotation>)\n\n指定された修飾名でアノテーションが付けられたクラス、メソッド、またはフィールドを返します。プロジェクトに指定されたアノテーションを持つプログラム要素が複数ある場合は、選択可能なリストが表示されます。\n\n例: annotated(\"java.lang.Deprecated\") は、@Deprecated でアノテーションされたすべてのプログラム要素を返します。\n\nRESTful Web サービスおよび Web サービスグループ内の一部の事前定義ライブテンプレートは、annotated() 関数を使用します。\n\narrayVariable()\n\n現在のスコープで最後に宣言された配列を（メソッド変数またはクラスフィールドとして）返します。現在のスコープで宣言されている配列が複数ある場合は、選択可能なリストも表示されます。\n\n例: 次のメソッドがあり、両方の配列宣言の後に arrayVariable() 関数を使用する変数でテンプレートを展開すると、デフォルトで b 配列が返され、クラスフィールドとして定義されている他の配列とともに a を選択するように提案されます。\n\npublic String getCode() {\n\n    int a[] = new int[5];\n    int b[] = new int[10];\n\n    return code;\n}\nCopied!\n反復グループ内のいくつかの事前定義されたライブテンプレート（itar および ritar）は、arrayVariable() 関数を使用します。\n\nblockCommentEnd()\n\n現在の言語のコンテキストでブロックコメントの終わりを示す文字を返します。\n\n例: Java ファイルでは */ を返します。\n\nblockCommentStart()\n\n現在の言語コンテキストでのブロックコメントの開始を示す文字を返します。\n\n例: Java ファイルでは /* を返します。\n\ncamelCase(&lt;String>)\n\n文字列をキャメルケースに変換します。\n\n例: camelCase(\"my-text-file\")、camelCase(\"my text file\")、camelCase(\"my_text_file\") はすべて myTextFile を返します。\n\ncapitalize(&lt;String>)\n\n文字列の最初の文字を大文字にします。\n\n例: capitalize(\"name\") は Name を返します。または、capitalize(camelCase(\"my awesome class\")) と組み合わせて MyAwesomeClass を取得することもできます。\n\ncapitalizeAndUnderscore(&lt;String>)\n\n文字列のすべての文字を大文字にし、パーツ間にアンダースコアを挿入します。\n\n例: capitalizeAndUnderscore(\"FooBar\")、capitalizeAndUnderscore(\"foo bar\")、capitalizeAndUnderscore(\"foo-bar\") はすべて FOO_BAR を返します。\n\ncastToLeftSideType()\n\n必要に応じて、右側の式を左側の式の型にキャストします。\n\n反復グループのいくつかの事前定義テンプレートは、castToLeftSideType() 関数を使用して、未加工のタイプとジェネリクスタイプの両方に単一のテンプレートを設定します。\n\nrightSideType() と比較してください。\n\nclassName()\n\n現在のクラスの名前を返します（テンプレートを展開した場所）。コンストラクターテンプレートに役立ちます。\n\nclipboard()\n\nシステムクリップボードの内容を返します。\n\ncommentEnd()\n\n現在の言語コンテキストでコメントの終わりを示す文字を返します。行コメントのある言語の場合、戻り値は空です。\n\ncommentStart()\n\n現在の言語コンテキストでコメントの開始を示す文字を返します。行コメントのある言語の場合、戻り値は lineCommentStart() と同じように行コメントの始まりです。\n\ncomplete()\n\n変数の位置でコード補完を呼び出します。\n\ncompleteSmart()\n\n変数の位置でスマート型補完を呼び出します。\n\ncomponentTypeOf(&lt;array>)\n\n配列のコンポーネント型を返します。\n\n例: arrayVariable() の戻り値を componentTypeOf() 関数に渡すことができます。 itar テンプレートは、このロジックを使用して、配列の反復要素を適切に指定します。\n\nconcat(&lt;String>, ...)\n\nパラメーターとして関数に渡されたすべての文字列の連結を返します。\n\n例: concat(date(),\" \",user()) は、スペースで区切られた現在のシステム日付とユーザー名を返します。\n\ncurrentPackage()\n\n現在のパッケージの名前を返します（テンプレートを展開したクラスを含む）。\n\ndate([format])\n\n現在のシステム日付を返します。\n\nデフォルトでは、パラメーターなしで、現在のシステム形式で日付を返します。別の形式を使用するには、SimpleDateFormat(英語) 仕様に従ってパラメーターを指定します。例: date(\"Y-MM-d, E, H:m\") は、2020-02-27, Thu, 16:11 としてフォーマットされた日付を返します。\n\ndbColumns()\n\nテーブルまたはビューの列のリストを返します。 dbColumns() は、コンテキストライブテンプレート（たとえば、ins）で使用されます。オブジェクトを右クリックして SQL スクリプトを選択すると、コンテキストライブテンプレートにアクセスできます。\n\ndbObjectName()\n\nテーブルまたはビューの名前を返します。 dbObjectName() は、コンテキストライブテンプレート（たとえば、top）で使用されます。オブジェクトを右クリックして SQL スクリプトを選択すると、コンテキストライブテンプレートにアクセスできます。\n\ndecapitalize(&lt;String>)\n\n文字列の最初の文字を対応する小文字に置き換えます。\n\n例: decapitalize(\"Name\") は name を返します。\n\ndescendantClassEnum(&lt;String>)\n\n指定されたクラスの子を返します。\n\n複数の子がある場合は、選択可能なサブクラスのリストが表示されます。例: descendantClassEnum(\"java.lang.Number\") は、java.lang.Float、java.math.BigDecimal などのすべての数値型クラスを返します。\n\nenum(&lt;String>, ...)\n\nテンプレートが展開されたときに補完が提案される文字列のリストを返します。\n\n例: enum(\"Foo\",\"Bar\",\"Baz\") は、指定された文字列の 1 つを選択できるリストを表示します。\n\nescapeString(&lt;String>)\n\n結果を Java 文字列で使用できるように、特殊文字をエスケープします。\n\n例: タブ文字を \\t で置き換え、改行文字を \\n で置き換え、バックスラッシュを \\\\ としてエスケープし、引用符を \\\" としてエスケープします。\n\nexpectedType()\n\nテンプレートが展開される式の予想される型を返します（割り当ての右側、return の後、メソッドパラメーターなど）。\n\nfileName()\n\n現在のファイルの名前とその拡張子を返します。\n\nfileNameWithoutExtension()\n\n現在のファイルの名前を拡張子なしで返します。\n\nfilePath()\n\n現在のファイルへの絶対パスを返します。\n\nfileRelativePath()\n\n現在のプロジェクトに相対的な現在のファイルパスを返します。特定のファイルの相対パスを確認するには、ファイルを右クリックして参照をコピーを選択するか、⌥⇧ ⌘ C を押します。\n\nfirstWord(&lt;String>)\n\nパラメーターとして渡された文字列の最初の単語を返します。\n\n例: firstWord(\"one two three\") は one を返します。\n\ngroovyScript(&lt;String>, [arg, ...])\n\n文字列として渡された Groovy スクリプトを実行します。\n\n最初の引数は、スクリプトのテキストまたはスクリプトを含むファイルへのパスを含む文字列です。この関数は、他のオプションの引数を _1、_2、_3、...、_n 変数の値としてスクリプトに渡します。また、_editor 変数を使用して、スクリプト内から現在のエディターにアクセスできます。\n\n次の例は、選択したテキストを単語に分割し、番号付きリストとして表示する groovyScript() 関数を示しています。\n\ngroovyScript(\"def result = ''; _1.split().eachWithIndex { item, index -> result = result + index.next() + '. ' + item + System.lineSeparator() }; return result;\", SELECTION);\nCopied!\nguessElementType(&lt;Collection>)\n\njava.util.Collection に格納されている可能性のある要素のタイプを返します。IntelliJ IDEA は、コレクションから要素を追加または抽出して、そのタイプを定義するコードを探します。\n\niterableComponentType(&lt;Iterable>)\n\n配列やコレクションなどの反復可能なオブジェクトのタイプを返します。\n\niterableVariable()\n\n現在のスコープ内で最後に宣言された反復可能なオブジェクト（配列やコレクションなど）を返します。現在のスコープに複数の反復可能なオブジェクトがある場合は、選択可能なリストも表示されます。\n\n事前定義されたライブテンプレート iter は、iterableVariable() 関数を使用します。\n\nlineCommentStart()\n\n現在の言語コンテキストでの行コメントの開始を示す文字を返します。\n\nlineNumber()\n\n現在の行番号を返します。\n\nlowercaseAndDash(&lt;String>)\n\n文字列を小文字に変換し、セパレータとして n ダッシュを挿入します。例: lowercaseAndDash(\"MyExampleName\") と lowercaseAndDash(\"my example name\") はどちらも my-example-name を返します。\n\nmethodName()\n\nテンプレートが展開されるメソッドの名前を返します。\n\nmethodParameterTypes()\n\nテンプレートが展開されるメソッドのパラメーター型のリストを返します。\n\nmethodParameters()\n\nテンプレートが展開されるメソッドのパラメーター名のリストを返します。\n\nmethodReturnType()\n\nテンプレートが展開される現在のメソッドによって返される値のタイプを返します。\n\nqualifiedClassName()\n\nテンプレートが展開される現在のクラスの完全修飾名を返します。\n\nregularExpression(&lt;String>, &lt;Pattern>, &lt;Replacement>)\n\nString 内のすべての Pattern を検索し、Replacement に置き換えます。パターンを正規表現として指定して、文字列内で一致するすべてのものを検索できます。\n\nrightSideType()\n\n右側の式の型で左側の変数を宣言します。\n\n反復グループのいくつかの事前定義テンプレートは、rightSideType() 関数を使用して、未加工のタイプとジェネリクスタイプの両方に単一のテンプレートを設定します。\n\ncastToLeftSideType() と比較してください。\n\nsnakeCase(&lt;String>)\n\n文字列を snake_case に変換します。例: snakeCase(\"fooBar\") と snakeCase(\"foo bar\") はどちらも foo_bar を返します。\n\nspaceSeparated(&lt;String>)\n\n区切り文字としてスペースを含む指定された文字列を返します。例: spaceSeparated(\"fooBar\") は foo Bar を返し、spaceSeparated(\"Foo_BAR\") は Foo BAR を返します。\n\nspacesToUnderscores(&lt;String>)\n\nパラメーターとして渡された文字列内のスペースをアンダースコアに置き換えます。例: spacesToUnderscores(\"foo bar BAZ\") は foo_bar_BAZ を返します。\n\nsubstringBefore(&lt;String>, &lt;Delimeter>)\n\n指定された区切り文字までの部分文字列を返します。これは、テストファイル名の拡張子を削除できます。例: component-test.js という名前のファイルで使用されている場合、substringBefore(fileName(),\".\") は component-test を返します。\n\nsubtypes(&lt;String>)\n\n現在のスコープで文字列として渡されたタイプのサブタイプを返します。\n\n事前定義された lazy ライブテンプレートは、subtypes(typeOfVariable(VAR)) 関数を使用して、そのサブ型の 1 つで変数の遅延初期化を実行します。\n\nsuggestFirstVariableName(&lt;String>)\n\n指定されたコンテキストでパラメーターとして渡された型に割り当てられる可能性のあるすべての変数を返します。\n\nこれは variableOfType() に似ていますが、true、false、this、super を提案していません。\n\nsuggestIndexName()\n\n最も一般的に使用されるものからの反復でインデックス変数の推奨名を返します: i、j、k など（現在のスコープで使用されていない最初の名前）。\n\n反復グループ（fori、itar、ritar）の事前定義されたテンプレートの一部は、suggestIndexName() 関数を使用して適切なインデックス変数名を提案します。\n\nsuggestVariableName()\n\n変数の命名規則を参照するコードスタイル設定に従って、変数の型とその初期化式に基づいて変数の名前を提案します。\n\n例: 反復内の要素を保持する変数の場合、IntelliJ IDEA は、反復されたコンテナーの名前を考慮して、最も妥当な名前を推測します。反復グループ（itar、itco、iten）の事前定義テンプレートの一部は、suggestVariableName() 関数を使用して、反復された要素に適切な変数名を提案します。\n\ntime([format])\n\n現在のシステム時刻を返します。\n\nデフォルトでは、パラメーターなしで、現在のシステム形式で時刻を返します。別の形式を使用するには、SimpleDateFormat(英語) 仕様に従ってパラメーターを指定します。例: time(\"H:m z\") は、13:10 UTC としてフォーマットされた時刻を返します。\n\ntypeOfVariable(&lt;String>)\n\nパラメーターとして渡された変数の型を返します。\n\nunderscoresToCamelCase(&lt;String>)\n\n下線付きの文字列（snake_case など）を camelCase に変換します。例: underscoresToCamelCase(foo_bar_baz) と underscoresToCamelCase(FOO_BaR_baZ) はどちらも fooBarBaz を返します。\n\nunderscoresToSpaces(&lt;String>)\n\n文字列のアンダースコアをスペースに変換します。例: underscoresToSpaces(foo_bar_baz) は foo bar baz を返し、underscoresToSpaces(FOO_BaR_baZ) は FOO BaR baZ を返します。\n\nuser()\n\n現在のユーザーの名前を返します。\n\nvariableOfType(&lt;String>)\n\nパラメーターとして渡された型に割り当てられる可能性のあるすべての変数を返します。例: variableOfType(\"double\")、variableOfType(\"java.util.Vector\")、または variableOfType(methodReturnType())\n\n空の文字列 \"\" をパラメーターとして渡すと、関数は型に関係なくすべての変数を提案します。\n\nsuggestFirstVariableName() とは異なり、この関数は true、false、this、Outer.this などの標準式も返します。</code></pre></div>","frontmatter":{"title":"Intellij IDEA でスニペット作成","date":"February 23, 2022","post_modified":"February 23, 2022","description":"スニペット作成時の知見、奥が深い","tags":["Intellij Idea","Snippet"],"draft":false}},"previous":{"fields":{"slug":"/Tools/Intellij/php_cli_debug/"},"frontmatter":{"title":"Intellij IDEA で PHP-CLI の debug設定 (Docker)"}},"next":{"fields":{"slug":"/BackEnd/OpenAPI_basic/"},"frontmatter":{"title":"OpenAPI の基本知識"}}},"pageContext":{"id":"3ba1e3fc-2552-5977-a4db-81071ffa135b","previousPostId":"4ac142f1-bc5e-5b65-bae5-31fbff1def66","nextPostId":"3258e002-0e2a-5dbd-970b-81dd9dbd0fe2","draft":false}},
    "staticQueryHashes": ["1126706167","1176493165","1188992244","1314910092","1760060771","2772418575"]}