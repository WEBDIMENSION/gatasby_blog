{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/blog/page/2/","result":{"data":{"site":{"siteMetadata":{"title":"おっさんWEBエンジニア奮闘記","subTitle":"[Infra (インフラ)、Backend (バックエンド)、Frontend (フロントエンド)] "}},"allMarkdownRemark":{"nodes":[{"excerpt":"Bats でシェルスクリプトをテストする Install ubuntu Mac exec bats source test.bats Good pattern 結果 Bad pattern 結果 複数ファイルの実行 本来の シェルスクリプトを読み込んでテスト 構成 test.sh…","fields":{"slug":"/Tools/ShellScript/bats/"},"frontmatter":{"date":"April 05, 2022","post_modified":"April 05, 2022","title":"シェルスクリプトをテストする","description":"シェルスクリプトにテスト導入、コード品質の向上","tags":["ShellScript"]}},{"excerpt":"Bssh のオプションでデバッグ設定 シェルスクリプトのデバッグでよく使われるオプション ソース内に記述する場合 コマンドラインから 内容 verbose -v コマンドを表示 xtrace -x 実行したコマンドを表示 nounset -u…","fields":{"slug":"/Tools/ShellScript/debug/"},"frontmatter":{"date":"April 05, 2022","post_modified":"April 05, 2022","title":"シェルスクリプトのデバッグでよく使われるOptionのデバッグ","description":"シェルスクリプトのデバッグを探る","tags":["ShellScript"]}},{"excerpt":"noexec オプション 実際に実行はしない 構文チェックや DryRun といった振る舞い 構文エラー時は のようなエラー表示 shellcheck Install ubuntu Mac Exec shellcheck source sc.sh エラーなし source sc…","fields":{"slug":"/Tools/ShellScript/analysis/"},"frontmatter":{"date":"April 05, 2022","post_modified":"April 05, 2022","title":"シェルスクリプト コード解析","description":"シェルスクリプトの汚いコード、バグになりかねないソースを解析","tags":["ShellScript"]}},{"excerpt":"useCallback() 基本 変数 a, b に変更がない限り再レンダリングする必要はない。 callback を使う すべてが再レンダリングされる例 React.memo でラッピング, callback でラッピング","fields":{"slug":"/FrontEnd/REACT/use-callback/"},"frontmatter":{"date":"March 22, 2022","post_modified":"March 22, 2022","title":"React hooks useCallback","description":"React.js useCallbackの振る舞い","tags":["React.js"]}},{"excerpt":"React.js useReducer 基本 axios","fields":{"slug":"/FrontEnd/REACT/use-reducer/"},"frontmatter":{"date":"March 22, 2022","post_modified":"March 22, 2022","title":"React hooks useReducer","description":"React.js useReducerの振る舞い","tags":["React.js"]}},{"excerpt":"React.js useContext 基本 app.js context.jsx","fields":{"slug":"/FrontEnd/REACT/use-context/"},"frontmatter":{"date":"March 22, 2022","post_modified":"March 22, 2022","title":"React hooks useContext","description":"React.js useContextの振る舞い","tags":["React.js"]}},{"excerpt":"React.js userEffect 基本 レンダリング後に実行される 最初のレンダリング時のみ実行させたいときは第２引数にからの配列 依存関係を指定する クリーンアップ useEffect…","fields":{"slug":"/FrontEnd/REACT/use-effect/"},"frontmatter":{"date":"March 22, 2022","post_modified":"March 22, 2022","title":"React hooks useEffect","description":"React.js useEffectの振る舞い","tags":["React.js"]}},{"excerpt":"参考サイト React useState() 基本 React useState() 最初のレンダリング時のみ初期化","fields":{"slug":"/FrontEnd/REACT/use-state/"},"frontmatter":{"date":"March 22, 2022","post_modified":"March 22, 2022","title":"React hooks userState","description":"React.js useStateの振る舞い","tags":["React.js"]}},{"excerpt":"👀 Overview ローカル、グローバル問わず404チェックをしたい。 GUIアプリはインストールしたくない 解析結果のファイルフォーマットは最低でも html,csv があればよい。 🚀 Usage 🐳 Docker-compose 🐳 Docker 📝 40…","fields":{"slug":"/Infrastructure/linkchecker/"},"frontmatter":{"date":"March 15, 2022","post_modified":"March 15, 2022","title":"WEBサイト内 404 not found チェック","description":"linkchecker の Docker環境を作りで Global, Local 問わず404をチェック","tags":["Docker","Docker-compose","Docker Registry"]}},{"excerpt":"などで動いているWEBアプリをブラウザデバッグする際デフォルト設定では クリーンな(Add ON なし、インストールしたてのような)が立ち上がる。 できるならば日常使っている設定のままデバッグが立ち上がってほしい。  ->  下記の箇所の user data directory…","fields":{"slug":"/Tools/Intellij/browser_debug/"},"frontmatter":{"date":"March 15, 2022","post_modified":"March 15, 2022","title":"Intellij IDEA ブラウザデバッグの際のブラウザの設定","description":"Intellij IDEA でデバッグ用のブラウザ指定時 profile (user dir) の設定","tags":["Intellij IDEA","開発環境"]}}]}},"pageContext":{"limit":10,"skip":10,"currentPage":2,"numPages":13,"linkPrefix":"/blog","linkSuffix":"/page/","draft":[false]}},"staticQueryHashes":["1126706167","1176493165","1188992244","1314910092","1760060771","2772418575","3679674316"]}