{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/FrontEnd/Topics/GatsbyJS/002_typescript/",
    "result": {"data":{"site":{"siteMetadata":{"title":"おっさんWEBエンジニア奮闘記"}},"markdownRemark":{"id":"7e618fb3-1d82-5343-b9cb-e010302e0930","excerpt":"参考 Istall Typescript tsconfig.json Crate type  配下に gatsby-types.ts が生成される components を typescript 化 templates/*.js を typescript 化 再起動 gatsby-node.js の TS…","html":"<p><a href=\"https://qiita.com/akifumii/items/4c25f9bbec5bd9c2aa0e\">参考</a></p>\n<h2>Istall Typescript</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Intall tsc</span>\nnpx tsc --init\n<span class=\"token comment\"># Add typescript to project</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> typescript -D\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> gatsby-plugin-typegen</code></pre></div>\n<p>tsconfig.json</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n...\n...\n...\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n...\n...\n...\n    `gatsby-plugin-react-helmet`<span class=\"token punctuation\">,</span>\n    `gatsby-plugin-typegen`<span class=\"token punctuation\">,</span>  # Plugin 反映\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Crate type</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># index.js を typescript化</span>\n<span class=\"token function\">mv</span> src/pages/index.js src/pages/index.tsx</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># ** 一旦 build</span>\n<span class=\"token function\">yarn</span> build\n\n<span class=\"token comment\">#  確認</span>\n<span class=\"token function\">yarn</span> start\n<span class=\"token comment\"># http://localhost:8000</span></code></pre></div>\n<p><code class=\"language-text\">__generated__</code> 配下に gatsby-types.ts が生成される</p>\n<h2>components を typescript 化</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">src/components/*.js  -<span class=\"token operator\">></span> *.tsx</code></pre></div>\n<h2>templates/*.js を typescript 化</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">src/templates/*.js  -<span class=\"token operator\">></span> *.tsx</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// .js を .tsx に変換</span>\n<span class=\"token comment\">// const blogPost = path.resolve(`./src/templates/blog-post.js`)</span>\n<span class=\"token keyword\">const</span> blogPost <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./src/templates/blog-post.tsx</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>再起動</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> start\n<span class=\"token comment\"># http://localhost:8000</span></code></pre></div>\n<h3>gatsby-node.js の TS 化</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D ts-node</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> gatsby-blog\n<span class=\"token function\">touch</span> gatsby-node/index.ts</code></pre></div>\n<p>gatsby-node/index.ts<br>\ngatsby-config.json をそのままコピペすればいいということなのだが<br>\nコンパイルエラーがでるため下記のように編集</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span>\n<span class=\"token comment\">// const { createFilePath } = require(`gatsby-source-filesystem`)</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GatsbyNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createFilePath <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby-source-filesystem\"</span>\n\n<span class=\"token comment\">// const path = require(`path`)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> createPages<span class=\"token operator\">:</span> GatsbyNode<span class=\"token punctuation\">[</span><span class=\"token string\">\"createPages\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">,</span> reporter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n\n  <span class=\"token comment\">// Define a template for blog post</span>\n  <span class=\"token keyword\">const</span> blogPost <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./src/templates/blog-post.tsx</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Get all markdown blog posts sorted by date</span>\n  <span class=\"token keyword\">const</span> result<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      {\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: ASC }, limit: 1000) {\n          nodes {\n            id\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    reporter<span class=\"token punctuation\">.</span><span class=\"token function\">panicOnBuild</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">There was an error loading your blog posts</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span>\n\n  <span class=\"token comment\">// Create blog posts pages</span>\n  <span class=\"token comment\">// But only if there's at least one markdown file found at \"content/blog\" (defined in gatsby-config.js)</span>\n  <span class=\"token comment\">// `context` is available in the template as a prop and as a variable in GraphQL</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    posts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>post<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> previousPostId <span class=\"token operator\">=</span> index <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> posts<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id\n      <span class=\"token keyword\">const</span> nextPostId <span class=\"token operator\">=</span> index <span class=\"token operator\">===</span> posts<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> posts<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id\n\n      <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        path<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n        component<span class=\"token operator\">:</span> blogPost<span class=\"token punctuation\">,</span>\n        context<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          id<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n          previousPostId<span class=\"token punctuation\">,</span>\n          nextPostId<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> onCreateNode<span class=\"token operator\">:</span> GatsbyNode<span class=\"token punctuation\">[</span><span class=\"token string\">\"onCreateNode\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">,</span> getNode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createNodeField <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">MarkdownRemark</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">createFilePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">,</span> getNode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">createNodeField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">slug</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      node<span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// exports.createSchemaCustomization = ({ actions }) => {</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> createSchemaCustomization<span class=\"token operator\">:</span> GatsbyNode<span class=\"token punctuation\">[</span><span class=\"token string\">\"createSchemaCustomization\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> actions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createTypes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n\n  <span class=\"token comment\">// Explicitly define the siteMetadata {} object</span>\n  <span class=\"token comment\">// This way those will always be defined even if removed from gatsby-config.js</span>\n\n  <span class=\"token comment\">// Also explicitly define the Markdown frontmatter</span>\n  <span class=\"token comment\">// This way the \"MarkdownRemark\" queries will return `null` even when no</span>\n  <span class=\"token comment\">// blog posts are stored inside \"content/blog\" instead of returning an error</span>\n  <span class=\"token function\">createTypes</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    type SiteSiteMetadata {\n      author: Author\n      siteUrl: String\n      social: Social\n    }\n    type Author {\n      name: String\n      summary: String\n    }\n    type Social {\n      twitter: String\n    }\n    type MarkdownRemark implements Node {\n      frontmatter: Frontmatter\n      fields: Fields\n    }\n    type Frontmatter {\n      title: String\n      description: String\n      date: Date @dateformat\n    }\n    type Fields {\n      slug: String\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>gatsby-config.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ts-node\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">compilerOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src/__generated__/gatsby-types\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPages<span class=\"token punctuation\">,</span> onCreateNode <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./gatsby-node/index\"</span><span class=\"token punctuation\">)</span>\n\nexports<span class=\"token punctuation\">.</span>createPages <span class=\"token operator\">=</span> createPages\nexports<span class=\"token punctuation\">.</span>onCreateNode <span class=\"token operator\">=</span> onCreateNode</code></pre></div>\n<h3>react-helmet の Type</h3>\n<p>Install をうながされるので。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D @types/react-helmet</code></pre></div>\n<h2>tsconfig.json strict に戻す</h2>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gatsby-node/index.ts\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"public\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/templates/blog-post.tsx\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Visit https://aka.ms/tsconfig.json to read more about this file */</span>\n\n    <span class=\"token comment\">/* Projects */</span>\n    <span class=\"token comment\">// \"incremental\": true,                              /* Enable incremental compilation */</span>\n    <span class=\"token comment\">// \"composite\": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */</span>\n    <span class=\"token comment\">// \"tsBuildInfoFile\": \"./\",                          /* Specify the folder for .tsbuildinfo incremental compilation files. */</span>\n    <span class=\"token comment\">// \"disableSourceOfProjectReferenceRedirect\": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */</span>\n    <span class=\"token comment\">// \"disableSolutionSearching\": true,                 /* Opt a project out of multi-project reference checking when editing. */</span>\n    <span class=\"token comment\">// \"disableReferencedProjectLoad\": true,             /* Reduce the number of projects loaded automatically by TypeScript. */</span>\n\n    <span class=\"token comment\">/* Language and Environment */</span>\n    <span class=\"token comment\">//    \"target\": \"es2016\",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */</span>\n    <span class=\"token comment\">// \"lib\": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */</span>\n    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"es2017\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// \"jsx\": \"preserve\",                                /* Specify what JSX code is generated. */</span>\n    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react\"</span> <span class=\"token comment\">/* Specify what JSX code is generated. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"experimentalDecorators\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Enable experimental support for TC39 stage 2 draft decorators. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"emitDecoratorMetadata\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Emit design-type metadata for decorated declarations in source files. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// \"jsxFactory\": \"\",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */</span>\n    <span class=\"token comment\">// \"jsxFragmentFactory\": \"\",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */</span>\n    <span class=\"token comment\">// \"jsxImportSource\": \"\",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */</span>\n    <span class=\"token comment\">// \"reactNamespace\": \"\",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */</span>\n    <span class=\"token comment\">// \"noLib\": true,                                    /* Disable including any library files, including the default lib.d.ts. */</span>\n    <span class=\"token comment\">// \"useDefineForClassFields\": true,                  /* Emit ECMAScript-standard-compliant class fields. */</span>\n\n    <span class=\"token comment\">/* Modules */</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span> <span class=\"token comment\">/* Specify what module code is generated. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// \"rootDir\": \"./\",                                  /* Specify the root folder within your source files. */</span>\n    <span class=\"token property\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span> <span class=\"token comment\">/* Specify the root folder within your source files. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// \"moduleResolution\": \"node\",                       /* Specify how TypeScript looks up a file from a given module specifier. */</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src\"</span> <span class=\"token comment\">/* Specify the base directory to resolve non-relative module names. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// \"paths\": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */</span>\n    <span class=\"token comment\">// \"rootDirs\": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */</span>\n    <span class=\"token comment\">// \"typeRoots\": [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */</span>\n    <span class=\"token comment\">// \"types\": [],                                      /* Specify type package names to be included without being referenced in a source file. */</span>\n    <span class=\"token comment\">// \"allowUmdGlobalAccess\": true,                     /* Allow accessing UMD globals from modules. */</span>\n    <span class=\"token comment\">// \"resolveJsonModule\": true,                        /* Enable importing .json files */</span>\n    <span class=\"token comment\">// \"noResolve\": true,                                /* Disallow `import`s, `require`s or `&lt;reference>`s from expanding the number of files TypeScript should add to a project. */</span>\n\n    <span class=\"token comment\">/* JavaScript Support */</span>\n    <span class=\"token comment\">// \"allowJs\": true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */</span>\n    <span class=\"token comment\">// \"checkJs\": true,                                  /* Enable error reporting in type-checked JavaScript files. */</span>\n    <span class=\"token comment\">// \"maxNodeModuleJsDepth\": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */</span>\n\n    <span class=\"token comment\">/* Emit */</span>\n    <span class=\"token comment\">// \"declaration\": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */</span>\n    <span class=\"token comment\">// \"declarationMap\": true,                           /* Create sourcemaps for d.ts files. */</span>\n    <span class=\"token comment\">// \"emitDeclarationOnly\": true,                      /* Only output d.ts files and not JavaScript files. */</span>\n    <span class=\"token comment\">// \"sourceMap\": true,                                /* Create source map files for emitted JavaScript files. */</span>\n    <span class=\"token comment\">// \"outFile\": \"./\",                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */</span>\n    <span class=\"token comment\">// \"outDir\": \"./\",                                   /* Specify an output folder for all emitted files. */</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./build\"</span> <span class=\"token comment\">/* Specify an output folder for all emitted files. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// \"removeComments\": true,                           /* Disable emitting comments. */</span>\n    <span class=\"token comment\">// \"noEmit\": true,                                   /* Disable emitting files from a compilation. */</span>\n    <span class=\"token comment\">// \"importHelpers\": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */</span>\n    <span class=\"token comment\">// \"importsNotUsedAsValues\": \"remove\",               /* Specify emit/checking behavior for imports that are only used for types */</span>\n    <span class=\"token comment\">// \"downlevelIteration\": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */</span>\n    <span class=\"token comment\">// \"sourceRoot\": \"\",                                 /* Specify the root path for debuggers to find the reference source code. */</span>\n    <span class=\"token comment\">// \"mapRoot\": \"\",                                    /* Specify the location where debugger should locate map files instead of generated locations. */</span>\n    <span class=\"token comment\">// \"inlineSourceMap\": true,                          /* Include sourcemap files inside the emitted JavaScript. */</span>\n    <span class=\"token comment\">// \"inlineSources\": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */</span>\n    <span class=\"token comment\">// \"emitBOM\": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */</span>\n    <span class=\"token comment\">// \"newLine\": \"crlf\",                                /* Set the newline character for emitting files. */</span>\n    <span class=\"token comment\">// \"stripInternal\": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */</span>\n    <span class=\"token comment\">// \"noEmitHelpers\": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */</span>\n    <span class=\"token comment\">// \"noEmitOnError\": true,                            /* Disable emitting files if any type checking errors are reported. */</span>\n    <span class=\"token comment\">// \"preserveConstEnums\": true,                       /* Disable erasing `const enum` declarations in generated code. */</span>\n    <span class=\"token comment\">// \"declarationDir\": \"./\",                           /* Specify the output directory for generated declaration files. */</span>\n    <span class=\"token comment\">// \"preserveValueImports\": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */</span>\n\n    <span class=\"token comment\">/* Interop Constraints */</span>\n    <span class=\"token comment\">// \"isolatedModules\": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */</span>\n    <span class=\"token comment\">// \"allowSyntheticDefaultImports\": true,             /* Allow 'import x from y' when a module doesn't have a default export. */</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// \"preserveSymlinks\": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */</span>\n    <span class=\"token property\">\"forceConsistentCasingInFileNames\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Ensure that casing is correct in imports. */</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">/* Type Checking */</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Enable all strict type-checking options. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Enable error reporting for expressions and declarations with an implied `any` type.. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* When type checking, take into account `null` and `undefined`. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictFunctionTypes\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictBindCallApply\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictPropertyInitialization\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Check for class properties that are declared but not set in the constructor. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// \"noImplicitThis\": true,                           /* Enable error reporting when `this` is given the type `any`. */</span>\n    <span class=\"token comment\">// \"useUnknownInCatchVariables\": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */</span>\n    <span class=\"token comment\">// \"alwaysStrict\": true,                             /* Ensure 'use strict' is always emitted. */</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Enable error reporting when a local variables aren't read. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Raise an error when a function parameter isn't read */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// \"exactOptionalPropertyTypes\": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */</span>\n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Enable error reporting for codepaths that do not explicitly return in a function. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Enable error reporting for fallthrough cases in switch statements. */</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// \"noUncheckedIndexedAccess\": true,                 /* Include 'undefined' in index signature results */</span>\n    <span class=\"token comment\">// \"noImplicitOverride\": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */</span>\n    <span class=\"token comment\">// \"noPropertyAccessFromIndexSignature\": true,       /* Enforces using indexed accessors for keys declared using an indexed type */</span>\n    <span class=\"token comment\">// \"allowUnusedLabels\": true,                        /* Disable error reporting for unused labels. */</span>\n    <span class=\"token comment\">// \"allowUnreachableCode\": true,                     /* Disable error reporting for unreachable code. */</span>\n\n    <span class=\"token comment\">/* Completeness */</span>\n    <span class=\"token comment\">// \"skipDefaultLibCheck\": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */</span>\n    <span class=\"token property\">\"skipLibCheck\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* Skip type checking all .d.ts files. */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>型を反映する</h2>\n<h3>pageQuery に名前をつける</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"># index<span class=\"token punctuation\">.</span>tsx\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql`\n  query index<span class=\"token punctuation\">{</span>   # <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span>\n    site <span class=\"token punctuation\">{</span>\n      siteMetadata <span class=\"token punctuation\">{</span>\n        title\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">allMarkdownRemark</span><span class=\"token punctuation\">(</span>sort<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>frontmatter___date<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> order<span class=\"token operator\">:</span> <span class=\"token constant\">DESC</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nodes <span class=\"token punctuation\">{</span>\n        excerpt\n        fields <span class=\"token punctuation\">{</span>\n          slug\n        <span class=\"token punctuation\">}</span>\n        frontmatter <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">date</span><span class=\"token punctuation\">(</span>formatString<span class=\"token operator\">:</span> <span class=\"token string\">\"MMMM DD, YYYY\"</span><span class=\"token punctuation\">)</span>\n          title\n          description\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>PageProps インポート</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"># index<span class=\"token punctuation\">.</span>tsx\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link<span class=\"token punctuation\">,</span> graphql<span class=\"token punctuation\">,</span> PageProps  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"># index<span class=\"token punctuation\">.</span>tsx\n<span class=\"token keyword\">const</span> BlogIndex<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>PageProps<span class=\"token operator\">&lt;</span>GatsbyTypes<span class=\"token punctuation\">.</span>indexQuery<span class=\"token operator\">>></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> location <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>src/pages/<em>.tsx も同様に。\nsrc/components/</em>.tsx も同様に。</p>\n<h3>その他型を反映</h3>\n<p>例)</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"># src<span class=\"token operator\">/</span>component<span class=\"token operator\">/</span>seo<span class=\"token punctuation\">.</span>tsx\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Seo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> description<span class=\"token punctuation\">,</span> lang<span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">,</span> title <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lang<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> meta<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\n<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">const</span> metaDescription <span class=\"token operator\">=</span> description <span class=\"token operator\">||</span> site<span class=\"token operator\">?.</span>siteMetadata<span class=\"token operator\">?.</span>description\n<span class=\"token operator\">...</span>\n<span class=\"token operator\">...</span>\n      titleTemplate<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>defaultTitle <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">%s | </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>defaultTitle<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n<span class=\"token operator\">...</span>\n</code></pre></div>\n<h2>ビルド&#x26; 再起動</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> build\n<span class=\"token function\">yarn</span> start\n<span class=\"token comment\"># http://localhost</span></code></pre></div>","frontmatter":{"title":"GatsbyJS Typescript 化","date":"March 02, 2022","post_modified":"March 02, 2022","description":"GatsbyJS Blog-starter をTypeScript化する","tags":["GatsbyJS","TypeScript"],"draft":false}},"previous":{"fields":{"slug":"/FrontEnd/Topics/GatsbyJS/001_gatsby/"},"frontmatter":{"title":"GatsbyJS Install & Git 設定"}},"next":{"fields":{"slug":"/FrontEnd/Topics/GatsbyJS/003_ add_pages/"},"frontmatter":{"title":"GatsbyJS ページを追加する"}}},"pageContext":{"id":"7e618fb3-1d82-5343-b9cb-e010302e0930","previousPostId":"1cf09f29-89c6-572f-8c5b-f9ab18c83677","nextPostId":"530685ad-d594-59ac-a5d4-81225918ecfe","draft":false}},
    "staticQueryHashes": ["1126706167","1176493165","1188992244","1314910092","1760060771","2772418575","3679674316"]}